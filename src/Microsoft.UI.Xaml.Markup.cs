//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.UI.Xaml.Markup
{
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::System.AttributeUsage(global::System.AttributeTargets.Class, AllowMultiple = false)]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class ContentPropertyAttribute: Attribute
    {
        public ContentPropertyAttribute(){}
        public string Name;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::System.AttributeUsage(global::System.AttributeTargets.Class, AllowMultiple = false)]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class FullXamlMetadataProviderAttribute: Attribute
    {
        public FullXamlMetadataProviderAttribute(){}
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("AD401812-B091-51D0-B915-2D682CD2AF10")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Markup.IComponentConnector))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public interface IComponentConnector
    {
        void Connect(int connectionId, object target);
        IComponentConnector GetBindingConnector(int connectionId, object target);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("1743DDF7-38BA-58C9-A2A6-B0AE28713BEE")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Markup.IDataTemplateComponent))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public interface IDataTemplateComponent
    {
        void Recycle();
        void ProcessBindings(object item, int itemIndex, int phase, out int nextPhase);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("C355371E-091D-5136-AF4A-BAF5E00616BD")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Markup.IMarkupExtension))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IMarkupExtension
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("20651AFA-5F3A-5F0C-ADB1-B6551F53A6A0")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Markup.IMarkupExtensionFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IMarkupExtensionFactory
    {
        MarkupExtension CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("A12AA575-5D31-5B68-A30F-8495412A351D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Markup.IMarkupExtensionOverrides))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IMarkupExtensionOverrides
    {
        [global::Windows.Foundation.Metadata.Overload(@"ProvideValue")]
        object ProvideValue();
        [global::Windows.Foundation.Metadata.Overload(@"ProvideValueWithIXamlServiceProvider")]
        object ProvideValue(global::Microsoft.UI.Xaml.IXamlServiceProvider serviceProvider);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("3F01FF68-3EFD-591D-A506-DE13FCAABD83")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Markup.IProvideValueTarget))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public interface IProvideValueTarget
    {
        object TargetObject { get; }
        object TargetProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("CE777B1F-B42E-59D1-870D-12FDF0629133")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Markup.IProvideValueTargetProperty))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IProvideValueTargetProperty
    {
        global::System.Type DeclaringType { get; }
        string Name { get; }
        global::System.Type Type { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("13D63599-352F-5EB8-81C1-BC62FB12D6DA")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Markup.IRootObjectProvider))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public interface IRootObjectProvider
    {
        object RootObject { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("FB8605F6-8F05-52EE-A01C-3A9E118A6EA2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Markup.IUriContext))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public interface IUriContext
    {
        global::System.Uri BaseUri { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("8FB45E3B-E689-55BF-AA11-D83B1C1CDDA1")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Markup.IXamlBinaryWriter))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IXamlBinaryWriter
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("774907FC-C846-517F-ABCC-C3F7E8C3FFC9")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Markup.IXamlBinaryWriterStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IXamlBinaryWriterStatics
    {
        XamlBinaryWriterErrorInformation Write(global::System.Collections.Generic.IList<global::Windows.Storage.Streams.IRandomAccessStream> inputStreams, global::System.Collections.Generic.IList<global::Windows.Storage.Streams.IRandomAccessStream> outputStreams, IXamlMetadataProvider xamlMetadataProvider);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("3EA84E4E-FDFE-55A8-A561-EDF5697846D7")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public interface IXamlBindScopeDiagnostics
    {
        void Disable(int lineNumber, int columnNumber);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("607A9BF2-5A6D-5C89-A756-BB44F24F28F8")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Markup.IXamlBindingHelper))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IXamlBindingHelper
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("93C7DAD3-F9C2-5372-84DC-9E9C4661D083")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Markup.IXamlBindingHelperStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IXamlBindingHelperStatics
    {
        IDataTemplateComponent GetDataTemplateComponent(global::Microsoft.UI.Xaml.DependencyObject element);
        void SetDataTemplateComponent(global::Microsoft.UI.Xaml.DependencyObject element, IDataTemplateComponent value);
        void SuspendRendering(global::Microsoft.UI.Xaml.UIElement target);
        void ResumeRendering(global::Microsoft.UI.Xaml.UIElement target);
        object ConvertValue(global::System.Type type, object value);
        void SetPropertyFromString(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, string value);
        void SetPropertyFromBoolean(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, bool value);
        void SetPropertyFromChar16(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, char value);
        void SetPropertyFromDateTime(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, global::System.DateTimeOffset value);
        void SetPropertyFromDouble(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, double value);
        void SetPropertyFromInt32(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, int value);
        void SetPropertyFromUInt32(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, uint value);
        void SetPropertyFromInt64(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, long value);
        void SetPropertyFromUInt64(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, ulong value);
        void SetPropertyFromSingle(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, float value);
        void SetPropertyFromPoint(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, global::Windows.Foundation.Point value);
        void SetPropertyFromRect(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, global::Windows.Foundation.Rect value);
        void SetPropertyFromSize(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, global::Windows.Foundation.Size value);
        void SetPropertyFromTimeSpan(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, global::System.TimeSpan value);
        void SetPropertyFromByte(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, byte value);
        void SetPropertyFromUri(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, global::System.Uri value);
        void SetPropertyFromObject(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, object value);
        global::Microsoft.UI.Xaml.DependencyProperty DataTemplateComponentProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("CD677310-3B06-5A13-B31A-401849570858")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Markup.IXamlMarkupHelper))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IXamlMarkupHelper
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("D9A0F6E3-C6CC-5CB6-8999-85788701F339")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Markup.IXamlMarkupHelperStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IXamlMarkupHelperStatics
    {
        void UnloadObject(global::Microsoft.UI.Xaml.DependencyObject element);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("BF3A2913-5C63-50EC-8660-61809BE7B9B9")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Markup.IXamlMember))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public interface IXamlMember
    {
        object GetValue(object instance);
        void SetValue(object instance, object value);
        bool IsAttachable { get; }
        bool IsDependencyProperty { get; }
        bool IsReadOnly { get; }
        string Name { get; }
        IXamlType TargetType { get; }
        IXamlType Type { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("A96251F0-2214-5D53-8746-CE99A2593CD7")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Markup.IXamlMetadataProvider))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public interface IXamlMetadataProvider
    {
        [global::Windows.Foundation.Metadata.DefaultOverload]
        [global::Windows.Foundation.Metadata.Overload(@"GetXamlType")]
        IXamlType GetXamlType(global::System.Type type);
        [global::Windows.Foundation.Metadata.Overload(@"GetXamlTypeByFullName")]
        IXamlType GetXamlType(string fullName);
        XmlnsDefinition[] GetXmlnsDefinitions();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("54CE54C8-38C6-50D9-AC98-4B03EDDBDE9F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Markup.IXamlReader))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IXamlReader
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("82A4CD9E-435E-5AEB-8C4F-300CECE45CAE")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Markup.IXamlReaderStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IXamlReaderStatics
    {
        object Load(string xaml);
        object LoadWithInitialTemplateValidation(string xaml);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("D24219DF-7EC9-57F1-A27B-6AF251D9C5BC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Markup.IXamlType))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public interface IXamlType
    {
        object ActivateInstance();
        object CreateFromString(string value);
        IXamlMember GetMember(string name);
        void AddToVector(object instance, object value);
        void AddToMap(object instance, object key, object value);
        void RunInitializer();
        IXamlType BaseType { get; }
        IXamlType BoxedType { get; }
        IXamlMember ContentProperty { get; }
        string FullName { get; }
        bool IsArray { get; }
        bool IsBindable { get; }
        bool IsCollection { get; }
        bool IsConstructible { get; }
        bool IsDictionary { get; }
        bool IsMarkupExtension { get; }
        IXamlType ItemType { get; }
        IXamlType KeyType { get; }
        global::System.Type UnderlyingType { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("3FA15615-CACF-547F-B1ED-89DAE8C67452")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Markup.IXamlTypeResolver))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public interface IXamlTypeResolver
    {
        global::System.Type Resolve(string qualifiedTypeName);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Markup.MarkupExtension))]
    [global::ABI.Microsoft.UI.Xaml.Markup.MarkupExtensionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IMarkupExtension))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class MarkupExtension : IMarkupExtensionOverrides, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<MarkupExtension>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Markup_IMarkupExtension;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Markup_IMarkupExtension()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Markup_IMarkupExtension, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Markup.IMarkupExtensionMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Markup_IMarkupExtension;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Markup_IMarkupExtension => ___objRef_global__Microsoft_UI_Xaml_Markup_IMarkupExtension ?? Make___objRef_global__Microsoft_UI_Xaml_Markup_IMarkupExtension();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Markup_IMarkupExtensionOverrides;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Markup_IMarkupExtensionOverrides()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Markup_IMarkupExtensionOverrides, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Markup.IMarkupExtensionOverridesMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Markup_IMarkupExtensionOverrides;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Markup_IMarkupExtensionOverrides => ___objRef_global__Microsoft_UI_Xaml_Markup_IMarkupExtensionOverrides ?? Make___objRef_global__Microsoft_UI_Xaml_Markup_IMarkupExtensionOverrides();



        private static class _IMarkupExtensionFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Markup_IMarkupExtensionFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Markup_IMarkupExtensionFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Markup_IMarkupExtensionFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Markup_IMarkupExtensionFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Markup.MarkupExtension", global::ABI.Microsoft.UI.Xaml.Markup.IMarkupExtensionFactoryMethods.IID);
                }
            }
        }

        public MarkupExtension()
        {
            bool isAggregation = this.GetType() != typeof(MarkupExtension);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IMarkupExtensionFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Markup_IMarkupExtensionFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Markup.IMarkupExtensionMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static MarkupExtension FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<MarkupExtension>.FromAbi(thisPtr);
        }

        protected internal MarkupExtension(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Markup.IMarkupExtensionMethods.IID);

        }


        public static bool operator ==(MarkupExtension x, MarkupExtension y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(MarkupExtension x, MarkupExtension y) => !(x == y);
        public bool Equals(MarkupExtension other) => this == other;
        public override bool Equals(object obj) => obj is MarkupExtension that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected MarkupExtension(global::WinRT.DerivedComposed _)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(MarkupExtension);
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        protected virtual object ProvideValue() => global::ABI.Microsoft.UI.Xaml.Markup.IMarkupExtensionOverridesMethods.ProvideValue(_objRef_global__Microsoft_UI_Xaml_Markup_IMarkupExtensionOverrides);

        object IMarkupExtensionOverrides.ProvideValue() => ProvideValue();
        protected virtual object ProvideValue(global::Microsoft.UI.Xaml.IXamlServiceProvider serviceProvider) => global::ABI.Microsoft.UI.Xaml.Markup.IMarkupExtensionOverridesMethods.ProvideValue(_objRef_global__Microsoft_UI_Xaml_Markup_IMarkupExtensionOverrides, serviceProvider);

        object IMarkupExtensionOverrides.ProvideValue(global::Microsoft.UI.Xaml.IXamlServiceProvider serviceProvider) => ProvideValue(serviceProvider);
        protected virtual bool IsOverridableInterface(Guid iid) => global::ABI.Microsoft.UI.Xaml.Markup.IMarkupExtensionOverridesMethods.IID == iid;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::System.AttributeUsage(global::System.AttributeTargets.Class, AllowMultiple = false)]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class MarkupExtensionReturnTypeAttribute: Attribute
    {
        public MarkupExtensionReturnTypeAttribute(){}
        public Type ReturnType;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Markup.ProvideValueTargetProperty))]
    [global::ABI.Microsoft.UI.Xaml.Markup.ProvideValueTargetPropertyRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IProvideValueTargetProperty))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class ProvideValueTargetProperty : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ProvideValueTargetProperty>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Markup_IProvideValueTargetProperty => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Markup_ProvideValueTargetProperty;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Markup_ProvideValueTargetProperty
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Markup_ProvideValueTargetProperty;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Markup_ProvideValueTargetProperty = ActivationFactory.Get("Microsoft.UI.Xaml.Markup.ProvideValueTargetProperty");
                }
            }
        }

        public ProvideValueTargetProperty() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Markup_ProvideValueTargetProperty, global::ABI.Microsoft.UI.Xaml.Markup.IProvideValueTargetPropertyMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static ProvideValueTargetProperty FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ProvideValueTargetProperty>.FromAbi(thisPtr);
        }

        internal ProvideValueTargetProperty(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Markup.IProvideValueTargetPropertyMethods.IID);

        }


        public static bool operator ==(ProvideValueTargetProperty x, ProvideValueTargetProperty y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ProvideValueTargetProperty x, ProvideValueTargetProperty y) => !(x == y);
        public bool Equals(ProvideValueTargetProperty other) => this == other;
        public override bool Equals(object obj) => obj is ProvideValueTargetProperty that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::System.Type DeclaringType => global::ABI.Microsoft.UI.Xaml.Markup.IProvideValueTargetPropertyMethods.get_DeclaringType(_objRef_global__Microsoft_UI_Xaml_Markup_IProvideValueTargetProperty);

        public string Name => global::ABI.Microsoft.UI.Xaml.Markup.IProvideValueTargetPropertyMethods.get_Name(_objRef_global__Microsoft_UI_Xaml_Markup_IProvideValueTargetProperty);

        public global::System.Type Type => global::ABI.Microsoft.UI.Xaml.Markup.IProvideValueTargetPropertyMethods.get_Type(_objRef_global__Microsoft_UI_Xaml_Markup_IProvideValueTargetProperty);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Markup.XamlBinaryWriter))]
    [global::ABI.Microsoft.UI.Xaml.Markup.XamlBinaryWriterRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IXamlBinaryWriter))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class XamlBinaryWriter : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<XamlBinaryWriter>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Markup_IXamlBinaryWriter => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Markup.XamlBinaryWriter").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Markup_IXamlBinaryWriterStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Markup_IXamlBinaryWriterStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Markup_IXamlBinaryWriterStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Markup_IXamlBinaryWriterStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Markup.XamlBinaryWriter", global::ABI.Microsoft.UI.Xaml.Markup.IXamlBinaryWriterStaticsMethods.IID);
                }
            }
        }

        public static XamlBinaryWriterErrorInformation Write(global::System.Collections.Generic.IList<global::Windows.Storage.Streams.IRandomAccessStream> inputStreams, global::System.Collections.Generic.IList<global::Windows.Storage.Streams.IRandomAccessStream> outputStreams, IXamlMetadataProvider xamlMetadataProvider) => global::ABI.Microsoft.UI.Xaml.Markup.IXamlBinaryWriterStaticsMethods.Write(_objRef_global__Microsoft_UI_Xaml_Markup_IXamlBinaryWriterStatics, inputStreams, outputStreams, xamlMetadataProvider);

        public static XamlBinaryWriter FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<XamlBinaryWriter>.FromAbi(thisPtr);
        }

        internal XamlBinaryWriter(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Markup.IXamlBinaryWriterMethods.IID);

        }


        public static bool operator ==(XamlBinaryWriter x, XamlBinaryWriter y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(XamlBinaryWriter x, XamlBinaryWriter y) => !(x == y);
        public bool Equals(XamlBinaryWriter other) => this == other;
        public override bool Equals(object obj) => obj is XamlBinaryWriter that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml", "struct(Microsoft.UI.Xaml.Markup.XamlBinaryWriterErrorInformation;u4;u4;u4)")][global::WinRT.WindowsRuntimeHelperType][global::WinRT.WinRTExposedType(typeof(global::WinRT.StructTypeDetails<XamlBinaryWriterErrorInformation, XamlBinaryWriterErrorInformation>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public struct XamlBinaryWriterErrorInformation: IEquatable<XamlBinaryWriterErrorInformation>
    {
        public uint InputStreamIndex;
        public uint LineNumber;
        public uint LinePosition;

        public XamlBinaryWriterErrorInformation(uint _InputStreamIndex, uint _LineNumber, uint _LinePosition)
        {
            InputStreamIndex = _InputStreamIndex; LineNumber = _LineNumber; LinePosition = _LinePosition; 
        }

        public static bool operator ==(XamlBinaryWriterErrorInformation x, XamlBinaryWriterErrorInformation y) => x.InputStreamIndex == y.InputStreamIndex && x.LineNumber == y.LineNumber && x.LinePosition == y.LinePosition;
        public static bool operator !=(XamlBinaryWriterErrorInformation x, XamlBinaryWriterErrorInformation y) => !(x == y);
        public bool Equals(XamlBinaryWriterErrorInformation other) => this == other;
        public override bool Equals(object obj) => obj is XamlBinaryWriterErrorInformation that && this == that;
        public override int GetHashCode() => InputStreamIndex.GetHashCode() ^ LineNumber.GetHashCode() ^ LinePosition.GetHashCode();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Markup.XamlBindingHelper))]
    [global::ABI.Microsoft.UI.Xaml.Markup.XamlBindingHelperRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IXamlBindingHelper))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class XamlBindingHelper : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<XamlBindingHelper>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Markup_IXamlBindingHelper => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Markup.XamlBindingHelper").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Markup_IXamlBindingHelperStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Markup_IXamlBindingHelperStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Markup_IXamlBindingHelperStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Markup_IXamlBindingHelperStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Markup.XamlBindingHelper", global::ABI.Microsoft.UI.Xaml.Markup.IXamlBindingHelperStaticsMethods.IID);
                }
            }
        }

        public static IDataTemplateComponent GetDataTemplateComponent(global::Microsoft.UI.Xaml.DependencyObject element) => global::ABI.Microsoft.UI.Xaml.Markup.IXamlBindingHelperStaticsMethods.GetDataTemplateComponent(_objRef_global__Microsoft_UI_Xaml_Markup_IXamlBindingHelperStatics, element);

        public static void SetDataTemplateComponent(global::Microsoft.UI.Xaml.DependencyObject element, IDataTemplateComponent value) => global::ABI.Microsoft.UI.Xaml.Markup.IXamlBindingHelperStaticsMethods.SetDataTemplateComponent(_objRef_global__Microsoft_UI_Xaml_Markup_IXamlBindingHelperStatics, element, value);

        public static void SuspendRendering(global::Microsoft.UI.Xaml.UIElement target) => global::ABI.Microsoft.UI.Xaml.Markup.IXamlBindingHelperStaticsMethods.SuspendRendering(_objRef_global__Microsoft_UI_Xaml_Markup_IXamlBindingHelperStatics, target);

        public static void ResumeRendering(global::Microsoft.UI.Xaml.UIElement target) => global::ABI.Microsoft.UI.Xaml.Markup.IXamlBindingHelperStaticsMethods.ResumeRendering(_objRef_global__Microsoft_UI_Xaml_Markup_IXamlBindingHelperStatics, target);

        public static object ConvertValue(global::System.Type type, object value) => global::ABI.Microsoft.UI.Xaml.Markup.IXamlBindingHelperStaticsMethods.ConvertValue(_objRef_global__Microsoft_UI_Xaml_Markup_IXamlBindingHelperStatics, type, value);

        public static void SetPropertyFromString(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, string value) => global::ABI.Microsoft.UI.Xaml.Markup.IXamlBindingHelperStaticsMethods.SetPropertyFromString(_objRef_global__Microsoft_UI_Xaml_Markup_IXamlBindingHelperStatics, dependencyObject, propertyToSet, value);

        public static void SetPropertyFromBoolean(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, bool value) => global::ABI.Microsoft.UI.Xaml.Markup.IXamlBindingHelperStaticsMethods.SetPropertyFromBoolean(_objRef_global__Microsoft_UI_Xaml_Markup_IXamlBindingHelperStatics, dependencyObject, propertyToSet, value);

        public static void SetPropertyFromChar16(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, char value) => global::ABI.Microsoft.UI.Xaml.Markup.IXamlBindingHelperStaticsMethods.SetPropertyFromChar16(_objRef_global__Microsoft_UI_Xaml_Markup_IXamlBindingHelperStatics, dependencyObject, propertyToSet, value);

        public static void SetPropertyFromDateTime(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, global::System.DateTimeOffset value) => global::ABI.Microsoft.UI.Xaml.Markup.IXamlBindingHelperStaticsMethods.SetPropertyFromDateTime(_objRef_global__Microsoft_UI_Xaml_Markup_IXamlBindingHelperStatics, dependencyObject, propertyToSet, value);

        public static void SetPropertyFromDouble(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, double value) => global::ABI.Microsoft.UI.Xaml.Markup.IXamlBindingHelperStaticsMethods.SetPropertyFromDouble(_objRef_global__Microsoft_UI_Xaml_Markup_IXamlBindingHelperStatics, dependencyObject, propertyToSet, value);

        public static void SetPropertyFromInt32(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, int value) => global::ABI.Microsoft.UI.Xaml.Markup.IXamlBindingHelperStaticsMethods.SetPropertyFromInt32(_objRef_global__Microsoft_UI_Xaml_Markup_IXamlBindingHelperStatics, dependencyObject, propertyToSet, value);

        public static void SetPropertyFromUInt32(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, uint value) => global::ABI.Microsoft.UI.Xaml.Markup.IXamlBindingHelperStaticsMethods.SetPropertyFromUInt32(_objRef_global__Microsoft_UI_Xaml_Markup_IXamlBindingHelperStatics, dependencyObject, propertyToSet, value);

        public static void SetPropertyFromInt64(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, long value) => global::ABI.Microsoft.UI.Xaml.Markup.IXamlBindingHelperStaticsMethods.SetPropertyFromInt64(_objRef_global__Microsoft_UI_Xaml_Markup_IXamlBindingHelperStatics, dependencyObject, propertyToSet, value);

        public static void SetPropertyFromUInt64(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, ulong value) => global::ABI.Microsoft.UI.Xaml.Markup.IXamlBindingHelperStaticsMethods.SetPropertyFromUInt64(_objRef_global__Microsoft_UI_Xaml_Markup_IXamlBindingHelperStatics, dependencyObject, propertyToSet, value);

        public static void SetPropertyFromSingle(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, float value) => global::ABI.Microsoft.UI.Xaml.Markup.IXamlBindingHelperStaticsMethods.SetPropertyFromSingle(_objRef_global__Microsoft_UI_Xaml_Markup_IXamlBindingHelperStatics, dependencyObject, propertyToSet, value);

        public static void SetPropertyFromPoint(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, global::Windows.Foundation.Point value) => global::ABI.Microsoft.UI.Xaml.Markup.IXamlBindingHelperStaticsMethods.SetPropertyFromPoint(_objRef_global__Microsoft_UI_Xaml_Markup_IXamlBindingHelperStatics, dependencyObject, propertyToSet, value);

        public static void SetPropertyFromRect(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, global::Windows.Foundation.Rect value) => global::ABI.Microsoft.UI.Xaml.Markup.IXamlBindingHelperStaticsMethods.SetPropertyFromRect(_objRef_global__Microsoft_UI_Xaml_Markup_IXamlBindingHelperStatics, dependencyObject, propertyToSet, value);

        public static void SetPropertyFromSize(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, global::Windows.Foundation.Size value) => global::ABI.Microsoft.UI.Xaml.Markup.IXamlBindingHelperStaticsMethods.SetPropertyFromSize(_objRef_global__Microsoft_UI_Xaml_Markup_IXamlBindingHelperStatics, dependencyObject, propertyToSet, value);

        public static void SetPropertyFromTimeSpan(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, global::System.TimeSpan value) => global::ABI.Microsoft.UI.Xaml.Markup.IXamlBindingHelperStaticsMethods.SetPropertyFromTimeSpan(_objRef_global__Microsoft_UI_Xaml_Markup_IXamlBindingHelperStatics, dependencyObject, propertyToSet, value);

        public static void SetPropertyFromByte(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, byte value) => global::ABI.Microsoft.UI.Xaml.Markup.IXamlBindingHelperStaticsMethods.SetPropertyFromByte(_objRef_global__Microsoft_UI_Xaml_Markup_IXamlBindingHelperStatics, dependencyObject, propertyToSet, value);

        public static void SetPropertyFromUri(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, global::System.Uri value) => global::ABI.Microsoft.UI.Xaml.Markup.IXamlBindingHelperStaticsMethods.SetPropertyFromUri(_objRef_global__Microsoft_UI_Xaml_Markup_IXamlBindingHelperStatics, dependencyObject, propertyToSet, value);

        public static void SetPropertyFromObject(object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, object value) => global::ABI.Microsoft.UI.Xaml.Markup.IXamlBindingHelperStaticsMethods.SetPropertyFromObject(_objRef_global__Microsoft_UI_Xaml_Markup_IXamlBindingHelperStatics, dependencyObject, propertyToSet, value);

        public static global::Microsoft.UI.Xaml.DependencyProperty DataTemplateComponentProperty => global::ABI.Microsoft.UI.Xaml.Markup.IXamlBindingHelperStaticsMethods.get_DataTemplateComponentProperty(_objRef_global__Microsoft_UI_Xaml_Markup_IXamlBindingHelperStatics);

        public static XamlBindingHelper FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<XamlBindingHelper>.FromAbi(thisPtr);
        }

        internal XamlBindingHelper(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Markup.IXamlBindingHelperMethods.IID);

        }


        public static bool operator ==(XamlBindingHelper x, XamlBindingHelper y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(XamlBindingHelper x, XamlBindingHelper y) => !(x == y);
        public bool Equals(XamlBindingHelper other) => this == other;
        public override bool Equals(object obj) => obj is XamlBindingHelper that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Markup.XamlMarkupHelper))]
    [global::ABI.Microsoft.UI.Xaml.Markup.XamlMarkupHelperRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IXamlMarkupHelper))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class XamlMarkupHelper : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<XamlMarkupHelper>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Markup_IXamlMarkupHelper => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Markup.XamlMarkupHelper").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Markup_IXamlMarkupHelperStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Markup_IXamlMarkupHelperStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Markup_IXamlMarkupHelperStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Markup_IXamlMarkupHelperStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Markup.XamlMarkupHelper", global::ABI.Microsoft.UI.Xaml.Markup.IXamlMarkupHelperStaticsMethods.IID);
                }
            }
        }

        public static void UnloadObject(global::Microsoft.UI.Xaml.DependencyObject element) => global::ABI.Microsoft.UI.Xaml.Markup.IXamlMarkupHelperStaticsMethods.UnloadObject(_objRef_global__Microsoft_UI_Xaml_Markup_IXamlMarkupHelperStatics, element);

        public static XamlMarkupHelper FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<XamlMarkupHelper>.FromAbi(thisPtr);
        }

        internal XamlMarkupHelper(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Markup.IXamlMarkupHelperMethods.IID);

        }


        public static bool operator ==(XamlMarkupHelper x, XamlMarkupHelper y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(XamlMarkupHelper x, XamlMarkupHelper y) => !(x == y);
        public bool Equals(XamlMarkupHelper other) => this == other;
        public override bool Equals(object obj) => obj is XamlMarkupHelper that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Markup.XamlReader))]
    [global::ABI.Microsoft.UI.Xaml.Markup.XamlReaderRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IXamlReader))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class XamlReader : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<XamlReader>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Markup_IXamlReader => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Markup.XamlReader").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Markup_IXamlReaderStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Markup_IXamlReaderStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Markup_IXamlReaderStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Markup_IXamlReaderStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Markup.XamlReader", global::ABI.Microsoft.UI.Xaml.Markup.IXamlReaderStaticsMethods.IID);
                }
            }
        }

        public static object Load(string xaml) => global::ABI.Microsoft.UI.Xaml.Markup.IXamlReaderStaticsMethods.Load(_objRef_global__Microsoft_UI_Xaml_Markup_IXamlReaderStatics, xaml);

        public static object LoadWithInitialTemplateValidation(string xaml) => global::ABI.Microsoft.UI.Xaml.Markup.IXamlReaderStaticsMethods.LoadWithInitialTemplateValidation(_objRef_global__Microsoft_UI_Xaml_Markup_IXamlReaderStatics, xaml);

        public static XamlReader FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<XamlReader>.FromAbi(thisPtr);
        }

        internal XamlReader(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Markup.IXamlReaderMethods.IID);

        }


        public static bool operator ==(XamlReader x, XamlReader y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(XamlReader x, XamlReader y) => !(x == y);
        public bool Equals(XamlReader other) => this == other;
        public override bool Equals(object obj) => obj is XamlReader that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml", "struct(Microsoft.UI.Xaml.Markup.XmlnsDefinition;string;string)")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Markup.XmlnsDefinition))][global::WinRT.WinRTExposedType(typeof(global::WinRT.StructTypeDetails<XmlnsDefinition, global::ABI.Microsoft.UI.Xaml.Markup.XmlnsDefinition>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public struct XmlnsDefinition: IEquatable<XmlnsDefinition>
    {
        public string XmlNamespace;
        public string Namespace;

        public XmlnsDefinition(string _XmlNamespace, string _Namespace)
        {
            XmlNamespace = _XmlNamespace; Namespace = _Namespace; 
        }

        public static bool operator ==(XmlnsDefinition x, XmlnsDefinition y) => x.XmlNamespace == y.XmlNamespace && x.Namespace == y.Namespace;
        public static bool operator !=(XmlnsDefinition x, XmlnsDefinition y) => !(x == y);
        public bool Equals(XmlnsDefinition other) => this == other;
        public override bool Equals(object obj) => obj is XmlnsDefinition that && this == that;
        public override int GetHashCode() => XmlNamespace.GetHashCode() ^ Namespace.GetHashCode();
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.UI.Xaml.Markup
{
    public static class IComponentConnectorMethods
    {


        public static unsafe void Connect(IObjectReference _obj, int connectionId, object target)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __target = default;
            try
            {
                __target = MarshalInspectable<object>.CreateMarshaler2(target);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, IntPtr, int>**)ThisPtr)[6](ThisPtr, connectionId, MarshalInspectable<object>.GetAbi(__target)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__target);
            }
        }

        public static unsafe global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(IObjectReference _obj, int connectionId, object target)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __target = default;
            IntPtr __retval = default;
            try
            {
                __target = MarshalInspectable<object>.CreateMarshaler2(target);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, connectionId, MarshalInspectable<object>.GetAbi(__target), &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Microsoft.UI.Xaml.Markup.IComponentConnector>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__target);
                MarshalInterface<global::Microsoft.UI.Xaml.Markup.IComponentConnector>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x12, 0x18, 0x40, 0xAD, 0x91, 0xB0, 0xD0, 0x51, 0xB9, 0x15, 0x2D, 0x68, 0x2C, 0xD2, 0xAF, 0x10 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IComponentConnector.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("AD401812-B091-51D0-B915-2D682CD2AF10")]
    internal unsafe interface IComponentConnector : global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IComponentConnector()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IComponentConnector), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 2);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, int, IntPtr, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_Connect_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, int, IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_GetBindingConnector_1;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Connect_0(IntPtr thisPtr, int connectionId, IntPtr target)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IComponentConnector>(thisPtr).Connect(connectionId, MarshalInspectable<object>.FromAbi(target));

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetBindingConnector_1(IntPtr thisPtr, int connectionId, IntPtr target, IntPtr* result)
        {

            global::Microsoft.UI.Xaml.Markup.IComponentConnector __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IComponentConnector>(thisPtr).GetBindingConnector(connectionId, MarshalInspectable<object>.FromAbi(target));
                *result = MarshalInterface<global::Microsoft.UI.Xaml.Markup.IComponentConnector>.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe void global::Microsoft.UI.Xaml.Markup.IComponentConnector.Connect(int connectionId, object target)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IComponentConnector).TypeHandle));
            global::ABI.Microsoft.UI.Xaml.Markup.IComponentConnectorMethods.Connect(_obj, connectionId, target);
        }

        unsafe global::Microsoft.UI.Xaml.Markup.IComponentConnector global::Microsoft.UI.Xaml.Markup.IComponentConnector.GetBindingConnector(int connectionId, object target)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IComponentConnector).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Markup.IComponentConnectorMethods.GetBindingConnector(_obj, connectionId, target);
        }
    }

    public static class IDataTemplateComponentMethods
    {


        public static unsafe void Recycle(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[6](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        public static unsafe void ProcessBindings(IObjectReference _obj, object item, int itemIndex, int phase, out int nextPhase)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __item = default;
            int __nextPhase = default;
            try
            {
                __item = MarshalInspectable<object>.CreateMarshaler2(item);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int, int, int*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__item), itemIndex, phase, &__nextPhase));
                global::System.GC.KeepAlive(_obj);
                nextPhase = __nextPhase;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__item);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF7, 0xDD, 0x43, 0x17, 0xBA, 0x38, 0xC9, 0x58, 0xA2, 0xA6, 0xB0, 0xAE, 0x28, 0x71, 0x3B, 0xEE };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IDataTemplateComponent.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("1743DDF7-38BA-58C9-A2A6-B0AE28713BEE")]
    internal unsafe interface IDataTemplateComponent : global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IDataTemplateComponent()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IDataTemplateComponent), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 2);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_Recycle_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int, int, int*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_ProcessBindings_1;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Recycle_0(IntPtr thisPtr)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent>(thisPtr).Recycle();

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_ProcessBindings_1(IntPtr thisPtr, IntPtr item, int itemIndex, int phase, int* nextPhase)
        {


            *nextPhase = default;
            int __nextPhase = default;

            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent>(thisPtr).ProcessBindings(MarshalInspectable<object>.FromAbi(item), itemIndex, phase, out __nextPhase);
                *nextPhase = __nextPhase;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe void global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent.Recycle()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent).TypeHandle));
            global::ABI.Microsoft.UI.Xaml.Markup.IDataTemplateComponentMethods.Recycle(_obj);
        }

        unsafe void global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent.ProcessBindings(object item, int itemIndex, int phase, out int nextPhase)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent).TypeHandle));
            global::ABI.Microsoft.UI.Xaml.Markup.IDataTemplateComponentMethods.ProcessBindings(_obj, item, itemIndex, phase, out nextPhase);
        }
    }

    internal static class IMarkupExtensionMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x1E, 0x37, 0x55, 0xC3, 0x1D, 0x9, 0x36, 0x51, 0xAF, 0x4A, 0xBA, 0xF5, 0xE0, 0x6, 0x16, 0xBD };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C355371E-091D-5136-AF4A-BAF5E00616BD")]
    internal interface IMarkupExtension : global::Microsoft.UI.Xaml.Markup.IMarkupExtension
    {
    }
    internal static class IMarkupExtensionFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Markup.MarkupExtension CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Markup.MarkupExtension.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Markup.MarkupExtension.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFA, 0x1A, 0x65, 0x20, 0x3A, 0x5F, 0xC, 0x5F, 0xAD, 0xB1, 0xB6, 0x55, 0x1F, 0x53, 0xA6, 0xA0 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("20651AFA-5F3A-5F0C-ADB1-B6551F53A6A0")]
    internal interface IMarkupExtensionFactory : global::Microsoft.UI.Xaml.Markup.IMarkupExtensionFactory
    {
    }
    public static class IMarkupExtensionOverridesMethods
    {


        internal static unsafe object ProvideValue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }

        internal static unsafe object ProvideValue(IObjectReference _obj, global::Microsoft.UI.Xaml.IXamlServiceProvider serviceProvider)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __serviceProvider = default;
            IntPtr __retval = default;
            try
            {
                __serviceProvider = MarshalInterface<global::Microsoft.UI.Xaml.IXamlServiceProvider>.CreateMarshaler2(serviceProvider, global::ABI.Microsoft.UI.Xaml.IXamlServiceProviderMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__serviceProvider), &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__serviceProvider);
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x75, 0xA5, 0x2A, 0xA1, 0x31, 0x5D, 0x68, 0x5B, 0xA3, 0xF, 0x84, 0x95, 0x41, 0x2A, 0x35, 0x1D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IMarkupExtensionOverrides.AbiToProjectionVftablePtr;

    }

    [Guid("A12AA575-5D31-5B68-A30F-8495412A351D")]
    internal unsafe interface IMarkupExtensionOverrides : global::Microsoft.UI.Xaml.Markup.IMarkupExtensionOverrides
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IMarkupExtensionOverrides()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IMarkupExtensionOverrides), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 2);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_ProvideValue_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_ProvideValue_1;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_ProvideValue_0(IntPtr thisPtr, IntPtr* result)
        {

            object __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IMarkupExtensionOverrides>(thisPtr).ProvideValue();
                *result = MarshalInspectable<object>.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_ProvideValue_1(IntPtr thisPtr, IntPtr serviceProvider, IntPtr* result)
        {

            object __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IMarkupExtensionOverrides>(thisPtr).ProvideValue(MarshalInterface<global::Microsoft.UI.Xaml.IXamlServiceProvider>.FromAbi(serviceProvider));
                *result = MarshalInspectable<object>.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }

    public static class IProvideValueTargetMethods
    {

        public static unsafe object get_TargetObject(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }

        public static unsafe object get_TargetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x68, 0xFF, 0x1, 0x3F, 0xFD, 0x3E, 0x1D, 0x59, 0xA5, 0x6, 0xDE, 0x13, 0xFC, 0xAA, 0xBD, 0x83 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IProvideValueTarget.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("3F01FF68-3EFD-591D-A506-DE13FCAABD83")]
    internal unsafe interface IProvideValueTarget : global::Microsoft.UI.Xaml.Markup.IProvideValueTarget
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IProvideValueTarget()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IProvideValueTarget), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 2);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_TargetObject_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_TargetProperty_1;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_TargetObject_0(IntPtr thisPtr, IntPtr* value)
        {

            object __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IProvideValueTarget>(thisPtr).TargetObject;
                *value = MarshalInspectable<object>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_TargetProperty_1(IntPtr thisPtr, IntPtr* value)
        {

            object __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IProvideValueTarget>(thisPtr).TargetProperty;
                *value = MarshalInspectable<object>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe object global::Microsoft.UI.Xaml.Markup.IProvideValueTarget.TargetObject
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IProvideValueTarget).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Markup.IProvideValueTargetMethods.get_TargetObject(_obj);
            }
        }

        unsafe object global::Microsoft.UI.Xaml.Markup.IProvideValueTarget.TargetProperty
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IProvideValueTarget).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Markup.IProvideValueTargetMethods.get_TargetProperty(_obj);
            }
        }
    }

    internal static class IProvideValueTargetPropertyMethods
    {

        internal static unsafe global::System.Type get_DeclaringType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.Type __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.Type*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.Type.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.Type.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_Name(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Type get_Type(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.Type __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.Type*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.Type.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.Type.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x1F, 0x7B, 0x77, 0xCE, 0x2E, 0xB4, 0xD1, 0x59, 0x87, 0xD, 0x12, 0xFD, 0xF0, 0x62, 0x91, 0x33 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("CE777B1F-B42E-59D1-870D-12FDF0629133")]
    internal interface IProvideValueTargetProperty : global::Microsoft.UI.Xaml.Markup.IProvideValueTargetProperty
    {
    }
    public static class IRootObjectProviderMethods
    {

        public static unsafe object get_RootObject(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x99, 0x35, 0xD6, 0x13, 0x2F, 0x35, 0xB8, 0x5E, 0x81, 0xC1, 0xBC, 0x62, 0xFB, 0x12, 0xD6, 0xDA };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IRootObjectProvider.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("13D63599-352F-5EB8-81C1-BC62FB12D6DA")]
    internal unsafe interface IRootObjectProvider : global::Microsoft.UI.Xaml.Markup.IRootObjectProvider
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IRootObjectProvider()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IRootObjectProvider), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_RootObject_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_RootObject_0(IntPtr thisPtr, IntPtr* value)
        {

            object __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IRootObjectProvider>(thisPtr).RootObject;
                *value = MarshalInspectable<object>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe object global::Microsoft.UI.Xaml.Markup.IRootObjectProvider.RootObject
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IRootObjectProvider).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Markup.IRootObjectProviderMethods.get_RootObject(_obj);
            }
        }
    }

    public static class IUriContextMethods
    {

        public static unsafe global::System.Uri get_BaseUri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.Uri.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.Uri.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF6, 0x5, 0x86, 0xFB, 0x5, 0x8F, 0xEE, 0x52, 0xA0, 0x1C, 0x3A, 0x9E, 0x11, 0x8A, 0x6E, 0xA2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IUriContext.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("FB8605F6-8F05-52EE-A01C-3A9E118A6EA2")]
    internal unsafe interface IUriContext : global::Microsoft.UI.Xaml.Markup.IUriContext
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IUriContext()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IUriContext), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_BaseUri_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_BaseUri_0(IntPtr thisPtr, IntPtr* value)
        {

            global::System.Uri __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IUriContext>(thisPtr).BaseUri;
                *value = global::ABI.System.Uri.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::System.Uri global::Microsoft.UI.Xaml.Markup.IUriContext.BaseUri
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IUriContext).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Markup.IUriContextMethods.get_BaseUri(_obj);
            }
        }
    }

    internal static class IXamlBinaryWriterMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3B, 0x5E, 0xB4, 0x8F, 0x89, 0xE6, 0xBF, 0x55, 0xAA, 0x11, 0xD8, 0x3B, 0x1C, 0x1C, 0xDD, 0xA1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8FB45E3B-E689-55BF-AA11-D83B1C1CDDA1")]
    internal interface IXamlBinaryWriter : global::Microsoft.UI.Xaml.Markup.IXamlBinaryWriter
    {
    }
    internal static class IXamlBinaryWriterStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Markup.XamlBinaryWriterErrorInformation Write(IObjectReference _obj, global::System.Collections.Generic.IList<global::Windows.Storage.Streams.IRandomAccessStream> inputStreams, global::System.Collections.Generic.IList<global::Windows.Storage.Streams.IRandomAccessStream> outputStreams, global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xamlMetadataProvider)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __inputStreams = default;
            ObjectReferenceValue __outputStreams = default;
            ObjectReferenceValue __xamlMetadataProvider = default;
            global::Microsoft.UI.Xaml.Markup.XamlBinaryWriterErrorInformation __retval = default;
            try
            {
                __inputStreams = MarshalInterface<global::System.Collections.Generic.IList<global::Windows.Storage.Streams.IRandomAccessStream>>.CreateMarshaler2(inputStreams, global::ABI.System.Collections.Generic.IListMethods<global::Windows.Storage.Streams.IRandomAccessStream>.IID);
                __outputStreams = MarshalInterface<global::System.Collections.Generic.IList<global::Windows.Storage.Streams.IRandomAccessStream>>.CreateMarshaler2(outputStreams, global::ABI.System.Collections.Generic.IListMethods<global::Windows.Storage.Streams.IRandomAccessStream>.IID);
                __xamlMetadataProvider = MarshalInterface<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider>.CreateMarshaler2(xamlMetadataProvider, global::ABI.Microsoft.UI.Xaml.Markup.IXamlMetadataProviderMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, global::Microsoft.UI.Xaml.Markup.XamlBinaryWriterErrorInformation*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__inputStreams), MarshalInspectable<object>.GetAbi(__outputStreams), MarshalInspectable<object>.GetAbi(__xamlMetadataProvider), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__inputStreams);
                MarshalInspectable<object>.DisposeMarshaler(__outputStreams);
                MarshalInspectable<object>.DisposeMarshaler(__xamlMetadataProvider);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFC, 0x7, 0x49, 0x77, 0x46, 0xC8, 0x7F, 0x51, 0xAB, 0xCC, 0xC3, 0xF7, 0xE8, 0xC3, 0xFF, 0xC9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("774907FC-C846-517F-ABCC-C3F7E8C3FFC9")]
    internal interface IXamlBinaryWriterStatics : global::Microsoft.UI.Xaml.Markup.IXamlBinaryWriterStatics
    {
    }
    public static class IXamlBindScopeDiagnosticsMethods
    {


        public static unsafe void Disable(IObjectReference _obj, int lineNumber, int columnNumber)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int, int>**)ThisPtr)[6](ThisPtr, lineNumber, columnNumber));
            global::System.GC.KeepAlive(_obj);
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x4E, 0x4E, 0xA8, 0x3E, 0xFE, 0xFD, 0xA8, 0x55, 0xA5, 0x61, 0xED, 0xF5, 0x69, 0x78, 0x46, 0xD7 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IXamlBindScopeDiagnostics.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("3EA84E4E-FDFE-55A8-A561-EDF5697846D7")]
    internal unsafe interface IXamlBindScopeDiagnostics : global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IXamlBindScopeDiagnostics()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IXamlBindScopeDiagnostics), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, int, int, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_Disable_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Disable_0(IntPtr thisPtr, int lineNumber, int columnNumber)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics>(thisPtr).Disable(lineNumber, columnNumber);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe void global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics.Disable(int lineNumber, int columnNumber)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics).TypeHandle));
            global::ABI.Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnosticsMethods.Disable(_obj, lineNumber, columnNumber);
        }
    }

    internal static class IXamlBindingHelperMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF2, 0x9B, 0x7A, 0x60, 0x6D, 0x5A, 0x89, 0x5C, 0xA7, 0x56, 0xBB, 0x44, 0xF2, 0x4F, 0x28, 0xF8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("607A9BF2-5A6D-5C89-A756-BB44F24F28F8")]
    internal interface IXamlBindingHelper : global::Microsoft.UI.Xaml.Markup.IXamlBindingHelper
    {
    }
    internal static class IXamlBindingHelperStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent GetDataTemplateComponent(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject element)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            IntPtr __retval = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(element);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__element), &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
                MarshalInterface<global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent>.DisposeAbi(__retval);
            }
        }

        internal static unsafe void SetDataTemplateComponent(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject element, global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            ObjectReferenceValue __value = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(element);
                __value = MarshalInterface<global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent>.CreateMarshaler2(value, global::ABI.Microsoft.UI.Xaml.Markup.IDataTemplateComponentMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__element), MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe void SuspendRendering(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement target)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __target = default;
            try
            {
                __target = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(target);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__target)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__target);
            }
        }

        internal static unsafe void ResumeRendering(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement target)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __target = default;
            try
            {
                __target = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(target);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[10](ThisPtr, MarshalInspectable<object>.GetAbi(__target)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__target);
            }
        }

        internal static unsafe object ConvertValue(IObjectReference _obj, global::System.Type type, object value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            IntPtr __retval = default;
            try
            {
                __value = MarshalInspectable<object>.CreateMarshaler2(value);
                global::ABI.System.Type.Pinnable __type = new(type);
                fixed(void* ___type = __type)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.Type, IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, global::ABI.System.Type.GetAbi(ref __type), MarshalInspectable<object>.GetAbi(__value), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return MarshalInspectable<object>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }

        internal static unsafe void SetPropertyFromString(IObjectReference _obj, object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dependencyObject = default;
            ObjectReferenceValue __propertyToSet = default;
            try
            {
                __dependencyObject = MarshalInspectable<object>.CreateMarshaler2(dependencyObject);
                __propertyToSet = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(propertyToSet);
                MarshalString.Pinnable __value = new(value);
                fixed(void* ___value = __value)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[12](ThisPtr, MarshalInspectable<object>.GetAbi(__dependencyObject), MarshalInspectable<object>.GetAbi(__propertyToSet), MarshalString.GetAbi(ref __value)));
                    global::System.GC.KeepAlive(_obj);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dependencyObject);
                MarshalInspectable<object>.DisposeMarshaler(__propertyToSet);
            }
        }

        internal static unsafe void SetPropertyFromBoolean(IObjectReference _obj, object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dependencyObject = default;
            ObjectReferenceValue __propertyToSet = default;
            try
            {
                __dependencyObject = MarshalInspectable<object>.CreateMarshaler2(dependencyObject);
                __propertyToSet = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(propertyToSet);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, byte, int>**)ThisPtr)[13](ThisPtr, MarshalInspectable<object>.GetAbi(__dependencyObject), MarshalInspectable<object>.GetAbi(__propertyToSet), (byte)(value ? 1 : 0)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dependencyObject);
                MarshalInspectable<object>.DisposeMarshaler(__propertyToSet);
            }
        }

        internal static unsafe void SetPropertyFromChar16(IObjectReference _obj, object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, char value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dependencyObject = default;
            ObjectReferenceValue __propertyToSet = default;
            try
            {
                __dependencyObject = MarshalInspectable<object>.CreateMarshaler2(dependencyObject);
                __propertyToSet = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(propertyToSet);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, ushort, int>**)ThisPtr)[14](ThisPtr, MarshalInspectable<object>.GetAbi(__dependencyObject), MarshalInspectable<object>.GetAbi(__propertyToSet), (ushort)value));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dependencyObject);
                MarshalInspectable<object>.DisposeMarshaler(__propertyToSet);
            }
        }

        internal static unsafe void SetPropertyFromDateTime(IObjectReference _obj, object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, global::System.DateTimeOffset value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dependencyObject = default;
            ObjectReferenceValue __propertyToSet = default;
            global::ABI.System.DateTimeOffset.Marshaler __value = default;
            try
            {
                __dependencyObject = MarshalInspectable<object>.CreateMarshaler2(dependencyObject);
                __propertyToSet = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(propertyToSet);
                __value = global::ABI.System.DateTimeOffset.CreateMarshaler(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, global::ABI.System.DateTimeOffset, int>**)ThisPtr)[15](ThisPtr, MarshalInspectable<object>.GetAbi(__dependencyObject), MarshalInspectable<object>.GetAbi(__propertyToSet), global::ABI.System.DateTimeOffset.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dependencyObject);
                MarshalInspectable<object>.DisposeMarshaler(__propertyToSet);
                global::ABI.System.DateTimeOffset.DisposeMarshaler(__value);
            }
        }

        internal static unsafe void SetPropertyFromDouble(IObjectReference _obj, object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dependencyObject = default;
            ObjectReferenceValue __propertyToSet = default;
            try
            {
                __dependencyObject = MarshalInspectable<object>.CreateMarshaler2(dependencyObject);
                __propertyToSet = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(propertyToSet);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, double, int>**)ThisPtr)[16](ThisPtr, MarshalInspectable<object>.GetAbi(__dependencyObject), MarshalInspectable<object>.GetAbi(__propertyToSet), value));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dependencyObject);
                MarshalInspectable<object>.DisposeMarshaler(__propertyToSet);
            }
        }

        internal static unsafe void SetPropertyFromInt32(IObjectReference _obj, object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, int value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dependencyObject = default;
            ObjectReferenceValue __propertyToSet = default;
            try
            {
                __dependencyObject = MarshalInspectable<object>.CreateMarshaler2(dependencyObject);
                __propertyToSet = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(propertyToSet);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int, int>**)ThisPtr)[17](ThisPtr, MarshalInspectable<object>.GetAbi(__dependencyObject), MarshalInspectable<object>.GetAbi(__propertyToSet), value));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dependencyObject);
                MarshalInspectable<object>.DisposeMarshaler(__propertyToSet);
            }
        }

        internal static unsafe void SetPropertyFromUInt32(IObjectReference _obj, object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, uint value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dependencyObject = default;
            ObjectReferenceValue __propertyToSet = default;
            try
            {
                __dependencyObject = MarshalInspectable<object>.CreateMarshaler2(dependencyObject);
                __propertyToSet = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(propertyToSet);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, uint, int>**)ThisPtr)[18](ThisPtr, MarshalInspectable<object>.GetAbi(__dependencyObject), MarshalInspectable<object>.GetAbi(__propertyToSet), value));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dependencyObject);
                MarshalInspectable<object>.DisposeMarshaler(__propertyToSet);
            }
        }

        internal static unsafe void SetPropertyFromInt64(IObjectReference _obj, object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, long value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dependencyObject = default;
            ObjectReferenceValue __propertyToSet = default;
            try
            {
                __dependencyObject = MarshalInspectable<object>.CreateMarshaler2(dependencyObject);
                __propertyToSet = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(propertyToSet);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, long, int>**)ThisPtr)[19](ThisPtr, MarshalInspectable<object>.GetAbi(__dependencyObject), MarshalInspectable<object>.GetAbi(__propertyToSet), value));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dependencyObject);
                MarshalInspectable<object>.DisposeMarshaler(__propertyToSet);
            }
        }

        internal static unsafe void SetPropertyFromUInt64(IObjectReference _obj, object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, ulong value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dependencyObject = default;
            ObjectReferenceValue __propertyToSet = default;
            try
            {
                __dependencyObject = MarshalInspectable<object>.CreateMarshaler2(dependencyObject);
                __propertyToSet = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(propertyToSet);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, ulong, int>**)ThisPtr)[20](ThisPtr, MarshalInspectable<object>.GetAbi(__dependencyObject), MarshalInspectable<object>.GetAbi(__propertyToSet), value));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dependencyObject);
                MarshalInspectable<object>.DisposeMarshaler(__propertyToSet);
            }
        }

        internal static unsafe void SetPropertyFromSingle(IObjectReference _obj, object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, float value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dependencyObject = default;
            ObjectReferenceValue __propertyToSet = default;
            try
            {
                __dependencyObject = MarshalInspectable<object>.CreateMarshaler2(dependencyObject);
                __propertyToSet = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(propertyToSet);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, float, int>**)ThisPtr)[21](ThisPtr, MarshalInspectable<object>.GetAbi(__dependencyObject), MarshalInspectable<object>.GetAbi(__propertyToSet), value));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dependencyObject);
                MarshalInspectable<object>.DisposeMarshaler(__propertyToSet);
            }
        }

        internal static unsafe void SetPropertyFromPoint(IObjectReference _obj, object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, global::Windows.Foundation.Point value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dependencyObject = default;
            ObjectReferenceValue __propertyToSet = default;
            try
            {
                __dependencyObject = MarshalInspectable<object>.CreateMarshaler2(dependencyObject);
                __propertyToSet = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(propertyToSet);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, global::Windows.Foundation.Point, int>**)ThisPtr)[22](ThisPtr, MarshalInspectable<object>.GetAbi(__dependencyObject), MarshalInspectable<object>.GetAbi(__propertyToSet), value));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dependencyObject);
                MarshalInspectable<object>.DisposeMarshaler(__propertyToSet);
            }
        }

        internal static unsafe void SetPropertyFromRect(IObjectReference _obj, object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, global::Windows.Foundation.Rect value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dependencyObject = default;
            ObjectReferenceValue __propertyToSet = default;
            try
            {
                __dependencyObject = MarshalInspectable<object>.CreateMarshaler2(dependencyObject);
                __propertyToSet = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(propertyToSet);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, global::Windows.Foundation.Rect, int>**)ThisPtr)[23](ThisPtr, MarshalInspectable<object>.GetAbi(__dependencyObject), MarshalInspectable<object>.GetAbi(__propertyToSet), value));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dependencyObject);
                MarshalInspectable<object>.DisposeMarshaler(__propertyToSet);
            }
        }

        internal static unsafe void SetPropertyFromSize(IObjectReference _obj, object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, global::Windows.Foundation.Size value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dependencyObject = default;
            ObjectReferenceValue __propertyToSet = default;
            try
            {
                __dependencyObject = MarshalInspectable<object>.CreateMarshaler2(dependencyObject);
                __propertyToSet = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(propertyToSet);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, global::Windows.Foundation.Size, int>**)ThisPtr)[24](ThisPtr, MarshalInspectable<object>.GetAbi(__dependencyObject), MarshalInspectable<object>.GetAbi(__propertyToSet), value));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dependencyObject);
                MarshalInspectable<object>.DisposeMarshaler(__propertyToSet);
            }
        }

        internal static unsafe void SetPropertyFromTimeSpan(IObjectReference _obj, object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, global::System.TimeSpan value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dependencyObject = default;
            ObjectReferenceValue __propertyToSet = default;
            global::ABI.System.TimeSpan.Marshaler __value = default;
            try
            {
                __dependencyObject = MarshalInspectable<object>.CreateMarshaler2(dependencyObject);
                __propertyToSet = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(propertyToSet);
                __value = global::ABI.System.TimeSpan.CreateMarshaler(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, global::ABI.System.TimeSpan, int>**)ThisPtr)[25](ThisPtr, MarshalInspectable<object>.GetAbi(__dependencyObject), MarshalInspectable<object>.GetAbi(__propertyToSet), global::ABI.System.TimeSpan.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dependencyObject);
                MarshalInspectable<object>.DisposeMarshaler(__propertyToSet);
                global::ABI.System.TimeSpan.DisposeMarshaler(__value);
            }
        }

        internal static unsafe void SetPropertyFromByte(IObjectReference _obj, object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, byte value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dependencyObject = default;
            ObjectReferenceValue __propertyToSet = default;
            try
            {
                __dependencyObject = MarshalInspectable<object>.CreateMarshaler2(dependencyObject);
                __propertyToSet = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(propertyToSet);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, byte, int>**)ThisPtr)[26](ThisPtr, MarshalInspectable<object>.GetAbi(__dependencyObject), MarshalInspectable<object>.GetAbi(__propertyToSet), value));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dependencyObject);
                MarshalInspectable<object>.DisposeMarshaler(__propertyToSet);
            }
        }

        internal static unsafe void SetPropertyFromUri(IObjectReference _obj, object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, global::System.Uri value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dependencyObject = default;
            ObjectReferenceValue __propertyToSet = default;
            ObjectReferenceValue __value = default;
            try
            {
                __dependencyObject = MarshalInspectable<object>.CreateMarshaler2(dependencyObject);
                __propertyToSet = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(propertyToSet);
                __value = global::ABI.System.Uri.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[27](ThisPtr, MarshalInspectable<object>.GetAbi(__dependencyObject), MarshalInspectable<object>.GetAbi(__propertyToSet), MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dependencyObject);
                MarshalInspectable<object>.DisposeMarshaler(__propertyToSet);
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe void SetPropertyFromObject(IObjectReference _obj, object dependencyObject, global::Microsoft.UI.Xaml.DependencyProperty propertyToSet, object value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dependencyObject = default;
            ObjectReferenceValue __propertyToSet = default;
            ObjectReferenceValue __value = default;
            try
            {
                __dependencyObject = MarshalInspectable<object>.CreateMarshaler2(dependencyObject);
                __propertyToSet = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(propertyToSet);
                __value = MarshalInspectable<object>.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[28](ThisPtr, MarshalInspectable<object>.GetAbi(__dependencyObject), MarshalInspectable<object>.GetAbi(__propertyToSet), MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dependencyObject);
                MarshalInspectable<object>.DisposeMarshaler(__propertyToSet);
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }
        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_DataTemplateComponentProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD3, 0xDA, 0xC7, 0x93, 0xC2, 0xF9, 0x72, 0x53, 0x84, 0xDC, 0x9E, 0x9C, 0x46, 0x61, 0xD0, 0x83 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("93C7DAD3-F9C2-5372-84DC-9E9C4661D083")]
    internal interface IXamlBindingHelperStatics : global::Microsoft.UI.Xaml.Markup.IXamlBindingHelperStatics
    {
    }
    internal static class IXamlMarkupHelperMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x10, 0x73, 0x67, 0xCD, 0x6, 0x3B, 0x13, 0x5A, 0xB3, 0x1A, 0x40, 0x18, 0x49, 0x57, 0x8, 0x58 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("CD677310-3B06-5A13-B31A-401849570858")]
    internal interface IXamlMarkupHelper : global::Microsoft.UI.Xaml.Markup.IXamlMarkupHelper
    {
    }
    internal static class IXamlMarkupHelperStaticsMethods
    {


        internal static unsafe void UnloadObject(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject element)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(element);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__element)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE3, 0xF6, 0xA0, 0xD9, 0xCC, 0xC6, 0xB6, 0x5C, 0x89, 0x99, 0x85, 0x78, 0x87, 0x1, 0xF3, 0x39 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D9A0F6E3-C6CC-5CB6-8999-85788701F339")]
    internal interface IXamlMarkupHelperStatics : global::Microsoft.UI.Xaml.Markup.IXamlMarkupHelperStatics
    {
    }
    public static class IXamlMemberMethods
    {


        public static unsafe object GetValue(IObjectReference _obj, object instance)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __instance = default;
            IntPtr __retval = default;
            try
            {
                __instance = MarshalInspectable<object>.CreateMarshaler2(instance);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, MarshalInspectable<object>.GetAbi(__instance), &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__instance);
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }

        public static unsafe void SetValue(IObjectReference _obj, object instance, object value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __instance = default;
            ObjectReferenceValue __value = default;
            try
            {
                __instance = MarshalInspectable<object>.CreateMarshaler2(instance);
                __value = MarshalInspectable<object>.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[13](ThisPtr, MarshalInspectable<object>.GetAbi(__instance), MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__instance);
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }
        public static unsafe bool get_IsAttachable(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        public static unsafe bool get_IsDependencyProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        public static unsafe bool get_IsReadOnly(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        public static unsafe string get_Name(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        public static unsafe global::Microsoft.UI.Xaml.Markup.IXamlType get_TargetType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Microsoft.UI.Xaml.Markup.IXamlType>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Microsoft.UI.Xaml.Markup.IXamlType>.DisposeAbi(__retval);
            }
        }

        public static unsafe global::Microsoft.UI.Xaml.Markup.IXamlType get_Type(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Microsoft.UI.Xaml.Markup.IXamlType>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Microsoft.UI.Xaml.Markup.IXamlType>.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x13, 0x29, 0x3A, 0xBF, 0x63, 0x5C, 0xEC, 0x50, 0x86, 0x60, 0x61, 0x80, 0x9B, 0xE7, 0xB9, 0xB9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IXamlMember.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("BF3A2913-5C63-50EC-8660-61809BE7B9B9")]
    internal unsafe interface IXamlMember : global::Microsoft.UI.Xaml.Markup.IXamlMember
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IXamlMember()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IXamlMember), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 8);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_IsAttachable_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_IsDependencyProperty_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_get_IsReadOnly_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_get_Name_3;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[10] = &Do_Abi_get_TargetType_4;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[11] = &Do_Abi_get_Type_5;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[12] = &Do_Abi_GetValue_6;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[13] = &Do_Abi_SetValue_7;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetValue_6(IntPtr thisPtr, IntPtr instance, IntPtr* result)
        {

            object __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IXamlMember>(thisPtr).GetValue(MarshalInspectable<object>.FromAbi(instance));
                *result = MarshalInspectable<object>.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_SetValue_7(IntPtr thisPtr, IntPtr instance, IntPtr value)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IXamlMember>(thisPtr).SetValue(MarshalInspectable<object>.FromAbi(instance), MarshalInspectable<object>.FromAbi(value));

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_IsAttachable_0(IntPtr thisPtr, byte* value)
        {

            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IXamlMember>(thisPtr).IsAttachable;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_IsDependencyProperty_1(IntPtr thisPtr, byte* value)
        {

            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IXamlMember>(thisPtr).IsDependencyProperty;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_IsReadOnly_2(IntPtr thisPtr, byte* value)
        {

            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IXamlMember>(thisPtr).IsReadOnly;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_Name_3(IntPtr thisPtr, IntPtr* value)
        {

            string __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IXamlMember>(thisPtr).Name;
                *value = MarshalString.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_TargetType_4(IntPtr thisPtr, IntPtr* value)
        {

            global::Microsoft.UI.Xaml.Markup.IXamlType __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IXamlMember>(thisPtr).TargetType;
                *value = MarshalInterface<global::Microsoft.UI.Xaml.Markup.IXamlType>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_Type_5(IntPtr thisPtr, IntPtr* value)
        {

            global::Microsoft.UI.Xaml.Markup.IXamlType __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IXamlMember>(thisPtr).Type;
                *value = MarshalInterface<global::Microsoft.UI.Xaml.Markup.IXamlType>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe object global::Microsoft.UI.Xaml.Markup.IXamlMember.GetValue(object instance)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IXamlMember).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Markup.IXamlMemberMethods.GetValue(_obj, instance);
        }

        unsafe void global::Microsoft.UI.Xaml.Markup.IXamlMember.SetValue(object instance, object value)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IXamlMember).TypeHandle));
            global::ABI.Microsoft.UI.Xaml.Markup.IXamlMemberMethods.SetValue(_obj, instance, value);
        }

        unsafe bool global::Microsoft.UI.Xaml.Markup.IXamlMember.IsAttachable
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IXamlMember).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Markup.IXamlMemberMethods.get_IsAttachable(_obj);
            }
        }

        unsafe bool global::Microsoft.UI.Xaml.Markup.IXamlMember.IsDependencyProperty
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IXamlMember).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Markup.IXamlMemberMethods.get_IsDependencyProperty(_obj);
            }
        }

        unsafe bool global::Microsoft.UI.Xaml.Markup.IXamlMember.IsReadOnly
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IXamlMember).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Markup.IXamlMemberMethods.get_IsReadOnly(_obj);
            }
        }

        unsafe string global::Microsoft.UI.Xaml.Markup.IXamlMember.Name
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IXamlMember).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Markup.IXamlMemberMethods.get_Name(_obj);
            }
        }

        unsafe global::Microsoft.UI.Xaml.Markup.IXamlType global::Microsoft.UI.Xaml.Markup.IXamlMember.TargetType
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IXamlMember).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Markup.IXamlMemberMethods.get_TargetType(_obj);
            }
        }

        unsafe global::Microsoft.UI.Xaml.Markup.IXamlType global::Microsoft.UI.Xaml.Markup.IXamlMember.Type
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IXamlMember).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Markup.IXamlMemberMethods.get_Type(_obj);
            }
        }
    }

    public static class IXamlMetadataProviderMethods
    {


        public static unsafe global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(IObjectReference _obj, global::System.Type type)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::ABI.System.Type.Pinnable __type = new(type);
                fixed(void* ___type = __type)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.Type, IntPtr*, int>**)ThisPtr)[6](ThisPtr, global::ABI.System.Type.GetAbi(ref __type), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return MarshalInterface<global::Microsoft.UI.Xaml.Markup.IXamlType>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInterface<global::Microsoft.UI.Xaml.Markup.IXamlType>.DisposeAbi(__retval);
            }
        }

        public static unsafe global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(IObjectReference _obj, string fullName)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __fullName = new(fullName);
                fixed(void* ___fullName = __fullName)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __fullName), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return MarshalInterface<global::Microsoft.UI.Xaml.Markup.IXamlType>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInterface<global::Microsoft.UI.Xaml.Markup.IXamlType>.DisposeAbi(__retval);
            }
        }

        public static unsafe global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval_length = default;
            IntPtr __retval_data = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval_length, &__retval_data));
                global::System.GC.KeepAlive(_obj);
                return MarshalNonBlittable<global::Microsoft.UI.Xaml.Markup.XmlnsDefinition>.FromAbiArray((__retval_length, __retval_data));
            }
            finally
            {
                MarshalNonBlittable<global::Microsoft.UI.Xaml.Markup.XmlnsDefinition>.DisposeAbiArray((__retval_length, __retval_data));
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF0, 0x51, 0x62, 0xA9, 0x14, 0x22, 0x53, 0x5D, 0x87, 0x46, 0xCE, 0x99, 0xA2, 0x59, 0x3C, 0xD7 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IXamlMetadataProvider.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("A96251F0-2214-5D53-8746-CE99A2593CD7")]
    internal unsafe interface IXamlMetadataProvider : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IXamlMetadataProvider()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IXamlMetadataProvider), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 3);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.Type, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_GetXamlType_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_GetXamlType_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, int*, IntPtr*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_GetXmlnsDefinitions_2;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetXamlType_0(IntPtr thisPtr, global::ABI.System.Type type, IntPtr* result)
        {

            global::Microsoft.UI.Xaml.Markup.IXamlType __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider>(thisPtr).GetXamlType(global::ABI.System.Type.FromAbi(type));
                *result = MarshalInterface<global::Microsoft.UI.Xaml.Markup.IXamlType>.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetXamlType_1(IntPtr thisPtr, IntPtr fullName, IntPtr* result)
        {

            global::Microsoft.UI.Xaml.Markup.IXamlType __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider>(thisPtr).GetXamlType(MarshalString.FromAbi(fullName));
                *result = MarshalInterface<global::Microsoft.UI.Xaml.Markup.IXamlType>.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetXmlnsDefinitions_2(IntPtr thisPtr, int* __resultSize, IntPtr* result)
        {

            global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] __result = default;

            *result = default;
            *__resultSize = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider>(thisPtr).GetXmlnsDefinitions();
                (*__resultSize, *result) = MarshalNonBlittable<global::Microsoft.UI.Xaml.Markup.XmlnsDefinition>.FromManagedArray(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Microsoft.UI.Xaml.Markup.IXamlType global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider.GetXamlType(global::System.Type type)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Markup.IXamlMetadataProviderMethods.GetXamlType(_obj, type);
        }

        unsafe global::Microsoft.UI.Xaml.Markup.IXamlType global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider.GetXamlType(string fullName)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Markup.IXamlMetadataProviderMethods.GetXamlType(_obj, fullName);
        }

        unsafe global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider.GetXmlnsDefinitions()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Markup.IXamlMetadataProviderMethods.GetXmlnsDefinitions(_obj);
        }
    }

    internal static class IXamlReaderMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC8, 0x54, 0xCE, 0x54, 0xC6, 0x38, 0xD9, 0x50, 0xAC, 0x98, 0x4B, 0x3, 0xED, 0xDB, 0xDE, 0x9F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("54CE54C8-38C6-50D9-AC98-4B03EDDBDE9F")]
    internal interface IXamlReader : global::Microsoft.UI.Xaml.Markup.IXamlReader
    {
    }
    internal static class IXamlReaderStaticsMethods
    {


        internal static unsafe object Load(IObjectReference _obj, string xaml)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __xaml = new(xaml);
                fixed(void* ___xaml = __xaml)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __xaml), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return MarshalInspectable<object>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }

        internal static unsafe object LoadWithInitialTemplateValidation(IObjectReference _obj, string xaml)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __xaml = new(xaml);
                fixed(void* ___xaml = __xaml)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __xaml), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return MarshalInspectable<object>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x9E, 0xCD, 0xA4, 0x82, 0x5E, 0x43, 0xEB, 0x5A, 0x8C, 0x4F, 0x30, 0xC, 0xEC, 0xE4, 0x5C, 0xAE };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("82A4CD9E-435E-5AEB-8C4F-300CECE45CAE")]
    internal interface IXamlReaderStatics : global::Microsoft.UI.Xaml.Markup.IXamlReaderStatics
    {
    }
    public static class IXamlTypeMethods
    {


        public static unsafe object ActivateInstance(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[19](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }

        public static unsafe object CreateFromString(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __value = new(value);
                fixed(void* ___value = __value)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[20](ThisPtr, MarshalString.GetAbi(ref __value), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return MarshalInspectable<object>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }

        public static unsafe global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(IObjectReference _obj, string name)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __name = new(name);
                fixed(void* ___name = __name)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[21](ThisPtr, MarshalString.GetAbi(ref __name), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return MarshalInterface<global::Microsoft.UI.Xaml.Markup.IXamlMember>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInterface<global::Microsoft.UI.Xaml.Markup.IXamlMember>.DisposeAbi(__retval);
            }
        }

        public static unsafe void AddToVector(IObjectReference _obj, object instance, object value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __instance = default;
            ObjectReferenceValue __value = default;
            try
            {
                __instance = MarshalInspectable<object>.CreateMarshaler2(instance);
                __value = MarshalInspectable<object>.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[22](ThisPtr, MarshalInspectable<object>.GetAbi(__instance), MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__instance);
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        public static unsafe void AddToMap(IObjectReference _obj, object instance, object key, object value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __instance = default;
            ObjectReferenceValue __key = default;
            ObjectReferenceValue __value = default;
            try
            {
                __instance = MarshalInspectable<object>.CreateMarshaler2(instance);
                __key = MarshalInspectable<object>.CreateMarshaler2(key);
                __value = MarshalInspectable<object>.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[23](ThisPtr, MarshalInspectable<object>.GetAbi(__instance), MarshalInspectable<object>.GetAbi(__key), MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__instance);
                MarshalInspectable<object>.DisposeMarshaler(__key);
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        public static unsafe void RunInitializer(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[24](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }
        public static unsafe global::Microsoft.UI.Xaml.Markup.IXamlType get_BaseType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Microsoft.UI.Xaml.Markup.IXamlType>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Microsoft.UI.Xaml.Markup.IXamlType>.DisposeAbi(__retval);
            }
        }

        public static unsafe global::Microsoft.UI.Xaml.Markup.IXamlType get_BoxedType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[17](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Microsoft.UI.Xaml.Markup.IXamlType>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Microsoft.UI.Xaml.Markup.IXamlType>.DisposeAbi(__retval);
            }
        }

        public static unsafe global::Microsoft.UI.Xaml.Markup.IXamlMember get_ContentProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Microsoft.UI.Xaml.Markup.IXamlMember>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Microsoft.UI.Xaml.Markup.IXamlMember>.DisposeAbi(__retval);
            }
        }

        public static unsafe string get_FullName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        public static unsafe bool get_IsArray(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        public static unsafe bool get_IsBindable(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        public static unsafe bool get_IsCollection(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        public static unsafe bool get_IsConstructible(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        public static unsafe bool get_IsDictionary(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        public static unsafe bool get_IsMarkupExtension(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        public static unsafe global::Microsoft.UI.Xaml.Markup.IXamlType get_ItemType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[15](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Microsoft.UI.Xaml.Markup.IXamlType>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Microsoft.UI.Xaml.Markup.IXamlType>.DisposeAbi(__retval);
            }
        }

        public static unsafe global::Microsoft.UI.Xaml.Markup.IXamlType get_KeyType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[16](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Microsoft.UI.Xaml.Markup.IXamlType>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Microsoft.UI.Xaml.Markup.IXamlType>.DisposeAbi(__retval);
            }
        }

        public static unsafe global::System.Type get_UnderlyingType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.Type __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.Type*, int>**)ThisPtr)[18](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.Type.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.Type.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xDF, 0x19, 0x42, 0xD2, 0xC9, 0x7E, 0xF1, 0x57, 0xA2, 0x7B, 0x6A, 0xF2, 0x51, 0xD9, 0xC5, 0xBC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IXamlType.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("D24219DF-7EC9-57F1-A27B-6AF251D9C5BC")]
    internal unsafe interface IXamlType : global::Microsoft.UI.Xaml.Markup.IXamlType
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IXamlType()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IXamlType), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 19);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_BaseType_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_ContentProperty_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_get_FullName_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_get_IsArray_3;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[10] = &Do_Abi_get_IsCollection_4;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[11] = &Do_Abi_get_IsConstructible_5;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[12] = &Do_Abi_get_IsDictionary_6;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[13] = &Do_Abi_get_IsMarkupExtension_7;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[14] = &Do_Abi_get_IsBindable_8;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[15] = &Do_Abi_get_ItemType_9;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[16] = &Do_Abi_get_KeyType_10;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[17] = &Do_Abi_get_BoxedType_11;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.Type*, int>*)AbiToProjectionVftablePtr)[18] = &Do_Abi_get_UnderlyingType_12;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[19] = &Do_Abi_ActivateInstance_13;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[20] = &Do_Abi_CreateFromString_14;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[21] = &Do_Abi_GetMember_15;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[22] = &Do_Abi_AddToVector_16;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[23] = &Do_Abi_AddToMap_17;
            ((delegate* unmanaged[Stdcall]<IntPtr, int>*)AbiToProjectionVftablePtr)[24] = &Do_Abi_RunInitializer_18;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_ActivateInstance_13(IntPtr thisPtr, IntPtr* result)
        {

            object __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IXamlType>(thisPtr).ActivateInstance();
                *result = MarshalInspectable<object>.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_CreateFromString_14(IntPtr thisPtr, IntPtr value, IntPtr* result)
        {

            object __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IXamlType>(thisPtr).CreateFromString(MarshalString.FromAbi(value));
                *result = MarshalInspectable<object>.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetMember_15(IntPtr thisPtr, IntPtr name, IntPtr* result)
        {

            global::Microsoft.UI.Xaml.Markup.IXamlMember __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IXamlType>(thisPtr).GetMember(MarshalString.FromAbi(name));
                *result = MarshalInterface<global::Microsoft.UI.Xaml.Markup.IXamlMember>.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_AddToVector_16(IntPtr thisPtr, IntPtr instance, IntPtr value)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IXamlType>(thisPtr).AddToVector(MarshalInspectable<object>.FromAbi(instance), MarshalInspectable<object>.FromAbi(value));

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_AddToMap_17(IntPtr thisPtr, IntPtr instance, IntPtr key, IntPtr value)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IXamlType>(thisPtr).AddToMap(MarshalInspectable<object>.FromAbi(instance), MarshalInspectable<object>.FromAbi(key), MarshalInspectable<object>.FromAbi(value));

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_RunInitializer_18(IntPtr thisPtr)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IXamlType>(thisPtr).RunInitializer();

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_BaseType_0(IntPtr thisPtr, IntPtr* value)
        {

            global::Microsoft.UI.Xaml.Markup.IXamlType __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IXamlType>(thisPtr).BaseType;
                *value = MarshalInterface<global::Microsoft.UI.Xaml.Markup.IXamlType>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_BoxedType_11(IntPtr thisPtr, IntPtr* value)
        {

            global::Microsoft.UI.Xaml.Markup.IXamlType __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IXamlType>(thisPtr).BoxedType;
                *value = MarshalInterface<global::Microsoft.UI.Xaml.Markup.IXamlType>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_ContentProperty_1(IntPtr thisPtr, IntPtr* value)
        {

            global::Microsoft.UI.Xaml.Markup.IXamlMember __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IXamlType>(thisPtr).ContentProperty;
                *value = MarshalInterface<global::Microsoft.UI.Xaml.Markup.IXamlMember>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_FullName_2(IntPtr thisPtr, IntPtr* value)
        {

            string __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IXamlType>(thisPtr).FullName;
                *value = MarshalString.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_IsArray_3(IntPtr thisPtr, byte* value)
        {

            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IXamlType>(thisPtr).IsArray;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_IsBindable_8(IntPtr thisPtr, byte* value)
        {

            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IXamlType>(thisPtr).IsBindable;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_IsCollection_4(IntPtr thisPtr, byte* value)
        {

            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IXamlType>(thisPtr).IsCollection;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_IsConstructible_5(IntPtr thisPtr, byte* value)
        {

            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IXamlType>(thisPtr).IsConstructible;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_IsDictionary_6(IntPtr thisPtr, byte* value)
        {

            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IXamlType>(thisPtr).IsDictionary;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_IsMarkupExtension_7(IntPtr thisPtr, byte* value)
        {

            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IXamlType>(thisPtr).IsMarkupExtension;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_ItemType_9(IntPtr thisPtr, IntPtr* value)
        {

            global::Microsoft.UI.Xaml.Markup.IXamlType __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IXamlType>(thisPtr).ItemType;
                *value = MarshalInterface<global::Microsoft.UI.Xaml.Markup.IXamlType>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_KeyType_10(IntPtr thisPtr, IntPtr* value)
        {

            global::Microsoft.UI.Xaml.Markup.IXamlType __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IXamlType>(thisPtr).KeyType;
                *value = MarshalInterface<global::Microsoft.UI.Xaml.Markup.IXamlType>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_UnderlyingType_12(IntPtr thisPtr, global::ABI.System.Type* value)
        {

            global::System.Type __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IXamlType>(thisPtr).UnderlyingType;
                *value = global::ABI.System.Type.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe object global::Microsoft.UI.Xaml.Markup.IXamlType.ActivateInstance()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IXamlType).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Markup.IXamlTypeMethods.ActivateInstance(_obj);
        }

        unsafe object global::Microsoft.UI.Xaml.Markup.IXamlType.CreateFromString(string value)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IXamlType).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Markup.IXamlTypeMethods.CreateFromString(_obj, value);
        }

        unsafe global::Microsoft.UI.Xaml.Markup.IXamlMember global::Microsoft.UI.Xaml.Markup.IXamlType.GetMember(string name)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IXamlType).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Markup.IXamlTypeMethods.GetMember(_obj, name);
        }

        unsafe void global::Microsoft.UI.Xaml.Markup.IXamlType.AddToVector(object instance, object value)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IXamlType).TypeHandle));
            global::ABI.Microsoft.UI.Xaml.Markup.IXamlTypeMethods.AddToVector(_obj, instance, value);
        }

        unsafe void global::Microsoft.UI.Xaml.Markup.IXamlType.AddToMap(object instance, object key, object value)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IXamlType).TypeHandle));
            global::ABI.Microsoft.UI.Xaml.Markup.IXamlTypeMethods.AddToMap(_obj, instance, key, value);
        }

        unsafe void global::Microsoft.UI.Xaml.Markup.IXamlType.RunInitializer()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IXamlType).TypeHandle));
            global::ABI.Microsoft.UI.Xaml.Markup.IXamlTypeMethods.RunInitializer(_obj);
        }

        unsafe global::Microsoft.UI.Xaml.Markup.IXamlType global::Microsoft.UI.Xaml.Markup.IXamlType.BaseType
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IXamlType).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Markup.IXamlTypeMethods.get_BaseType(_obj);
            }
        }

        unsafe global::Microsoft.UI.Xaml.Markup.IXamlType global::Microsoft.UI.Xaml.Markup.IXamlType.BoxedType
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IXamlType).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Markup.IXamlTypeMethods.get_BoxedType(_obj);
            }
        }

        unsafe global::Microsoft.UI.Xaml.Markup.IXamlMember global::Microsoft.UI.Xaml.Markup.IXamlType.ContentProperty
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IXamlType).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Markup.IXamlTypeMethods.get_ContentProperty(_obj);
            }
        }

        unsafe string global::Microsoft.UI.Xaml.Markup.IXamlType.FullName
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IXamlType).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Markup.IXamlTypeMethods.get_FullName(_obj);
            }
        }

        unsafe bool global::Microsoft.UI.Xaml.Markup.IXamlType.IsArray
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IXamlType).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Markup.IXamlTypeMethods.get_IsArray(_obj);
            }
        }

        unsafe bool global::Microsoft.UI.Xaml.Markup.IXamlType.IsBindable
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IXamlType).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Markup.IXamlTypeMethods.get_IsBindable(_obj);
            }
        }

        unsafe bool global::Microsoft.UI.Xaml.Markup.IXamlType.IsCollection
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IXamlType).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Markup.IXamlTypeMethods.get_IsCollection(_obj);
            }
        }

        unsafe bool global::Microsoft.UI.Xaml.Markup.IXamlType.IsConstructible
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IXamlType).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Markup.IXamlTypeMethods.get_IsConstructible(_obj);
            }
        }

        unsafe bool global::Microsoft.UI.Xaml.Markup.IXamlType.IsDictionary
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IXamlType).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Markup.IXamlTypeMethods.get_IsDictionary(_obj);
            }
        }

        unsafe bool global::Microsoft.UI.Xaml.Markup.IXamlType.IsMarkupExtension
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IXamlType).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Markup.IXamlTypeMethods.get_IsMarkupExtension(_obj);
            }
        }

        unsafe global::Microsoft.UI.Xaml.Markup.IXamlType global::Microsoft.UI.Xaml.Markup.IXamlType.ItemType
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IXamlType).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Markup.IXamlTypeMethods.get_ItemType(_obj);
            }
        }

        unsafe global::Microsoft.UI.Xaml.Markup.IXamlType global::Microsoft.UI.Xaml.Markup.IXamlType.KeyType
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IXamlType).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Markup.IXamlTypeMethods.get_KeyType(_obj);
            }
        }

        unsafe global::System.Type global::Microsoft.UI.Xaml.Markup.IXamlType.UnderlyingType
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IXamlType).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Markup.IXamlTypeMethods.get_UnderlyingType(_obj);
            }
        }
    }

    public static class IXamlTypeResolverMethods
    {


        public static unsafe global::System.Type Resolve(IObjectReference _obj, string qualifiedTypeName)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.Type __retval = default;
            try
            {
                MarshalString.Pinnable __qualifiedTypeName = new(qualifiedTypeName);
                fixed(void* ___qualifiedTypeName = __qualifiedTypeName)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::ABI.System.Type*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __qualifiedTypeName), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.System.Type.FromAbi(__retval);
                }
            }
            finally
            {
                global::ABI.System.Type.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x15, 0x56, 0xA1, 0x3F, 0xCF, 0xCA, 0x7F, 0x54, 0xB1, 0xED, 0x89, 0xDA, 0xE8, 0xC6, 0x74, 0x52 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IXamlTypeResolver.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("3FA15615-CACF-547F-B1ED-89DAE8C67452")]
    internal unsafe interface IXamlTypeResolver : global::Microsoft.UI.Xaml.Markup.IXamlTypeResolver
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IXamlTypeResolver()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IXamlTypeResolver), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::ABI.System.Type*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_Resolve_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Resolve_0(IntPtr thisPtr, IntPtr qualifiedTypeName, global::ABI.System.Type* result)
        {

            global::System.Type __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Markup.IXamlTypeResolver>(thisPtr).Resolve(MarshalString.FromAbi(qualifiedTypeName));
                *result = global::ABI.System.Type.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::System.Type global::Microsoft.UI.Xaml.Markup.IXamlTypeResolver.Resolve(string qualifiedTypeName)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Markup.IXamlTypeResolver).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Markup.IXamlTypeResolverMethods.Resolve(_obj, qualifiedTypeName);
        }
    }

    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct MarkupExtension
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Markup.MarkupExtension obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Markup.MarkupExtension>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Markup.IMarkupExtensionMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Markup.MarkupExtension obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Markup.IMarkupExtensionMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Markup.MarkupExtension FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Markup.MarkupExtension.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Markup.MarkupExtension obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.MarkupExtension>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Markup.MarkupExtension[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.MarkupExtension>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.MarkupExtension>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Markup.MarkupExtension[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.MarkupExtension>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Markup.MarkupExtension[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.MarkupExtension>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Markup.MarkupExtension[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.MarkupExtension>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.MarkupExtension>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.MarkupExtension>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class MarkupExtensionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Markup.MarkupExtension(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ProvideValueTargetProperty
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Markup.ProvideValueTargetProperty obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Markup.ProvideValueTargetProperty>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Markup.IProvideValueTargetPropertyMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Markup.ProvideValueTargetProperty obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Markup.IProvideValueTargetPropertyMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Markup.ProvideValueTargetProperty FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Markup.ProvideValueTargetProperty.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Markup.ProvideValueTargetProperty obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.ProvideValueTargetProperty>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Markup.ProvideValueTargetProperty[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.ProvideValueTargetProperty>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.ProvideValueTargetProperty>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Markup.ProvideValueTargetProperty[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.ProvideValueTargetProperty>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Markup.ProvideValueTargetProperty[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.ProvideValueTargetProperty>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Markup.ProvideValueTargetProperty[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.ProvideValueTargetProperty>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.ProvideValueTargetProperty>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.ProvideValueTargetProperty>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ProvideValueTargetPropertyRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Markup.ProvideValueTargetProperty(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct XamlBinaryWriter
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Markup.XamlBinaryWriter obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Markup.XamlBinaryWriter>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Markup.IXamlBinaryWriterMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Markup.XamlBinaryWriter obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Markup.IXamlBinaryWriterMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Markup.XamlBinaryWriter FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Markup.XamlBinaryWriter.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Markup.XamlBinaryWriter obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.XamlBinaryWriter>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Markup.XamlBinaryWriter[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.XamlBinaryWriter>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.XamlBinaryWriter>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Markup.XamlBinaryWriter[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.XamlBinaryWriter>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Markup.XamlBinaryWriter[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.XamlBinaryWriter>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Markup.XamlBinaryWriter[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.XamlBinaryWriter>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.XamlBinaryWriter>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.XamlBinaryWriter>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class XamlBinaryWriterRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Markup.XamlBinaryWriter(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct XamlBindingHelper
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Markup.XamlBindingHelper obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Markup.XamlBindingHelper>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Markup.IXamlBindingHelperMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Markup.XamlBindingHelper obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Markup.IXamlBindingHelperMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Markup.XamlBindingHelper FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Markup.XamlBindingHelper obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.XamlBindingHelper>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Markup.XamlBindingHelper[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.XamlBindingHelper>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.XamlBindingHelper>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Markup.XamlBindingHelper[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.XamlBindingHelper>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Markup.XamlBindingHelper[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.XamlBindingHelper>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Markup.XamlBindingHelper[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.XamlBindingHelper>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.XamlBindingHelper>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.XamlBindingHelper>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class XamlBindingHelperRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Markup.XamlBindingHelper(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct XamlMarkupHelper
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Markup.XamlMarkupHelper obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Markup.XamlMarkupHelper>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Markup.IXamlMarkupHelperMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Markup.XamlMarkupHelper obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Markup.IXamlMarkupHelperMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Markup.XamlMarkupHelper FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Markup.XamlMarkupHelper.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Markup.XamlMarkupHelper obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.XamlMarkupHelper>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Markup.XamlMarkupHelper[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.XamlMarkupHelper>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.XamlMarkupHelper>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Markup.XamlMarkupHelper[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.XamlMarkupHelper>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Markup.XamlMarkupHelper[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.XamlMarkupHelper>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Markup.XamlMarkupHelper[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.XamlMarkupHelper>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.XamlMarkupHelper>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.XamlMarkupHelper>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class XamlMarkupHelperRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Markup.XamlMarkupHelper(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct XamlReader
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Markup.XamlReader obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Markup.XamlReader>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Markup.IXamlReaderMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Markup.XamlReader obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Markup.IXamlReaderMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Markup.XamlReader FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Markup.XamlReader.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Markup.XamlReader obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.XamlReader>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Markup.XamlReader[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.XamlReader>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.XamlReader>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Markup.XamlReader[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.XamlReader>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Markup.XamlReader[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.XamlReader>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Markup.XamlReader[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.XamlReader>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.XamlReader>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Markup.XamlReader>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class XamlReaderRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Markup.XamlReader(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct XmlnsDefinition
    {
        public IntPtr XmlNamespace;
        public IntPtr Namespace;

        public struct Marshaler
        {
            public MarshalString _XmlNamespace;
            public MarshalString _Namespace;
            public XmlnsDefinition __abi;
            public void Dispose()
            {
                MarshalString.DisposeMarshaler(_XmlNamespace);
                MarshalString.DisposeMarshaler(_Namespace);
            }
        }

        public static Marshaler CreateMarshaler(global::Microsoft.UI.Xaml.Markup.XmlnsDefinition arg)
        {
            var m = new Marshaler();
            bool success = false;
            try
            {
                m._XmlNamespace = MarshalString.CreateMarshaler(arg.XmlNamespace);
                m._Namespace = MarshalString.CreateMarshaler(arg.Namespace);
                m.__abi = new XmlnsDefinition()
                {
                    XmlNamespace = MarshalString.GetAbi(m._XmlNamespace)
                    , Namespace = MarshalString.GetAbi(m._Namespace)
                };
                success = true;
                return m;
            }
            finally
            {
                if (!success)
                {
                    m.Dispose();
                }
            }
        }

        public static XmlnsDefinition GetAbi(Marshaler m) => m.__abi;

        public static global::Microsoft.UI.Xaml.Markup.XmlnsDefinition FromAbi(XmlnsDefinition arg)
        {
            return new global::Microsoft.UI.Xaml.Markup.XmlnsDefinition()
            {
                XmlNamespace = MarshalString.FromAbi(arg.XmlNamespace)
                , Namespace = MarshalString.FromAbi(arg.Namespace)
            };
        }

        public static XmlnsDefinition FromManaged(global::Microsoft.UI.Xaml.Markup.XmlnsDefinition arg)
        {
            return new XmlnsDefinition()
            {
                XmlNamespace = MarshalString.FromManaged(arg.XmlNamespace)
                , Namespace = MarshalString.FromManaged(arg.Namespace)
            };
        }

        public static unsafe void CopyAbi(Marshaler arg, IntPtr dest) => 
            *(XmlnsDefinition*)dest.ToPointer() = GetAbi(arg);

        public static unsafe void CopyManaged(global::Microsoft.UI.Xaml.Markup.XmlnsDefinition arg, IntPtr dest) =>
            *(XmlnsDefinition*)dest.ToPointer() = FromManaged(arg);

        public static void DisposeMarshaler(Marshaler m) => m.Dispose();

        public static void DisposeAbi(XmlnsDefinition abi)
        {
            MarshalString.DisposeAbi(abi.XmlNamespace);
            MarshalString.DisposeAbi(abi.Namespace);
        }
    }
}
#pragma warning restore CA1416
