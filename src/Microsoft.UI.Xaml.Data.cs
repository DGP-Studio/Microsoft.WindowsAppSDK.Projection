//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.UI.Xaml.Data
{
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::System.AttributeUsage(global::System.AttributeTargets.Class, AllowMultiple = false)]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class BindableAttribute: Attribute
    {
        public BindableAttribute(){}
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.Binding))]
    [global::ABI.Microsoft.UI.Xaml.Data.BindingRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IBinding))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class Binding : BindingBase, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<Binding>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Data_IBinding;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Data_IBinding()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Data_IBinding, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Data.IBindingMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Data_IBinding;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Data_IBinding => ___objRef_global__Microsoft_UI_Xaml_Data_IBinding ?? Make___objRef_global__Microsoft_UI_Xaml_Data_IBinding();



        private static class _IBindingFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Data_IBindingFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Data_IBindingFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Data_IBindingFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Data_IBindingFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Data.Binding", global::ABI.Microsoft.UI.Xaml.Data.IBindingFactoryMethods.IID);
                }
            }
        }

        public Binding():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(Binding);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IBindingFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Data_IBindingFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Data.IBindingMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new Binding FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<Binding>.FromAbi(thisPtr);
        }

        protected internal Binding(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Data.IBindingMethods.IID);

        }


        public static bool operator ==(Binding x, Binding y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(Binding x, Binding y) => !(x == y);
        public bool Equals(Binding other) => this == other;
        public override bool Equals(object obj) => obj is Binding that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected Binding(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(Binding);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public IValueConverter Converter
        {
            get => global::ABI.Microsoft.UI.Xaml.Data.IBindingMethods.get_Converter(_objRef_global__Microsoft_UI_Xaml_Data_IBinding);
            set => global::ABI.Microsoft.UI.Xaml.Data.IBindingMethods.set_Converter(_objRef_global__Microsoft_UI_Xaml_Data_IBinding, value);
        }

        public string ConverterLanguage
        {
            get => global::ABI.Microsoft.UI.Xaml.Data.IBindingMethods.get_ConverterLanguage(_objRef_global__Microsoft_UI_Xaml_Data_IBinding);
            set => global::ABI.Microsoft.UI.Xaml.Data.IBindingMethods.set_ConverterLanguage(_objRef_global__Microsoft_UI_Xaml_Data_IBinding, value);
        }

        public object ConverterParameter
        {
            get => global::ABI.Microsoft.UI.Xaml.Data.IBindingMethods.get_ConverterParameter(_objRef_global__Microsoft_UI_Xaml_Data_IBinding);
            set => global::ABI.Microsoft.UI.Xaml.Data.IBindingMethods.set_ConverterParameter(_objRef_global__Microsoft_UI_Xaml_Data_IBinding, value);
        }

        public string ElementName
        {
            get => global::ABI.Microsoft.UI.Xaml.Data.IBindingMethods.get_ElementName(_objRef_global__Microsoft_UI_Xaml_Data_IBinding);
            set => global::ABI.Microsoft.UI.Xaml.Data.IBindingMethods.set_ElementName(_objRef_global__Microsoft_UI_Xaml_Data_IBinding, value);
        }

        public object FallbackValue
        {
            get => global::ABI.Microsoft.UI.Xaml.Data.IBindingMethods.get_FallbackValue(_objRef_global__Microsoft_UI_Xaml_Data_IBinding);
            set => global::ABI.Microsoft.UI.Xaml.Data.IBindingMethods.set_FallbackValue(_objRef_global__Microsoft_UI_Xaml_Data_IBinding, value);
        }

        public BindingMode Mode
        {
            get => global::ABI.Microsoft.UI.Xaml.Data.IBindingMethods.get_Mode(_objRef_global__Microsoft_UI_Xaml_Data_IBinding);
            set => global::ABI.Microsoft.UI.Xaml.Data.IBindingMethods.set_Mode(_objRef_global__Microsoft_UI_Xaml_Data_IBinding, value);
        }

        public global::Microsoft.UI.Xaml.PropertyPath Path
        {
            get => global::ABI.Microsoft.UI.Xaml.Data.IBindingMethods.get_Path(_objRef_global__Microsoft_UI_Xaml_Data_IBinding);
            set => global::ABI.Microsoft.UI.Xaml.Data.IBindingMethods.set_Path(_objRef_global__Microsoft_UI_Xaml_Data_IBinding, value);
        }

        public RelativeSource RelativeSource
        {
            get => global::ABI.Microsoft.UI.Xaml.Data.IBindingMethods.get_RelativeSource(_objRef_global__Microsoft_UI_Xaml_Data_IBinding);
            set => global::ABI.Microsoft.UI.Xaml.Data.IBindingMethods.set_RelativeSource(_objRef_global__Microsoft_UI_Xaml_Data_IBinding, value);
        }

        public object Source
        {
            get => global::ABI.Microsoft.UI.Xaml.Data.IBindingMethods.get_Source(_objRef_global__Microsoft_UI_Xaml_Data_IBinding);
            set => global::ABI.Microsoft.UI.Xaml.Data.IBindingMethods.set_Source(_objRef_global__Microsoft_UI_Xaml_Data_IBinding, value);
        }

        public object TargetNullValue
        {
            get => global::ABI.Microsoft.UI.Xaml.Data.IBindingMethods.get_TargetNullValue(_objRef_global__Microsoft_UI_Xaml_Data_IBinding);
            set => global::ABI.Microsoft.UI.Xaml.Data.IBindingMethods.set_TargetNullValue(_objRef_global__Microsoft_UI_Xaml_Data_IBinding, value);
        }

        public UpdateSourceTrigger UpdateSourceTrigger
        {
            get => global::ABI.Microsoft.UI.Xaml.Data.IBindingMethods.get_UpdateSourceTrigger(_objRef_global__Microsoft_UI_Xaml_Data_IBinding);
            set => global::ABI.Microsoft.UI.Xaml.Data.IBindingMethods.set_UpdateSourceTrigger(_objRef_global__Microsoft_UI_Xaml_Data_IBinding, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.BindingBase))]
    [global::ABI.Microsoft.UI.Xaml.Data.BindingBaseRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IBindingBase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class BindingBase : global::Microsoft.UI.Xaml.DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<BindingBase>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Data_IBindingBase;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Data_IBindingBase()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Data_IBindingBase, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Data.IBindingBaseMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Data_IBindingBase;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Data_IBindingBase => ___objRef_global__Microsoft_UI_Xaml_Data_IBindingBase ?? Make___objRef_global__Microsoft_UI_Xaml_Data_IBindingBase();



        private static class _IBindingBaseFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Data_IBindingBaseFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Data_IBindingBaseFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Data_IBindingBaseFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Data_IBindingBaseFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Data.BindingBase", global::ABI.Microsoft.UI.Xaml.Data.IBindingBaseFactoryMethods.IID);
                }
            }
        }

        public BindingBase():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(BindingBase);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IBindingBaseFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Data_IBindingBaseFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Data.IBindingBaseMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new BindingBase FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<BindingBase>.FromAbi(thisPtr);
        }

        protected internal BindingBase(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Data.IBindingBaseMethods.IID);

        }


        public static bool operator ==(BindingBase x, BindingBase y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(BindingBase x, BindingBase y) => !(x == y);
        public bool Equals(BindingBase other) => this == other;
        public override bool Equals(object obj) => obj is BindingBase that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected BindingBase(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(BindingBase);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.BindingExpression))]
    [global::ABI.Microsoft.UI.Xaml.Data.BindingExpressionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IBindingExpression))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class BindingExpression : BindingExpressionBase, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<BindingExpression>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Data_IBindingExpression;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Data_IBindingExpression()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Data_IBindingExpression, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Data.IBindingExpressionMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Data_IBindingExpression;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Data_IBindingExpression => ___objRef_global__Microsoft_UI_Xaml_Data_IBindingExpression ?? Make___objRef_global__Microsoft_UI_Xaml_Data_IBindingExpression();



        private static class _IBindingExpressionFactoryMethods
        {}

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Data_IBindingExpressionFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Data_IBindingExpressionFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Data_IBindingExpressionFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Data_IBindingExpressionFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Data.BindingExpression", global::ABI.Microsoft.UI.Xaml.Data.IBindingExpressionFactoryMethods.IID);
                }
            }
        }

        public static new BindingExpression FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<BindingExpression>.FromAbi(thisPtr);
        }

        protected internal BindingExpression(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Data.IBindingExpressionMethods.IID);

        }


        public static bool operator ==(BindingExpression x, BindingExpression y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(BindingExpression x, BindingExpression y) => !(x == y);
        public bool Equals(BindingExpression other) => this == other;
        public override bool Equals(object obj) => obj is BindingExpression that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected BindingExpression(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(BindingExpression);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public void UpdateSource() => global::ABI.Microsoft.UI.Xaml.Data.IBindingExpressionMethods.UpdateSource(_objRef_global__Microsoft_UI_Xaml_Data_IBindingExpression);

        public object DataItem => global::ABI.Microsoft.UI.Xaml.Data.IBindingExpressionMethods.get_DataItem(_objRef_global__Microsoft_UI_Xaml_Data_IBindingExpression);

        public Binding ParentBinding => global::ABI.Microsoft.UI.Xaml.Data.IBindingExpressionMethods.get_ParentBinding(_objRef_global__Microsoft_UI_Xaml_Data_IBindingExpression);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.BindingExpressionBase))]
    [global::ABI.Microsoft.UI.Xaml.Data.BindingExpressionBaseRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IBindingExpressionBase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class BindingExpressionBase : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<BindingExpressionBase>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Data_IBindingExpressionBase;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Data_IBindingExpressionBase()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Data_IBindingExpressionBase, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Data.IBindingExpressionBaseMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Data_IBindingExpressionBase;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Data_IBindingExpressionBase => ___objRef_global__Microsoft_UI_Xaml_Data_IBindingExpressionBase ?? Make___objRef_global__Microsoft_UI_Xaml_Data_IBindingExpressionBase();



        private static class _IBindingExpressionBaseFactoryMethods
        {}

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Data_IBindingExpressionBaseFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Data_IBindingExpressionBaseFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Data_IBindingExpressionBaseFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Data_IBindingExpressionBaseFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Data.BindingExpressionBase", global::ABI.Microsoft.UI.Xaml.Data.IBindingExpressionBaseFactoryMethods.IID);
                }
            }
        }

        public static BindingExpressionBase FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<BindingExpressionBase>.FromAbi(thisPtr);
        }

        protected internal BindingExpressionBase(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Data.IBindingExpressionBaseMethods.IID);

        }


        public static bool operator ==(BindingExpressionBase x, BindingExpressionBase y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(BindingExpressionBase x, BindingExpressionBase y) => !(x == y);
        public bool Equals(BindingExpressionBase other) => this == other;
        public override bool Equals(object obj) => obj is BindingExpressionBase that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected BindingExpressionBase(global::WinRT.DerivedComposed _)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(BindingExpressionBase);
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        protected virtual bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<BindingMode>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum BindingMode : int
    {
        OneWay = unchecked((int)0x1),
        OneTime = unchecked((int)0x2),
        TwoWay = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.BindingOperations))]
    [global::ABI.Microsoft.UI.Xaml.Data.BindingOperationsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IBindingOperations))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class BindingOperations : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<BindingOperations>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Data_IBindingOperations => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Data.BindingOperations").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Data_IBindingOperationsStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Data_IBindingOperationsStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Data_IBindingOperationsStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Data_IBindingOperationsStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Data.BindingOperations", global::ABI.Microsoft.UI.Xaml.Data.IBindingOperationsStaticsMethods.IID);
                }
            }
        }

        public static void SetBinding(global::Microsoft.UI.Xaml.DependencyObject target, global::Microsoft.UI.Xaml.DependencyProperty dp, BindingBase binding) => global::ABI.Microsoft.UI.Xaml.Data.IBindingOperationsStaticsMethods.SetBinding(_objRef_global__Microsoft_UI_Xaml_Data_IBindingOperationsStatics, target, dp, binding);

        public static BindingOperations FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<BindingOperations>.FromAbi(thisPtr);
        }

        internal BindingOperations(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Data.IBindingOperationsMethods.IID);

        }


        public static bool operator ==(BindingOperations x, BindingOperations y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(BindingOperations x, BindingOperations y) => !(x == y);
        public bool Equals(BindingOperations other) => this == other;
        public override bool Equals(object obj) => obj is BindingOperations that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.CollectionViewSource))]
    [global::ABI.Microsoft.UI.Xaml.Data.CollectionViewSourceRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICollectionViewSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class CollectionViewSource : global::Microsoft.UI.Xaml.DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CollectionViewSource>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Data_ICollectionViewSource => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Data_CollectionViewSource;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Data_CollectionViewSource
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Data_CollectionViewSource;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Data_CollectionViewSource = ActivationFactory.Get("Microsoft.UI.Xaml.Data.CollectionViewSource");
                }
            }
        }

        public CollectionViewSource() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Data_CollectionViewSource, global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewSourceMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Data.CollectionViewSource").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Data_ICollectionViewSourceStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Data_ICollectionViewSourceStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Data_ICollectionViewSourceStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Data_ICollectionViewSourceStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Data.CollectionViewSource", global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewSourceStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty IsSourceGroupedProperty => global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewSourceStaticsMethods.get_IsSourceGroupedProperty(_objRef_global__Microsoft_UI_Xaml_Data_ICollectionViewSourceStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ItemsPathProperty => global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewSourceStaticsMethods.get_ItemsPathProperty(_objRef_global__Microsoft_UI_Xaml_Data_ICollectionViewSourceStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SourceProperty => global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewSourceStaticsMethods.get_SourceProperty(_objRef_global__Microsoft_UI_Xaml_Data_ICollectionViewSourceStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ViewProperty => global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewSourceStaticsMethods.get_ViewProperty(_objRef_global__Microsoft_UI_Xaml_Data_ICollectionViewSourceStatics);

        public static new CollectionViewSource FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CollectionViewSource>.FromAbi(thisPtr);
        }

        internal CollectionViewSource(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewSourceMethods.IID);

        }


        public static bool operator ==(CollectionViewSource x, CollectionViewSource y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CollectionViewSource x, CollectionViewSource y) => !(x == y);
        public bool Equals(CollectionViewSource other) => this == other;
        public override bool Equals(object obj) => obj is CollectionViewSource that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public bool IsSourceGrouped
        {
            get => global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewSourceMethods.get_IsSourceGrouped(_objRef_global__Microsoft_UI_Xaml_Data_ICollectionViewSource);
            set => global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewSourceMethods.set_IsSourceGrouped(_objRef_global__Microsoft_UI_Xaml_Data_ICollectionViewSource, value);
        }

        public global::Microsoft.UI.Xaml.PropertyPath ItemsPath
        {
            get => global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewSourceMethods.get_ItemsPath(_objRef_global__Microsoft_UI_Xaml_Data_ICollectionViewSource);
            set => global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewSourceMethods.set_ItemsPath(_objRef_global__Microsoft_UI_Xaml_Data_ICollectionViewSource, value);
        }

        public object Source
        {
            get => global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewSourceMethods.get_Source(_objRef_global__Microsoft_UI_Xaml_Data_ICollectionViewSource);
            set => global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewSourceMethods.set_Source(_objRef_global__Microsoft_UI_Xaml_Data_ICollectionViewSource, value);
        }

        public ICollectionView View => global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewSourceMethods.get_View(_objRef_global__Microsoft_UI_Xaml_Data_ICollectionViewSource);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.CurrentChangingEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Data.CurrentChangingEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICurrentChangingEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class CurrentChangingEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CurrentChangingEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Data_ICurrentChangingEventArgs;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Data_ICurrentChangingEventArgs()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Data_ICurrentChangingEventArgs, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Data.ICurrentChangingEventArgsMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Data_ICurrentChangingEventArgs;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Data_ICurrentChangingEventArgs => ___objRef_global__Microsoft_UI_Xaml_Data_ICurrentChangingEventArgs ?? Make___objRef_global__Microsoft_UI_Xaml_Data_ICurrentChangingEventArgs();



        private static class _ICurrentChangingEventArgsFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }

            public static unsafe IntPtr CreateWithCancelableParameter(IObjectReference _obj, bool isCancelable, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[7](ThisPtr, (byte)(isCancelable ? 1 : 0), MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Data_ICurrentChangingEventArgsFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Data_ICurrentChangingEventArgsFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Data_ICurrentChangingEventArgsFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Data_ICurrentChangingEventArgsFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Data.CurrentChangingEventArgs", global::ABI.Microsoft.UI.Xaml.Data.ICurrentChangingEventArgsFactoryMethods.IID);
                }
            }
        }

        public CurrentChangingEventArgs()
        {
            bool isAggregation = this.GetType() != typeof(CurrentChangingEventArgs);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _ICurrentChangingEventArgsFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Data_ICurrentChangingEventArgsFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Data.ICurrentChangingEventArgsMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public CurrentChangingEventArgs(bool isCancelable)
        {
            bool isAggregation = this.GetType() != typeof(CurrentChangingEventArgs);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _ICurrentChangingEventArgsFactoryMethods.CreateWithCancelableParameter(_objRef_global__Microsoft_UI_Xaml_Data_ICurrentChangingEventArgsFactory, isCancelable, baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Data.ICurrentChangingEventArgsMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static CurrentChangingEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CurrentChangingEventArgs>.FromAbi(thisPtr);
        }

        protected internal CurrentChangingEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Data.ICurrentChangingEventArgsMethods.IID);

        }


        public static bool operator ==(CurrentChangingEventArgs x, CurrentChangingEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CurrentChangingEventArgs x, CurrentChangingEventArgs y) => !(x == y);
        public bool Equals(CurrentChangingEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CurrentChangingEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected CurrentChangingEventArgs(global::WinRT.DerivedComposed _)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(CurrentChangingEventArgs);
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool Cancel
        {
            get => global::ABI.Microsoft.UI.Xaml.Data.ICurrentChangingEventArgsMethods.get_Cancel(_objRef_global__Microsoft_UI_Xaml_Data_ICurrentChangingEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Data.ICurrentChangingEventArgsMethods.set_Cancel(_objRef_global__Microsoft_UI_Xaml_Data_ICurrentChangingEventArgs, value);
        }

        public bool IsCancelable => global::ABI.Microsoft.UI.Xaml.Data.ICurrentChangingEventArgsMethods.get_IsCancelable(_objRef_global__Microsoft_UI_Xaml_Data_ICurrentChangingEventArgs);

        protected virtual bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.CurrentChangingEventHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.Data.CurrentChangingEventHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public delegate void CurrentChangingEventHandler(object sender, CurrentChangingEventArgs e);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("501EA0E8-EDD4-59DE-8845-76AF2EABBE00")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.IBinding))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IBinding
    {
        IValueConverter Converter { get; set; }
        string ConverterLanguage { get; set; }
        object ConverterParameter { get; set; }
        string ElementName { get; set; }
        object FallbackValue { get; set; }
        BindingMode Mode { get; set; }
        global::Microsoft.UI.Xaml.PropertyPath Path { get; set; }
        RelativeSource RelativeSource { get; set; }
        object Source { get; set; }
        object TargetNullValue { get; set; }
        UpdateSourceTrigger UpdateSourceTrigger { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("91DDD141-5944-50EF-B85E-218E463F7A73")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.IBindingBase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IBindingBase
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("C8A866C5-F6F3-5F7A-9592-D385AF48BD8F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.IBindingBaseFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IBindingBaseFactory
    {
        BindingBase CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("4C023916-37BC-5B07-BC9D-15C547BD9B26")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.IBindingExpression))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IBindingExpression
    {
        void UpdateSource();
        object DataItem { get; }
        Binding ParentBinding { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("8825E5A9-D9A3-5E87-BCD8-C63133D29029")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.IBindingExpressionBase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IBindingExpressionBase
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("41D643B9-2629-5451-A716-596C0848B5DC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.IBindingExpressionBaseFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IBindingExpressionBaseFactory
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("086CAE14-81A1-588B-B619-05EE84C0F089")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.IBindingExpressionFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IBindingExpressionFactory
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("CB2DE749-B115-5F67-B64A-797D54885D5C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.IBindingFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IBindingFactory
    {
        Binding CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("9A319B95-AABE-5075-B227-8EB07E443D8B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.IBindingOperations))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IBindingOperations
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("1E1BDBD3-FCA5-5C85-B87D-B504CD8FA8AC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.IBindingOperationsStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IBindingOperationsStatics
    {
        void SetBinding(global::Microsoft.UI.Xaml.DependencyObject target, global::Microsoft.UI.Xaml.DependencyProperty dp, BindingBase binding);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("F8BB90D8-E008-5D65-8C97-7BB790A4230C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.ICollectionView))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public interface ICollectionView : global::Windows.Foundation.Collections.IObservableVector<object>, global::System.Collections.Generic.IList<object>, global::System.Collections.Generic.IEnumerable<object>
    {
        bool MoveCurrentTo(object item);
        bool MoveCurrentToPosition(int index);
        bool MoveCurrentToFirst();
        bool MoveCurrentToLast();
        bool MoveCurrentToNext();
        bool MoveCurrentToPrevious();
        global::Windows.Foundation.IAsyncOperation<LoadMoreItemsResult> LoadMoreItemsAsync(uint count);
        global::Windows.Foundation.Collections.IObservableVector<object> CollectionGroups { get; }
        object CurrentItem { get; }
        int CurrentPosition { get; }
        bool HasMoreItems { get; }
        bool IsCurrentAfterLast { get; }
        bool IsCurrentBeforeFirst { get; }
        event global::System.EventHandler<object> CurrentChanged;
        event CurrentChangingEventHandler CurrentChanging;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("D971F795-5728-5BEF-9602-43F2C4250E56")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public interface ICollectionViewFactory
    {
        ICollectionView CreateView();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("96A08DA8-BE38-5AE0-903D-6FB6111E61F5")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewGroup))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public interface ICollectionViewGroup
    {
        object Group { get; }
        global::Windows.Foundation.Collections.IObservableVector<object> GroupItems { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("A45E3B3A-F31E-5BBB-8A7C-70CF5C64BC3F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ICollectionViewSource
    {
        bool IsSourceGrouped { get; set; }
        global::Microsoft.UI.Xaml.PropertyPath ItemsPath { get; set; }
        object Source { get; set; }
        ICollectionView View { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("E282F10F-D4B1-5769-8A11-30F739E6113B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewSourceStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ICollectionViewSourceStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty IsSourceGroupedProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ItemsPathProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SourceProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ViewProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("63E42ED6-E14A-51EA-9CB1-72F9C907DC80")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.ICurrentChangingEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ICurrentChangingEventArgs
    {
        bool Cancel { get; set; }
        bool IsCancelable { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("3670F48A-AC2C-5352-8A4B-6B977A08E5F8")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.ICurrentChangingEventArgsFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ICurrentChangingEventArgsFactory
    {
        CurrentChangingEventArgs CreateInstance(object baseInterface, out object innerInterface);
        CurrentChangingEventArgs CreateWithCancelableParameter(bool isCancelable, object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("30DA92C0-23E8-42A0-AE7C-734A0E5D2782")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.ICustomProperty))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public interface ICustomProperty
    {
        object GetValue(object target);
        void SetValue(object target, object value);
        object GetIndexedValue(object target, object index);
        void SetIndexedValue(object target, object value, object index);
        bool CanRead { get; }
        bool CanWrite { get; }
        string Name { get; }
        global::System.Type Type { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("7C925755-3E48-42B4-8677-76372267033F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.ICustomPropertyProvider))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public interface ICustomPropertyProvider
    {
        ICustomProperty GetCustomProperty(string name);
        ICustomProperty GetIndexedProperty(string name, global::System.Type type);
        string GetStringRepresentation();
        global::System.Type Type { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("D026DD64-5F26-5F15-A86A-0DEC8A431796")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.IDataErrorsChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDataErrorsChangedEventArgs
    {
        string PropertyName { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("62D0BD1E-B85F-5FCC-842A-7CB0DDA37FE5")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.IDataErrorsChangedEventArgsFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDataErrorsChangedEventArgsFactory
    {
        global::System.ComponentModel.DataErrorsChangedEventArgs CreateInstance(string name);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("EBA09846-2554-5B86-AC17-614F05105FA2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.IItemIndexRange))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IItemIndexRange
    {
        int FirstIndex { get; }
        int LastIndex { get; }
        uint Length { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("9FC73213-EDA0-5238-AA2C-401C9921F0F9")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.IItemIndexRangeFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IItemIndexRangeFactory
    {
        ItemIndexRange CreateInstance(int firstIndex, uint length, object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("B8376D08-85FB-563B-8273-39EF2D138256")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.IItemsRangeInfo))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public interface IItemsRangeInfo : global::System.IDisposable
    {
        void RangesChanged(ItemIndexRange visibleRange, global::System.Collections.Generic.IReadOnlyList<ItemIndexRange> trackedItems);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("63D0C952-396B-54F4-AF8C-BA8724A427BF")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.IPropertyChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPropertyChangedEventArgs
    {
        string PropertyName { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("7C0C27A8-0B41-5070-B160-FC9AE960A36C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.IPropertyChangedEventArgsFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPropertyChangedEventArgsFactory
    {
        global::System.ComponentModel.PropertyChangedEventArgs CreateInstance(string name, object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("7FFC8126-5DD8-58BB-B686-C71EDDEA07B2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.IRelativeSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IRelativeSource
    {
        RelativeSourceMode Mode { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("8518522C-85E3-5AE1-B9E9-28EA43C2051E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.IRelativeSourceFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IRelativeSourceFactory
    {
        RelativeSource CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("1B84C26B-9532-5803-935B-A03BF7E875DC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.ISelectionInfo))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public interface ISelectionInfo
    {
        void SelectRange(ItemIndexRange itemIndexRange);
        void DeselectRange(ItemIndexRange itemIndexRange);
        bool IsSelected(int index);
        global::System.Collections.Generic.IReadOnlyList<ItemIndexRange> GetSelectedRanges();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("D8F9B586-A64A-5FF8-868E-204E144F2CF4")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.ISupportIncrementalLoading))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public interface ISupportIncrementalLoading
    {
        global::Windows.Foundation.IAsyncOperation<LoadMoreItemsResult> LoadMoreItemsAsync(uint count);
        bool HasMoreItems { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("AFDD2BFF-10F5-5173-B7C0-3590BD96CB35")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.IValueConverter))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public interface IValueConverter
    {
        object Convert(object value, global::System.Type targetType, object parameter, string language);
        object ConvertBack(object value, global::System.Type targetType, object parameter, string language);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.ItemIndexRange))]
    [global::ABI.Microsoft.UI.Xaml.Data.ItemIndexRangeRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IItemIndexRange))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class ItemIndexRange : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ItemIndexRange>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Data_IItemIndexRange;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Data_IItemIndexRange()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Data_IItemIndexRange, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Data.IItemIndexRangeMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Data_IItemIndexRange;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Data_IItemIndexRange => ___objRef_global__Microsoft_UI_Xaml_Data_IItemIndexRange ?? Make___objRef_global__Microsoft_UI_Xaml_Data_IItemIndexRange();



        private static class _IItemIndexRangeFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, int firstIndex, uint length, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, uint, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, firstIndex, length, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Data_IItemIndexRangeFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Data_IItemIndexRangeFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Data_IItemIndexRangeFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Data_IItemIndexRangeFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Data.ItemIndexRange", global::ABI.Microsoft.UI.Xaml.Data.IItemIndexRangeFactoryMethods.IID);
                }
            }
        }

        public ItemIndexRange(int firstIndex, uint length)
        {
            bool isAggregation = this.GetType() != typeof(ItemIndexRange);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IItemIndexRangeFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Data_IItemIndexRangeFactory, firstIndex, length, baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Data.IItemIndexRangeMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static ItemIndexRange FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ItemIndexRange>.FromAbi(thisPtr);
        }

        protected internal ItemIndexRange(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Data.IItemIndexRangeMethods.IID);

        }


        public static bool operator ==(ItemIndexRange x, ItemIndexRange y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ItemIndexRange x, ItemIndexRange y) => !(x == y);
        public bool Equals(ItemIndexRange other) => this == other;
        public override bool Equals(object obj) => obj is ItemIndexRange that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected ItemIndexRange(global::WinRT.DerivedComposed _)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(ItemIndexRange);
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public int FirstIndex => global::ABI.Microsoft.UI.Xaml.Data.IItemIndexRangeMethods.get_FirstIndex(_objRef_global__Microsoft_UI_Xaml_Data_IItemIndexRange);

        public int LastIndex => global::ABI.Microsoft.UI.Xaml.Data.IItemIndexRangeMethods.get_LastIndex(_objRef_global__Microsoft_UI_Xaml_Data_IItemIndexRange);

        public uint Length => global::ABI.Microsoft.UI.Xaml.Data.IItemIndexRangeMethods.get_Length(_objRef_global__Microsoft_UI_Xaml_Data_IItemIndexRange);

        protected virtual bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml", "struct(Microsoft.UI.Xaml.Data.LoadMoreItemsResult;u4)")][global::WinRT.WindowsRuntimeHelperType][global::WinRT.WinRTExposedType(typeof(global::WinRT.StructTypeDetails<LoadMoreItemsResult, LoadMoreItemsResult>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public struct LoadMoreItemsResult: IEquatable<LoadMoreItemsResult>
    {
        public uint Count;

        public LoadMoreItemsResult(uint _Count)
        {
            Count = _Count; 
        }

        public static bool operator ==(LoadMoreItemsResult x, LoadMoreItemsResult y) => x.Count == y.Count;
        public static bool operator !=(LoadMoreItemsResult x, LoadMoreItemsResult y) => !(x == y);
        public bool Equals(LoadMoreItemsResult other) => this == other;
        public override bool Equals(object obj) => obj is LoadMoreItemsResult that && this == that;
        public override int GetHashCode() => Count.GetHashCode();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Data.RelativeSource))]
    [global::ABI.Microsoft.UI.Xaml.Data.RelativeSourceRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IRelativeSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class RelativeSource : global::Microsoft.UI.Xaml.DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<RelativeSource>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Data_IRelativeSource;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Data_IRelativeSource()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Data_IRelativeSource, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Data.IRelativeSourceMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Data_IRelativeSource;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Data_IRelativeSource => ___objRef_global__Microsoft_UI_Xaml_Data_IRelativeSource ?? Make___objRef_global__Microsoft_UI_Xaml_Data_IRelativeSource();



        private static class _IRelativeSourceFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Data_IRelativeSourceFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Data_IRelativeSourceFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Data_IRelativeSourceFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Data_IRelativeSourceFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Data.RelativeSource", global::ABI.Microsoft.UI.Xaml.Data.IRelativeSourceFactoryMethods.IID);
                }
            }
        }

        public RelativeSource():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(RelativeSource);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IRelativeSourceFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Data_IRelativeSourceFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Data.IRelativeSourceMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new RelativeSource FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<RelativeSource>.FromAbi(thisPtr);
        }

        protected internal RelativeSource(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Data.IRelativeSourceMethods.IID);

        }


        public static bool operator ==(RelativeSource x, RelativeSource y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(RelativeSource x, RelativeSource y) => !(x == y);
        public bool Equals(RelativeSource other) => this == other;
        public override bool Equals(object obj) => obj is RelativeSource that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected RelativeSource(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(RelativeSource);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public RelativeSourceMode Mode
        {
            get => global::ABI.Microsoft.UI.Xaml.Data.IRelativeSourceMethods.get_Mode(_objRef_global__Microsoft_UI_Xaml_Data_IRelativeSource);
            set => global::ABI.Microsoft.UI.Xaml.Data.IRelativeSourceMethods.set_Mode(_objRef_global__Microsoft_UI_Xaml_Data_IRelativeSource, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<RelativeSourceMode>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum RelativeSourceMode : int
    {
        None = unchecked((int)0),
        TemplatedParent = unchecked((int)0x1),
        Self = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<UpdateSourceTrigger>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum UpdateSourceTrigger : int
    {
        Default = unchecked((int)0),
        PropertyChanged = unchecked((int)0x1),
        Explicit = unchecked((int)0x2),
        LostFocus = unchecked((int)0x3),
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.UI.Xaml.Data
{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct Binding
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Data.Binding obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Data.Binding>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Data.IBindingMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Data.Binding obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Data.IBindingMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Data.Binding FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Data.Binding.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Data.Binding obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.Binding>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Data.Binding[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.Binding>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.Binding>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Data.Binding[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.Binding>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Data.Binding[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.Binding>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Data.Binding[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.Binding>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.Binding>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.Binding>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class BindingRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Data.Binding(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct BindingBase
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Data.BindingBase obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Data.BindingBase>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Data.IBindingBaseMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Data.BindingBase obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Data.IBindingBaseMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Data.BindingBase FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Data.BindingBase.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Data.BindingBase obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.BindingBase>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Data.BindingBase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.BindingBase>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.BindingBase>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Data.BindingBase[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.BindingBase>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Data.BindingBase[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.BindingBase>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Data.BindingBase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.BindingBase>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.BindingBase>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.BindingBase>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class BindingBaseRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Data.BindingBase(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct BindingExpression
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Data.BindingExpression obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Data.BindingExpression>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Data.IBindingExpressionMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Data.BindingExpression obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Data.IBindingExpressionMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Data.BindingExpression FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Data.BindingExpression.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Data.BindingExpression obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.BindingExpression>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Data.BindingExpression[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.BindingExpression>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.BindingExpression>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Data.BindingExpression[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.BindingExpression>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Data.BindingExpression[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.BindingExpression>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Data.BindingExpression[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.BindingExpression>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.BindingExpression>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.BindingExpression>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class BindingExpressionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Data.BindingExpression(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct BindingExpressionBase
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Data.BindingExpressionBase obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Data.BindingExpressionBase>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Data.IBindingExpressionBaseMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Data.BindingExpressionBase obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Data.IBindingExpressionBaseMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Data.BindingExpressionBase FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Data.BindingExpressionBase.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Data.BindingExpressionBase obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.BindingExpressionBase>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Data.BindingExpressionBase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.BindingExpressionBase>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.BindingExpressionBase>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Data.BindingExpressionBase[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.BindingExpressionBase>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Data.BindingExpressionBase[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.BindingExpressionBase>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Data.BindingExpressionBase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.BindingExpressionBase>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.BindingExpressionBase>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.BindingExpressionBase>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class BindingExpressionBaseRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Data.BindingExpressionBase(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct BindingOperations
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Data.BindingOperations obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Data.BindingOperations>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Data.IBindingOperationsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Data.BindingOperations obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Data.IBindingOperationsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Data.BindingOperations FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Data.BindingOperations.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Data.BindingOperations obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.BindingOperations>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Data.BindingOperations[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.BindingOperations>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.BindingOperations>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Data.BindingOperations[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.BindingOperations>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Data.BindingOperations[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.BindingOperations>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Data.BindingOperations[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.BindingOperations>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.BindingOperations>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.BindingOperations>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class BindingOperationsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Data.BindingOperations(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CollectionViewSource
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Data.CollectionViewSource obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Data.CollectionViewSource>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewSourceMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Data.CollectionViewSource obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewSourceMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Data.CollectionViewSource FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Data.CollectionViewSource.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Data.CollectionViewSource obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.CollectionViewSource>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Data.CollectionViewSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.CollectionViewSource>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.CollectionViewSource>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Data.CollectionViewSource[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.CollectionViewSource>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Data.CollectionViewSource[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.CollectionViewSource>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Data.CollectionViewSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.CollectionViewSource>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.CollectionViewSource>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.CollectionViewSource>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CollectionViewSourceRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Data.CollectionViewSource(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CurrentChangingEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Data.CurrentChangingEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Data.CurrentChangingEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Data.ICurrentChangingEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Data.CurrentChangingEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Data.ICurrentChangingEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Data.CurrentChangingEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Data.CurrentChangingEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Data.CurrentChangingEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.CurrentChangingEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Data.CurrentChangingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.CurrentChangingEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.CurrentChangingEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Data.CurrentChangingEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.CurrentChangingEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Data.CurrentChangingEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.CurrentChangingEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Data.CurrentChangingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.CurrentChangingEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.CurrentChangingEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.CurrentChangingEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CurrentChangingEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Data.CurrentChangingEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("3D2A98DD-95B3-5FD5-93B4-A1A2599F225C")]
    public static class CurrentChangingEventHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xDD, 0x98, 0x2A, 0x3D, 0xB3, 0x95, 0xD5, 0x5F, 0x93, 0xB4, 0xA1, 0xA2, 0x59, 0x9F, 0x22, 0x5C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe CurrentChangingEventHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(CurrentChangingEventHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(object sender, global::Microsoft.UI.Xaml.Data.CurrentChangingEventArgs e)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __sender = default;
                ObjectReferenceValue __e = default;
                try
                {
                    __sender = MarshalInspectable<object>.CreateMarshaler2(sender);
                    __e = global::ABI.Microsoft.UI.Xaml.Data.CurrentChangingEventArgs.CreateMarshaler2(e);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__sender), MarshalInspectable<object>.GetAbi(__e)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__sender);
                    MarshalInspectable<object>.DisposeMarshaler(__e);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr e)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler>(thisPtr).Invoke(MarshalInspectable<object>.FromAbi(sender), global::ABI.Microsoft.UI.Xaml.Data.CurrentChangingEventArgs.FromAbi(e))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class CurrentChangingEventHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = CurrentChangingEventHandler.IID,
                Vtable = CurrentChangingEventHandler.AbiToProjectionVftablePtr
            };
        }
    }
    internal static class IBindingMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Data.IValueConverter get_Converter(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[16](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Microsoft.UI.Xaml.Data.IValueConverter>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Microsoft.UI.Xaml.Data.IValueConverter>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Converter(IObjectReference _obj, global::Microsoft.UI.Xaml.Data.IValueConverter value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::Microsoft.UI.Xaml.Data.IValueConverter>.CreateMarshaler2(value, global::ABI.Microsoft.UI.Xaml.Data.IValueConverterMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[17](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe string get_ConverterLanguage(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[20](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ConverterLanguage(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[21](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe object get_ConverterParameter(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[18](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ConverterParameter(IObjectReference _obj, object value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInspectable<object>.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[19](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe string get_ElementName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ElementName(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[15](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe object get_FallbackValue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[22](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_FallbackValue(IObjectReference _obj, object value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInspectable<object>.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[23](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Data.BindingMode get_Mode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Data.BindingMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Data.BindingMode*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Mode(IObjectReference _obj, global::Microsoft.UI.Xaml.Data.BindingMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Data.BindingMode, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.PropertyPath get_Path(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.PropertyPath.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.PropertyPath.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Path(IObjectReference _obj, global::Microsoft.UI.Xaml.PropertyPath value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.PropertyPath.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Data.RelativeSource get_RelativeSource(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Data.RelativeSource.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Data.RelativeSource.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_RelativeSource(IObjectReference _obj, global::Microsoft.UI.Xaml.Data.RelativeSource value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Data.RelativeSource.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[13](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe object get_Source(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Source(IObjectReference _obj, object value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInspectable<object>.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe object get_TargetNullValue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[24](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_TargetNullValue(IObjectReference _obj, object value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInspectable<object>.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[25](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Data.UpdateSourceTrigger get_UpdateSourceTrigger(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Data.UpdateSourceTrigger __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Data.UpdateSourceTrigger*, int>**)ThisPtr)[26](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_UpdateSourceTrigger(IObjectReference _obj, global::Microsoft.UI.Xaml.Data.UpdateSourceTrigger value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Data.UpdateSourceTrigger, int>**)ThisPtr)[27](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE8, 0xA0, 0x1E, 0x50, 0xD4, 0xED, 0xDE, 0x59, 0x88, 0x45, 0x76, 0xAF, 0x2E, 0xAB, 0xBE, 0x0 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("501EA0E8-EDD4-59DE-8845-76AF2EABBE00")]
    internal interface IBinding : global::Microsoft.UI.Xaml.Data.IBinding
    {
    }
    internal static class IBindingBaseMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x41, 0xD1, 0xDD, 0x91, 0x44, 0x59, 0xEF, 0x50, 0xB8, 0x5E, 0x21, 0x8E, 0x46, 0x3F, 0x7A, 0x73 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("91DDD141-5944-50EF-B85E-218E463F7A73")]
    internal interface IBindingBase : global::Microsoft.UI.Xaml.Data.IBindingBase
    {
    }
    internal static class IBindingBaseFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Data.BindingBase CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Data.BindingBase.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Data.BindingBase.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC5, 0x66, 0xA8, 0xC8, 0xF3, 0xF6, 0x7A, 0x5F, 0x95, 0x92, 0xD3, 0x85, 0xAF, 0x48, 0xBD, 0x8F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C8A866C5-F6F3-5F7A-9592-D385AF48BD8F")]
    internal interface IBindingBaseFactory : global::Microsoft.UI.Xaml.Data.IBindingBaseFactory
    {
    }
    internal static class IBindingExpressionMethods
    {


        internal static unsafe void UpdateSource(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[8](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }
        internal static unsafe object get_DataItem(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Data.Binding get_ParentBinding(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Data.Binding.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Data.Binding.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x16, 0x39, 0x2, 0x4C, 0xBC, 0x37, 0x7, 0x5B, 0xBC, 0x9D, 0x15, 0xC5, 0x47, 0xBD, 0x9B, 0x26 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4C023916-37BC-5B07-BC9D-15C547BD9B26")]
    internal interface IBindingExpression : global::Microsoft.UI.Xaml.Data.IBindingExpression
    {
    }
    internal static class IBindingExpressionBaseMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA9, 0xE5, 0x25, 0x88, 0xA3, 0xD9, 0x87, 0x5E, 0xBC, 0xD8, 0xC6, 0x31, 0x33, 0xD2, 0x90, 0x29 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8825E5A9-D9A3-5E87-BCD8-C63133D29029")]
    internal interface IBindingExpressionBase : global::Microsoft.UI.Xaml.Data.IBindingExpressionBase
    {
    }
    internal static class IBindingExpressionBaseFactoryMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB9, 0x43, 0xD6, 0x41, 0x29, 0x26, 0x51, 0x54, 0xA7, 0x16, 0x59, 0x6C, 0x8, 0x48, 0xB5, 0xDC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("41D643B9-2629-5451-A716-596C0848B5DC")]
    internal interface IBindingExpressionBaseFactory : global::Microsoft.UI.Xaml.Data.IBindingExpressionBaseFactory
    {
    }
    internal static class IBindingExpressionFactoryMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x14, 0xAE, 0x6C, 0x8, 0xA1, 0x81, 0x8B, 0x58, 0xB6, 0x19, 0x5, 0xEE, 0x84, 0xC0, 0xF0, 0x89 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("086CAE14-81A1-588B-B619-05EE84C0F089")]
    internal interface IBindingExpressionFactory : global::Microsoft.UI.Xaml.Data.IBindingExpressionFactory
    {
    }
    internal static class IBindingFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Data.Binding CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Data.Binding.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Data.Binding.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x49, 0xE7, 0x2D, 0xCB, 0x15, 0xB1, 0x67, 0x5F, 0xB6, 0x4A, 0x79, 0x7D, 0x54, 0x88, 0x5D, 0x5C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("CB2DE749-B115-5F67-B64A-797D54885D5C")]
    internal interface IBindingFactory : global::Microsoft.UI.Xaml.Data.IBindingFactory
    {
    }
    internal static class IBindingOperationsMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x95, 0x9B, 0x31, 0x9A, 0xBE, 0xAA, 0x75, 0x50, 0xB2, 0x27, 0x8E, 0xB0, 0x7E, 0x44, 0x3D, 0x8B };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("9A319B95-AABE-5075-B227-8EB07E443D8B")]
    internal interface IBindingOperations : global::Microsoft.UI.Xaml.Data.IBindingOperations
    {
    }
    internal static class IBindingOperationsStaticsMethods
    {


        internal static unsafe void SetBinding(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject target, global::Microsoft.UI.Xaml.DependencyProperty dp, global::Microsoft.UI.Xaml.Data.BindingBase binding)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __target = default;
            ObjectReferenceValue __dp = default;
            ObjectReferenceValue __binding = default;
            try
            {
                __target = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(target);
                __dp = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(dp);
                __binding = global::ABI.Microsoft.UI.Xaml.Data.BindingBase.CreateMarshaler2(binding);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__target), MarshalInspectable<object>.GetAbi(__dp), MarshalInspectable<object>.GetAbi(__binding)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__target);
                MarshalInspectable<object>.DisposeMarshaler(__dp);
                MarshalInspectable<object>.DisposeMarshaler(__binding);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD3, 0xDB, 0x1B, 0x1E, 0xA5, 0xFC, 0x85, 0x5C, 0xB8, 0x7D, 0xB5, 0x4, 0xCD, 0x8F, 0xA8, 0xAC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("1E1BDBD3-FCA5-5C85-B87D-B504CD8FA8AC")]
    internal interface IBindingOperationsStatics : global::Microsoft.UI.Xaml.Data.IBindingOperationsStatics
    {
    }
    public static class ICollectionViewMethods
    {

        private volatile static bool _RcwHelperInitialized;
        public static bool InitRcwHelper()
        {
            if (_RcwHelperInitialized)
            {
                return true;
            }

            global::WinRT.ComWrappersSupport.RegisterTypedRcwFactory(typeof(global::Microsoft.UI.Xaml.Data.ICollectionView), ICollectionViewImpl.CreateRcw);
            _RcwHelperInitialized = true;
            return true;
        }


        public static unsafe bool MoveCurrentTo(IObjectReference _obj, object item)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __item = default;
            byte __retval = default;
            try
            {
                __item = MarshalInspectable<object>.CreateMarshaler2(item);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte*, int>**)ThisPtr)[16](ThisPtr, MarshalInspectable<object>.GetAbi(__item), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__item);
            }
        }

        public static unsafe bool MoveCurrentToPosition(IObjectReference _obj, int index)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, byte*, int>**)ThisPtr)[17](ThisPtr, index, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        public static unsafe bool MoveCurrentToFirst(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[18](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        public static unsafe bool MoveCurrentToLast(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[19](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        public static unsafe bool MoveCurrentToNext(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[20](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        public static unsafe bool MoveCurrentToPrevious(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[21](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        public static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.UI.Xaml.Data.LoadMoreItemsResult> LoadMoreItemsAsync(IObjectReference _obj, uint count)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint, IntPtr*, int>**)ThisPtr)[22](ThisPtr, count, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_UI_Xaml_Data_LoadMoreItemsResult.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.UI.Xaml.Data.LoadMoreItemsResult>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.UI.Xaml.Data.LoadMoreItemsResult>>.DisposeAbi(__retval);
            }
        }
        public static unsafe global::Windows.Foundation.Collections.IObservableVector<object> get_CollectionGroups(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IObservableVector_1_object.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.Collections.IObservableVector<object>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.Collections.IObservableVector<object>>.DisposeAbi(__retval);
            }
        }

        public static unsafe object get_CurrentItem(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }

        public static unsafe int get_CurrentPosition(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        public static unsafe bool get_HasMoreItems(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        public static unsafe bool get_IsCurrentAfterLast(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        public static unsafe bool get_IsCurrentBeforeFirst(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _CurrentChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> MakeCurrentChangedTable()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_EventHandler_1_object.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref _CurrentChanged_, new(), null);
            return _CurrentChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _CurrentChanged => _CurrentChanged_ ?? MakeCurrentChangedTable();

        public static unsafe (Action<global::System.EventHandler<object>>, Action<global::System.EventHandler<object>>) Get_CurrentChanged(IObjectReference _obj, object _thisObj)
        {
            var eventSource = Get_CurrentChanged2(_obj, _thisObj);
            return (eventSource.Subscribe, eventSource.Unsubscribe);
        }

        public static unsafe global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>> Get_CurrentChanged2(IObjectReference _obj, object _thisObj)
        {
            return _CurrentChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return  new global::ABI.WinRT.Interop.EventHandlerEventSource<object>(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[12],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[13],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler>> _CurrentChanging_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler>> MakeCurrentChangingTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _CurrentChanging_, new(), null);
            return _CurrentChanging_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler>> _CurrentChanging => _CurrentChanging_ ?? MakeCurrentChangingTable();

        public static unsafe (Action<global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler>, Action<global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler>) Get_CurrentChanging(IObjectReference _obj, object _thisObj)
        {
            var eventSource = Get_CurrentChanging2(_obj, _thisObj);
            return (eventSource.Subscribe, eventSource.Unsubscribe);
        }

        public static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler> Get_CurrentChanging2(IObjectReference _obj, object _thisObj)
        {
            return _CurrentChanging.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_Data_CurrentChangingEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[14],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[15],
                1);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD8, 0x90, 0xBB, 0xF8, 0x8, 0xE0, 0x65, 0x5D, 0x8C, 0x97, 0x7B, 0xB7, 0x90, 0xA4, 0x23, 0xC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => ICollectionView.AbiToProjectionVftablePtr;

    }

    internal sealed class ICollectionViewImpl : global::Microsoft.UI.Xaml.Data.ICollectionView, IWinRTObject
    {
        private IObjectReference _inner;

        internal ICollectionViewImpl(IObjectReference _inner)
        {
            this._inner = _inner;
        }

        public static ICollectionViewImpl CreateRcw(IInspectable obj) => new(obj.ObjRef);


        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Data_ICollectionView;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Data_ICollectionView()
        {

            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Data_ICollectionView, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(ICollectionViewMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Data_ICollectionView;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Data_ICollectionView => ___objRef_global__Microsoft_UI_Xaml_Data_ICollectionView ?? Make___objRef_global__Microsoft_UI_Xaml_Data_ICollectionView();

        private volatile IObjectReference ___objRef_global__Windows_Foundation_Collections_IObservableVector_object_;
        private IObjectReference Make___objRef_global__Windows_Foundation_Collections_IObservableVector_object_()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IObservableVector_1_object.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Windows_Foundation_Collections_IObservableVector_object_, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Windows.Foundation.Collections.IObservableVectorMethods<object>.IID), null);
            return ___objRef_global__Windows_Foundation_Collections_IObservableVector_object_;
        }
        private IObjectReference _objRef_global__Windows_Foundation_Collections_IObservableVector_object_ => ___objRef_global__Windows_Foundation_Collections_IObservableVector_object_ ?? Make___objRef_global__Windows_Foundation_Collections_IObservableVector_object_();

        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IList_object_;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IList_object_()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_object.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IList_object_, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IListMethods<object>.IID), null);
            return ___objRef_global__System_Collections_Generic_IList_object_;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IList_object_ => ___objRef_global__System_Collections_Generic_IList_object_ ?? Make___objRef_global__System_Collections_Generic_IList_object_();

        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IEnumerable_object_;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IEnumerable_object_()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_object.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IEnumerable_object_, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IEnumerableMethods<object>.IID), null);
            return ___objRef_global__System_Collections_Generic_IEnumerable_object_;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IEnumerable_object_ => ___objRef_global__System_Collections_Generic_IEnumerable_object_ ?? Make___objRef_global__System_Collections_Generic_IEnumerable_object_();


        IObjectReference IWinRTObject.NativeObject => _inner;

        bool IWinRTObject.HasUnwrappableNativeObject => true;

        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null);
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null);
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();


        public bool MoveCurrentTo(object item) => global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.MoveCurrentTo(_objRef_global__Microsoft_UI_Xaml_Data_ICollectionView, item);

        public bool MoveCurrentToPosition(int index) => global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.MoveCurrentToPosition(_objRef_global__Microsoft_UI_Xaml_Data_ICollectionView, index);

        public bool MoveCurrentToFirst() => global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.MoveCurrentToFirst(_objRef_global__Microsoft_UI_Xaml_Data_ICollectionView);

        public bool MoveCurrentToLast() => global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.MoveCurrentToLast(_objRef_global__Microsoft_UI_Xaml_Data_ICollectionView);

        public bool MoveCurrentToNext() => global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.MoveCurrentToNext(_objRef_global__Microsoft_UI_Xaml_Data_ICollectionView);

        public bool MoveCurrentToPrevious() => global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.MoveCurrentToPrevious(_objRef_global__Microsoft_UI_Xaml_Data_ICollectionView);

        public global::Windows.Foundation.IAsyncOperation<global::Microsoft.UI.Xaml.Data.LoadMoreItemsResult> LoadMoreItemsAsync(uint count) => global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.LoadMoreItemsAsync(_objRef_global__Microsoft_UI_Xaml_Data_ICollectionView, count);

        public event global::System.EventHandler<object> CurrentChanged
        {
            add => global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.Get_CurrentChanged2(_objRef_global__Microsoft_UI_Xaml_Data_ICollectionView, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.Get_CurrentChanged2(_objRef_global__Microsoft_UI_Xaml_Data_ICollectionView, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler CurrentChanging
        {
            add => global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.Get_CurrentChanging2(_objRef_global__Microsoft_UI_Xaml_Data_ICollectionView, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.Get_CurrentChanging2(_objRef_global__Microsoft_UI_Xaml_Data_ICollectionView, (IWinRTObject)this).Unsubscribe(value);
        }

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
        public event global::Windows.Foundation.Collections.VectorChangedEventHandler<object> VectorChanged
        {
            add => global::ABI.Windows.Foundation.Collections.IObservableVectorMethods<object>.Get_VectorChanged2(_objRef_global__Windows_Foundation_Collections_IObservableVector_object_, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Windows.Foundation.Collections.IObservableVectorMethods<object>.Get_VectorChanged2(_objRef_global__Windows_Foundation_Collections_IObservableVector_object_, (IWinRTObject)this).Unsubscribe(value);
        }

        public int Count => global::ABI.System.Collections.Generic.IListMethods<object>.get_Count(_objRef_global__System_Collections_Generic_IList_object_);
        public bool IsReadOnly => global::ABI.System.Collections.Generic.IListMethods<object>.get_IsReadOnly(_objRef_global__System_Collections_Generic_IList_object_);
        [global::System.Runtime.CompilerServices.IndexerName("ListItem")]
        public object this[int index] 
        {
            get => global::ABI.System.Collections.Generic.IListMethods<object>.Indexer_Get(_objRef_global__System_Collections_Generic_IList_object_, index);
            set => global::ABI.System.Collections.Generic.IListMethods<object>.Indexer_Set(_objRef_global__System_Collections_Generic_IList_object_, index, value);
        }
        public int IndexOf(object item) => global::ABI.System.Collections.Generic.IListMethods<object>.IndexOf(_objRef_global__System_Collections_Generic_IList_object_, item);
        public void Insert(int index, object item) => global::ABI.System.Collections.Generic.IListMethods<object>.Insert(_objRef_global__System_Collections_Generic_IList_object_, index, item);
        public void RemoveAt(int index) => global::ABI.System.Collections.Generic.IListMethods<object>.RemoveAt(_objRef_global__System_Collections_Generic_IList_object_, index);
        public void Add(object item) => global::ABI.System.Collections.Generic.IListMethods<object>.Add(_objRef_global__System_Collections_Generic_IList_object_, item);
        public void Clear() => global::ABI.System.Collections.Generic.IListMethods<object>.Clear(_objRef_global__System_Collections_Generic_IList_object_);
        public bool Contains(object item) => global::ABI.System.Collections.Generic.IListMethods<object>.Contains(_objRef_global__System_Collections_Generic_IList_object_, item);
        public void CopyTo(object[] array, int arrayIndex) => global::ABI.System.Collections.Generic.IListMethods<object>.CopyTo(_objRef_global__System_Collections_Generic_IList_object_, array, arrayIndex);
        public bool Remove(object item) => global::ABI.System.Collections.Generic.IListMethods<object>.Remove(_objRef_global__System_Collections_Generic_IList_object_, item);

        public IEnumerator<object> GetEnumerator() => global::ABI.System.Collections.Generic.IEnumerableMethods<object>.GetEnumerator(_objRef_global__System_Collections_Generic_IEnumerable_object_);

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public global::Windows.Foundation.Collections.IObservableVector<object> CollectionGroups => global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.get_CollectionGroups(_objRef_global__Microsoft_UI_Xaml_Data_ICollectionView);

        public object CurrentItem => global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.get_CurrentItem(_objRef_global__Microsoft_UI_Xaml_Data_ICollectionView);

        public int CurrentPosition => global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.get_CurrentPosition(_objRef_global__Microsoft_UI_Xaml_Data_ICollectionView);

        public bool HasMoreItems => global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.get_HasMoreItems(_objRef_global__Microsoft_UI_Xaml_Data_ICollectionView);

        public bool IsCurrentAfterLast => global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.get_IsCurrentAfterLast(_objRef_global__Microsoft_UI_Xaml_Data_ICollectionView);

        public bool IsCurrentBeforeFirst => global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.get_IsCurrentBeforeFirst(_objRef_global__Microsoft_UI_Xaml_Data_ICollectionView);

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("F8BB90D8-E008-5D65-8C97-7BB790A4230C")]
    internal unsafe interface ICollectionView : global::Microsoft.UI.Xaml.Data.ICollectionView
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe ICollectionView()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(ICollectionView), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 17);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_CurrentItem_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, int*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_CurrentPosition_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_get_IsCurrentAfterLast_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_get_IsCurrentBeforeFirst_3;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[10] = &Do_Abi_get_CollectionGroups_4;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[11] = &Do_Abi_get_HasMoreItems_5;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>*)AbiToProjectionVftablePtr)[12] = &Do_Abi_add_CurrentChanged_6;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>*)AbiToProjectionVftablePtr)[13] = &Do_Abi_remove_CurrentChanged_7;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>*)AbiToProjectionVftablePtr)[14] = &Do_Abi_add_CurrentChanging_8;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>*)AbiToProjectionVftablePtr)[15] = &Do_Abi_remove_CurrentChanging_9;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[16] = &Do_Abi_MoveCurrentTo_10;
            ((delegate* unmanaged[Stdcall]<IntPtr, int, byte*, int>*)AbiToProjectionVftablePtr)[17] = &Do_Abi_MoveCurrentToPosition_11;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[18] = &Do_Abi_MoveCurrentToFirst_12;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[19] = &Do_Abi_MoveCurrentToLast_13;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[20] = &Do_Abi_MoveCurrentToNext_14;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[21] = &Do_Abi_MoveCurrentToPrevious_15;
            ((delegate* unmanaged[Stdcall]<IntPtr, uint, IntPtr*, int>*)AbiToProjectionVftablePtr)[22] = &Do_Abi_LoadMoreItemsAsync_16;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_MoveCurrentTo_10(IntPtr thisPtr, IntPtr item, byte* result)
        {

            bool __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ICollectionView>(thisPtr).MoveCurrentTo(MarshalInspectable<object>.FromAbi(item));
                *result = (byte)(__result ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_MoveCurrentToPosition_11(IntPtr thisPtr, int index, byte* result)
        {

            bool __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ICollectionView>(thisPtr).MoveCurrentToPosition(index);
                *result = (byte)(__result ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_MoveCurrentToFirst_12(IntPtr thisPtr, byte* result)
        {

            bool __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ICollectionView>(thisPtr).MoveCurrentToFirst();
                *result = (byte)(__result ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_MoveCurrentToLast_13(IntPtr thisPtr, byte* result)
        {

            bool __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ICollectionView>(thisPtr).MoveCurrentToLast();
                *result = (byte)(__result ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_MoveCurrentToNext_14(IntPtr thisPtr, byte* result)
        {

            bool __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ICollectionView>(thisPtr).MoveCurrentToNext();
                *result = (byte)(__result ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_MoveCurrentToPrevious_15(IntPtr thisPtr, byte* result)
        {

            bool __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ICollectionView>(thisPtr).MoveCurrentToPrevious();
                *result = (byte)(__result ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_LoadMoreItemsAsync_16(IntPtr thisPtr, uint count, IntPtr* operation)
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_UI_Xaml_Data_LoadMoreItemsResult.EnsureInitialized();

            global::Windows.Foundation.IAsyncOperation<global::Microsoft.UI.Xaml.Data.LoadMoreItemsResult> __operation = default;

            *operation = default;

            try
            {
                __operation = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ICollectionView>(thisPtr).LoadMoreItemsAsync(count);
                *operation = MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.UI.Xaml.Data.LoadMoreItemsResult>>.FromManaged(__operation);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_CollectionGroups_4(IntPtr thisPtr, IntPtr* value)
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IObservableVector_1_object.EnsureInitialized();

            global::Windows.Foundation.Collections.IObservableVector<object> __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ICollectionView>(thisPtr).CollectionGroups;
                *value = MarshalInterface<global::Windows.Foundation.Collections.IObservableVector<object>>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_CurrentItem_0(IntPtr thisPtr, IntPtr* value)
        {

            object __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ICollectionView>(thisPtr).CurrentItem;
                *value = MarshalInspectable<object>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_CurrentPosition_1(IntPtr thisPtr, int* value)
        {

            int __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ICollectionView>(thisPtr).CurrentPosition;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_HasMoreItems_5(IntPtr thisPtr, byte* value)
        {

            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ICollectionView>(thisPtr).HasMoreItems;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_IsCurrentAfterLast_2(IntPtr thisPtr, byte* value)
        {

            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ICollectionView>(thisPtr).IsCurrentAfterLast;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_IsCurrentBeforeFirst_3(IntPtr thisPtr, byte* value)
        {

            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ICollectionView>(thisPtr).IsCurrentBeforeFirst;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Data.ICollectionView, global::WinRT.EventRegistrationTokenTable<global::System.EventHandler<object>>> _CurrentChanged_tokenTables;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Data.ICollectionView, global::WinRT.EventRegistrationTokenTable<global::System.EventHandler<object>>> MakeCurrentChangedTable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _CurrentChanged_tokenTables, new(), null);
            return _CurrentChanged_tokenTables;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Data.ICollectionView, global::WinRT.EventRegistrationTokenTable<global::System.EventHandler<object>>> _CurrentChanged_TokenTables => _CurrentChanged_tokenTables ?? MakeCurrentChangedTable();

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_add_CurrentChanged_6(IntPtr thisPtr, IntPtr handler, global::WinRT.EventRegistrationToken* token)
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_EventHandler_1_object.EnsureInitialized();
            *token = default;
            try
            {
                var __this = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ICollectionView>(thisPtr);
                var __handler = global::ABI.System.EventHandler<object>.FromAbi(handler);
                *token = _CurrentChanged_TokenTables.GetOrCreateValue(__this).AddEventHandler(__handler);
                __this.CurrentChanged += __handler;
                return 0;
            }
            catch (Exception __ex)
            {
                return __ex.HResult;
            }
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_remove_CurrentChanged_7(IntPtr thisPtr, global::WinRT.EventRegistrationToken token)
        {
            try
            {
                var __this = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ICollectionView>(thisPtr);
                if(__this != null && _CurrentChanged_TokenTables.TryGetValue(__this, out var __table) && __table.RemoveEventHandler(token, out var __handler))
                {
                    __this.CurrentChanged -= __handler;
                }
                return 0;
            }
            catch (Exception __ex)
            {
                return __ex.HResult;
            }
        }
        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Data.ICollectionView, global::WinRT.EventRegistrationTokenTable<global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler>> _CurrentChanging_tokenTables;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Data.ICollectionView, global::WinRT.EventRegistrationTokenTable<global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler>> MakeCurrentChangingTable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _CurrentChanging_tokenTables, new(), null);
            return _CurrentChanging_tokenTables;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Data.ICollectionView, global::WinRT.EventRegistrationTokenTable<global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler>> _CurrentChanging_TokenTables => _CurrentChanging_tokenTables ?? MakeCurrentChangingTable();

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_add_CurrentChanging_8(IntPtr thisPtr, IntPtr handler, global::WinRT.EventRegistrationToken* token)
        {

            *token = default;
            try
            {
                var __this = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ICollectionView>(thisPtr);
                var __handler = CurrentChangingEventHandler.FromAbi(handler);
                *token = _CurrentChanging_TokenTables.GetOrCreateValue(__this).AddEventHandler(__handler);
                __this.CurrentChanging += __handler;
                return 0;
            }
            catch (Exception __ex)
            {
                return __ex.HResult;
            }
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_remove_CurrentChanging_9(IntPtr thisPtr, global::WinRT.EventRegistrationToken token)
        {
            try
            {
                var __this = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ICollectionView>(thisPtr);
                if(__this != null && _CurrentChanging_TokenTables.TryGetValue(__this, out var __table) && __table.RemoveEventHandler(token, out var __handler))
                {
                    __this.CurrentChanging -= __handler;
                }
                return 0;
            }
            catch (Exception __ex)
            {
                return __ex.HResult;
            }
        }

        unsafe bool global::Microsoft.UI.Xaml.Data.ICollectionView.MoveCurrentTo(object item)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ICollectionView).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.MoveCurrentTo(_obj, item);
        }

        unsafe bool global::Microsoft.UI.Xaml.Data.ICollectionView.MoveCurrentToPosition(int index)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ICollectionView).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.MoveCurrentToPosition(_obj, index);
        }

        unsafe bool global::Microsoft.UI.Xaml.Data.ICollectionView.MoveCurrentToFirst()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ICollectionView).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.MoveCurrentToFirst(_obj);
        }

        unsafe bool global::Microsoft.UI.Xaml.Data.ICollectionView.MoveCurrentToLast()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ICollectionView).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.MoveCurrentToLast(_obj);
        }

        unsafe bool global::Microsoft.UI.Xaml.Data.ICollectionView.MoveCurrentToNext()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ICollectionView).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.MoveCurrentToNext(_obj);
        }

        unsafe bool global::Microsoft.UI.Xaml.Data.ICollectionView.MoveCurrentToPrevious()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ICollectionView).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.MoveCurrentToPrevious(_obj);
        }

        unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.UI.Xaml.Data.LoadMoreItemsResult> global::Microsoft.UI.Xaml.Data.ICollectionView.LoadMoreItemsAsync(uint count)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ICollectionView).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.LoadMoreItemsAsync(_obj, count);
        }

        unsafe global::Windows.Foundation.Collections.IObservableVector<object> global::Microsoft.UI.Xaml.Data.ICollectionView.CollectionGroups
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ICollectionView).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.get_CollectionGroups(_obj);
            }
        }

        unsafe object global::Microsoft.UI.Xaml.Data.ICollectionView.CurrentItem
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ICollectionView).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.get_CurrentItem(_obj);
            }
        }

        unsafe int global::Microsoft.UI.Xaml.Data.ICollectionView.CurrentPosition
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ICollectionView).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.get_CurrentPosition(_obj);
            }
        }

        unsafe bool global::Microsoft.UI.Xaml.Data.ICollectionView.HasMoreItems
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ICollectionView).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.get_HasMoreItems(_obj);
            }
        }

        unsafe bool global::Microsoft.UI.Xaml.Data.ICollectionView.IsCurrentAfterLast
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ICollectionView).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.get_IsCurrentAfterLast(_obj);
            }
        }

        unsafe bool global::Microsoft.UI.Xaml.Data.ICollectionView.IsCurrentBeforeFirst
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ICollectionView).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.get_IsCurrentBeforeFirst(_obj);
            }
        }

        event global::System.EventHandler<object> global::Microsoft.UI.Xaml.Data.ICollectionView.CurrentChanged
        {
            add 
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ICollectionView).TypeHandle));
                global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.Get_CurrentChanged2(_obj, (IWinRTObject)this).Subscribe(value);
            }
            remove
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ICollectionView).TypeHandle));
                global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.Get_CurrentChanged2(_obj, (IWinRTObject)this).Unsubscribe(value);
            }
        }

        event global::Microsoft.UI.Xaml.Data.CurrentChangingEventHandler global::Microsoft.UI.Xaml.Data.ICollectionView.CurrentChanging
        {
            add 
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ICollectionView).TypeHandle));
                global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.Get_CurrentChanging2(_obj, (IWinRTObject)this).Subscribe(value);
            }
            remove
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ICollectionView).TypeHandle));
                global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.Get_CurrentChanging2(_obj, (IWinRTObject)this).Unsubscribe(value);
            }
        }

        int global::System.Collections.Generic.ICollection<object>.Count => ((global::System.Collections.Generic.IList<object>)(IWinRTObject)this).Count;
        bool global::System.Collections.Generic.ICollection<object>.IsReadOnly => ((global::System.Collections.Generic.IList<object>)(IWinRTObject)this).IsReadOnly;

        object global::System.Collections.Generic.IList<object>.this[int index] 
        {
            get => ((global::System.Collections.Generic.IList<object>)(IWinRTObject)this)[index];
            set => ((global::System.Collections.Generic.IList<object>)(IWinRTObject)this)[index] = value;
        }
        int global::System.Collections.Generic.IList<object>.IndexOf(object item) => ((global::System.Collections.Generic.IList<object>)(IWinRTObject)this).IndexOf(item);
        void global::System.Collections.Generic.IList<object>.Insert(int index, object item) => ((global::System.Collections.Generic.IList<object>)(IWinRTObject)this).Insert(index, item);
        void global::System.Collections.Generic.IList<object>.RemoveAt(int index) => ((global::System.Collections.Generic.IList<object>)(IWinRTObject)this).RemoveAt(index);
        void global::System.Collections.Generic.ICollection<object>.Add(object item) => ((global::System.Collections.Generic.IList<object>)(IWinRTObject)this).Add(item);
        void global::System.Collections.Generic.ICollection<object>.Clear() => ((global::System.Collections.Generic.IList<object>)(IWinRTObject)this).Clear();
        bool global::System.Collections.Generic.ICollection<object>.Contains(object item) => ((global::System.Collections.Generic.IList<object>)(IWinRTObject)this).Contains(item);
        void global::System.Collections.Generic.ICollection<object>.CopyTo(object[] array, int arrayIndex) => ((global::System.Collections.Generic.IList<object>)(IWinRTObject)this).CopyTo(array, arrayIndex);
        bool global::System.Collections.Generic.ICollection<object>.Remove(object item) => ((global::System.Collections.Generic.IList<object>)(IWinRTObject)this).Remove(item);

        IEnumerator<object> IEnumerable<object>.GetEnumerator() => ((global::System.Collections.Generic.IList<object>)(IWinRTObject)this).GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        event global::Windows.Foundation.Collections.VectorChangedEventHandler<object> global::Windows.Foundation.Collections.IObservableVector<object>.VectorChanged
        {
            add => ((global::Windows.Foundation.Collections.IObservableVector<object>)(IWinRTObject)this).VectorChanged += value;
            remove => ((global::Windows.Foundation.Collections.IObservableVector<object>)(IWinRTObject)this).VectorChanged -= value;
        }
    }

    public static class ICollectionViewFactoryMethods
    {


        public static unsafe global::Microsoft.UI.Xaml.Data.ICollectionView CreateView(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.InitRcwHelper();
                return MarshalInterface<global::Microsoft.UI.Xaml.Data.ICollectionView>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Microsoft.UI.Xaml.Data.ICollectionView>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x95, 0xF7, 0x71, 0xD9, 0x28, 0x57, 0xEF, 0x5B, 0x96, 0x2, 0x43, 0xF2, 0xC4, 0x25, 0xE, 0x56 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => ICollectionViewFactory.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("D971F795-5728-5BEF-9602-43F2C4250E56")]
    internal unsafe interface ICollectionViewFactory : global::Microsoft.UI.Xaml.Data.ICollectionViewFactory
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe ICollectionViewFactory()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(ICollectionViewFactory), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_CreateView_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_CreateView_0(IntPtr thisPtr, IntPtr* result)
        {

            global::Microsoft.UI.Xaml.Data.ICollectionView __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ICollectionViewFactory>(thisPtr).CreateView();
                *result = MarshalInterface<global::Microsoft.UI.Xaml.Data.ICollectionView>.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Microsoft.UI.Xaml.Data.ICollectionView global::Microsoft.UI.Xaml.Data.ICollectionViewFactory.CreateView()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ICollectionViewFactory).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewFactoryMethods.CreateView(_obj);
        }
    }

    public static class ICollectionViewGroupMethods
    {

        public static unsafe object get_Group(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }

        public static unsafe global::Windows.Foundation.Collections.IObservableVector<object> get_GroupItems(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IObservableVector_1_object.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.Collections.IObservableVector<object>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.Collections.IObservableVector<object>>.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA8, 0x8D, 0xA0, 0x96, 0x38, 0xBE, 0xE0, 0x5A, 0x90, 0x3D, 0x6F, 0xB6, 0x11, 0x1E, 0x61, 0xF5 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => ICollectionViewGroup.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("96A08DA8-BE38-5AE0-903D-6FB6111E61F5")]
    internal unsafe interface ICollectionViewGroup : global::Microsoft.UI.Xaml.Data.ICollectionViewGroup
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe ICollectionViewGroup()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(ICollectionViewGroup), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 2);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_Group_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_GroupItems_1;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_Group_0(IntPtr thisPtr, IntPtr* value)
        {

            object __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ICollectionViewGroup>(thisPtr).Group;
                *value = MarshalInspectable<object>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_GroupItems_1(IntPtr thisPtr, IntPtr* value)
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IObservableVector_1_object.EnsureInitialized();

            global::Windows.Foundation.Collections.IObservableVector<object> __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ICollectionViewGroup>(thisPtr).GroupItems;
                *value = MarshalInterface<global::Windows.Foundation.Collections.IObservableVector<object>>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe object global::Microsoft.UI.Xaml.Data.ICollectionViewGroup.Group
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ICollectionViewGroup).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewGroupMethods.get_Group(_obj);
            }
        }

        unsafe global::Windows.Foundation.Collections.IObservableVector<object> global::Microsoft.UI.Xaml.Data.ICollectionViewGroup.GroupItems
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ICollectionViewGroup).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewGroupMethods.get_GroupItems(_obj);
            }
        }
    }

    internal static class ICollectionViewSourceMethods
    {

        internal static unsafe bool get_IsSourceGrouped(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsSourceGrouped(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[10](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.PropertyPath get_ItemsPath(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.PropertyPath.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.PropertyPath.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ItemsPath(IObjectReference _obj, global::Microsoft.UI.Xaml.PropertyPath value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.PropertyPath.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[12](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe object get_Source(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Source(IObjectReference _obj, object value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInspectable<object>.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Data.ICollectionView get_View(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                global::ABI.Microsoft.UI.Xaml.Data.ICollectionViewMethods.InitRcwHelper();
                return MarshalInterface<global::Microsoft.UI.Xaml.Data.ICollectionView>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Microsoft.UI.Xaml.Data.ICollectionView>.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3A, 0x3B, 0x5E, 0xA4, 0x1E, 0xF3, 0xBB, 0x5B, 0x8A, 0x7C, 0x70, 0xCF, 0x5C, 0x64, 0xBC, 0x3F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A45E3B3A-F31E-5BBB-8A7C-70CF5C64BC3F")]
    internal interface ICollectionViewSource : global::Microsoft.UI.Xaml.Data.ICollectionViewSource
    {
    }
    internal static class ICollectionViewSourceStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IsSourceGroupedProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ItemsPathProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SourceProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ViewProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF, 0xF1, 0x82, 0xE2, 0xB1, 0xD4, 0x69, 0x57, 0x8A, 0x11, 0x30, 0xF7, 0x39, 0xE6, 0x11, 0x3B };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E282F10F-D4B1-5769-8A11-30F739E6113B")]
    internal interface ICollectionViewSourceStatics : global::Microsoft.UI.Xaml.Data.ICollectionViewSourceStatics
    {
    }
    internal static class ICurrentChangingEventArgsMethods
    {

        internal static unsafe bool get_Cancel(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Cancel(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsCancelable(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD6, 0x2E, 0xE4, 0x63, 0x4A, 0xE1, 0xEA, 0x51, 0x9C, 0xB1, 0x72, 0xF9, 0xC9, 0x7, 0xDC, 0x80 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("63E42ED6-E14A-51EA-9CB1-72F9C907DC80")]
    internal interface ICurrentChangingEventArgs : global::Microsoft.UI.Xaml.Data.ICurrentChangingEventArgs
    {
    }
    internal static class ICurrentChangingEventArgsFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Data.CurrentChangingEventArgs CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Data.CurrentChangingEventArgs.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Data.CurrentChangingEventArgs.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Data.CurrentChangingEventArgs CreateWithCancelableParameter(IObjectReference _obj, bool isCancelable, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[7](ThisPtr, (byte)(isCancelable ? 1 : 0), MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Data.CurrentChangingEventArgs.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Data.CurrentChangingEventArgs.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x8A, 0xF4, 0x70, 0x36, 0x2C, 0xAC, 0x52, 0x53, 0x8A, 0x4B, 0x6B, 0x97, 0x7A, 0x8, 0xE5, 0xF8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("3670F48A-AC2C-5352-8A4B-6B977A08E5F8")]
    internal interface ICurrentChangingEventArgsFactory : global::Microsoft.UI.Xaml.Data.ICurrentChangingEventArgsFactory
    {
    }
    public static class ICustomPropertyMethods
    {


        public static unsafe object GetValue(IObjectReference _obj, object target)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __target = default;
            IntPtr __retval = default;
            try
            {
                __target = MarshalInspectable<object>.CreateMarshaler2(target);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__target), &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__target);
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }

        public static unsafe void SetValue(IObjectReference _obj, object target, object value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __target = default;
            ObjectReferenceValue __value = default;
            try
            {
                __target = MarshalInspectable<object>.CreateMarshaler2(target);
                __value = MarshalInspectable<object>.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__target), MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__target);
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        public static unsafe object GetIndexedValue(IObjectReference _obj, object target, object index)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __target = default;
            ObjectReferenceValue __index = default;
            IntPtr __retval = default;
            try
            {
                __target = MarshalInspectable<object>.CreateMarshaler2(target);
                __index = MarshalInspectable<object>.CreateMarshaler2(index);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, MarshalInspectable<object>.GetAbi(__target), MarshalInspectable<object>.GetAbi(__index), &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__target);
                MarshalInspectable<object>.DisposeMarshaler(__index);
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }

        public static unsafe void SetIndexedValue(IObjectReference _obj, object target, object value, object index)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __target = default;
            ObjectReferenceValue __value = default;
            ObjectReferenceValue __index = default;
            try
            {
                __target = MarshalInspectable<object>.CreateMarshaler2(target);
                __value = MarshalInspectable<object>.CreateMarshaler2(value);
                __index = MarshalInspectable<object>.CreateMarshaler2(index);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalInspectable<object>.GetAbi(__target), MarshalInspectable<object>.GetAbi(__value), MarshalInspectable<object>.GetAbi(__index)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__target);
                MarshalInspectable<object>.DisposeMarshaler(__value);
                MarshalInspectable<object>.DisposeMarshaler(__index);
            }
        }
        public static unsafe bool get_CanRead(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        public static unsafe bool get_CanWrite(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        public static unsafe string get_Name(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        public static unsafe global::System.Type get_Type(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.Type __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.Type*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.Type.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.Type.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC0, 0x92, 0xDA, 0x30, 0xE8, 0x23, 0xA0, 0x42, 0xAE, 0x7C, 0x73, 0x4A, 0xE, 0x5D, 0x27, 0x82 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => ICustomProperty.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("30DA92C0-23E8-42A0-AE7C-734A0E5D2782")]
    internal unsafe interface ICustomProperty : global::Microsoft.UI.Xaml.Data.ICustomProperty
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe ICustomProperty()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(ICustomProperty), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 8);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.Type*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_Type_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_Name_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_GetValue_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_SetValue_3;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[10] = &Do_Abi_GetIndexedValue_4;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[11] = &Do_Abi_SetIndexedValue_5;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[12] = &Do_Abi_get_CanWrite_6;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[13] = &Do_Abi_get_CanRead_7;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetValue_2(IntPtr thisPtr, IntPtr target, IntPtr* result)
        {

            object __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ICustomProperty>(thisPtr).GetValue(MarshalInspectable<object>.FromAbi(target));
                *result = MarshalInspectable<object>.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_SetValue_3(IntPtr thisPtr, IntPtr target, IntPtr value)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ICustomProperty>(thisPtr).SetValue(MarshalInspectable<object>.FromAbi(target), MarshalInspectable<object>.FromAbi(value));

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetIndexedValue_4(IntPtr thisPtr, IntPtr target, IntPtr index, IntPtr* result)
        {

            object __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ICustomProperty>(thisPtr).GetIndexedValue(MarshalInspectable<object>.FromAbi(target), MarshalInspectable<object>.FromAbi(index));
                *result = MarshalInspectable<object>.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_SetIndexedValue_5(IntPtr thisPtr, IntPtr target, IntPtr value, IntPtr index)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ICustomProperty>(thisPtr).SetIndexedValue(MarshalInspectable<object>.FromAbi(target), MarshalInspectable<object>.FromAbi(value), MarshalInspectable<object>.FromAbi(index));

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_CanRead_7(IntPtr thisPtr, byte* value)
        {

            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ICustomProperty>(thisPtr).CanRead;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_CanWrite_6(IntPtr thisPtr, byte* value)
        {

            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ICustomProperty>(thisPtr).CanWrite;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_Name_1(IntPtr thisPtr, IntPtr* value)
        {

            string __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ICustomProperty>(thisPtr).Name;
                *value = MarshalString.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_Type_0(IntPtr thisPtr, global::ABI.System.Type* value)
        {

            global::System.Type __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ICustomProperty>(thisPtr).Type;
                *value = global::ABI.System.Type.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe object global::Microsoft.UI.Xaml.Data.ICustomProperty.GetValue(object target)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ICustomProperty).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Data.ICustomPropertyMethods.GetValue(_obj, target);
        }

        unsafe void global::Microsoft.UI.Xaml.Data.ICustomProperty.SetValue(object target, object value)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ICustomProperty).TypeHandle));
            global::ABI.Microsoft.UI.Xaml.Data.ICustomPropertyMethods.SetValue(_obj, target, value);
        }

        unsafe object global::Microsoft.UI.Xaml.Data.ICustomProperty.GetIndexedValue(object target, object index)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ICustomProperty).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Data.ICustomPropertyMethods.GetIndexedValue(_obj, target, index);
        }

        unsafe void global::Microsoft.UI.Xaml.Data.ICustomProperty.SetIndexedValue(object target, object value, object index)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ICustomProperty).TypeHandle));
            global::ABI.Microsoft.UI.Xaml.Data.ICustomPropertyMethods.SetIndexedValue(_obj, target, value, index);
        }

        unsafe bool global::Microsoft.UI.Xaml.Data.ICustomProperty.CanRead
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ICustomProperty).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Data.ICustomPropertyMethods.get_CanRead(_obj);
            }
        }

        unsafe bool global::Microsoft.UI.Xaml.Data.ICustomProperty.CanWrite
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ICustomProperty).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Data.ICustomPropertyMethods.get_CanWrite(_obj);
            }
        }

        unsafe string global::Microsoft.UI.Xaml.Data.ICustomProperty.Name
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ICustomProperty).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Data.ICustomPropertyMethods.get_Name(_obj);
            }
        }

        unsafe global::System.Type global::Microsoft.UI.Xaml.Data.ICustomProperty.Type
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ICustomProperty).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Data.ICustomPropertyMethods.get_Type(_obj);
            }
        }
    }

    public static class ICustomPropertyProviderMethods
    {


        public static unsafe global::Microsoft.UI.Xaml.Data.ICustomProperty GetCustomProperty(IObjectReference _obj, string name)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __name = new(name);
                fixed(void* ___name = __name)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __name), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return MarshalInterface<global::Microsoft.UI.Xaml.Data.ICustomProperty>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInterface<global::Microsoft.UI.Xaml.Data.ICustomProperty>.DisposeAbi(__retval);
            }
        }

        public static unsafe global::Microsoft.UI.Xaml.Data.ICustomProperty GetIndexedProperty(IObjectReference _obj, string name, global::System.Type type)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __name = new(name);
                global::ABI.System.Type.Pinnable __type = new(type);
                fixed(void* ___name = __name, ___type = __type)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::ABI.System.Type, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __name), global::ABI.System.Type.GetAbi(ref __type), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return MarshalInterface<global::Microsoft.UI.Xaml.Data.ICustomProperty>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInterface<global::Microsoft.UI.Xaml.Data.ICustomProperty>.DisposeAbi(__retval);
            }
        }

        public static unsafe string GetStringRepresentation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        public static unsafe global::System.Type get_Type(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.Type __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.Type*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.Type.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.Type.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x55, 0x57, 0x92, 0x7C, 0x48, 0x3E, 0xB4, 0x42, 0x86, 0x77, 0x76, 0x37, 0x22, 0x67, 0x3, 0x3F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => ICustomPropertyProvider.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("7C925755-3E48-42B4-8677-76372267033F")]
    internal unsafe interface ICustomPropertyProvider : global::Microsoft.UI.Xaml.Data.ICustomPropertyProvider
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe ICustomPropertyProvider()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(ICustomPropertyProvider), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 4);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_GetCustomProperty_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::ABI.System.Type, IntPtr*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_GetIndexedProperty_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_GetStringRepresentation_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.Type*, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_get_Type_3;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetCustomProperty_0(IntPtr thisPtr, IntPtr name, IntPtr* result)
        {

            global::Microsoft.UI.Xaml.Data.ICustomProperty __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ICustomPropertyProvider>(thisPtr).GetCustomProperty(MarshalString.FromAbi(name));
                *result = MarshalInterface<global::Microsoft.UI.Xaml.Data.ICustomProperty>.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetIndexedProperty_1(IntPtr thisPtr, IntPtr name, global::ABI.System.Type type, IntPtr* result)
        {

            global::Microsoft.UI.Xaml.Data.ICustomProperty __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ICustomPropertyProvider>(thisPtr).GetIndexedProperty(MarshalString.FromAbi(name), global::ABI.System.Type.FromAbi(type));
                *result = MarshalInterface<global::Microsoft.UI.Xaml.Data.ICustomProperty>.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetStringRepresentation_2(IntPtr thisPtr, IntPtr* result)
        {

            string __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ICustomPropertyProvider>(thisPtr).GetStringRepresentation();
                *result = MarshalString.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_Type_3(IntPtr thisPtr, global::ABI.System.Type* value)
        {

            global::System.Type __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ICustomPropertyProvider>(thisPtr).Type;
                *value = global::ABI.System.Type.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Microsoft.UI.Xaml.Data.ICustomProperty global::Microsoft.UI.Xaml.Data.ICustomPropertyProvider.GetCustomProperty(string name)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ICustomPropertyProvider).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Data.ICustomPropertyProviderMethods.GetCustomProperty(_obj, name);
        }

        unsafe global::Microsoft.UI.Xaml.Data.ICustomProperty global::Microsoft.UI.Xaml.Data.ICustomPropertyProvider.GetIndexedProperty(string name, global::System.Type type)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ICustomPropertyProvider).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Data.ICustomPropertyProviderMethods.GetIndexedProperty(_obj, name, type);
        }

        unsafe string global::Microsoft.UI.Xaml.Data.ICustomPropertyProvider.GetStringRepresentation()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ICustomPropertyProvider).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Data.ICustomPropertyProviderMethods.GetStringRepresentation(_obj);
        }

        unsafe global::System.Type global::Microsoft.UI.Xaml.Data.ICustomPropertyProvider.Type
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ICustomPropertyProvider).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Data.ICustomPropertyProviderMethods.get_Type(_obj);
            }
        }
    }

    internal static class IDataErrorsChangedEventArgsMethods
    {

        internal static unsafe string get_PropertyName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_PropertyName(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x64, 0xDD, 0x26, 0xD0, 0x26, 0x5F, 0x15, 0x5F, 0xA8, 0x6A, 0xD, 0xEC, 0x8A, 0x43, 0x17, 0x96 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D026DD64-5F26-5F15-A86A-0DEC8A431796")]
    internal interface IDataErrorsChangedEventArgs : global::Microsoft.UI.Xaml.Data.IDataErrorsChangedEventArgs
    {
    }
    internal static class IDataErrorsChangedEventArgsFactoryMethods
    {


        internal static unsafe global::System.ComponentModel.DataErrorsChangedEventArgs CreateInstance(IObjectReference _obj, string name)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __name = new(name);
                fixed(void* ___name = __name)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __name), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.System.ComponentModel.DataErrorsChangedEventArgs.FromAbi(__retval);
                }
            }
            finally
            {
                global::ABI.System.ComponentModel.DataErrorsChangedEventArgs.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x1E, 0xBD, 0xD0, 0x62, 0x5F, 0xB8, 0xCC, 0x5F, 0x84, 0x2A, 0x7C, 0xB0, 0xDD, 0xA3, 0x7F, 0xE5 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("62D0BD1E-B85F-5FCC-842A-7CB0DDA37FE5")]
    internal interface IDataErrorsChangedEventArgsFactory : global::Microsoft.UI.Xaml.Data.IDataErrorsChangedEventArgsFactory
    {
    }
    internal static class IItemIndexRangeMethods
    {

        internal static unsafe int get_FirstIndex(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe int get_LastIndex(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe uint get_Length(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x46, 0x98, 0xA0, 0xEB, 0x54, 0x25, 0x86, 0x5B, 0xAC, 0x17, 0x61, 0x4F, 0x5, 0x10, 0x5F, 0xA2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("EBA09846-2554-5B86-AC17-614F05105FA2")]
    internal interface IItemIndexRange : global::Microsoft.UI.Xaml.Data.IItemIndexRange
    {
    }
    internal static class IItemIndexRangeFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Data.ItemIndexRange CreateInstance(IObjectReference _obj, int firstIndex, uint length, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, uint, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, firstIndex, length, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Data.ItemIndexRange.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Data.ItemIndexRange.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x13, 0x32, 0xC7, 0x9F, 0xA0, 0xED, 0x38, 0x52, 0xAA, 0x2C, 0x40, 0x1C, 0x99, 0x21, 0xF0, 0xF9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("9FC73213-EDA0-5238-AA2C-401C9921F0F9")]
    internal interface IItemIndexRangeFactory : global::Microsoft.UI.Xaml.Data.IItemIndexRangeFactory
    {
    }
    public static class IItemsRangeInfoMethods
    {


        public static unsafe void RangesChanged(IObjectReference _obj, global::Microsoft.UI.Xaml.Data.ItemIndexRange visibleRange, global::System.Collections.Generic.IReadOnlyList<global::Microsoft.UI.Xaml.Data.ItemIndexRange> trackedItems)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __visibleRange = default;
            ObjectReferenceValue __trackedItems = default;
            try
            {
                __visibleRange = global::ABI.Microsoft.UI.Xaml.Data.ItemIndexRange.CreateMarshaler2(visibleRange);
                __trackedItems = MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.UI.Xaml.Data.ItemIndexRange>>.CreateMarshaler2(trackedItems, global::ABI.System.Collections.Generic.IReadOnlyListMethods<global::Microsoft.UI.Xaml.Data.ItemIndexRange>.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__visibleRange), MarshalInspectable<object>.GetAbi(__trackedItems)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__visibleRange);
                MarshalInspectable<object>.DisposeMarshaler(__trackedItems);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x8, 0x6D, 0x37, 0xB8, 0xFB, 0x85, 0x3B, 0x56, 0x82, 0x73, 0x39, 0xEF, 0x2D, 0x13, 0x82, 0x56 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IItemsRangeInfo.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("B8376D08-85FB-563B-8273-39EF2D138256")]
    internal unsafe interface IItemsRangeInfo : global::Microsoft.UI.Xaml.Data.IItemsRangeInfo
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IItemsRangeInfo()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IItemsRangeInfo), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_RangesChanged_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_RangesChanged_0(IntPtr thisPtr, IntPtr visibleRange, IntPtr trackedItems)
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Microsoft_UI_Xaml_Data_ItemIndexRange.EnsureInitialized();



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.IItemsRangeInfo>(thisPtr).RangesChanged(global::ABI.Microsoft.UI.Xaml.Data.ItemIndexRange.FromAbi(visibleRange), MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.UI.Xaml.Data.ItemIndexRange>>.FromAbi(trackedItems));

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe void global::Microsoft.UI.Xaml.Data.IItemsRangeInfo.RangesChanged(global::Microsoft.UI.Xaml.Data.ItemIndexRange visibleRange, global::System.Collections.Generic.IReadOnlyList<global::Microsoft.UI.Xaml.Data.ItemIndexRange> trackedItems)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.IItemsRangeInfo).TypeHandle));
            global::ABI.Microsoft.UI.Xaml.Data.IItemsRangeInfoMethods.RangesChanged(_obj, visibleRange, trackedItems);
        }

        void global::System.IDisposable.Dispose() => ((global::System.IDisposable)(IWinRTObject)this).Dispose();
    }

    internal static class IPropertyChangedEventArgsMethods
    {

        internal static unsafe string get_PropertyName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x52, 0xC9, 0xD0, 0x63, 0x6B, 0x39, 0xF4, 0x54, 0xAF, 0x8C, 0xBA, 0x87, 0x24, 0xA4, 0x27, 0xBF };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("63D0C952-396B-54F4-AF8C-BA8724A427BF")]
    internal interface IPropertyChangedEventArgs : global::Microsoft.UI.Xaml.Data.IPropertyChangedEventArgs
    {
    }
    internal static class IPropertyChangedEventArgsFactoryMethods
    {


        internal static unsafe global::System.ComponentModel.PropertyChangedEventArgs CreateInstance(IObjectReference _obj, string name, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                MarshalString.Pinnable __name = new(name);
                fixed(void* ___name = __name)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __name), MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                    return global::ABI.System.ComponentModel.PropertyChangedEventArgs.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.System.ComponentModel.PropertyChangedEventArgs.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA8, 0x27, 0xC, 0x7C, 0x41, 0xB, 0x70, 0x50, 0xB1, 0x60, 0xFC, 0x9A, 0xE9, 0x60, 0xA3, 0x6C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("7C0C27A8-0B41-5070-B160-FC9AE960A36C")]
    internal interface IPropertyChangedEventArgsFactory : global::Microsoft.UI.Xaml.Data.IPropertyChangedEventArgsFactory
    {
    }
    internal static class IRelativeSourceMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Data.RelativeSourceMode get_Mode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Data.RelativeSourceMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Data.RelativeSourceMode*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Mode(IObjectReference _obj, global::Microsoft.UI.Xaml.Data.RelativeSourceMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Data.RelativeSourceMode, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x26, 0x81, 0xFC, 0x7F, 0xD8, 0x5D, 0xBB, 0x58, 0xB6, 0x86, 0xC7, 0x1E, 0xDD, 0xEA, 0x7, 0xB2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("7FFC8126-5DD8-58BB-B686-C71EDDEA07B2")]
    internal interface IRelativeSource : global::Microsoft.UI.Xaml.Data.IRelativeSource
    {
    }
    internal static class IRelativeSourceFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Data.RelativeSource CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Data.RelativeSource.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Data.RelativeSource.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x2C, 0x52, 0x18, 0x85, 0xE3, 0x85, 0xE1, 0x5A, 0xB9, 0xE9, 0x28, 0xEA, 0x43, 0xC2, 0x5, 0x1E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8518522C-85E3-5AE1-B9E9-28EA43C2051E")]
    internal interface IRelativeSourceFactory : global::Microsoft.UI.Xaml.Data.IRelativeSourceFactory
    {
    }
    public static class ISelectionInfoMethods
    {


        public static unsafe void SelectRange(IObjectReference _obj, global::Microsoft.UI.Xaml.Data.ItemIndexRange itemIndexRange)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __itemIndexRange = default;
            try
            {
                __itemIndexRange = global::ABI.Microsoft.UI.Xaml.Data.ItemIndexRange.CreateMarshaler2(itemIndexRange);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__itemIndexRange)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__itemIndexRange);
            }
        }

        public static unsafe void DeselectRange(IObjectReference _obj, global::Microsoft.UI.Xaml.Data.ItemIndexRange itemIndexRange)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __itemIndexRange = default;
            try
            {
                __itemIndexRange = global::ABI.Microsoft.UI.Xaml.Data.ItemIndexRange.CreateMarshaler2(itemIndexRange);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__itemIndexRange)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__itemIndexRange);
            }
        }

        public static unsafe bool IsSelected(IObjectReference _obj, int index)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, byte*, int>**)ThisPtr)[8](ThisPtr, index, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        public static unsafe global::System.Collections.Generic.IReadOnlyList<global::Microsoft.UI.Xaml.Data.ItemIndexRange> GetSelectedRanges(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Microsoft_UI_Xaml_Data_ItemIndexRange.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.UI.Xaml.Data.ItemIndexRange>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.UI.Xaml.Data.ItemIndexRange>>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x6B, 0xC2, 0x84, 0x1B, 0x32, 0x95, 0x3, 0x58, 0x93, 0x5B, 0xA0, 0x3B, 0xF7, 0xE8, 0x75, 0xDC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => ISelectionInfo.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("1B84C26B-9532-5803-935B-A03BF7E875DC")]
    internal unsafe interface ISelectionInfo : global::Microsoft.UI.Xaml.Data.ISelectionInfo
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe ISelectionInfo()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(ISelectionInfo), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 4);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_SelectRange_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_DeselectRange_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, int, byte*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_IsSelected_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_GetSelectedRanges_3;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_SelectRange_0(IntPtr thisPtr, IntPtr itemIndexRange)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ISelectionInfo>(thisPtr).SelectRange(global::ABI.Microsoft.UI.Xaml.Data.ItemIndexRange.FromAbi(itemIndexRange));

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_DeselectRange_1(IntPtr thisPtr, IntPtr itemIndexRange)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ISelectionInfo>(thisPtr).DeselectRange(global::ABI.Microsoft.UI.Xaml.Data.ItemIndexRange.FromAbi(itemIndexRange));

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_IsSelected_2(IntPtr thisPtr, int index, byte* result)
        {

            bool __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ISelectionInfo>(thisPtr).IsSelected(index);
                *result = (byte)(__result ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetSelectedRanges_3(IntPtr thisPtr, IntPtr* result)
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Microsoft_UI_Xaml_Data_ItemIndexRange.EnsureInitialized();

            global::System.Collections.Generic.IReadOnlyList<global::Microsoft.UI.Xaml.Data.ItemIndexRange> __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ISelectionInfo>(thisPtr).GetSelectedRanges();
                *result = MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.UI.Xaml.Data.ItemIndexRange>>.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe void global::Microsoft.UI.Xaml.Data.ISelectionInfo.SelectRange(global::Microsoft.UI.Xaml.Data.ItemIndexRange itemIndexRange)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ISelectionInfo).TypeHandle));
            global::ABI.Microsoft.UI.Xaml.Data.ISelectionInfoMethods.SelectRange(_obj, itemIndexRange);
        }

        unsafe void global::Microsoft.UI.Xaml.Data.ISelectionInfo.DeselectRange(global::Microsoft.UI.Xaml.Data.ItemIndexRange itemIndexRange)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ISelectionInfo).TypeHandle));
            global::ABI.Microsoft.UI.Xaml.Data.ISelectionInfoMethods.DeselectRange(_obj, itemIndexRange);
        }

        unsafe bool global::Microsoft.UI.Xaml.Data.ISelectionInfo.IsSelected(int index)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ISelectionInfo).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Data.ISelectionInfoMethods.IsSelected(_obj, index);
        }

        unsafe global::System.Collections.Generic.IReadOnlyList<global::Microsoft.UI.Xaml.Data.ItemIndexRange> global::Microsoft.UI.Xaml.Data.ISelectionInfo.GetSelectedRanges()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ISelectionInfo).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Data.ISelectionInfoMethods.GetSelectedRanges(_obj);
        }
    }

    public static class ISupportIncrementalLoadingMethods
    {


        public static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.UI.Xaml.Data.LoadMoreItemsResult> LoadMoreItemsAsync(IObjectReference _obj, uint count)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint, IntPtr*, int>**)ThisPtr)[6](ThisPtr, count, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_UI_Xaml_Data_LoadMoreItemsResult.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.UI.Xaml.Data.LoadMoreItemsResult>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.UI.Xaml.Data.LoadMoreItemsResult>>.DisposeAbi(__retval);
            }
        }
        public static unsafe bool get_HasMoreItems(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x86, 0xB5, 0xF9, 0xD8, 0x4A, 0xA6, 0xF8, 0x5F, 0x86, 0x8E, 0x20, 0x4E, 0x14, 0x4F, 0x2C, 0xF4 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => ISupportIncrementalLoading.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("D8F9B586-A64A-5FF8-868E-204E144F2CF4")]
    internal unsafe interface ISupportIncrementalLoading : global::Microsoft.UI.Xaml.Data.ISupportIncrementalLoading
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe ISupportIncrementalLoading()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(ISupportIncrementalLoading), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 2);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, uint, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_LoadMoreItemsAsync_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_HasMoreItems_1;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_LoadMoreItemsAsync_0(IntPtr thisPtr, uint count, IntPtr* operation)
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_UI_Xaml_Data_LoadMoreItemsResult.EnsureInitialized();

            global::Windows.Foundation.IAsyncOperation<global::Microsoft.UI.Xaml.Data.LoadMoreItemsResult> __operation = default;

            *operation = default;

            try
            {
                __operation = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ISupportIncrementalLoading>(thisPtr).LoadMoreItemsAsync(count);
                *operation = MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.UI.Xaml.Data.LoadMoreItemsResult>>.FromManaged(__operation);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_HasMoreItems_1(IntPtr thisPtr, byte* value)
        {

            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.ISupportIncrementalLoading>(thisPtr).HasMoreItems;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.UI.Xaml.Data.LoadMoreItemsResult> global::Microsoft.UI.Xaml.Data.ISupportIncrementalLoading.LoadMoreItemsAsync(uint count)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ISupportIncrementalLoading).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Data.ISupportIncrementalLoadingMethods.LoadMoreItemsAsync(_obj, count);
        }

        unsafe bool global::Microsoft.UI.Xaml.Data.ISupportIncrementalLoading.HasMoreItems
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.ISupportIncrementalLoading).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Data.ISupportIncrementalLoadingMethods.get_HasMoreItems(_obj);
            }
        }
    }

    public static class IValueConverterMethods
    {


        public static unsafe object Convert(IObjectReference _obj, object value, global::System.Type targetType, object parameter, string language)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            ObjectReferenceValue __parameter = default;
            IntPtr __retval = default;
            try
            {
                __value = MarshalInspectable<object>.CreateMarshaler2(value);
                __parameter = MarshalInspectable<object>.CreateMarshaler2(parameter);
                global::ABI.System.Type.Pinnable __targetType = new(targetType);
                MarshalString.Pinnable __language = new(language);
                fixed(void* ___targetType = __targetType, ___language = __language)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::ABI.System.Type, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__value), global::ABI.System.Type.GetAbi(ref __targetType), MarshalInspectable<object>.GetAbi(__parameter), MarshalString.GetAbi(ref __language), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return MarshalInspectable<object>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
                MarshalInspectable<object>.DisposeMarshaler(__parameter);
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }

        public static unsafe object ConvertBack(IObjectReference _obj, object value, global::System.Type targetType, object parameter, string language)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            ObjectReferenceValue __parameter = default;
            IntPtr __retval = default;
            try
            {
                __value = MarshalInspectable<object>.CreateMarshaler2(value);
                __parameter = MarshalInspectable<object>.CreateMarshaler2(parameter);
                global::ABI.System.Type.Pinnable __targetType = new(targetType);
                MarshalString.Pinnable __language = new(language);
                fixed(void* ___targetType = __targetType, ___language = __language)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::ABI.System.Type, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value), global::ABI.System.Type.GetAbi(ref __targetType), MarshalInspectable<object>.GetAbi(__parameter), MarshalString.GetAbi(ref __language), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return MarshalInspectable<object>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
                MarshalInspectable<object>.DisposeMarshaler(__parameter);
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFF, 0x2B, 0xDD, 0xAF, 0xF5, 0x10, 0x73, 0x51, 0xB7, 0xC0, 0x35, 0x90, 0xBD, 0x96, 0xCB, 0x35 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IValueConverter.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("AFDD2BFF-10F5-5173-B7C0-3590BD96CB35")]
    internal unsafe interface IValueConverter : global::Microsoft.UI.Xaml.Data.IValueConverter
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IValueConverter()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IValueConverter), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 2);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::ABI.System.Type, IntPtr, IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_Convert_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::ABI.System.Type, IntPtr, IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_ConvertBack_1;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Convert_0(IntPtr thisPtr, IntPtr value, global::ABI.System.Type targetType, IntPtr parameter, IntPtr language, IntPtr* result)
        {

            object __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.IValueConverter>(thisPtr).Convert(MarshalInspectable<object>.FromAbi(value), global::ABI.System.Type.FromAbi(targetType), MarshalInspectable<object>.FromAbi(parameter), MarshalString.FromAbi(language));
                *result = MarshalInspectable<object>.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_ConvertBack_1(IntPtr thisPtr, IntPtr value, global::ABI.System.Type targetType, IntPtr parameter, IntPtr language, IntPtr* result)
        {

            object __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Data.IValueConverter>(thisPtr).ConvertBack(MarshalInspectable<object>.FromAbi(value), global::ABI.System.Type.FromAbi(targetType), MarshalInspectable<object>.FromAbi(parameter), MarshalString.FromAbi(language));
                *result = MarshalInspectable<object>.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe object global::Microsoft.UI.Xaml.Data.IValueConverter.Convert(object value, global::System.Type targetType, object parameter, string language)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.IValueConverter).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Data.IValueConverterMethods.Convert(_obj, value, targetType, parameter, language);
        }

        unsafe object global::Microsoft.UI.Xaml.Data.IValueConverter.ConvertBack(object value, global::System.Type targetType, object parameter, string language)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Data.IValueConverter).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Data.IValueConverterMethods.ConvertBack(_obj, value, targetType, parameter, language);
        }
    }

    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ItemIndexRange
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Data.ItemIndexRange obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Data.ItemIndexRange>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Data.IItemIndexRangeMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Data.ItemIndexRange obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Data.IItemIndexRangeMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Data.ItemIndexRange FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Data.ItemIndexRange.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Data.ItemIndexRange obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.ItemIndexRange>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Data.ItemIndexRange[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.ItemIndexRange>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.ItemIndexRange>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Data.ItemIndexRange[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.ItemIndexRange>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Data.ItemIndexRange[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.ItemIndexRange>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Data.ItemIndexRange[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.ItemIndexRange>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.ItemIndexRange>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.ItemIndexRange>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ItemIndexRangeRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Data.ItemIndexRange(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct RelativeSource
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Data.RelativeSource obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Data.RelativeSource>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Data.IRelativeSourceMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Data.RelativeSource obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Data.IRelativeSourceMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Data.RelativeSource FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Data.RelativeSource.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Data.RelativeSource obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.RelativeSource>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Data.RelativeSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.RelativeSource>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.RelativeSource>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Data.RelativeSource[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.RelativeSource>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Data.RelativeSource[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.RelativeSource>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Data.RelativeSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.RelativeSource>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.RelativeSource>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Data.RelativeSource>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class RelativeSourceRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Data.RelativeSource(inspectable.ObjRef);
    }
}
#pragma warning restore CA1416
