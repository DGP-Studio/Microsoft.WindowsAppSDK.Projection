//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.UI.Xaml.Media.Media3D
{
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D))]
    [global::ABI.Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3DRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICompositeTransform3D))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class CompositeTransform3D : Transform3D, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CompositeTransform3D>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3D => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Media3D_CompositeTransform3D;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Media3D_CompositeTransform3D
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Media3D_CompositeTransform3D;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Media3D_CompositeTransform3D = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D");
                }
            }
        }

        public CompositeTransform3D() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_CompositeTransform3D, global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3DStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3DStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3DStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3DStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty CenterXProperty => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DStaticsMethods.get_CenterXProperty(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3DStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty CenterYProperty => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DStaticsMethods.get_CenterYProperty(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3DStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty CenterZProperty => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DStaticsMethods.get_CenterZProperty(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3DStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty RotationXProperty => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DStaticsMethods.get_RotationXProperty(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3DStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty RotationYProperty => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DStaticsMethods.get_RotationYProperty(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3DStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty RotationZProperty => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DStaticsMethods.get_RotationZProperty(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3DStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ScaleXProperty => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DStaticsMethods.get_ScaleXProperty(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3DStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ScaleYProperty => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DStaticsMethods.get_ScaleYProperty(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3DStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ScaleZProperty => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DStaticsMethods.get_ScaleZProperty(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3DStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty TranslateXProperty => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DStaticsMethods.get_TranslateXProperty(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3DStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty TranslateYProperty => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DStaticsMethods.get_TranslateYProperty(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3DStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty TranslateZProperty => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DStaticsMethods.get_TranslateZProperty(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3DStatics);

        public static new CompositeTransform3D FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CompositeTransform3D>.FromAbi(thisPtr);
        }

        internal CompositeTransform3D(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DMethods.IID);

        }


        public static bool operator ==(CompositeTransform3D x, CompositeTransform3D y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CompositeTransform3D x, CompositeTransform3D y) => !(x == y);
        public bool Equals(CompositeTransform3D other) => this == other;
        public override bool Equals(object obj) => obj is CompositeTransform3D that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double CenterX
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DMethods.get_CenterX(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3D);
            set => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DMethods.set_CenterX(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3D, value);
        }

        public double CenterY
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DMethods.get_CenterY(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3D);
            set => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DMethods.set_CenterY(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3D, value);
        }

        public double CenterZ
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DMethods.get_CenterZ(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3D);
            set => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DMethods.set_CenterZ(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3D, value);
        }

        public double RotationX
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DMethods.get_RotationX(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3D);
            set => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DMethods.set_RotationX(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3D, value);
        }

        public double RotationY
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DMethods.get_RotationY(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3D);
            set => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DMethods.set_RotationY(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3D, value);
        }

        public double RotationZ
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DMethods.get_RotationZ(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3D);
            set => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DMethods.set_RotationZ(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3D, value);
        }

        public double ScaleX
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DMethods.get_ScaleX(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3D);
            set => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DMethods.set_ScaleX(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3D, value);
        }

        public double ScaleY
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DMethods.get_ScaleY(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3D);
            set => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DMethods.set_ScaleY(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3D, value);
        }

        public double ScaleZ
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DMethods.get_ScaleZ(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3D);
            set => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DMethods.set_ScaleZ(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3D, value);
        }

        public double TranslateX
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DMethods.get_TranslateX(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3D);
            set => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DMethods.set_TranslateX(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3D, value);
        }

        public double TranslateY
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DMethods.get_TranslateY(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3D);
            set => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DMethods.set_TranslateY(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3D, value);
        }

        public double TranslateZ
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DMethods.get_TranslateZ(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3D);
            set => global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DMethods.set_TranslateZ(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ICompositeTransform3D, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("CBAF163F-C254-5DCF-8AE4-40E21CE1B4CA")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3D))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ICompositeTransform3D
    {
        double CenterX { get; set; }
        double CenterY { get; set; }
        double CenterZ { get; set; }
        double RotationX { get; set; }
        double RotationY { get; set; }
        double RotationZ { get; set; }
        double ScaleX { get; set; }
        double ScaleY { get; set; }
        double ScaleZ { get; set; }
        double TranslateX { get; set; }
        double TranslateY { get; set; }
        double TranslateZ { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("B64D4181-6988-5D46-858A-224DB7089DC4")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ICompositeTransform3DStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty CenterXProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty CenterYProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty CenterZProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty RotationXProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty RotationYProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty RotationZProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ScaleXProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ScaleYProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ScaleZProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty TranslateXProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty TranslateYProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty TranslateZProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("4006CC46-684E-54EA-A421-DAE5B0556B85")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Media3D.IPerspectiveTransform3D))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPerspectiveTransform3D
    {
        double Depth { get; set; }
        double OffsetX { get; set; }
        double OffsetY { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("3B16AA8D-0EE2-5D46-A723-DC8E5C1C0B19")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Media3D.IPerspectiveTransform3DStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPerspectiveTransform3DStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty DepthProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty OffsetXProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty OffsetYProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("AFEA4941-2E49-533C-9F8F-2C126EF9893A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Media3D.ITransform3D))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ITransform3D
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("9BCCE0A1-10AC-5319-BDF1-548D2E5AE504")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Media3D.ITransform3DFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ITransform3DFactory
    {
        Transform3D CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D))]
    [global::ABI.Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3DRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPerspectiveTransform3D))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class PerspectiveTransform3D : Transform3D, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PerspectiveTransform3D>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Media3D_IPerspectiveTransform3D => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Media3D_PerspectiveTransform3D;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Media3D_PerspectiveTransform3D
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Media3D_PerspectiveTransform3D;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Media3D_PerspectiveTransform3D = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D");
                }
            }
        }

        public PerspectiveTransform3D() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_PerspectiveTransform3D, global::ABI.Microsoft.UI.Xaml.Media.Media3D.IPerspectiveTransform3DMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Media3D_IPerspectiveTransform3DStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Media3D_IPerspectiveTransform3DStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Media3D_IPerspectiveTransform3DStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Media3D_IPerspectiveTransform3DStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D", global::ABI.Microsoft.UI.Xaml.Media.Media3D.IPerspectiveTransform3DStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty DepthProperty => global::ABI.Microsoft.UI.Xaml.Media.Media3D.IPerspectiveTransform3DStaticsMethods.get_DepthProperty(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_IPerspectiveTransform3DStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty OffsetXProperty => global::ABI.Microsoft.UI.Xaml.Media.Media3D.IPerspectiveTransform3DStaticsMethods.get_OffsetXProperty(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_IPerspectiveTransform3DStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty OffsetYProperty => global::ABI.Microsoft.UI.Xaml.Media.Media3D.IPerspectiveTransform3DStaticsMethods.get_OffsetYProperty(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_IPerspectiveTransform3DStatics);

        public static new PerspectiveTransform3D FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PerspectiveTransform3D>.FromAbi(thisPtr);
        }

        internal PerspectiveTransform3D(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Media3D.IPerspectiveTransform3DMethods.IID);

        }


        public static bool operator ==(PerspectiveTransform3D x, PerspectiveTransform3D y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PerspectiveTransform3D x, PerspectiveTransform3D y) => !(x == y);
        public bool Equals(PerspectiveTransform3D other) => this == other;
        public override bool Equals(object obj) => obj is PerspectiveTransform3D that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double Depth
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Media3D.IPerspectiveTransform3DMethods.get_Depth(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_IPerspectiveTransform3D);
            set => global::ABI.Microsoft.UI.Xaml.Media.Media3D.IPerspectiveTransform3DMethods.set_Depth(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_IPerspectiveTransform3D, value);
        }

        public double OffsetX
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Media3D.IPerspectiveTransform3DMethods.get_OffsetX(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_IPerspectiveTransform3D);
            set => global::ABI.Microsoft.UI.Xaml.Media.Media3D.IPerspectiveTransform3DMethods.set_OffsetX(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_IPerspectiveTransform3D, value);
        }

        public double OffsetY
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Media3D.IPerspectiveTransform3DMethods.get_OffsetY(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_IPerspectiveTransform3D);
            set => global::ABI.Microsoft.UI.Xaml.Media.Media3D.IPerspectiveTransform3DMethods.set_OffsetY(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_IPerspectiveTransform3D, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Media3D.Transform3D))]
    [global::ABI.Microsoft.UI.Xaml.Media.Media3D.Transform3DRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ITransform3D))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class Transform3D : global::Microsoft.UI.Xaml.DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<Transform3D>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Media3D_ITransform3D;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Media_Media3D_ITransform3D()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Media_Media3D_ITransform3D, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Media.Media3D.ITransform3DMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Media_Media3D_ITransform3D;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Media3D_ITransform3D => ___objRef_global__Microsoft_UI_Xaml_Media_Media3D_ITransform3D ?? Make___objRef_global__Microsoft_UI_Xaml_Media_Media3D_ITransform3D();



        private static class _ITransform3DFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Media3D_ITransform3DFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Media3D_ITransform3DFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Media3D_ITransform3DFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Media3D_ITransform3DFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Media3D.Transform3D", global::ABI.Microsoft.UI.Xaml.Media.Media3D.ITransform3DFactoryMethods.IID);
                }
            }
        }

        protected Transform3D():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(Transform3D);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _ITransform3DFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Media_Media3D_ITransform3DFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Media.Media3D.ITransform3DMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new Transform3D FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<Transform3D>.FromAbi(thisPtr);
        }

        protected internal Transform3D(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Media3D.ITransform3DMethods.IID);

        }


        public static bool operator ==(Transform3D x, Transform3D y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(Transform3D x, Transform3D y) => !(x == y);
        public bool Equals(Transform3D other) => this == other;
        public override bool Equals(object obj) => obj is Transform3D that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected Transform3D(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(Transform3D);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.UI.Xaml.Media.Media3D
{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CompositeTransform3D
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CompositeTransform3DRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D(inspectable.ObjRef);
    }
    internal static class ICompositeTransform3DMethods
    {

        internal static unsafe double get_CenterX(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_CenterX(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_CenterY(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_CenterY(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_CenterZ(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_CenterZ(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_RotationX(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_RotationX(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[13](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_RotationY(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_RotationY(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[15](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_RotationZ(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[16](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_RotationZ(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[17](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_ScaleX(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[18](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ScaleX(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[19](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_ScaleY(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[20](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ScaleY(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[21](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_ScaleZ(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[22](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ScaleZ(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[23](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_TranslateX(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[24](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_TranslateX(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[25](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_TranslateY(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[26](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_TranslateY(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[27](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_TranslateZ(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[28](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_TranslateZ(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[29](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3F, 0x16, 0xAF, 0xCB, 0x54, 0xC2, 0xCF, 0x5D, 0x8A, 0xE4, 0x40, 0xE2, 0x1C, 0xE1, 0xB4, 0xCA };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("CBAF163F-C254-5DCF-8AE4-40E21CE1B4CA")]
    internal interface ICompositeTransform3D : global::Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3D
    {
    }
    internal static class ICompositeTransform3DStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CenterXProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CenterYProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CenterZProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_RotationXProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_RotationYProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_RotationZProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ScaleXProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ScaleYProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ScaleZProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_TranslateXProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[15](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_TranslateYProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[16](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_TranslateZProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[17](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x81, 0x41, 0x4D, 0xB6, 0x88, 0x69, 0x46, 0x5D, 0x85, 0x8A, 0x22, 0x4D, 0xB7, 0x8, 0x9D, 0xC4 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B64D4181-6988-5D46-858A-224DB7089DC4")]
    internal interface ICompositeTransform3DStatics : global::Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DStatics
    {
    }
    internal static class IPerspectiveTransform3DMethods
    {

        internal static unsafe double get_Depth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Depth(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_OffsetX(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_OffsetX(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_OffsetY(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_OffsetY(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x46, 0xCC, 0x6, 0x40, 0x4E, 0x68, 0xEA, 0x54, 0xA4, 0x21, 0xDA, 0xE5, 0xB0, 0x55, 0x6B, 0x85 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4006CC46-684E-54EA-A421-DAE5B0556B85")]
    internal interface IPerspectiveTransform3D : global::Microsoft.UI.Xaml.Media.Media3D.IPerspectiveTransform3D
    {
    }
    internal static class IPerspectiveTransform3DStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_DepthProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_OffsetXProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_OffsetYProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x8D, 0xAA, 0x16, 0x3B, 0xE2, 0xE, 0x46, 0x5D, 0xA7, 0x23, 0xDC, 0x8E, 0x5C, 0x1C, 0xB, 0x19 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("3B16AA8D-0EE2-5D46-A723-DC8E5C1C0B19")]
    internal interface IPerspectiveTransform3DStatics : global::Microsoft.UI.Xaml.Media.Media3D.IPerspectiveTransform3DStatics
    {
    }
    internal static class ITransform3DMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x41, 0x49, 0xEA, 0xAF, 0x49, 0x2E, 0x3C, 0x53, 0x9F, 0x8F, 0x2C, 0x12, 0x6E, 0xF9, 0x89, 0x3A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("AFEA4941-2E49-533C-9F8F-2C126EF9893A")]
    internal interface ITransform3D : global::Microsoft.UI.Xaml.Media.Media3D.ITransform3D
    {
    }
    internal static class ITransform3DFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Media.Media3D.Transform3D CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Media.Media3D.Transform3D.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Media.Media3D.Transform3D.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA1, 0xE0, 0xCC, 0x9B, 0xAC, 0x10, 0x19, 0x53, 0xBD, 0xF1, 0x54, 0x8D, 0x2E, 0x5A, 0xE5, 0x4 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("9BCCE0A1-10AC-5319-BDF1-548D2E5AE504")]
    internal interface ITransform3DFactory : global::Microsoft.UI.Xaml.Media.Media3D.ITransform3DFactory
    {
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PerspectiveTransform3D
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Media3D.IPerspectiveTransform3DMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Media3D.IPerspectiveTransform3DMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PerspectiveTransform3DRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct Transform3D
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Media3D.Transform3D obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Media3D.Transform3D>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Media3D.ITransform3DMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Media3D.Transform3D obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Media3D.ITransform3DMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Media3D.Transform3D FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Media3D.Transform3D.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Media3D.Transform3D obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Media3D.Transform3D>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Media3D.Transform3D[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Media3D.Transform3D>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Media3D.Transform3D>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Media3D.Transform3D[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Media3D.Transform3D>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Media3D.Transform3D[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Media3D.Transform3D>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Media3D.Transform3D[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Media3D.Transform3D>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Media3D.Transform3D>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Media3D.Transform3D>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class Transform3DRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Media3D.Transform3D(inspectable.ObjRef);
    }
}
#pragma warning restore CA1416


namespace Microsoft.UI.Xaml.Media.Media3D
{
    using global::Windows.Foundation;

    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Media3D.Matrix3D))]
#if NET
    [global::WinRT.WinRTExposedType(typeof(global::WinRT.StructTypeDetails<Matrix3D, Matrix3D>))]
#endif
    [StructLayout(LayoutKind.Sequential)]
#if EMBED
    internal
#else
    public
#endif
    struct Matrix3D : IFormattable
    {
        // Assuming this matrix has fourth column of 0,0,0,1 and isn't identity this function:
        // Returns false if HasInverse is false, otherwise inverts the matrix.
        private bool NormalizedAffineInvert()
        {
            double z20 = _m12 * _m23 - _m22 * _m13;
            double z10 = _m32 * _m13 - _m12 * _m33;
            double z00 = _m22 * _m33 - _m32 * _m23;
            double det = _m31 * z20 + _m21 * z10 + _m11 * z00;

            if (IsZero(det))
            {
                return false;
            }

            // Compute 3x3 non-zero cofactors for the 2nd column
            double z21 = _m21 * _m13 - _m11 * _m23;
            double z11 = _m11 * _m33 - _m31 * _m13;
            double z01 = _m31 * _m23 - _m21 * _m33;

            // Compute all six 2x2 determinants of 1st two columns
            double y01 = _m11 * _m22 - _m21 * _m12;
            double y02 = _m11 * _m32 - _m31 * _m12;
            double y03 = _m11 * _offsetY - _offsetX * _m12;
            double y12 = _m21 * _m32 - _m31 * _m22;
            double y13 = _m21 * _offsetY - _offsetX * _m22;
            double y23 = _m31 * _offsetY - _offsetX * _m32;

            // Compute all non-zero and non-one 3x3 cofactors for 2nd
            // two columns
            double z23 = _m23 * y03 - _offsetZ * y01 - _m13 * y13;
            double z13 = _m13 * y23 - _m33 * y03 + _offsetZ * y02;
            double z03 = _m33 * y13 - _offsetZ * y12 - _m23 * y23;
            double z22 = y01;
            double z12 = -y02;
            double z02 = y12;

            double rcp = 1.0 / det;

            // Multiply all 3x3 cofactors by reciprocal & transpose
            _m11 = (z00 * rcp);
            _m12 = (z10 * rcp);
            _m13 = (z20 * rcp);

            _m21 = (z01 * rcp);
            _m22 = (z11 * rcp);
            _m23 = (z21 * rcp);

            _m31 = (z02 * rcp);
            _m32 = (z12 * rcp);
            _m33 = (z22 * rcp);

            _offsetX = (z03 * rcp);
            _offsetY = (z13 * rcp);
            _offsetZ = (z23 * rcp);

            return true;
        }

        // RETURNS true if has inverse & invert was done.  Otherwise returns false & leaves matrix unchanged.
        private bool InvertCore()
        {
            if (IsAffine)
            {
                return NormalizedAffineInvert();
            }

            // compute all six 2x2 determinants of 2nd two columns
            double y01 = _m13 * _m24 - _m23 * _m14;
            double y02 = _m13 * _m34 - _m33 * _m14;
            double y03 = _m13 * _m44 - _offsetZ * _m14;
            double y12 = _m23 * _m34 - _m33 * _m24;
            double y13 = _m23 * _m44 - _offsetZ * _m24;
            double y23 = _m33 * _m44 - _offsetZ * _m34;

            // Compute 3x3 cofactors for 1st the column
            double z30 = _m22 * y02 - _m32 * y01 - _m12 * y12;
            double z20 = _m12 * y13 - _m22 * y03 + _offsetY * y01;
            double z10 = _m32 * y03 - _offsetY * y02 - _m12 * y23;
            double z00 = _m22 * y23 - _m32 * y13 + _offsetY * y12;

            // Compute 4x4 determinant
            double det = _offsetX * z30 + _m31 * z20 + _m21 * z10 + _m11 * z00;

            if (IsZero(det))
            {
                return false;
            }

            // Compute 3x3 cofactors for the 2nd column
            double z31 = _m11 * y12 - _m21 * y02 + _m31 * y01;
            double z21 = _m21 * y03 - _offsetX * y01 - _m11 * y13;
            double z11 = _m11 * y23 - _m31 * y03 + _offsetX * y02;
            double z01 = _m31 * y13 - _offsetX * y12 - _m21 * y23;

            // Compute all six 2x2 determinants of 1st two columns
            y01 = _m11 * _m22 - _m21 * _m12;
            y02 = _m11 * _m32 - _m31 * _m12;
            y03 = _m11 * _offsetY - _offsetX * _m12;
            y12 = _m21 * _m32 - _m31 * _m22;
            y13 = _m21 * _offsetY - _offsetX * _m22;
            y23 = _m31 * _offsetY - _offsetX * _m32;

            // Compute all 3x3 cofactors for 2nd two columns
            double z33 = _m13 * y12 - _m23 * y02 + _m33 * y01;
            double z23 = _m23 * y03 - _offsetZ * y01 - _m13 * y13;
            double z13 = _m13 * y23 - _m33 * y03 + _offsetZ * y02;
            double z03 = _m33 * y13 - _offsetZ * y12 - _m23 * y23;
            double z32 = _m24 * y02 - _m34 * y01 - _m14 * y12;
            double z22 = _m14 * y13 - _m24 * y03 + _m44 * y01;
            double z12 = _m34 * y03 - _m44 * y02 - _m14 * y23;
            double z02 = _m24 * y23 - _m34 * y13 + _m44 * y12;

            double rcp = 1.0 / det;

            // Multiply all 3x3 cofactors by reciprocal & transpose
            _m11 = (z00 * rcp);
            _m12 = (z10 * rcp);
            _m13 = (z20 * rcp);
            _m14 = (z30 * rcp);

            _m21 = (z01 * rcp);
            _m22 = (z11 * rcp);
            _m23 = (z21 * rcp);
            _m24 = (z31 * rcp);

            _m31 = (z02 * rcp);
            _m32 = (z12 * rcp);
            _m33 = (z22 * rcp);
            _m34 = (z32 * rcp);

            _offsetX = (z03 * rcp);
            _offsetY = (z13 * rcp);
            _offsetZ = (z23 * rcp);
            _m44 = (z33 * rcp);

            return true;
        }

        public Matrix3D(double m11, double m12, double m13, double m14,
                        double m21, double m22, double m23, double m24,
                        double m31, double m32, double m33, double m34,
                        double offsetX, double offsetY, double offsetZ, double m44)
        {
            _m11 = m11;
            _m12 = m12;
            _m13 = m13;
            _m14 = m14;
            _m21 = m21;
            _m22 = m22;
            _m23 = m23;
            _m24 = m24;
            _m31 = m31;
            _m32 = m32;
            _m33 = m33;
            _m34 = m34;
            _offsetX = offsetX;
            _offsetY = offsetY;
            _offsetZ = offsetZ;
            _m44 = m44;
        }

        // the transform is identity by default
        // Actually fill in the fields - some (internal) code uses the fields directly for perf.
        private static Matrix3D s_identity = CreateIdentity();

        public double M11
        {
            get
            {
                return _m11;
            }
            set
            {
                _m11 = value;
            }
        }

        public double M12
        {
            get
            {
                return _m12;
            }
            set
            {
                _m12 = value;
            }
        }

        public double M13
        {
            get
            {
                return _m13;
            }
            set
            {
                _m13 = value;
            }
        }

        public double M14
        {
            get
            {
                return _m14;
            }
            set
            {
                _m14 = value;
            }
        }

        public double M21
        {
            get
            {
                return _m21;
            }
            set
            {
                _m21 = value;
            }
        }

        public double M22
        {
            get
            {
                return _m22;
            }
            set
            {
                _m22 = value;
            }
        }

        public double M23
        {
            get
            {
                return _m23;
            }
            set
            {
                _m23 = value;
            }
        }

        public double M24
        {
            get
            {
                return _m24;
            }
            set
            {
                _m24 = value;
            }
        }

        public double M31
        {
            get
            {
                return _m31;
            }
            set
            {
                _m31 = value;
            }
        }

        public double M32
        {
            get
            {
                return _m32;
            }
            set
            {
                _m32 = value;
            }
        }

        public double M33
        {
            get
            {
                return _m33;
            }
            set
            {
                _m33 = value;
            }
        }

        public double M34
        {
            get
            {
                return _m34;
            }
            set
            {
                _m34 = value;
            }
        }

        public double OffsetX
        {
            get
            {
                return _offsetX;
            }
            set
            {
                _offsetX = value;
            }
        }

        public double OffsetY
        {
            get
            {
                return _offsetY;
            }
            set
            {
                _offsetY = value;
            }
        }

        public double OffsetZ
        {
            get
            {
                return _offsetZ;
            }
            set
            {
                _offsetZ = value;
            }
        }

        public double M44
        {
            get
            {
                return _m44;
            }
            set
            {
                _m44 = value;
            }
        }

        public static Matrix3D Identity
        {
            get
            {
                return s_identity;
            }
        }

        public bool IsIdentity
        {
            get
            {
                return (_m11 == 1 && _m12 == 0 && _m13 == 0 && _m14 == 0 &&
                         _m21 == 0 && _m22 == 1 && _m23 == 0 && _m24 == 0 &&
                         _m31 == 0 && _m32 == 0 && _m33 == 1 && _m34 == 0 &&
                         _offsetX == 0 && _offsetY == 0 && _offsetZ == 0 && _m44 == 1);
            }
        }

        public override string ToString()
        {
            // Delegate to the internal method which implements all ToString calls.
            return ConvertToString(null /* format string */, null /* format provider */);
        }

        public string ToString(IFormatProvider provider)
        {
            // Delegate to the internal method which implements all ToString calls.
            return ConvertToString(null /* format string */, provider);
        }

        string IFormattable.ToString(string format, IFormatProvider provider)
        {
            // Delegate to the internal method which implements all ToString calls.
            return ConvertToString(format, provider);
        }

        private string ConvertToString(string format, IFormatProvider provider)
        {
            if (IsIdentity)
            {
                return "Identity";
            }

            // Helper to get the numeric list separator for a given culture.
            char separator = TokenizerHelper.GetNumericListSeparator(provider);
            return string.Format(provider,
                                 "{1:" + format + "}{0}{2:" + format + "}{0}{3:" + format + "}{0}{4:" + format + "}{0}{5:" + format +
                                 "}{0}{6:" + format + "}{0}{7:" + format + "}{0}{8:" + format + "}{0}{9:" + format + "}{0}{10:" + format +
                                 "}{0}{11:" + format + "}{0}{12:" + format + "}{0}{13:" + format + "}{0}{14:" + format + "}{0}{15:" + format + "}{0}{16:" + format + "}",
                                 separator,
                                 _m11, _m12, _m13, _m14,
                                 _m21, _m22, _m23, _m24,
                                 _m31, _m32, _m33, _m34,
                                 _offsetX, _offsetY, _offsetZ, _m44);
        }

        public override int GetHashCode()
        {
            // Perform field-by-field XOR of HashCodes
            return M11.GetHashCode() ^
                   M12.GetHashCode() ^
                   M13.GetHashCode() ^
                   M14.GetHashCode() ^
                   M21.GetHashCode() ^
                   M22.GetHashCode() ^
                   M23.GetHashCode() ^
                   M24.GetHashCode() ^
                   M31.GetHashCode() ^
                   M32.GetHashCode() ^
                   M33.GetHashCode() ^
                   M34.GetHashCode() ^
                   OffsetX.GetHashCode() ^
                   OffsetY.GetHashCode() ^
                   OffsetZ.GetHashCode() ^
                   M44.GetHashCode();
        }

        public override bool Equals(object o)
        {
            return o is Matrix3D && Matrix3D.Equals(this, (Matrix3D)o);
        }

        public bool Equals(Matrix3D value)
        {
            return Matrix3D.Equals(this, value);
        }

        public static bool operator ==(Matrix3D matrix1, Matrix3D matrix2)
        {
            return matrix1.M11 == matrix2.M11 &&
                   matrix1.M12 == matrix2.M12 &&
                   matrix1.M13 == matrix2.M13 &&
                   matrix1.M14 == matrix2.M14 &&
                   matrix1.M21 == matrix2.M21 &&
                   matrix1.M22 == matrix2.M22 &&
                   matrix1.M23 == matrix2.M23 &&
                   matrix1.M24 == matrix2.M24 &&
                   matrix1.M31 == matrix2.M31 &&
                   matrix1.M32 == matrix2.M32 &&
                   matrix1.M33 == matrix2.M33 &&
                   matrix1.M34 == matrix2.M34 &&
                   matrix1.OffsetX == matrix2.OffsetX &&
                   matrix1.OffsetY == matrix2.OffsetY &&
                   matrix1.OffsetZ == matrix2.OffsetZ &&
                   matrix1.M44 == matrix2.M44;
        }

        public static bool operator !=(Matrix3D matrix1, Matrix3D matrix2)
        {
            return !(matrix1 == matrix2);
        }

        public static Matrix3D operator *(Matrix3D matrix1, Matrix3D matrix2)
        {
            Matrix3D matrix3D = default;

            matrix3D.M11 = matrix1.M11 * matrix2.M11 +
                           matrix1.M12 * matrix2.M21 +
                           matrix1.M13 * matrix2.M31 +
                           matrix1.M14 * matrix2.OffsetX;
            matrix3D.M12 = matrix1.M11 * matrix2.M12 +
                           matrix1.M12 * matrix2.M22 +
                           matrix1.M13 * matrix2.M32 +
                           matrix1.M14 * matrix2.OffsetY;
            matrix3D.M13 = matrix1.M11 * matrix2.M13 +
                           matrix1.M12 * matrix2.M23 +
                           matrix1.M13 * matrix2.M33 +
                           matrix1.M14 * matrix2.OffsetZ;
            matrix3D.M14 = matrix1.M11 * matrix2.M14 +
                           matrix1.M12 * matrix2.M24 +
                           matrix1.M13 * matrix2.M34 +
                           matrix1.M14 * matrix2.M44;
            matrix3D.M21 = matrix1.M21 * matrix2.M11 +
                           matrix1.M22 * matrix2.M21 +
                           matrix1.M23 * matrix2.M31 +
                           matrix1.M24 * matrix2.OffsetX;
            matrix3D.M22 = matrix1.M21 * matrix2.M12 +
                           matrix1.M22 * matrix2.M22 +
                           matrix1.M23 * matrix2.M32 +
                           matrix1.M24 * matrix2.OffsetY;
            matrix3D.M23 = matrix1.M21 * matrix2.M13 +
                           matrix1.M22 * matrix2.M23 +
                           matrix1.M23 * matrix2.M33 +
                           matrix1.M24 * matrix2.OffsetZ;
            matrix3D.M24 = matrix1.M21 * matrix2.M14 +
                           matrix1.M22 * matrix2.M24 +
                           matrix1.M23 * matrix2.M34 +
                           matrix1.M24 * matrix2.M44;
            matrix3D.M31 = matrix1.M31 * matrix2.M11 +
                           matrix1.M32 * matrix2.M21 +
                           matrix1.M33 * matrix2.M31 +
                           matrix1.M34 * matrix2.OffsetX;
            matrix3D.M32 = matrix1.M31 * matrix2.M12 +
                           matrix1.M32 * matrix2.M22 +
                           matrix1.M33 * matrix2.M32 +
                           matrix1.M34 * matrix2.OffsetY;
            matrix3D.M33 = matrix1.M31 * matrix2.M13 +
                           matrix1.M32 * matrix2.M23 +
                           matrix1.M33 * matrix2.M33 +
                           matrix1.M34 * matrix2.OffsetZ;
            matrix3D.M34 = matrix1.M31 * matrix2.M14 +
                           matrix1.M32 * matrix2.M24 +
                           matrix1.M33 * matrix2.M34 +
                           matrix1.M34 * matrix2.M44;
            matrix3D.OffsetX = matrix1.OffsetX * matrix2.M11 +
                           matrix1.OffsetY * matrix2.M21 +
                           matrix1.OffsetZ * matrix2.M31 +
                           matrix1.M44 * matrix2.OffsetX;
            matrix3D.OffsetY = matrix1.OffsetX * matrix2.M12 +
                           matrix1.OffsetY * matrix2.M22 +
                           matrix1.OffsetZ * matrix2.M32 +
                           matrix1.M44 * matrix2.OffsetY;
            matrix3D.OffsetZ = matrix1.OffsetX * matrix2.M13 +
                           matrix1.OffsetY * matrix2.M23 +
                           matrix1.OffsetZ * matrix2.M33 +
                           matrix1.M44 * matrix2.OffsetZ;
            matrix3D.M44 = matrix1.OffsetX * matrix2.M14 +
                           matrix1.OffsetY * matrix2.M24 +
                           matrix1.OffsetZ * matrix2.M34 +
                           matrix1.M44 * matrix2.M44;

            // matrix3D._type is not set.

            return matrix3D;
        }

        public bool HasInverse
        {
            get
            {
                return !IsZero(Determinant);
            }
        }

        public void Invert()
        {
            if (!InvertCore())
            {
                throw new InvalidOperationException();
            }
        }

        private static Matrix3D CreateIdentity()
        {
            Matrix3D matrix3D = default;
            matrix3D.SetMatrix(1, 0, 0, 0,
                               0, 1, 0, 0,
                               0, 0, 1, 0,
                               0, 0, 0, 1);
            return matrix3D;
        }

        private void SetMatrix(double m11, double m12, double m13, double m14,
                               double m21, double m22, double m23, double m24,
                               double m31, double m32, double m33, double m34,
                               double offsetX, double offsetY, double offsetZ, double m44)
        {
            _m11 = m11;
            _m12 = m12;
            _m13 = m13;
            _m14 = m14;
            _m21 = m21;
            _m22 = m22;
            _m23 = m23;
            _m24 = m24;
            _m31 = m31;
            _m32 = m32;
            _m33 = m33;
            _m34 = m34;
            _offsetX = offsetX;
            _offsetY = offsetY;
            _offsetZ = offsetZ;
            _m44 = m44;
        }

        private static bool Equals(Matrix3D matrix1, Matrix3D matrix2)
        {
            return matrix1.M11.Equals(matrix2.M11) &&
                   matrix1.M12.Equals(matrix2.M12) &&
                   matrix1.M13.Equals(matrix2.M13) &&
                   matrix1.M14.Equals(matrix2.M14) &&
                   matrix1.M21.Equals(matrix2.M21) &&
                   matrix1.M22.Equals(matrix2.M22) &&
                   matrix1.M23.Equals(matrix2.M23) &&
                   matrix1.M24.Equals(matrix2.M24) &&
                   matrix1.M31.Equals(matrix2.M31) &&
                   matrix1.M32.Equals(matrix2.M32) &&
                   matrix1.M33.Equals(matrix2.M33) &&
                   matrix1.M34.Equals(matrix2.M34) &&
                   matrix1.OffsetX.Equals(matrix2.OffsetX) &&
                   matrix1.OffsetY.Equals(matrix2.OffsetY) &&
                   matrix1.OffsetZ.Equals(matrix2.OffsetZ) &&
                   matrix1.M44.Equals(matrix2.M44);
        }

        private double GetNormalizedAffineDeterminant()
        {
            double z20 = _m12 * _m23 - _m22 * _m13;
            double z10 = _m32 * _m13 - _m12 * _m33;
            double z00 = _m22 * _m33 - _m32 * _m23;

            return _m31 * z20 + _m21 * z10 + _m11 * z00;
        }

        private bool IsAffine
        {
            get
            {
                return (_m14 == 0.0 && _m24 == 0.0 && _m34 == 0.0 && _m44 == 1.0);
            }
        }

        private double Determinant
        {
            get
            {
                if (IsAffine)
                {
                    return GetNormalizedAffineDeterminant();
                }

                // compute all six 2x2 determinants of 2nd two columns
                double y01 = _m13 * _m24 - _m23 * _m14;
                double y02 = _m13 * _m34 - _m33 * _m14;
                double y03 = _m13 * _m44 - _offsetZ * _m14;
                double y12 = _m23 * _m34 - _m33 * _m24;
                double y13 = _m23 * _m44 - _offsetZ * _m24;
                double y23 = _m33 * _m44 - _offsetZ * _m34;

                // Compute 3x3 cofactors for 1st the column
                double z30 = _m22 * y02 - _m32 * y01 - _m12 * y12;
                double z20 = _m12 * y13 - _m22 * y03 + _offsetY * y01;
                double z10 = _m32 * y03 - _offsetY * y02 - _m12 * y23;
                double z00 = _m22 * y23 - _m32 * y13 + _offsetY * y12;

                return _offsetX * z30 + _m31 * z20 + _m21 * z10 + _m11 * z00;
            }
        }

        private static bool IsZero(double value)
        {
            return Math.Abs(value) < 10.0 * DBL_EPSILON_RELATIVE_1;
        }

        private const double DBL_EPSILON_RELATIVE_1 = 1.1102230246251567e-016; /* smallest such that 1.0+DBL_EPSILON != 1.0 */

        private double _m11;
        private double _m12;
        private double _m13;
        private double _m14;
        private double _m21;
        private double _m22;
        private double _m23;
        private double _m24;
        private double _m31;
        private double _m32;
        private double _m33;
        private double _m34;
        private double _offsetX;
        private double _offsetY;
        private double _offsetZ;
        private double _m44;
    }
}

namespace ABI.Microsoft.UI.Xaml.Media.Media3D
{
    #if EMBED
        internal
    #else
        public
    #endif
        static class Matrix3D
        {
            public static string GetGuidSignature() => 
                $"struct(Microsoft.UI.Xaml.Media.Media3D.Matrix3D;f8;f8;f8;f8;f8;f8;f8;f8;f8;f8;f8;f8;f8;f8;f8;f8)";
        }
}
