//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.UI.Input.Experimental
{
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.Experimental.ExpInputSite))]
    [global::ABI.Microsoft.UI.Input.Experimental.ExpInputSiteRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IExpInputSite))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65543u)]
    [global::Windows.Foundation.Metadata.Experimental]
    public sealed class ExpInputSite : global::System.IDisposable, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ExpInputSite>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_Experimental_IExpInputSite => _inner;
        private volatile IObjectReference ___objRef_global__System_IDisposable;
        private IObjectReference Make___objRef_global__System_IDisposable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_IDisposable, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.IDisposableMethods.IID), null);
            return ___objRef_global__System_IDisposable;
        }
        private IObjectReference _objRef_global__System_IDisposable => ___objRef_global__System_IDisposable ?? Make___objRef_global__System_IDisposable();



        public static ExpInputSite FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ExpInputSite>.FromAbi(thisPtr);
        }

        internal ExpInputSite(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.Experimental.IExpInputSiteMethods.IID);

        }


        public static bool operator ==(ExpInputSite x, ExpInputSite y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ExpInputSite x, ExpInputSite y) => !(x == y);
        public bool Equals(ExpInputSite other) => this == other;
        public override bool Equals(object obj) => obj is ExpInputSite that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void Dispose() => global::ABI.System.IDisposableMethods.Dispose(_objRef_global__System_IDisposable);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.Experimental.ExpPointerPoint))]
    [global::ABI.Microsoft.UI.Input.Experimental.ExpPointerPointRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IExpPointerPoint))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65543u)]
    [global::Windows.Foundation.Metadata.Experimental]
    public sealed class ExpPointerPoint : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ExpPointerPoint>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_Experimental_IExpPointerPoint => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Input.Experimental.ExpPointerPoint").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Input_Experimental_IExpPointerPointStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Input_Experimental_IExpPointerPointStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Input_Experimental_IExpPointerPointStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Input_Experimental_IExpPointerPointStatics = ActivationFactory.Get("Microsoft.UI.Input.Experimental.ExpPointerPoint", global::ABI.Microsoft.UI.Input.Experimental.IExpPointerPointStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Input.PointerPoint GetCurrentPoint(uint pointerId) => global::ABI.Microsoft.UI.Input.Experimental.IExpPointerPointStaticsMethods.GetCurrentPoint(_objRef_global__Microsoft_UI_Input_Experimental_IExpPointerPointStatics, pointerId);

        public static global::Microsoft.UI.Input.PointerPoint GetCurrentPointTransformed(uint pointerId, global::Microsoft.UI.Input.IPointerPointTransform transform) => global::ABI.Microsoft.UI.Input.Experimental.IExpPointerPointStaticsMethods.GetCurrentPointTransformed(_objRef_global__Microsoft_UI_Input_Experimental_IExpPointerPointStatics, pointerId, transform);

        public static global::System.Collections.Generic.IList<global::Microsoft.UI.Input.PointerPoint> GetIntermediatePoints(uint pointerId) => global::ABI.Microsoft.UI.Input.Experimental.IExpPointerPointStaticsMethods.GetIntermediatePoints(_objRef_global__Microsoft_UI_Input_Experimental_IExpPointerPointStatics, pointerId);

        public static global::System.Collections.Generic.IList<global::Microsoft.UI.Input.PointerPoint> GetIntermediatePointsTransformed(uint pointerId, global::Microsoft.UI.Input.IPointerPointTransform transform) => global::ABI.Microsoft.UI.Input.Experimental.IExpPointerPointStaticsMethods.GetIntermediatePointsTransformed(_objRef_global__Microsoft_UI_Input_Experimental_IExpPointerPointStatics, pointerId, transform);

        public static ExpPointerPoint FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ExpPointerPoint>.FromAbi(thisPtr);
        }

        internal ExpPointerPoint(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.Experimental.IExpPointerPointMethods.IID);

        }


        public static bool operator ==(ExpPointerPoint x, ExpPointerPoint y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ExpPointerPoint x, ExpPointerPoint y) => !(x == y);
        public bool Equals(ExpPointerPoint other) => this == other;
        public override bool Equals(object obj) => obj is ExpPointerPoint that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("6B707B95-BBE8-5131-A6D7-B11C26CB7CB6")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.Experimental.IExpInputSite))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65543u)]
    [global::Windows.Foundation.Metadata.Experimental]
    internal interface IExpInputSite
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("F9DC0C95-F286-5A1C-B038-7FF84A4E4AF5")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.Experimental.IExpPointerPoint))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65543u)]
    [global::Windows.Foundation.Metadata.Experimental]
    internal interface IExpPointerPoint
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("FAE05D62-8E52-5BF5-A577-FF07BB15E031")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.Experimental.IExpPointerPointStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65543u)]
    [global::Windows.Foundation.Metadata.Experimental]
    internal interface IExpPointerPointStatics
    {
        global::Microsoft.UI.Input.PointerPoint GetCurrentPoint(uint pointerId);
        global::Microsoft.UI.Input.PointerPoint GetCurrentPointTransformed(uint pointerId, global::Microsoft.UI.Input.IPointerPointTransform transform);
        global::System.Collections.Generic.IList<global::Microsoft.UI.Input.PointerPoint> GetIntermediatePoints(uint pointerId);
        global::System.Collections.Generic.IList<global::Microsoft.UI.Input.PointerPoint> GetIntermediatePointsTransformed(uint pointerId, global::Microsoft.UI.Input.IPointerPointTransform transform);
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.UI.Input.Experimental
{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ExpInputSite
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.Experimental.ExpInputSite obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.Experimental.ExpInputSite>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.Experimental.IExpInputSiteMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.Experimental.ExpInputSite obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.Experimental.IExpInputSiteMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.Experimental.ExpInputSite FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.Experimental.ExpInputSite.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.Experimental.ExpInputSite obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.Experimental.ExpInputSite>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.Experimental.ExpInputSite[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.Experimental.ExpInputSite>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.Experimental.ExpInputSite>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.Experimental.ExpInputSite[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.Experimental.ExpInputSite>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.Experimental.ExpInputSite[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.Experimental.ExpInputSite>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.Experimental.ExpInputSite[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.Experimental.ExpInputSite>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.Experimental.ExpInputSite>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.Experimental.ExpInputSite>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ExpInputSiteRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.Experimental.ExpInputSite(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ExpPointerPoint
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.Experimental.ExpPointerPoint obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.Experimental.ExpPointerPoint>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.Experimental.IExpPointerPointMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.Experimental.ExpPointerPoint obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.Experimental.IExpPointerPointMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.Experimental.ExpPointerPoint FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.Experimental.ExpPointerPoint.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.Experimental.ExpPointerPoint obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.Experimental.ExpPointerPoint>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.Experimental.ExpPointerPoint[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.Experimental.ExpPointerPoint>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.Experimental.ExpPointerPoint>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.Experimental.ExpPointerPoint[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.Experimental.ExpPointerPoint>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.Experimental.ExpPointerPoint[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.Experimental.ExpPointerPoint>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.Experimental.ExpPointerPoint[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.Experimental.ExpPointerPoint>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.Experimental.ExpPointerPoint>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.Experimental.ExpPointerPoint>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ExpPointerPointRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.Experimental.ExpPointerPoint(inspectable.ObjRef);
    }
    internal static class IExpInputSiteMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x95, 0x7B, 0x70, 0x6B, 0xE8, 0xBB, 0x31, 0x51, 0xA6, 0xD7, 0xB1, 0x1C, 0x26, 0xCB, 0x7C, 0xB6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("6B707B95-BBE8-5131-A6D7-B11C26CB7CB6")]
    internal interface IExpInputSite : global::Microsoft.UI.Input.Experimental.IExpInputSite
    {
    }
    internal static class IExpPointerPointMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x95, 0xC, 0xDC, 0xF9, 0x86, 0xF2, 0x1C, 0x5A, 0xB0, 0x38, 0x7F, 0xF8, 0x4A, 0x4E, 0x4A, 0xF5 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F9DC0C95-F286-5A1C-B038-7FF84A4E4AF5")]
    internal interface IExpPointerPoint : global::Microsoft.UI.Input.Experimental.IExpPointerPoint
    {
    }
    internal static class IExpPointerPointStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Input.PointerPoint GetCurrentPoint(IObjectReference _obj, uint pointerId)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint, IntPtr*, int>**)ThisPtr)[6](ThisPtr, pointerId, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.PointerPoint.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Input.PointerPoint.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Input.PointerPoint GetCurrentPointTransformed(IObjectReference _obj, uint pointerId, global::Microsoft.UI.Input.IPointerPointTransform transform)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __transform = default;
            IntPtr __retval = default;
            try
            {
                __transform = MarshalInterface<global::Microsoft.UI.Input.IPointerPointTransform>.CreateMarshaler2(transform, global::ABI.Microsoft.UI.Input.IPointerPointTransformMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, pointerId, MarshalInspectable<object>.GetAbi(__transform), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.PointerPoint.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__transform);
                global::ABI.Microsoft.UI.Input.PointerPoint.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Collections.Generic.IList<global::Microsoft.UI.Input.PointerPoint> GetIntermediatePoints(IObjectReference _obj, uint pointerId)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint, IntPtr*, int>**)ThisPtr)[8](ThisPtr, pointerId, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Input_PointerPoint.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Input.PointerPoint>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Input.PointerPoint>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Collections.Generic.IList<global::Microsoft.UI.Input.PointerPoint> GetIntermediatePointsTransformed(IObjectReference _obj, uint pointerId, global::Microsoft.UI.Input.IPointerPointTransform transform)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __transform = default;
            IntPtr __retval = default;
            try
            {
                __transform = MarshalInterface<global::Microsoft.UI.Input.IPointerPointTransform>.CreateMarshaler2(transform, global::ABI.Microsoft.UI.Input.IPointerPointTransformMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint, IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, pointerId, MarshalInspectable<object>.GetAbi(__transform), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Input_PointerPoint.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Input.PointerPoint>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__transform);
                MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Input.PointerPoint>>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x62, 0x5D, 0xE0, 0xFA, 0x52, 0x8E, 0xF5, 0x5B, 0xA5, 0x77, 0xFF, 0x7, 0xBB, 0x15, 0xE0, 0x31 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("FAE05D62-8E52-5BF5-A577-FF07BB15E031")]
    internal interface IExpPointerPointStatics : global::Microsoft.UI.Input.Experimental.IExpPointerPointStatics
    {
    }
}
#pragma warning restore CA1416
