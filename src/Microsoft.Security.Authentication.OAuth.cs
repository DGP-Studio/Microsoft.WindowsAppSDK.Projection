//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.Security.Authentication.OAuth
{
    [global::WinRT.WindowsRuntimeType("Microsoft.Security.Authentication.OAuth")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Security.Authentication.OAuth.AuthFailure))]
    [global::ABI.Microsoft.Security.Authentication.OAuth.AuthFailureRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IAuthFailure))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(OAuthContract), 65536u)]
    public sealed class AuthFailure : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<AuthFailure>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Security_Authentication_OAuth_IAuthFailure => _inner;


        public static AuthFailure FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<AuthFailure>.FromAbi(thisPtr);
        }

        internal AuthFailure(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Security.Authentication.OAuth.IAuthFailureMethods.IID);

        }


        public static bool operator ==(AuthFailure x, AuthFailure y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(AuthFailure x, AuthFailure y) => !(x == y);
        public bool Equals(AuthFailure other) => this == other;
        public override bool Equals(object obj) => obj is AuthFailure that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::System.Collections.Generic.IReadOnlyDictionary<string, string> AdditionalParams => global::ABI.Microsoft.Security.Authentication.OAuth.IAuthFailureMethods.get_AdditionalParams(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthFailure);

        public string Error => global::ABI.Microsoft.Security.Authentication.OAuth.IAuthFailureMethods.get_Error(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthFailure);

        public string ErrorDescription => global::ABI.Microsoft.Security.Authentication.OAuth.IAuthFailureMethods.get_ErrorDescription(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthFailure);

        public global::System.Uri ErrorUri => global::ABI.Microsoft.Security.Authentication.OAuth.IAuthFailureMethods.get_ErrorUri(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthFailure);

        public string State => global::ABI.Microsoft.Security.Authentication.OAuth.IAuthFailureMethods.get_State(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthFailure);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Security.Authentication.OAuth")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Security.Authentication.OAuth.AuthRequestParams))]
    [global::ABI.Microsoft.Security.Authentication.OAuth.AuthRequestParamsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IAuthRequestParams))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(OAuthContract), 65536u)]
    public sealed class AuthRequestParams : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<AuthRequestParams>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Security_Authentication_OAuth_IAuthRequestParams => _inner;


        private static class _IAuthRequestParamsFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, string responseType, string clientId)
            {
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                MarshalString.Pinnable __responseType = new(responseType);
                MarshalString.Pinnable __clientId = new(clientId);
                fixed(void* ___responseType = __responseType, ___clientId = __clientId)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __responseType), MarshalString.GetAbi(ref __clientId), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return __retval;
                }
            }

            public static unsafe IntPtr CreateInstance2(IObjectReference _obj, string responseType, string clientId, global::System.Uri redirectUri)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __redirectUri = default;
                IntPtr __retval = default;
                try
                {
                    __redirectUri = global::ABI.System.Uri.CreateMarshaler2(redirectUri);
                    MarshalString.Pinnable __responseType = new(responseType);
                    MarshalString.Pinnable __clientId = new(clientId);
                    fixed(void* ___responseType = __responseType, ___clientId = __clientId)
                    {
                        global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __responseType), MarshalString.GetAbi(ref __clientId), MarshalInspectable<object>.GetAbi(__redirectUri), &__retval));
                        global::System.GC.KeepAlive(_obj);
                        return __retval;
                    }
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__redirectUri);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_Security_Authentication_OAuth_IAuthRequestParamsFactory;
        private static IObjectReference _objRef_global__Microsoft_Security_Authentication_OAuth_IAuthRequestParamsFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Security_Authentication_OAuth_IAuthRequestParamsFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Security_Authentication_OAuth_IAuthRequestParamsFactory = ActivationFactory.Get("Microsoft.Security.Authentication.OAuth.AuthRequestParams", global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestParamsFactoryMethods.IID);
                }
            }
        }

        public AuthRequestParams(string responseType, string clientId) 
        { 
        IntPtr ptr = (_IAuthRequestParamsFactoryMethods.CreateInstance(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthRequestParamsFactory, responseType, clientId)); 
        try 
        { 
        _inner = ComWrappersSupport.GetObjectReferenceForInterface(ptr, global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestParamsMethods.IID, false); 

        } 
        finally 
        { 
        MarshalInspectable<object>.DisposeAbi(ptr); 
        }

        ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
        ComWrappersHelper.Init(_inner, false);
        }

        public AuthRequestParams(string responseType, string clientId, global::System.Uri redirectUri) 
        { 
        IntPtr ptr = (_IAuthRequestParamsFactoryMethods.CreateInstance2(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthRequestParamsFactory, responseType, clientId, redirectUri)); 
        try 
        { 
        _inner = ComWrappersSupport.GetObjectReferenceForInterface(ptr, global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestParamsMethods.IID, false); 

        } 
        finally 
        { 
        MarshalInspectable<object>.DisposeAbi(ptr); 
        }

        ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
        ComWrappersHelper.Init(_inner, false);
        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.Security.Authentication.OAuth.AuthRequestParams").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_Security_Authentication_OAuth_IAuthRequestParamsStatics;
        private static IObjectReference _objRef_global__Microsoft_Security_Authentication_OAuth_IAuthRequestParamsStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Security_Authentication_OAuth_IAuthRequestParamsStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Security_Authentication_OAuth_IAuthRequestParamsStatics = ActivationFactory.Get("Microsoft.Security.Authentication.OAuth.AuthRequestParams", global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestParamsStaticsMethods.IID);
                }
            }
        }

        public static AuthRequestParams CreateForAuthorizationCodeRequest(string clientId) => global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestParamsStaticsMethods.CreateForAuthorizationCodeRequest(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthRequestParamsStatics, clientId);

        public static AuthRequestParams CreateForAuthorizationCodeRequest(string clientId, global::System.Uri redirectUri) => global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestParamsStaticsMethods.CreateForAuthorizationCodeRequest(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthRequestParamsStatics, clientId, redirectUri);

        public static AuthRequestParams FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<AuthRequestParams>.FromAbi(thisPtr);
        }

        internal AuthRequestParams(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestParamsMethods.IID);

        }


        public static bool operator ==(AuthRequestParams x, AuthRequestParams y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(AuthRequestParams x, AuthRequestParams y) => !(x == y);
        public bool Equals(AuthRequestParams other) => this == other;
        public override bool Equals(object obj) => obj is AuthRequestParams that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::System.Collections.Generic.IDictionary<string, string> AdditionalParams => global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestParamsMethods.get_AdditionalParams(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthRequestParams);

        public string ClientId
        {
            get => global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestParamsMethods.get_ClientId(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthRequestParams);
            set => global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestParamsMethods.set_ClientId(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthRequestParams, value);
        }

        public string CodeChallenge
        {
            get => global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestParamsMethods.get_CodeChallenge(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthRequestParams);
            set => global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestParamsMethods.set_CodeChallenge(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthRequestParams, value);
        }

        public CodeChallengeMethodKind CodeChallengeMethod
        {
            get => global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestParamsMethods.get_CodeChallengeMethod(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthRequestParams);
            set => global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestParamsMethods.set_CodeChallengeMethod(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthRequestParams, value);
        }

        public global::System.Uri RedirectUri
        {
            get => global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestParamsMethods.get_RedirectUri(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthRequestParams);
            set => global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestParamsMethods.set_RedirectUri(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthRequestParams, value);
        }

        public string ResponseType
        {
            get => global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestParamsMethods.get_ResponseType(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthRequestParams);
            set => global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestParamsMethods.set_ResponseType(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthRequestParams, value);
        }

        public string Scope
        {
            get => global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestParamsMethods.get_Scope(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthRequestParams);
            set => global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestParamsMethods.set_Scope(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthRequestParams, value);
        }

        public string State
        {
            get => global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestParamsMethods.get_State(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthRequestParams);
            set => global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestParamsMethods.set_State(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthRequestParams, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Security.Authentication.OAuth")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Security.Authentication.OAuth.AuthRequestResult))]
    [global::ABI.Microsoft.Security.Authentication.OAuth.AuthRequestResultRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IAuthRequestResult))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(OAuthContract), 65536u)]
    public sealed class AuthRequestResult : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<AuthRequestResult>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Security_Authentication_OAuth_IAuthRequestResult => _inner;


        public static AuthRequestResult FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<AuthRequestResult>.FromAbi(thisPtr);
        }

        internal AuthRequestResult(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestResultMethods.IID);

        }


        public static bool operator ==(AuthRequestResult x, AuthRequestResult y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(AuthRequestResult x, AuthRequestResult y) => !(x == y);
        public bool Equals(AuthRequestResult other) => this == other;
        public override bool Equals(object obj) => obj is AuthRequestResult that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public AuthFailure Failure => global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestResultMethods.get_Failure(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthRequestResult);

        public AuthResponse Response => global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestResultMethods.get_Response(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthRequestResult);

        public global::System.Uri ResponseUri => global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestResultMethods.get_ResponseUri(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthRequestResult);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Security.Authentication.OAuth")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Security.Authentication.OAuth.AuthResponse))]
    [global::ABI.Microsoft.Security.Authentication.OAuth.AuthResponseRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IAuthResponse))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(OAuthContract), 65536u)]
    public sealed class AuthResponse : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<AuthResponse>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Security_Authentication_OAuth_IAuthResponse => _inner;


        public static AuthResponse FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<AuthResponse>.FromAbi(thisPtr);
        }

        internal AuthResponse(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Security.Authentication.OAuth.IAuthResponseMethods.IID);

        }


        public static bool operator ==(AuthResponse x, AuthResponse y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(AuthResponse x, AuthResponse y) => !(x == y);
        public bool Equals(AuthResponse other) => this == other;
        public override bool Equals(object obj) => obj is AuthResponse that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public string AccessToken => global::ABI.Microsoft.Security.Authentication.OAuth.IAuthResponseMethods.get_AccessToken(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthResponse);

        public global::System.Collections.Generic.IReadOnlyDictionary<string, string> AdditionalParams => global::ABI.Microsoft.Security.Authentication.OAuth.IAuthResponseMethods.get_AdditionalParams(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthResponse);

        public string Code => global::ABI.Microsoft.Security.Authentication.OAuth.IAuthResponseMethods.get_Code(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthResponse);

        public string ExpiresIn => global::ABI.Microsoft.Security.Authentication.OAuth.IAuthResponseMethods.get_ExpiresIn(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthResponse);

        public string Scope => global::ABI.Microsoft.Security.Authentication.OAuth.IAuthResponseMethods.get_Scope(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthResponse);

        public string State => global::ABI.Microsoft.Security.Authentication.OAuth.IAuthResponseMethods.get_State(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthResponse);

        public string TokenType => global::ABI.Microsoft.Security.Authentication.OAuth.IAuthResponseMethods.get_TokenType(_objRef_global__Microsoft_Security_Authentication_OAuth_IAuthResponse);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Security.Authentication.OAuth")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Security.Authentication.OAuth.ClientAuthentication))]
    [global::ABI.Microsoft.Security.Authentication.OAuth.ClientAuthenticationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IClientAuthentication))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(OAuthContract), 65536u)]
    public sealed class ClientAuthentication : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ClientAuthentication>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Security_Authentication_OAuth_IClientAuthentication => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_Security_Authentication_OAuth_ClientAuthentication;
        private static IObjectReference _objRef_global__Microsoft_Security_Authentication_OAuth_ClientAuthentication
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Security_Authentication_OAuth_ClientAuthentication;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Security_Authentication_OAuth_ClientAuthentication = ActivationFactory.Get("Microsoft.Security.Authentication.OAuth.ClientAuthentication");
                }
            }
        }

        public ClientAuthentication() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_Security_Authentication_OAuth_ClientAuthentication, global::ABI.Microsoft.Security.Authentication.OAuth.IClientAuthenticationMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        private static class _IClientAuthenticationFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, global::Windows.Web.Http.Headers.HttpCredentialsHeaderValue authorization)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __authorization = default;
                IntPtr __retval = default;
                try
                {
                    __authorization = global::ABI.Windows.Web.Http.Headers.HttpCredentialsHeaderValue.CreateMarshaler2(authorization);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__authorization), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__authorization);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_Security_Authentication_OAuth_IClientAuthenticationFactory;
        private static IObjectReference _objRef_global__Microsoft_Security_Authentication_OAuth_IClientAuthenticationFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Security_Authentication_OAuth_IClientAuthenticationFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Security_Authentication_OAuth_IClientAuthenticationFactory = ActivationFactory.Get("Microsoft.Security.Authentication.OAuth.ClientAuthentication", global::ABI.Microsoft.Security.Authentication.OAuth.IClientAuthenticationFactoryMethods.IID);
                }
            }
        }

        public ClientAuthentication(global::Windows.Web.Http.Headers.HttpCredentialsHeaderValue authorization) 
        { 
        IntPtr ptr = (_IClientAuthenticationFactoryMethods.CreateInstance(_objRef_global__Microsoft_Security_Authentication_OAuth_IClientAuthenticationFactory, authorization)); 
        try 
        { 
        _inner = ComWrappersSupport.GetObjectReferenceForInterface(ptr, global::ABI.Microsoft.Security.Authentication.OAuth.IClientAuthenticationMethods.IID, false); 

        } 
        finally 
        { 
        MarshalInspectable<object>.DisposeAbi(ptr); 
        }

        ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
        ComWrappersHelper.Init(_inner, false);
        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.Security.Authentication.OAuth.ClientAuthentication").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_Security_Authentication_OAuth_IClientAuthenticationStatics;
        private static IObjectReference _objRef_global__Microsoft_Security_Authentication_OAuth_IClientAuthenticationStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Security_Authentication_OAuth_IClientAuthenticationStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Security_Authentication_OAuth_IClientAuthenticationStatics = ActivationFactory.Get("Microsoft.Security.Authentication.OAuth.ClientAuthentication", global::ABI.Microsoft.Security.Authentication.OAuth.IClientAuthenticationStaticsMethods.IID);
                }
            }
        }

        public static ClientAuthentication CreateForBasicAuthorization(string clientId, string clientSecret) => global::ABI.Microsoft.Security.Authentication.OAuth.IClientAuthenticationStaticsMethods.CreateForBasicAuthorization(_objRef_global__Microsoft_Security_Authentication_OAuth_IClientAuthenticationStatics, clientId, clientSecret);

        public static ClientAuthentication FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ClientAuthentication>.FromAbi(thisPtr);
        }

        internal ClientAuthentication(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Security.Authentication.OAuth.IClientAuthenticationMethods.IID);

        }


        public static bool operator ==(ClientAuthentication x, ClientAuthentication y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ClientAuthentication x, ClientAuthentication y) => !(x == y);
        public bool Equals(ClientAuthentication other) => this == other;
        public override bool Equals(object obj) => obj is ClientAuthentication that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::System.Collections.Generic.IDictionary<string, string> AdditionalHeaders => global::ABI.Microsoft.Security.Authentication.OAuth.IClientAuthenticationMethods.get_AdditionalHeaders(_objRef_global__Microsoft_Security_Authentication_OAuth_IClientAuthentication);

        public global::Windows.Web.Http.Headers.HttpCredentialsHeaderValue Authorization
        {
            get => global::ABI.Microsoft.Security.Authentication.OAuth.IClientAuthenticationMethods.get_Authorization(_objRef_global__Microsoft_Security_Authentication_OAuth_IClientAuthentication);
            set => global::ABI.Microsoft.Security.Authentication.OAuth.IClientAuthenticationMethods.set_Authorization(_objRef_global__Microsoft_Security_Authentication_OAuth_IClientAuthentication, value);
        }

        public global::Windows.Web.Http.Headers.HttpCredentialsHeaderValue ProxyAuthorization
        {
            get => global::ABI.Microsoft.Security.Authentication.OAuth.IClientAuthenticationMethods.get_ProxyAuthorization(_objRef_global__Microsoft_Security_Authentication_OAuth_IClientAuthentication);
            set => global::ABI.Microsoft.Security.Authentication.OAuth.IClientAuthenticationMethods.set_ProxyAuthorization(_objRef_global__Microsoft_Security_Authentication_OAuth_IClientAuthentication, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Security.Authentication.OAuth")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CodeChallengeMethodKind>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(OAuthContract), 65536u)]
    public enum CodeChallengeMethodKind : int
    {
        None = unchecked((int)0),
        S256 = unchecked((int)0x1),
        Plain = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Security.Authentication.OAuth")][Guid("EC55ED5F-0497-53CB-976B-ABD146350175")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Security.Authentication.OAuth.IAuthFailure))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(OAuthContract), 65536u)]
    internal interface IAuthFailure
    {
        global::System.Collections.Generic.IReadOnlyDictionary<string, string> AdditionalParams { get; }
        string Error { get; }
        string ErrorDescription { get; }
        global::System.Uri ErrorUri { get; }
        string State { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Security.Authentication.OAuth")][Guid("AAC61E23-9155-551A-AC37-CDB2995F88D2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestParams))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(OAuthContract), 65536u)]
    internal interface IAuthRequestParams
    {
        global::System.Collections.Generic.IDictionary<string, string> AdditionalParams { get; }
        string ClientId { get; set; }
        string CodeChallenge { get; set; }
        CodeChallengeMethodKind CodeChallengeMethod { get; set; }
        global::System.Uri RedirectUri { get; set; }
        string ResponseType { get; set; }
        string Scope { get; set; }
        string State { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Security.Authentication.OAuth")][Guid("539BDCA7-BDE4-5A63-85D1-33403F6E3452")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestParamsFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(OAuthContract), 65536u)]
    internal interface IAuthRequestParamsFactory
    {
        AuthRequestParams CreateInstance(string responseType, string clientId);
        AuthRequestParams CreateInstance2(string responseType, string clientId, global::System.Uri redirectUri);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Security.Authentication.OAuth")][Guid("0BEFD4F0-6864-5BF4-BD8E-2F3BF98906B5")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestParamsStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(OAuthContract), 65536u)]
    internal interface IAuthRequestParamsStatics
    {
        [global::Windows.Foundation.Metadata.Overload(@"CreateForAuthorizationCodeRequest")]
        AuthRequestParams CreateForAuthorizationCodeRequest(string clientId);
        [global::Windows.Foundation.Metadata.Overload(@"CreateForAuthorizationCodeRequest2")]
        AuthRequestParams CreateForAuthorizationCodeRequest(string clientId, global::System.Uri redirectUri);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Security.Authentication.OAuth")][Guid("10F8B804-04CF-5651-BD52-7DA9346DEBC1")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestResult))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(OAuthContract), 65536u)]
    internal interface IAuthRequestResult
    {
        AuthFailure Failure { get; }
        AuthResponse Response { get; }
        global::System.Uri ResponseUri { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Security.Authentication.OAuth")][Guid("5BC1FA62-FDED-5769-9D40-DED1EEA90D72")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Security.Authentication.OAuth.IAuthResponse))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(OAuthContract), 65536u)]
    internal interface IAuthResponse
    {
        string AccessToken { get; }
        global::System.Collections.Generic.IReadOnlyDictionary<string, string> AdditionalParams { get; }
        string Code { get; }
        string ExpiresIn { get; }
        string Scope { get; }
        string State { get; }
        string TokenType { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Security.Authentication.OAuth")][Guid("EF99342D-D597-5EFF-878A-8DE0CB597172")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Security.Authentication.OAuth.IClientAuthentication))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(OAuthContract), 65536u)]
    internal interface IClientAuthentication
    {
        global::System.Collections.Generic.IDictionary<string, string> AdditionalHeaders { get; }
        global::Windows.Web.Http.Headers.HttpCredentialsHeaderValue Authorization { get; set; }
        global::Windows.Web.Http.Headers.HttpCredentialsHeaderValue ProxyAuthorization { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Security.Authentication.OAuth")][Guid("0D50E9F5-C37F-57CC-B9EC-2B193B0F9CEC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Security.Authentication.OAuth.IClientAuthenticationFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(OAuthContract), 65536u)]
    internal interface IClientAuthenticationFactory
    {
        ClientAuthentication CreateInstance(global::Windows.Web.Http.Headers.HttpCredentialsHeaderValue authorization);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Security.Authentication.OAuth")][Guid("65613560-2B6F-52FD-A479-3A96624682AE")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Security.Authentication.OAuth.IClientAuthenticationStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(OAuthContract), 65536u)]
    internal interface IClientAuthenticationStatics
    {
        ClientAuthentication CreateForBasicAuthorization(string clientId, string clientSecret);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Security.Authentication.OAuth")][Guid("AC9D0DD1-C07E-5302-8150-199C7D343F57")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Security.Authentication.OAuth.IOAuth2ManagerStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(OAuthContract), 65536u)]
    internal interface IOAuth2ManagerStatics
    {
        global::Windows.Foundation.IAsyncOperation<AuthRequestResult> RequestAuthWithParamsAsync(global::Microsoft.UI.WindowId parentWindowId, global::System.Uri authEndpoint, AuthRequestParams @params);
        bool CompleteAuthRequest(global::System.Uri responseUri);
        [global::Windows.Foundation.Metadata.Overload(@"RequestTokenAsync")]
        global::Windows.Foundation.IAsyncOperation<TokenRequestResult> RequestTokenAsync(global::System.Uri tokenEndpoint, TokenRequestParams @params);
        [global::Windows.Foundation.Metadata.Overload(@"RequestTokenAsync2")]
        global::Windows.Foundation.IAsyncOperation<TokenRequestResult> RequestTokenAsync(global::System.Uri tokenEndpoint, TokenRequestParams @params, ClientAuthentication clientAuth);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Security.Authentication.OAuth")][Guid("60F8D417-EA6A-51D2-8AD7-F0E5177AEF0A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Security.Authentication.OAuth.ITokenFailure))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(OAuthContract), 65536u)]
    internal interface ITokenFailure
    {
        global::System.Collections.Generic.IReadOnlyDictionary<string, global::Windows.Data.Json.IJsonValue> AdditionalParams { get; }
        string Error { get; }
        global::System.Exception ErrorCode { get; }
        string ErrorDescription { get; }
        global::System.Uri ErrorUri { get; }
        TokenFailureKind Kind { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Security.Authentication.OAuth")][Guid("49134DBC-AAB5-5BA4-BCDF-950214D81182")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestParams))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(OAuthContract), 65536u)]
    internal interface ITokenRequestParams
    {
        global::System.Collections.Generic.IDictionary<string, string> AdditionalParams { get; }
        string ClientId { get; set; }
        string Code { get; set; }
        string CodeVerifier { get; set; }
        string GrantType { get; set; }
        string Password { get; set; }
        global::System.Uri RedirectUri { get; set; }
        string RefreshToken { get; set; }
        string Scope { get; set; }
        string Username { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Security.Authentication.OAuth")][Guid("2BF39C30-2F30-5788-98D2-A8BA622BE809")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestParamsFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(OAuthContract), 65536u)]
    internal interface ITokenRequestParamsFactory
    {
        TokenRequestParams CreateInstance(string grantType);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Security.Authentication.OAuth")][Guid("68B7AF65-4381-5593-8820-F74A605B9F3B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestParamsStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(OAuthContract), 65536u)]
    internal interface ITokenRequestParamsStatics
    {
        TokenRequestParams CreateForAuthorizationCodeRequest(AuthResponse authResponse);
        TokenRequestParams CreateForClientCredentials();
        TokenRequestParams CreateForExtension(global::System.Uri extensionUri);
        TokenRequestParams CreateForRefreshToken(string refreshToken);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Security.Authentication.OAuth")][Guid("35B31F77-F166-50DF-A837-EC0460215166")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestResult))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(OAuthContract), 65536u)]
    internal interface ITokenRequestResult
    {
        TokenFailure Failure { get; }
        TokenResponse Response { get; }
        global::Windows.Web.Http.HttpResponseMessage ResponseMessage { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Security.Authentication.OAuth")][Guid("9D9D8CD3-04B2-5DF6-BFD2-E8A6859745DA")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Security.Authentication.OAuth.ITokenResponse))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(OAuthContract), 65536u)]
    internal interface ITokenResponse
    {
        string AccessToken { get; }
        global::System.Collections.Generic.IReadOnlyDictionary<string, global::Windows.Data.Json.IJsonValue> AdditionalParams { get; }
        double ExpiresIn { get; }
        string RefreshToken { get; }
        string Scope { get; }
        string TokenType { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Security.Authentication.OAuth")][global::Windows.Foundation.Metadata.ContractVersion(typeof(OAuthContract), 65536u)]
    public static class OAuth2Manager
    {

        public static I As<I>() => ActivationFactory.Get("Microsoft.Security.Authentication.OAuth.OAuth2Manager").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_Security_Authentication_OAuth_IOAuth2ManagerStatics;
        private static IObjectReference _objRef_global__Microsoft_Security_Authentication_OAuth_IOAuth2ManagerStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Security_Authentication_OAuth_IOAuth2ManagerStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Security_Authentication_OAuth_IOAuth2ManagerStatics = ActivationFactory.Get("Microsoft.Security.Authentication.OAuth.OAuth2Manager", global::ABI.Microsoft.Security.Authentication.OAuth.IOAuth2ManagerStaticsMethods.IID);
                }
            }
        }

        public static global::Windows.Foundation.IAsyncOperation<AuthRequestResult> RequestAuthWithParamsAsync(global::Microsoft.UI.WindowId parentWindowId, global::System.Uri authEndpoint, AuthRequestParams @params) => global::ABI.Microsoft.Security.Authentication.OAuth.IOAuth2ManagerStaticsMethods.RequestAuthWithParamsAsync(_objRef_global__Microsoft_Security_Authentication_OAuth_IOAuth2ManagerStatics, parentWindowId, authEndpoint, @params);

        public static bool CompleteAuthRequest(global::System.Uri responseUri) => global::ABI.Microsoft.Security.Authentication.OAuth.IOAuth2ManagerStaticsMethods.CompleteAuthRequest(_objRef_global__Microsoft_Security_Authentication_OAuth_IOAuth2ManagerStatics, responseUri);

        public static global::Windows.Foundation.IAsyncOperation<TokenRequestResult> RequestTokenAsync(global::System.Uri tokenEndpoint, TokenRequestParams @params) => global::ABI.Microsoft.Security.Authentication.OAuth.IOAuth2ManagerStaticsMethods.RequestTokenAsync(_objRef_global__Microsoft_Security_Authentication_OAuth_IOAuth2ManagerStatics, tokenEndpoint, @params);

        public static global::Windows.Foundation.IAsyncOperation<TokenRequestResult> RequestTokenAsync(global::System.Uri tokenEndpoint, TokenRequestParams @params, ClientAuthentication clientAuth) => global::ABI.Microsoft.Security.Authentication.OAuth.IOAuth2ManagerStaticsMethods.RequestTokenAsync(_objRef_global__Microsoft_Security_Authentication_OAuth_IOAuth2ManagerStatics, tokenEndpoint, @params, clientAuth);
    }
    [global::Windows.Foundation.Metadata.ContractVersion(65536u)]
    public enum OAuthContract
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Security.Authentication.OAuth")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Security.Authentication.OAuth.TokenFailure))]
    [global::ABI.Microsoft.Security.Authentication.OAuth.TokenFailureRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ITokenFailure))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(OAuthContract), 65536u)]
    public sealed class TokenFailure : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<TokenFailure>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Security_Authentication_OAuth_ITokenFailure => _inner;


        public static TokenFailure FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<TokenFailure>.FromAbi(thisPtr);
        }

        internal TokenFailure(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Security.Authentication.OAuth.ITokenFailureMethods.IID);

        }


        public static bool operator ==(TokenFailure x, TokenFailure y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(TokenFailure x, TokenFailure y) => !(x == y);
        public bool Equals(TokenFailure other) => this == other;
        public override bool Equals(object obj) => obj is TokenFailure that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::System.Collections.Generic.IReadOnlyDictionary<string, global::Windows.Data.Json.IJsonValue> AdditionalParams => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenFailureMethods.get_AdditionalParams(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenFailure);

        public string Error => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenFailureMethods.get_Error(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenFailure);

        public global::System.Exception ErrorCode => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenFailureMethods.get_ErrorCode(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenFailure);

        public string ErrorDescription => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenFailureMethods.get_ErrorDescription(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenFailure);

        public global::System.Uri ErrorUri => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenFailureMethods.get_ErrorUri(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenFailure);

        public TokenFailureKind Kind => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenFailureMethods.get_Kind(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenFailure);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Security.Authentication.OAuth")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<TokenFailureKind>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(OAuthContract), 65536u)]
    public enum TokenFailureKind : int
    {
        ErrorResponse = unchecked((int)0),
        HttpFailure = unchecked((int)0x1),
        InvalidResponse = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Security.Authentication.OAuth")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Security.Authentication.OAuth.TokenRequestParams))]
    [global::ABI.Microsoft.Security.Authentication.OAuth.TokenRequestParamsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ITokenRequestParams))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(OAuthContract), 65536u)]
    public sealed class TokenRequestParams : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<TokenRequestParams>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParams => _inner;


        private static class _ITokenRequestParamsFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, string grantType)
            {
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                MarshalString.Pinnable __grantType = new(grantType);
                fixed(void* ___grantType = __grantType)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __grantType), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return __retval;
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParamsFactory;
        private static IObjectReference _objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParamsFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParamsFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParamsFactory = ActivationFactory.Get("Microsoft.Security.Authentication.OAuth.TokenRequestParams", global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestParamsFactoryMethods.IID);
                }
            }
        }

        public TokenRequestParams(string grantType) 
        { 
        IntPtr ptr = (_ITokenRequestParamsFactoryMethods.CreateInstance(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParamsFactory, grantType)); 
        try 
        { 
        _inner = ComWrappersSupport.GetObjectReferenceForInterface(ptr, global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestParamsMethods.IID, false); 

        } 
        finally 
        { 
        MarshalInspectable<object>.DisposeAbi(ptr); 
        }

        ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
        ComWrappersHelper.Init(_inner, false);
        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.Security.Authentication.OAuth.TokenRequestParams").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParamsStatics;
        private static IObjectReference _objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParamsStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParamsStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParamsStatics = ActivationFactory.Get("Microsoft.Security.Authentication.OAuth.TokenRequestParams", global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestParamsStaticsMethods.IID);
                }
            }
        }

        public static TokenRequestParams CreateForAuthorizationCodeRequest(AuthResponse authResponse) => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestParamsStaticsMethods.CreateForAuthorizationCodeRequest(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParamsStatics, authResponse);

        public static TokenRequestParams CreateForClientCredentials() => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestParamsStaticsMethods.CreateForClientCredentials(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParamsStatics);

        public static TokenRequestParams CreateForExtension(global::System.Uri extensionUri) => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestParamsStaticsMethods.CreateForExtension(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParamsStatics, extensionUri);

        public static TokenRequestParams CreateForRefreshToken(string refreshToken) => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestParamsStaticsMethods.CreateForRefreshToken(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParamsStatics, refreshToken);

        public static TokenRequestParams FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<TokenRequestParams>.FromAbi(thisPtr);
        }

        internal TokenRequestParams(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestParamsMethods.IID);

        }


        public static bool operator ==(TokenRequestParams x, TokenRequestParams y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(TokenRequestParams x, TokenRequestParams y) => !(x == y);
        public bool Equals(TokenRequestParams other) => this == other;
        public override bool Equals(object obj) => obj is TokenRequestParams that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::System.Collections.Generic.IDictionary<string, string> AdditionalParams => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestParamsMethods.get_AdditionalParams(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParams);

        public string ClientId
        {
            get => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestParamsMethods.get_ClientId(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParams);
            set => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestParamsMethods.set_ClientId(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParams, value);
        }

        public string Code
        {
            get => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestParamsMethods.get_Code(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParams);
            set => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestParamsMethods.set_Code(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParams, value);
        }

        public string CodeVerifier
        {
            get => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestParamsMethods.get_CodeVerifier(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParams);
            set => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestParamsMethods.set_CodeVerifier(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParams, value);
        }

        public string GrantType
        {
            get => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestParamsMethods.get_GrantType(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParams);
            set => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestParamsMethods.set_GrantType(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParams, value);
        }

        public string Password
        {
            get => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestParamsMethods.get_Password(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParams);
            set => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestParamsMethods.set_Password(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParams, value);
        }

        public global::System.Uri RedirectUri
        {
            get => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestParamsMethods.get_RedirectUri(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParams);
            set => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestParamsMethods.set_RedirectUri(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParams, value);
        }

        public string RefreshToken
        {
            get => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestParamsMethods.get_RefreshToken(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParams);
            set => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestParamsMethods.set_RefreshToken(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParams, value);
        }

        public string Scope
        {
            get => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestParamsMethods.get_Scope(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParams);
            set => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestParamsMethods.set_Scope(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParams, value);
        }

        public string Username
        {
            get => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestParamsMethods.get_Username(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParams);
            set => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestParamsMethods.set_Username(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestParams, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Security.Authentication.OAuth")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Security.Authentication.OAuth.TokenRequestResult))]
    [global::ABI.Microsoft.Security.Authentication.OAuth.TokenRequestResultRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ITokenRequestResult))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(OAuthContract), 65536u)]
    public sealed class TokenRequestResult : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<TokenRequestResult>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestResult => _inner;


        public static TokenRequestResult FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<TokenRequestResult>.FromAbi(thisPtr);
        }

        internal TokenRequestResult(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestResultMethods.IID);

        }


        public static bool operator ==(TokenRequestResult x, TokenRequestResult y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(TokenRequestResult x, TokenRequestResult y) => !(x == y);
        public bool Equals(TokenRequestResult other) => this == other;
        public override bool Equals(object obj) => obj is TokenRequestResult that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public TokenFailure Failure => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestResultMethods.get_Failure(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestResult);

        public TokenResponse Response => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestResultMethods.get_Response(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestResult);

        public global::Windows.Web.Http.HttpResponseMessage ResponseMessage => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestResultMethods.get_ResponseMessage(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenRequestResult);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Security.Authentication.OAuth")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Security.Authentication.OAuth.TokenResponse))]
    [global::ABI.Microsoft.Security.Authentication.OAuth.TokenResponseRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ITokenResponse))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(OAuthContract), 65536u)]
    public sealed class TokenResponse : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<TokenResponse>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Security_Authentication_OAuth_ITokenResponse => _inner;


        public static TokenResponse FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<TokenResponse>.FromAbi(thisPtr);
        }

        internal TokenResponse(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Security.Authentication.OAuth.ITokenResponseMethods.IID);

        }


        public static bool operator ==(TokenResponse x, TokenResponse y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(TokenResponse x, TokenResponse y) => !(x == y);
        public bool Equals(TokenResponse other) => this == other;
        public override bool Equals(object obj) => obj is TokenResponse that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public string AccessToken => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenResponseMethods.get_AccessToken(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenResponse);

        public global::System.Collections.Generic.IReadOnlyDictionary<string, global::Windows.Data.Json.IJsonValue> AdditionalParams => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenResponseMethods.get_AdditionalParams(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenResponse);

        public double ExpiresIn => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenResponseMethods.get_ExpiresIn(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenResponse);

        public string RefreshToken => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenResponseMethods.get_RefreshToken(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenResponse);

        public string Scope => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenResponseMethods.get_Scope(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenResponse);

        public string TokenType => global::ABI.Microsoft.Security.Authentication.OAuth.ITokenResponseMethods.get_TokenType(_objRef_global__Microsoft_Security_Authentication_OAuth_ITokenResponse);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.Security.Authentication.OAuth
{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct AuthFailure
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Security.Authentication.OAuth.AuthFailure obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Security.Authentication.OAuth.AuthFailure>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Security.Authentication.OAuth.IAuthFailureMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Security.Authentication.OAuth.AuthFailure obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Security.Authentication.OAuth.IAuthFailureMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Security.Authentication.OAuth.AuthFailure FromAbi(IntPtr thisPtr) => global::Microsoft.Security.Authentication.OAuth.AuthFailure.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Security.Authentication.OAuth.AuthFailure obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.AuthFailure>.MarshalerArray CreateMarshalerArray(global::Microsoft.Security.Authentication.OAuth.AuthFailure[] array) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.AuthFailure>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.AuthFailure>.GetAbiArray(box);
        public static unsafe global::Microsoft.Security.Authentication.OAuth.AuthFailure[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.AuthFailure>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Security.Authentication.OAuth.AuthFailure[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.AuthFailure>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Security.Authentication.OAuth.AuthFailure[] array) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.AuthFailure>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.AuthFailure>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.AuthFailure>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class AuthFailureRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Security.Authentication.OAuth.AuthFailure(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct AuthRequestParams
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Security.Authentication.OAuth.AuthRequestParams obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Security.Authentication.OAuth.AuthRequestParams>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestParamsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Security.Authentication.OAuth.AuthRequestParams obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestParamsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Security.Authentication.OAuth.AuthRequestParams FromAbi(IntPtr thisPtr) => global::Microsoft.Security.Authentication.OAuth.AuthRequestParams.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Security.Authentication.OAuth.AuthRequestParams obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.AuthRequestParams>.MarshalerArray CreateMarshalerArray(global::Microsoft.Security.Authentication.OAuth.AuthRequestParams[] array) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.AuthRequestParams>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.AuthRequestParams>.GetAbiArray(box);
        public static unsafe global::Microsoft.Security.Authentication.OAuth.AuthRequestParams[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.AuthRequestParams>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Security.Authentication.OAuth.AuthRequestParams[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.AuthRequestParams>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Security.Authentication.OAuth.AuthRequestParams[] array) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.AuthRequestParams>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.AuthRequestParams>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.AuthRequestParams>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class AuthRequestParamsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Security.Authentication.OAuth.AuthRequestParams(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct AuthRequestResult
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Security.Authentication.OAuth.AuthRequestResult obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Security.Authentication.OAuth.AuthRequestResult>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestResultMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Security.Authentication.OAuth.AuthRequestResult obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Security.Authentication.OAuth.IAuthRequestResultMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Security.Authentication.OAuth.AuthRequestResult FromAbi(IntPtr thisPtr) => global::Microsoft.Security.Authentication.OAuth.AuthRequestResult.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Security.Authentication.OAuth.AuthRequestResult obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.AuthRequestResult>.MarshalerArray CreateMarshalerArray(global::Microsoft.Security.Authentication.OAuth.AuthRequestResult[] array) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.AuthRequestResult>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.AuthRequestResult>.GetAbiArray(box);
        public static unsafe global::Microsoft.Security.Authentication.OAuth.AuthRequestResult[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.AuthRequestResult>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Security.Authentication.OAuth.AuthRequestResult[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.AuthRequestResult>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Security.Authentication.OAuth.AuthRequestResult[] array) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.AuthRequestResult>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.AuthRequestResult>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.AuthRequestResult>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class AuthRequestResultRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Security.Authentication.OAuth.AuthRequestResult(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct AuthResponse
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Security.Authentication.OAuth.AuthResponse obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Security.Authentication.OAuth.AuthResponse>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Security.Authentication.OAuth.IAuthResponseMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Security.Authentication.OAuth.AuthResponse obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Security.Authentication.OAuth.IAuthResponseMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Security.Authentication.OAuth.AuthResponse FromAbi(IntPtr thisPtr) => global::Microsoft.Security.Authentication.OAuth.AuthResponse.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Security.Authentication.OAuth.AuthResponse obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.AuthResponse>.MarshalerArray CreateMarshalerArray(global::Microsoft.Security.Authentication.OAuth.AuthResponse[] array) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.AuthResponse>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.AuthResponse>.GetAbiArray(box);
        public static unsafe global::Microsoft.Security.Authentication.OAuth.AuthResponse[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.AuthResponse>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Security.Authentication.OAuth.AuthResponse[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.AuthResponse>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Security.Authentication.OAuth.AuthResponse[] array) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.AuthResponse>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.AuthResponse>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.AuthResponse>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class AuthResponseRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Security.Authentication.OAuth.AuthResponse(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ClientAuthentication
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Security.Authentication.OAuth.ClientAuthentication obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Security.Authentication.OAuth.ClientAuthentication>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Security.Authentication.OAuth.IClientAuthenticationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Security.Authentication.OAuth.ClientAuthentication obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Security.Authentication.OAuth.IClientAuthenticationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Security.Authentication.OAuth.ClientAuthentication FromAbi(IntPtr thisPtr) => global::Microsoft.Security.Authentication.OAuth.ClientAuthentication.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Security.Authentication.OAuth.ClientAuthentication obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.ClientAuthentication>.MarshalerArray CreateMarshalerArray(global::Microsoft.Security.Authentication.OAuth.ClientAuthentication[] array) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.ClientAuthentication>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.ClientAuthentication>.GetAbiArray(box);
        public static unsafe global::Microsoft.Security.Authentication.OAuth.ClientAuthentication[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.ClientAuthentication>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Security.Authentication.OAuth.ClientAuthentication[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.ClientAuthentication>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Security.Authentication.OAuth.ClientAuthentication[] array) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.ClientAuthentication>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.ClientAuthentication>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.ClientAuthentication>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ClientAuthenticationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Security.Authentication.OAuth.ClientAuthentication(inspectable.ObjRef);
    }
    internal static class IAuthFailureMethods
    {

        internal static unsafe global::System.Collections.Generic.IReadOnlyDictionary<string, string> get_AdditionalParams(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMapView_2_String__String.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IReadOnlyDictionary<string, string>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IReadOnlyDictionary<string, string>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_Error(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_ErrorDescription(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Uri get_ErrorUri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.Uri.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.Uri.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_State(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x5F, 0xED, 0x55, 0xEC, 0x97, 0x4, 0xCB, 0x53, 0x97, 0x6B, 0xAB, 0xD1, 0x46, 0x35, 0x1, 0x75 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("EC55ED5F-0497-53CB-976B-ABD146350175")]
    internal interface IAuthFailure : global::Microsoft.Security.Authentication.OAuth.IAuthFailure
    {
    }
    internal static class IAuthRequestParamsMethods
    {

        internal static unsafe global::System.Collections.Generic.IDictionary<string, string> get_AdditionalParams(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[20](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMap_2_String__String.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IDictionary<string, string>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IDictionary<string, string>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_ClientId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ClientId(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe string get_CodeChallenge(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[16](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_CodeChallenge(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[17](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::Microsoft.Security.Authentication.OAuth.CodeChallengeMethodKind get_CodeChallengeMethod(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Security.Authentication.OAuth.CodeChallengeMethodKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Security.Authentication.OAuth.CodeChallengeMethodKind*, int>**)ThisPtr)[18](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_CodeChallengeMethod(IObjectReference _obj, global::Microsoft.Security.Authentication.OAuth.CodeChallengeMethodKind value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Security.Authentication.OAuth.CodeChallengeMethodKind, int>**)ThisPtr)[19](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::System.Uri get_RedirectUri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.Uri.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.Uri.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_RedirectUri(IObjectReference _obj, global::System.Uri value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.System.Uri.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe string get_ResponseType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ResponseType(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe string get_Scope(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Scope(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[15](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe string get_State(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_State(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[13](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x23, 0x1E, 0xC6, 0xAA, 0x55, 0x91, 0x1A, 0x55, 0xAC, 0x37, 0xCD, 0xB2, 0x99, 0x5F, 0x88, 0xD2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("AAC61E23-9155-551A-AC37-CDB2995F88D2")]
    internal interface IAuthRequestParams : global::Microsoft.Security.Authentication.OAuth.IAuthRequestParams
    {
    }
    internal static class IAuthRequestParamsFactoryMethods
    {


        internal static unsafe global::Microsoft.Security.Authentication.OAuth.AuthRequestParams CreateInstance(IObjectReference _obj, string responseType, string clientId)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __responseType = new(responseType);
                MarshalString.Pinnable __clientId = new(clientId);
                fixed(void* ___responseType = __responseType, ___clientId = __clientId)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __responseType), MarshalString.GetAbi(ref __clientId), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.Security.Authentication.OAuth.AuthRequestParams.FromAbi(__retval);
                }
            }
            finally
            {
                global::ABI.Microsoft.Security.Authentication.OAuth.AuthRequestParams.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Security.Authentication.OAuth.AuthRequestParams CreateInstance2(IObjectReference _obj, string responseType, string clientId, global::System.Uri redirectUri)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __redirectUri = default;
            IntPtr __retval = default;
            try
            {
                __redirectUri = global::ABI.System.Uri.CreateMarshaler2(redirectUri);
                MarshalString.Pinnable __responseType = new(responseType);
                MarshalString.Pinnable __clientId = new(clientId);
                fixed(void* ___responseType = __responseType, ___clientId = __clientId)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __responseType), MarshalString.GetAbi(ref __clientId), MarshalInspectable<object>.GetAbi(__redirectUri), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.Security.Authentication.OAuth.AuthRequestParams.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__redirectUri);
                global::ABI.Microsoft.Security.Authentication.OAuth.AuthRequestParams.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA7, 0xDC, 0x9B, 0x53, 0xE4, 0xBD, 0x63, 0x5A, 0x85, 0xD1, 0x33, 0x40, 0x3F, 0x6E, 0x34, 0x52 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("539BDCA7-BDE4-5A63-85D1-33403F6E3452")]
    internal interface IAuthRequestParamsFactory : global::Microsoft.Security.Authentication.OAuth.IAuthRequestParamsFactory
    {
    }
    internal static class IAuthRequestParamsStaticsMethods
    {


        internal static unsafe global::Microsoft.Security.Authentication.OAuth.AuthRequestParams CreateForAuthorizationCodeRequest(IObjectReference _obj, string clientId)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __clientId = new(clientId);
                fixed(void* ___clientId = __clientId)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __clientId), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.Security.Authentication.OAuth.AuthRequestParams.FromAbi(__retval);
                }
            }
            finally
            {
                global::ABI.Microsoft.Security.Authentication.OAuth.AuthRequestParams.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Security.Authentication.OAuth.AuthRequestParams CreateForAuthorizationCodeRequest(IObjectReference _obj, string clientId, global::System.Uri redirectUri)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __redirectUri = default;
            IntPtr __retval = default;
            try
            {
                __redirectUri = global::ABI.System.Uri.CreateMarshaler2(redirectUri);
                MarshalString.Pinnable __clientId = new(clientId);
                fixed(void* ___clientId = __clientId)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __clientId), MarshalInspectable<object>.GetAbi(__redirectUri), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.Security.Authentication.OAuth.AuthRequestParams.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__redirectUri);
                global::ABI.Microsoft.Security.Authentication.OAuth.AuthRequestParams.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF0, 0xD4, 0xEF, 0xB, 0x64, 0x68, 0xF4, 0x5B, 0xBD, 0x8E, 0x2F, 0x3B, 0xF9, 0x89, 0x6, 0xB5 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("0BEFD4F0-6864-5BF4-BD8E-2F3BF98906B5")]
    internal interface IAuthRequestParamsStatics : global::Microsoft.Security.Authentication.OAuth.IAuthRequestParamsStatics
    {
    }
    internal static class IAuthRequestResultMethods
    {

        internal static unsafe global::Microsoft.Security.Authentication.OAuth.AuthFailure get_Failure(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Security.Authentication.OAuth.AuthFailure.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Security.Authentication.OAuth.AuthFailure.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Security.Authentication.OAuth.AuthResponse get_Response(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Security.Authentication.OAuth.AuthResponse.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Security.Authentication.OAuth.AuthResponse.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Uri get_ResponseUri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.Uri.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.Uri.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x4, 0xB8, 0xF8, 0x10, 0xCF, 0x4, 0x51, 0x56, 0xBD, 0x52, 0x7D, 0xA9, 0x34, 0x6D, 0xEB, 0xC1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("10F8B804-04CF-5651-BD52-7DA9346DEBC1")]
    internal interface IAuthRequestResult : global::Microsoft.Security.Authentication.OAuth.IAuthRequestResult
    {
    }
    internal static class IAuthResponseMethods
    {

        internal static unsafe string get_AccessToken(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Collections.Generic.IReadOnlyDictionary<string, string> get_AdditionalParams(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMapView_2_String__String.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IReadOnlyDictionary<string, string>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IReadOnlyDictionary<string, string>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_Code(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_ExpiresIn(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_Scope(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_State(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_TokenType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x62, 0xFA, 0xC1, 0x5B, 0xED, 0xFD, 0x69, 0x57, 0x9D, 0x40, 0xDE, 0xD1, 0xEE, 0xA9, 0xD, 0x72 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("5BC1FA62-FDED-5769-9D40-DED1EEA90D72")]
    internal interface IAuthResponse : global::Microsoft.Security.Authentication.OAuth.IAuthResponse
    {
    }
    internal static class IClientAuthenticationMethods
    {

        internal static unsafe global::System.Collections.Generic.IDictionary<string, string> get_AdditionalHeaders(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMap_2_String__String.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IDictionary<string, string>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IDictionary<string, string>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Web.Http.Headers.HttpCredentialsHeaderValue get_Authorization(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Web.Http.Headers.HttpCredentialsHeaderValue.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Web.Http.Headers.HttpCredentialsHeaderValue.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Authorization(IObjectReference _obj, global::Windows.Web.Http.Headers.HttpCredentialsHeaderValue value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Windows.Web.Http.Headers.HttpCredentialsHeaderValue.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Windows.Web.Http.Headers.HttpCredentialsHeaderValue get_ProxyAuthorization(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Web.Http.Headers.HttpCredentialsHeaderValue.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Web.Http.Headers.HttpCredentialsHeaderValue.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ProxyAuthorization(IObjectReference _obj, global::Windows.Web.Http.Headers.HttpCredentialsHeaderValue value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Windows.Web.Http.Headers.HttpCredentialsHeaderValue.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x2D, 0x34, 0x99, 0xEF, 0x97, 0xD5, 0xFF, 0x5E, 0x87, 0x8A, 0x8D, 0xE0, 0xCB, 0x59, 0x71, 0x72 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("EF99342D-D597-5EFF-878A-8DE0CB597172")]
    internal interface IClientAuthentication : global::Microsoft.Security.Authentication.OAuth.IClientAuthentication
    {
    }
    internal static class IClientAuthenticationFactoryMethods
    {


        internal static unsafe global::Microsoft.Security.Authentication.OAuth.ClientAuthentication CreateInstance(IObjectReference _obj, global::Windows.Web.Http.Headers.HttpCredentialsHeaderValue authorization)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __authorization = default;
            IntPtr __retval = default;
            try
            {
                __authorization = global::ABI.Windows.Web.Http.Headers.HttpCredentialsHeaderValue.CreateMarshaler2(authorization);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__authorization), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Security.Authentication.OAuth.ClientAuthentication.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__authorization);
                global::ABI.Microsoft.Security.Authentication.OAuth.ClientAuthentication.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF5, 0xE9, 0x50, 0xD, 0x7F, 0xC3, 0xCC, 0x57, 0xB9, 0xEC, 0x2B, 0x19, 0x3B, 0xF, 0x9C, 0xEC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("0D50E9F5-C37F-57CC-B9EC-2B193B0F9CEC")]
    internal interface IClientAuthenticationFactory : global::Microsoft.Security.Authentication.OAuth.IClientAuthenticationFactory
    {
    }
    internal static class IClientAuthenticationStaticsMethods
    {


        internal static unsafe global::Microsoft.Security.Authentication.OAuth.ClientAuthentication CreateForBasicAuthorization(IObjectReference _obj, string clientId, string clientSecret)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __clientId = new(clientId);
                MarshalString.Pinnable __clientSecret = new(clientSecret);
                fixed(void* ___clientId = __clientId, ___clientSecret = __clientSecret)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __clientId), MarshalString.GetAbi(ref __clientSecret), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.Security.Authentication.OAuth.ClientAuthentication.FromAbi(__retval);
                }
            }
            finally
            {
                global::ABI.Microsoft.Security.Authentication.OAuth.ClientAuthentication.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x60, 0x35, 0x61, 0x65, 0x6F, 0x2B, 0xFD, 0x52, 0xA4, 0x79, 0x3A, 0x96, 0x62, 0x46, 0x82, 0xAE };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("65613560-2B6F-52FD-A479-3A96624682AE")]
    internal interface IClientAuthenticationStatics : global::Microsoft.Security.Authentication.OAuth.IClientAuthenticationStatics
    {
    }
    internal static class IOAuth2ManagerStaticsMethods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Security.Authentication.OAuth.AuthRequestResult> RequestAuthWithParamsAsync(IObjectReference _obj, global::Microsoft.UI.WindowId parentWindowId, global::System.Uri authEndpoint, global::Microsoft.Security.Authentication.OAuth.AuthRequestParams @params)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __authEndpoint = default;
            ObjectReferenceValue __params = default;
            IntPtr __retval = default;
            try
            {
                __authEndpoint = global::ABI.System.Uri.CreateMarshaler2(authEndpoint);
                __params = global::ABI.Microsoft.Security.Authentication.OAuth.AuthRequestParams.CreateMarshaler2(@params);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.WindowId, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, parentWindowId, MarshalInspectable<object>.GetAbi(__authEndpoint), MarshalInspectable<object>.GetAbi(__params), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Security_Authentication_OAuth_AuthRequestResult.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Security.Authentication.OAuth.AuthRequestResult>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__authEndpoint);
                MarshalInspectable<object>.DisposeMarshaler(__params);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Security.Authentication.OAuth.AuthRequestResult>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool CompleteAuthRequest(IObjectReference _obj, global::System.Uri responseUri)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __responseUri = default;
            byte __retval = default;
            try
            {
                __responseUri = global::ABI.System.Uri.CreateMarshaler2(responseUri);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__responseUri), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__responseUri);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Security.Authentication.OAuth.TokenRequestResult> RequestTokenAsync(IObjectReference _obj, global::System.Uri tokenEndpoint, global::Microsoft.Security.Authentication.OAuth.TokenRequestParams @params)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __tokenEndpoint = default;
            ObjectReferenceValue __params = default;
            IntPtr __retval = default;
            try
            {
                __tokenEndpoint = global::ABI.System.Uri.CreateMarshaler2(tokenEndpoint);
                __params = global::ABI.Microsoft.Security.Authentication.OAuth.TokenRequestParams.CreateMarshaler2(@params);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__tokenEndpoint), MarshalInspectable<object>.GetAbi(__params), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Security_Authentication_OAuth_TokenRequestResult.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Security.Authentication.OAuth.TokenRequestResult>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__tokenEndpoint);
                MarshalInspectable<object>.DisposeMarshaler(__params);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Security.Authentication.OAuth.TokenRequestResult>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Security.Authentication.OAuth.TokenRequestResult> RequestTokenAsync(IObjectReference _obj, global::System.Uri tokenEndpoint, global::Microsoft.Security.Authentication.OAuth.TokenRequestParams @params, global::Microsoft.Security.Authentication.OAuth.ClientAuthentication clientAuth)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __tokenEndpoint = default;
            ObjectReferenceValue __params = default;
            ObjectReferenceValue __clientAuth = default;
            IntPtr __retval = default;
            try
            {
                __tokenEndpoint = global::ABI.System.Uri.CreateMarshaler2(tokenEndpoint);
                __params = global::ABI.Microsoft.Security.Authentication.OAuth.TokenRequestParams.CreateMarshaler2(@params);
                __clientAuth = global::ABI.Microsoft.Security.Authentication.OAuth.ClientAuthentication.CreateMarshaler2(clientAuth);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__tokenEndpoint), MarshalInspectable<object>.GetAbi(__params), MarshalInspectable<object>.GetAbi(__clientAuth), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Security_Authentication_OAuth_TokenRequestResult.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Security.Authentication.OAuth.TokenRequestResult>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__tokenEndpoint);
                MarshalInspectable<object>.DisposeMarshaler(__params);
                MarshalInspectable<object>.DisposeMarshaler(__clientAuth);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Security.Authentication.OAuth.TokenRequestResult>>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD1, 0xD, 0x9D, 0xAC, 0x7E, 0xC0, 0x2, 0x53, 0x81, 0x50, 0x19, 0x9C, 0x7D, 0x34, 0x3F, 0x57 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("AC9D0DD1-C07E-5302-8150-199C7D343F57")]
    internal interface IOAuth2ManagerStatics : global::Microsoft.Security.Authentication.OAuth.IOAuth2ManagerStatics
    {
    }
    internal static class ITokenFailureMethods
    {

        internal static unsafe global::System.Collections.Generic.IReadOnlyDictionary<string, global::Windows.Data.Json.IJsonValue> get_AdditionalParams(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMapView_2_String__Windows_Data_Json_IJsonValue.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IReadOnlyDictionary<string, global::Windows.Data.Json.IJsonValue>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IReadOnlyDictionary<string, global::Windows.Data.Json.IJsonValue>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_Error(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Exception get_ErrorCode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.Exception __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.Exception*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.Exception.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.Exception.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_ErrorDescription(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Uri get_ErrorUri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.Uri.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.Uri.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Security.Authentication.OAuth.TokenFailureKind get_Kind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Security.Authentication.OAuth.TokenFailureKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Security.Authentication.OAuth.TokenFailureKind*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x17, 0xD4, 0xF8, 0x60, 0x6A, 0xEA, 0xD2, 0x51, 0x8A, 0xD7, 0xF0, 0xE5, 0x17, 0x7A, 0xEF, 0xA };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("60F8D417-EA6A-51D2-8AD7-F0E5177AEF0A")]
    internal interface ITokenFailure : global::Microsoft.Security.Authentication.OAuth.ITokenFailure
    {
    }
    internal static class ITokenRequestParamsMethods
    {

        internal static unsafe global::System.Collections.Generic.IDictionary<string, string> get_AdditionalParams(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[24](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMap_2_String__String.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IDictionary<string, string>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IDictionary<string, string>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_ClientId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ClientId(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[15](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe string get_Code(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Code(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe string get_CodeVerifier(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_CodeVerifier(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[13](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe string get_GrantType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_GrantType(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe string get_Password(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[18](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Password(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[19](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::System.Uri get_RedirectUri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.Uri.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.Uri.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_RedirectUri(IObjectReference _obj, global::System.Uri value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.System.Uri.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe string get_RefreshToken(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[22](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_RefreshToken(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[23](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe string get_Scope(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[20](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Scope(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[21](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe string get_Username(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[16](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Username(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[17](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xBC, 0x4D, 0x13, 0x49, 0xB5, 0xAA, 0xA4, 0x5B, 0xBC, 0xDF, 0x95, 0x2, 0x14, 0xD8, 0x11, 0x82 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("49134DBC-AAB5-5BA4-BCDF-950214D81182")]
    internal interface ITokenRequestParams : global::Microsoft.Security.Authentication.OAuth.ITokenRequestParams
    {
    }
    internal static class ITokenRequestParamsFactoryMethods
    {


        internal static unsafe global::Microsoft.Security.Authentication.OAuth.TokenRequestParams CreateInstance(IObjectReference _obj, string grantType)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __grantType = new(grantType);
                fixed(void* ___grantType = __grantType)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __grantType), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.Security.Authentication.OAuth.TokenRequestParams.FromAbi(__retval);
                }
            }
            finally
            {
                global::ABI.Microsoft.Security.Authentication.OAuth.TokenRequestParams.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x30, 0x9C, 0xF3, 0x2B, 0x30, 0x2F, 0x88, 0x57, 0x98, 0xD2, 0xA8, 0xBA, 0x62, 0x2B, 0xE8, 0x9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2BF39C30-2F30-5788-98D2-A8BA622BE809")]
    internal interface ITokenRequestParamsFactory : global::Microsoft.Security.Authentication.OAuth.ITokenRequestParamsFactory
    {
    }
    internal static class ITokenRequestParamsStaticsMethods
    {


        internal static unsafe global::Microsoft.Security.Authentication.OAuth.TokenRequestParams CreateForAuthorizationCodeRequest(IObjectReference _obj, global::Microsoft.Security.Authentication.OAuth.AuthResponse authResponse)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __authResponse = default;
            IntPtr __retval = default;
            try
            {
                __authResponse = global::ABI.Microsoft.Security.Authentication.OAuth.AuthResponse.CreateMarshaler2(authResponse);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__authResponse), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Security.Authentication.OAuth.TokenRequestParams.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__authResponse);
                global::ABI.Microsoft.Security.Authentication.OAuth.TokenRequestParams.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Security.Authentication.OAuth.TokenRequestParams CreateForClientCredentials(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Security.Authentication.OAuth.TokenRequestParams.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Security.Authentication.OAuth.TokenRequestParams.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Security.Authentication.OAuth.TokenRequestParams CreateForExtension(IObjectReference _obj, global::System.Uri extensionUri)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __extensionUri = default;
            IntPtr __retval = default;
            try
            {
                __extensionUri = global::ABI.System.Uri.CreateMarshaler2(extensionUri);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__extensionUri), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Security.Authentication.OAuth.TokenRequestParams.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__extensionUri);
                global::ABI.Microsoft.Security.Authentication.OAuth.TokenRequestParams.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Security.Authentication.OAuth.TokenRequestParams CreateForRefreshToken(IObjectReference _obj, string refreshToken)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __refreshToken = new(refreshToken);
                fixed(void* ___refreshToken = __refreshToken)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, MarshalString.GetAbi(ref __refreshToken), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.Security.Authentication.OAuth.TokenRequestParams.FromAbi(__retval);
                }
            }
            finally
            {
                global::ABI.Microsoft.Security.Authentication.OAuth.TokenRequestParams.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x65, 0xAF, 0xB7, 0x68, 0x81, 0x43, 0x93, 0x55, 0x88, 0x20, 0xF7, 0x4A, 0x60, 0x5B, 0x9F, 0x3B };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("68B7AF65-4381-5593-8820-F74A605B9F3B")]
    internal interface ITokenRequestParamsStatics : global::Microsoft.Security.Authentication.OAuth.ITokenRequestParamsStatics
    {
    }
    internal static class ITokenRequestResultMethods
    {

        internal static unsafe global::Microsoft.Security.Authentication.OAuth.TokenFailure get_Failure(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Security.Authentication.OAuth.TokenFailure.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Security.Authentication.OAuth.TokenFailure.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Security.Authentication.OAuth.TokenResponse get_Response(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Security.Authentication.OAuth.TokenResponse.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Security.Authentication.OAuth.TokenResponse.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Web.Http.HttpResponseMessage get_ResponseMessage(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Web.Http.HttpResponseMessage.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Web.Http.HttpResponseMessage.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x77, 0x1F, 0xB3, 0x35, 0x66, 0xF1, 0xDF, 0x50, 0xA8, 0x37, 0xEC, 0x4, 0x60, 0x21, 0x51, 0x66 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("35B31F77-F166-50DF-A837-EC0460215166")]
    internal interface ITokenRequestResult : global::Microsoft.Security.Authentication.OAuth.ITokenRequestResult
    {
    }
    internal static class ITokenResponseMethods
    {

        internal static unsafe string get_AccessToken(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Collections.Generic.IReadOnlyDictionary<string, global::Windows.Data.Json.IJsonValue> get_AdditionalParams(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMapView_2_String__Windows_Data_Json_IJsonValue.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IReadOnlyDictionary<string, global::Windows.Data.Json.IJsonValue>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IReadOnlyDictionary<string, global::Windows.Data.Json.IJsonValue>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe double get_ExpiresIn(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe string get_RefreshToken(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_Scope(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_TokenType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD3, 0x8C, 0x9D, 0x9D, 0xB2, 0x4, 0xF6, 0x5D, 0xBF, 0xD2, 0xE8, 0xA6, 0x85, 0x97, 0x45, 0xDA };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("9D9D8CD3-04B2-5DF6-BFD2-E8A6859745DA")]
    internal interface ITokenResponse : global::Microsoft.Security.Authentication.OAuth.ITokenResponse
    {
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct TokenFailure
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Security.Authentication.OAuth.TokenFailure obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Security.Authentication.OAuth.TokenFailure>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Security.Authentication.OAuth.ITokenFailureMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Security.Authentication.OAuth.TokenFailure obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Security.Authentication.OAuth.ITokenFailureMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Security.Authentication.OAuth.TokenFailure FromAbi(IntPtr thisPtr) => global::Microsoft.Security.Authentication.OAuth.TokenFailure.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Security.Authentication.OAuth.TokenFailure obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.TokenFailure>.MarshalerArray CreateMarshalerArray(global::Microsoft.Security.Authentication.OAuth.TokenFailure[] array) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.TokenFailure>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.TokenFailure>.GetAbiArray(box);
        public static unsafe global::Microsoft.Security.Authentication.OAuth.TokenFailure[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.TokenFailure>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Security.Authentication.OAuth.TokenFailure[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.TokenFailure>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Security.Authentication.OAuth.TokenFailure[] array) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.TokenFailure>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.TokenFailure>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.TokenFailure>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class TokenFailureRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Security.Authentication.OAuth.TokenFailure(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct TokenRequestParams
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Security.Authentication.OAuth.TokenRequestParams obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Security.Authentication.OAuth.TokenRequestParams>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestParamsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Security.Authentication.OAuth.TokenRequestParams obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestParamsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Security.Authentication.OAuth.TokenRequestParams FromAbi(IntPtr thisPtr) => global::Microsoft.Security.Authentication.OAuth.TokenRequestParams.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Security.Authentication.OAuth.TokenRequestParams obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.TokenRequestParams>.MarshalerArray CreateMarshalerArray(global::Microsoft.Security.Authentication.OAuth.TokenRequestParams[] array) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.TokenRequestParams>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.TokenRequestParams>.GetAbiArray(box);
        public static unsafe global::Microsoft.Security.Authentication.OAuth.TokenRequestParams[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.TokenRequestParams>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Security.Authentication.OAuth.TokenRequestParams[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.TokenRequestParams>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Security.Authentication.OAuth.TokenRequestParams[] array) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.TokenRequestParams>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.TokenRequestParams>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.TokenRequestParams>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class TokenRequestParamsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Security.Authentication.OAuth.TokenRequestParams(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct TokenRequestResult
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Security.Authentication.OAuth.TokenRequestResult obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Security.Authentication.OAuth.TokenRequestResult>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestResultMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Security.Authentication.OAuth.TokenRequestResult obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Security.Authentication.OAuth.ITokenRequestResultMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Security.Authentication.OAuth.TokenRequestResult FromAbi(IntPtr thisPtr) => global::Microsoft.Security.Authentication.OAuth.TokenRequestResult.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Security.Authentication.OAuth.TokenRequestResult obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.TokenRequestResult>.MarshalerArray CreateMarshalerArray(global::Microsoft.Security.Authentication.OAuth.TokenRequestResult[] array) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.TokenRequestResult>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.TokenRequestResult>.GetAbiArray(box);
        public static unsafe global::Microsoft.Security.Authentication.OAuth.TokenRequestResult[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.TokenRequestResult>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Security.Authentication.OAuth.TokenRequestResult[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.TokenRequestResult>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Security.Authentication.OAuth.TokenRequestResult[] array) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.TokenRequestResult>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.TokenRequestResult>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.TokenRequestResult>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class TokenRequestResultRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Security.Authentication.OAuth.TokenRequestResult(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct TokenResponse
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Security.Authentication.OAuth.TokenResponse obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Security.Authentication.OAuth.TokenResponse>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Security.Authentication.OAuth.ITokenResponseMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Security.Authentication.OAuth.TokenResponse obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Security.Authentication.OAuth.ITokenResponseMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Security.Authentication.OAuth.TokenResponse FromAbi(IntPtr thisPtr) => global::Microsoft.Security.Authentication.OAuth.TokenResponse.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Security.Authentication.OAuth.TokenResponse obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.TokenResponse>.MarshalerArray CreateMarshalerArray(global::Microsoft.Security.Authentication.OAuth.TokenResponse[] array) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.TokenResponse>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.TokenResponse>.GetAbiArray(box);
        public static unsafe global::Microsoft.Security.Authentication.OAuth.TokenResponse[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.TokenResponse>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Security.Authentication.OAuth.TokenResponse[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.TokenResponse>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Security.Authentication.OAuth.TokenResponse[] array) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.TokenResponse>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.TokenResponse>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Security.Authentication.OAuth.TokenResponse>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class TokenResponseRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Security.Authentication.OAuth.TokenResponse(inspectable.ObjRef);
    }
}
#pragma warning restore CA1416
