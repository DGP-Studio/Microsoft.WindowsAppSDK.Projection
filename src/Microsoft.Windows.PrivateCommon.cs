//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.Windows.PrivateCommon
{
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.PrivateCommon")][Guid("361C44E1-1FE7-5C7D-9DA4-128AEAF49A31")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.PrivateCommon.IAnchorInstance))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(SessionHostingSharedContract), 65536u)]
    public interface IAnchorInstance
    {
        void AnchorInstance(object instance);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.PrivateCommon")][Guid("21B73D7A-6388-50AC-AB2A-FA9720B2B5F6")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.PrivateCommon.IGetSessionHostProcessId))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(SessionHostingSharedContract), 65536u)]
    public interface IGetSessionHostProcessId
    {
        uint GetSessionHostProcessId();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.PrivateCommon")][Guid("FA333FED-4E3C-53B4-BFAB-2F8A112D348C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.PrivateCommon.IImageBufferPrivate))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(SessionHostingSharedContract), 65536u)]
    public interface IImageBufferPrivate
    {
        ImageBufferView GetImageBufferView();
        ImageBufferViewData GetImageBufferViewData(uint targetProcessId);
        void SyncBufferWithOutValue();
        ImageBufferResource GetImageBufferResource(object sessionAsInspectable);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.PrivateCommon")][Guid("E4856A61-8FCF-566A-BCD4-F56021869396")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.PrivateCommon.IImageBufferResource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(SessionHostingSharedContract), 131072u)]
    internal interface IImageBufferResource
    {
        ulong Buffer();
        uint Width();
        uint Height();
        uint RowStride();
        uint BytesPerPixel();
        uint Capacity();
        PixelFormat PixelFormat();
        ImageBufferData BufferData { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.PrivateCommon")][Guid("A98B98AE-DB34-50BF-8B9C-9C58E6CF4BB6")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.PrivateCommon.IImageBufferResourceFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(SessionHostingSharedContract), 131072u)]
    internal interface IImageBufferResourceFactory
    {
        ImageBufferResource CreateInstance(ImageBufferData bufferData);
        ImageBufferResource CreateInstance2(uint height, uint width, PixelFormat pixelFormat, uint rowStride, ulong targetProcessHandle, ulong sourceProcessHandle);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.PrivateCommon")][Guid("F7F4DE39-CE0A-5D0D-9F37-7D22B8B1B6DB")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.PrivateCommon.IModelManager))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(SessionHostingSharedContract), 196608u)]
    public interface IModelManager
    {
        void EnsureModelInitialized();
        void GenerateCacheModel(string offlineDriverPath);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.PrivateCommon")][Guid("0EAA0435-97DC-564C-A5BD-70C69FD124F1")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.PrivateCommon.IModelManager2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(SessionHostingSharedContract), 262144u)]
    public interface IModelManager2 : IModelManager
    {
        void SetPackageFamilyName(string packageFamilyName);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.PrivateCommon")][Guid("544EAD0D-AAB7-5A0A-82B6-B5D8CFEF0C5F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.PrivateCommon.IModelManager3))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(SessionHostingSharedContract), 327680u)]
    public interface IModelManager3 : IModelManager2, IModelManager
    {
        void GenerateCacheModel();
        void SetCorrelationVector(string correlationVector);
        bool IsModelCacheReady();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.PrivateCommon")][Guid("94C562D6-4752-5008-AF26-04C82AC73F80")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.PrivateCommon.INotifyExpiredSessionHost))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(SessionHostingSharedContract), 65536u)]
    public interface INotifyExpiredSessionHost
    {
        global::Windows.Foundation.IAsyncAction NotifyExpiredSessionHost();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.PrivateCommon", "struct(Microsoft.Windows.PrivateCommon.ImageBufferData;u4;u4;enum(Microsoft.Windows.PrivateCommon.PixelFormat;i4);u4;u8;u8)")][global::WinRT.WindowsRuntimeHelperType][global::WinRT.WinRTExposedType(typeof(global::WinRT.StructTypeDetails<ImageBufferData, ImageBufferData>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(SessionHostingSharedContract), 131072u)]
    public struct ImageBufferData: IEquatable<ImageBufferData>
    {
        public uint height;
        public uint width;
        public PixelFormat pixelFormat;
        public uint rowStride;
        public ulong targetProcessHandle;
        public ulong sourceProcessHandle;

        public ImageBufferData(uint _height, uint _width, PixelFormat _pixelFormat, uint _rowStride, ulong _targetProcessHandle, ulong _sourceProcessHandle)
        {
            height = _height; width = _width; pixelFormat = _pixelFormat; rowStride = _rowStride; targetProcessHandle = _targetProcessHandle; sourceProcessHandle = _sourceProcessHandle; 
        }

        public static bool operator ==(ImageBufferData x, ImageBufferData y) => x.height == y.height && x.width == y.width && x.pixelFormat == y.pixelFormat && x.rowStride == y.rowStride && x.targetProcessHandle == y.targetProcessHandle && x.sourceProcessHandle == y.sourceProcessHandle;
        public static bool operator !=(ImageBufferData x, ImageBufferData y) => !(x == y);
        public bool Equals(ImageBufferData other) => this == other;
        public override bool Equals(object obj) => obj is ImageBufferData that && this == that;
        public override int GetHashCode() => height.GetHashCode() ^ width.GetHashCode() ^ pixelFormat.GetHashCode() ^ rowStride.GetHashCode() ^ targetProcessHandle.GetHashCode() ^ sourceProcessHandle.GetHashCode();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.PrivateCommon")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.PrivateCommon.ImageBufferResource))]
    [global::ABI.Microsoft.Windows.PrivateCommon.ImageBufferResourceRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IImageBufferResource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(SessionHostingSharedContract), 131072u)]
    public sealed class ImageBufferResource : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ImageBufferResource>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_PrivateCommon_IImageBufferResource => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_PrivateCommon_ImageBufferResource;
        private static IObjectReference _objRef_global__Microsoft_Windows_PrivateCommon_ImageBufferResource
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Windows_PrivateCommon_ImageBufferResource;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_PrivateCommon_ImageBufferResource = ActivationFactory.Get("Microsoft.Windows.PrivateCommon.ImageBufferResource");
                }
            }
        }

        public ImageBufferResource() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_Windows_PrivateCommon_ImageBufferResource, global::ABI.Microsoft.Windows.PrivateCommon.IImageBufferResourceMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        private static class _IImageBufferResourceFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, ImageBufferData bufferData)
            {
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, ImageBufferData, IntPtr*, int>**)ThisPtr)[6](ThisPtr, bufferData, &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }

            public static unsafe IntPtr CreateInstance2(IObjectReference _obj, uint height, uint width, PixelFormat pixelFormat, uint rowStride, ulong targetProcessHandle, ulong sourceProcessHandle)
            {
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint, uint, PixelFormat, uint, ulong, ulong, IntPtr*, int>**)ThisPtr)[7](ThisPtr, height, width, pixelFormat, rowStride, targetProcessHandle, sourceProcessHandle, &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_PrivateCommon_IImageBufferResourceFactory;
        private static IObjectReference _objRef_global__Microsoft_Windows_PrivateCommon_IImageBufferResourceFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Windows_PrivateCommon_IImageBufferResourceFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_PrivateCommon_IImageBufferResourceFactory = ActivationFactory.Get("Microsoft.Windows.PrivateCommon.ImageBufferResource", global::ABI.Microsoft.Windows.PrivateCommon.IImageBufferResourceFactoryMethods.IID);
                }
            }
        }

        public ImageBufferResource(ImageBufferData bufferData) 
        { 
        IntPtr ptr = (_IImageBufferResourceFactoryMethods.CreateInstance(_objRef_global__Microsoft_Windows_PrivateCommon_IImageBufferResourceFactory, bufferData)); 
        try 
        { 
        _inner = ComWrappersSupport.GetObjectReferenceForInterface(ptr, global::ABI.Microsoft.Windows.PrivateCommon.IImageBufferResourceMethods.IID, false); 

        } 
        finally 
        { 
        MarshalInspectable<object>.DisposeAbi(ptr); 
        }

        ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
        ComWrappersHelper.Init(_inner, false);
        }

        public ImageBufferResource(uint height, uint width, PixelFormat pixelFormat, uint rowStride, ulong targetProcessHandle, ulong sourceProcessHandle) 
        { 
        IntPtr ptr = (_IImageBufferResourceFactoryMethods.CreateInstance2(_objRef_global__Microsoft_Windows_PrivateCommon_IImageBufferResourceFactory, height, width, pixelFormat, rowStride, targetProcessHandle, sourceProcessHandle)); 
        try 
        { 
        _inner = ComWrappersSupport.GetObjectReferenceForInterface(ptr, global::ABI.Microsoft.Windows.PrivateCommon.IImageBufferResourceMethods.IID, false); 

        } 
        finally 
        { 
        MarshalInspectable<object>.DisposeAbi(ptr); 
        }

        ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
        ComWrappersHelper.Init(_inner, false);
        }

        public static ImageBufferResource FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ImageBufferResource>.FromAbi(thisPtr);
        }

        internal ImageBufferResource(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.PrivateCommon.IImageBufferResourceMethods.IID);

        }


        public static bool operator ==(ImageBufferResource x, ImageBufferResource y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ImageBufferResource x, ImageBufferResource y) => !(x == y);
        public bool Equals(ImageBufferResource other) => this == other;
        public override bool Equals(object obj) => obj is ImageBufferResource that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public ulong Buffer() => global::ABI.Microsoft.Windows.PrivateCommon.IImageBufferResourceMethods.Buffer(_objRef_global__Microsoft_Windows_PrivateCommon_IImageBufferResource);

        public uint Width() => global::ABI.Microsoft.Windows.PrivateCommon.IImageBufferResourceMethods.Width(_objRef_global__Microsoft_Windows_PrivateCommon_IImageBufferResource);

        public uint Height() => global::ABI.Microsoft.Windows.PrivateCommon.IImageBufferResourceMethods.Height(_objRef_global__Microsoft_Windows_PrivateCommon_IImageBufferResource);

        public uint RowStride() => global::ABI.Microsoft.Windows.PrivateCommon.IImageBufferResourceMethods.RowStride(_objRef_global__Microsoft_Windows_PrivateCommon_IImageBufferResource);

        public uint BytesPerPixel() => global::ABI.Microsoft.Windows.PrivateCommon.IImageBufferResourceMethods.BytesPerPixel(_objRef_global__Microsoft_Windows_PrivateCommon_IImageBufferResource);

        public uint Capacity() => global::ABI.Microsoft.Windows.PrivateCommon.IImageBufferResourceMethods.Capacity(_objRef_global__Microsoft_Windows_PrivateCommon_IImageBufferResource);

        public PixelFormat PixelFormat() => global::ABI.Microsoft.Windows.PrivateCommon.IImageBufferResourceMethods.PixelFormat(_objRef_global__Microsoft_Windows_PrivateCommon_IImageBufferResource);

        public ImageBufferData BufferData
        {
            get => global::ABI.Microsoft.Windows.PrivateCommon.IImageBufferResourceMethods.get_BufferData(_objRef_global__Microsoft_Windows_PrivateCommon_IImageBufferResource);
            set => global::ABI.Microsoft.Windows.PrivateCommon.IImageBufferResourceMethods.set_BufferData(_objRef_global__Microsoft_Windows_PrivateCommon_IImageBufferResource, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.PrivateCommon", "struct(Microsoft.Windows.PrivateCommon.ImageBufferView;u4;u4;enum(Microsoft.Windows.PrivateCommon.PixelFormat;i4);u4)")][global::WinRT.WindowsRuntimeHelperType][global::WinRT.WinRTExposedType(typeof(global::WinRT.StructTypeDetails<ImageBufferView, ImageBufferView>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(SessionHostingSharedContract), 65536u)]
    public struct ImageBufferView: IEquatable<ImageBufferView>
    {
        public uint height;
        public uint width;
        public PixelFormat pixelFormat;
        public uint rowStride;

        public ImageBufferView(uint _height, uint _width, PixelFormat _pixelFormat, uint _rowStride)
        {
            height = _height; width = _width; pixelFormat = _pixelFormat; rowStride = _rowStride; 
        }

        public static bool operator ==(ImageBufferView x, ImageBufferView y) => x.height == y.height && x.width == y.width && x.pixelFormat == y.pixelFormat && x.rowStride == y.rowStride;
        public static bool operator !=(ImageBufferView x, ImageBufferView y) => !(x == y);
        public bool Equals(ImageBufferView other) => this == other;
        public override bool Equals(object obj) => obj is ImageBufferView that && this == that;
        public override int GetHashCode() => height.GetHashCode() ^ width.GetHashCode() ^ pixelFormat.GetHashCode() ^ rowStride.GetHashCode();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.PrivateCommon", "struct(Microsoft.Windows.PrivateCommon.ImageBufferViewData;u8;u8)")][global::WinRT.WindowsRuntimeHelperType][global::WinRT.WinRTExposedType(typeof(global::WinRT.StructTypeDetails<ImageBufferViewData, ImageBufferViewData>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(SessionHostingSharedContract), 65536u)]
    public struct ImageBufferViewData: IEquatable<ImageBufferViewData>
    {
        public ulong targetProcessHandle;
        public ulong sourceProcessHandle;

        public ImageBufferViewData(ulong _targetProcessHandle, ulong _sourceProcessHandle)
        {
            targetProcessHandle = _targetProcessHandle; sourceProcessHandle = _sourceProcessHandle; 
        }

        public static bool operator ==(ImageBufferViewData x, ImageBufferViewData y) => x.targetProcessHandle == y.targetProcessHandle && x.sourceProcessHandle == y.sourceProcessHandle;
        public static bool operator !=(ImageBufferViewData x, ImageBufferViewData y) => !(x == y);
        public bool Equals(ImageBufferViewData other) => this == other;
        public override bool Equals(object obj) => obj is ImageBufferViewData that && this == that;
        public override int GetHashCode() => targetProcessHandle.GetHashCode() ^ sourceProcessHandle.GetHashCode();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.PrivateCommon")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<PixelFormat>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(SessionHostingSharedContract), 65536u)]
    public enum PixelFormat : int
    {
        Undefined = unchecked((int)0),
        Rgb24 = unchecked((int)0x1),
        Argb32 = unchecked((int)0x2),
        Rgba32 = unchecked((int)0x3),
        Bgra32 = unchecked((int)0x4),
        Gray8 = unchecked((int)0x5),
    }
    [global::Windows.Foundation.Metadata.ContractVersion(327680u)]
    public enum SessionHostingSharedContract
    {
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.Windows.PrivateCommon
{
    public static class IAnchorInstanceMethods
    {


        public static unsafe void AnchorInstance(IObjectReference _obj, object instance)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __instance = default;
            try
            {
                __instance = MarshalInspectable<object>.CreateMarshaler2(instance);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__instance)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__instance);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE1, 0x44, 0x1C, 0x36, 0xE7, 0x1F, 0x7D, 0x5C, 0x9D, 0xA4, 0x12, 0x8A, 0xEA, 0xF4, 0x9A, 0x31 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IAnchorInstance.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("361C44E1-1FE7-5C7D-9DA4-128AEAF49A31")]
    internal unsafe interface IAnchorInstance : global::Microsoft.Windows.PrivateCommon.IAnchorInstance
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IAnchorInstance()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IAnchorInstance), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_AnchorInstance_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_AnchorInstance_0(IntPtr thisPtr, IntPtr instance)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.PrivateCommon.IAnchorInstance>(thisPtr).AnchorInstance(MarshalInspectable<object>.FromAbi(instance));

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe void global::Microsoft.Windows.PrivateCommon.IAnchorInstance.AnchorInstance(object instance)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.PrivateCommon.IAnchorInstance).TypeHandle));
            global::ABI.Microsoft.Windows.PrivateCommon.IAnchorInstanceMethods.AnchorInstance(_obj, instance);
        }
    }

    public static class IGetSessionHostProcessIdMethods
    {


        public static unsafe uint GetSessionHostProcessId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7A, 0x3D, 0xB7, 0x21, 0x88, 0x63, 0xAC, 0x50, 0xAB, 0x2A, 0xFA, 0x97, 0x20, 0xB2, 0xB5, 0xF6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IGetSessionHostProcessId.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("21B73D7A-6388-50AC-AB2A-FA9720B2B5F6")]
    internal unsafe interface IGetSessionHostProcessId : global::Microsoft.Windows.PrivateCommon.IGetSessionHostProcessId
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IGetSessionHostProcessId()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IGetSessionHostProcessId), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, uint*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_GetSessionHostProcessId_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetSessionHostProcessId_0(IntPtr thisPtr, uint* result)
        {

            uint __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.PrivateCommon.IGetSessionHostProcessId>(thisPtr).GetSessionHostProcessId();
                *result = __result;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe uint global::Microsoft.Windows.PrivateCommon.IGetSessionHostProcessId.GetSessionHostProcessId()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.PrivateCommon.IGetSessionHostProcessId).TypeHandle));
            return global::ABI.Microsoft.Windows.PrivateCommon.IGetSessionHostProcessIdMethods.GetSessionHostProcessId(_obj);
        }
    }

    public static class IImageBufferPrivateMethods
    {


        public static unsafe global::Microsoft.Windows.PrivateCommon.ImageBufferView GetImageBufferView(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.PrivateCommon.ImageBufferView __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.PrivateCommon.ImageBufferView*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        public static unsafe global::Microsoft.Windows.PrivateCommon.ImageBufferViewData GetImageBufferViewData(IObjectReference _obj, uint targetProcessId)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.PrivateCommon.ImageBufferViewData __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint, global::Microsoft.Windows.PrivateCommon.ImageBufferViewData*, int>**)ThisPtr)[7](ThisPtr, targetProcessId, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        public static unsafe void SyncBufferWithOutValue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[8](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        public static unsafe global::Microsoft.Windows.PrivateCommon.ImageBufferResource GetImageBufferResource(IObjectReference _obj, object sessionAsInspectable)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __sessionAsInspectable = default;
            IntPtr __retval = default;
            try
            {
                __sessionAsInspectable = MarshalInspectable<object>.CreateMarshaler2(sessionAsInspectable);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__sessionAsInspectable), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Windows.PrivateCommon.ImageBufferResource.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__sessionAsInspectable);
                global::ABI.Microsoft.Windows.PrivateCommon.ImageBufferResource.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xED, 0x3F, 0x33, 0xFA, 0x3C, 0x4E, 0xB4, 0x53, 0xBF, 0xAB, 0x2F, 0x8A, 0x11, 0x2D, 0x34, 0x8C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IImageBufferPrivate.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("FA333FED-4E3C-53B4-BFAB-2F8A112D348C")]
    internal unsafe interface IImageBufferPrivate : global::Microsoft.Windows.PrivateCommon.IImageBufferPrivate
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IImageBufferPrivate()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IImageBufferPrivate), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 4);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.PrivateCommon.ImageBufferView*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_GetImageBufferView_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, uint, global::Microsoft.Windows.PrivateCommon.ImageBufferViewData*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_GetImageBufferViewData_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_SyncBufferWithOutValue_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_GetImageBufferResource_3;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetImageBufferView_0(IntPtr thisPtr, global::Microsoft.Windows.PrivateCommon.ImageBufferView* result)
        {

            global::Microsoft.Windows.PrivateCommon.ImageBufferView __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.PrivateCommon.IImageBufferPrivate>(thisPtr).GetImageBufferView();
                *result = __result;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetImageBufferViewData_1(IntPtr thisPtr, uint targetProcessId, global::Microsoft.Windows.PrivateCommon.ImageBufferViewData* result)
        {

            global::Microsoft.Windows.PrivateCommon.ImageBufferViewData __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.PrivateCommon.IImageBufferPrivate>(thisPtr).GetImageBufferViewData(targetProcessId);
                *result = __result;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_SyncBufferWithOutValue_2(IntPtr thisPtr)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.PrivateCommon.IImageBufferPrivate>(thisPtr).SyncBufferWithOutValue();

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetImageBufferResource_3(IntPtr thisPtr, IntPtr sessionAsInspectable, IntPtr* result)
        {

            global::Microsoft.Windows.PrivateCommon.ImageBufferResource __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.PrivateCommon.IImageBufferPrivate>(thisPtr).GetImageBufferResource(MarshalInspectable<object>.FromAbi(sessionAsInspectable));
                *result = global::ABI.Microsoft.Windows.PrivateCommon.ImageBufferResource.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Microsoft.Windows.PrivateCommon.ImageBufferView global::Microsoft.Windows.PrivateCommon.IImageBufferPrivate.GetImageBufferView()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.PrivateCommon.IImageBufferPrivate).TypeHandle));
            return global::ABI.Microsoft.Windows.PrivateCommon.IImageBufferPrivateMethods.GetImageBufferView(_obj);
        }

        unsafe global::Microsoft.Windows.PrivateCommon.ImageBufferViewData global::Microsoft.Windows.PrivateCommon.IImageBufferPrivate.GetImageBufferViewData(uint targetProcessId)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.PrivateCommon.IImageBufferPrivate).TypeHandle));
            return global::ABI.Microsoft.Windows.PrivateCommon.IImageBufferPrivateMethods.GetImageBufferViewData(_obj, targetProcessId);
        }

        unsafe void global::Microsoft.Windows.PrivateCommon.IImageBufferPrivate.SyncBufferWithOutValue()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.PrivateCommon.IImageBufferPrivate).TypeHandle));
            global::ABI.Microsoft.Windows.PrivateCommon.IImageBufferPrivateMethods.SyncBufferWithOutValue(_obj);
        }

        unsafe global::Microsoft.Windows.PrivateCommon.ImageBufferResource global::Microsoft.Windows.PrivateCommon.IImageBufferPrivate.GetImageBufferResource(object sessionAsInspectable)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.PrivateCommon.IImageBufferPrivate).TypeHandle));
            return global::ABI.Microsoft.Windows.PrivateCommon.IImageBufferPrivateMethods.GetImageBufferResource(_obj, sessionAsInspectable);
        }
    }

    internal static class IImageBufferResourceMethods
    {


        internal static unsafe ulong Buffer(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            ulong __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, ulong*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe uint Width(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe uint Height(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe uint RowStride(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe uint BytesPerPixel(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe uint Capacity(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.Windows.PrivateCommon.PixelFormat PixelFormat(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.PrivateCommon.PixelFormat __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.PrivateCommon.PixelFormat*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe global::Microsoft.Windows.PrivateCommon.ImageBufferData get_BufferData(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.PrivateCommon.ImageBufferData __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.PrivateCommon.ImageBufferData*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_BufferData(IObjectReference _obj, global::Microsoft.Windows.PrivateCommon.ImageBufferData value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.PrivateCommon.ImageBufferData, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x61, 0x6A, 0x85, 0xE4, 0xCF, 0x8F, 0x6A, 0x56, 0xBC, 0xD4, 0xF5, 0x60, 0x21, 0x86, 0x93, 0x96 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E4856A61-8FCF-566A-BCD4-F56021869396")]
    internal interface IImageBufferResource : global::Microsoft.Windows.PrivateCommon.IImageBufferResource
    {
    }
    internal static class IImageBufferResourceFactoryMethods
    {


        internal static unsafe global::Microsoft.Windows.PrivateCommon.ImageBufferResource CreateInstance(IObjectReference _obj, global::Microsoft.Windows.PrivateCommon.ImageBufferData bufferData)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.PrivateCommon.ImageBufferData, IntPtr*, int>**)ThisPtr)[6](ThisPtr, bufferData, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Windows.PrivateCommon.ImageBufferResource.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Windows.PrivateCommon.ImageBufferResource.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Windows.PrivateCommon.ImageBufferResource CreateInstance2(IObjectReference _obj, uint height, uint width, global::Microsoft.Windows.PrivateCommon.PixelFormat pixelFormat, uint rowStride, ulong targetProcessHandle, ulong sourceProcessHandle)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint, uint, global::Microsoft.Windows.PrivateCommon.PixelFormat, uint, ulong, ulong, IntPtr*, int>**)ThisPtr)[7](ThisPtr, height, width, pixelFormat, rowStride, targetProcessHandle, sourceProcessHandle, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Windows.PrivateCommon.ImageBufferResource.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Windows.PrivateCommon.ImageBufferResource.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xAE, 0x98, 0x8B, 0xA9, 0x34, 0xDB, 0xBF, 0x50, 0x8B, 0x9C, 0x9C, 0x58, 0xE6, 0xCF, 0x4B, 0xB6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A98B98AE-DB34-50BF-8B9C-9C58E6CF4BB6")]
    internal interface IImageBufferResourceFactory : global::Microsoft.Windows.PrivateCommon.IImageBufferResourceFactory
    {
    }
    public static class IModelManagerMethods
    {


        public static unsafe void EnsureModelInitialized(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[6](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        public static unsafe void GenerateCacheModel(IObjectReference _obj, string offlineDriverPath)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __offlineDriverPath = new(offlineDriverPath);
            fixed(void* ___offlineDriverPath = __offlineDriverPath)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __offlineDriverPath)));
                global::System.GC.KeepAlive(_obj);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x39, 0xDE, 0xF4, 0xF7, 0xA, 0xCE, 0xD, 0x5D, 0x9F, 0x37, 0x7D, 0x22, 0xB8, 0xB1, 0xB6, 0xDB };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IModelManager.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("F7F4DE39-CE0A-5D0D-9F37-7D22B8B1B6DB")]
    internal unsafe interface IModelManager : global::Microsoft.Windows.PrivateCommon.IModelManager
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IModelManager()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IModelManager), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 2);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_EnsureModelInitialized_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_GenerateCacheModel_1;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_EnsureModelInitialized_0(IntPtr thisPtr)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.PrivateCommon.IModelManager>(thisPtr).EnsureModelInitialized();

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GenerateCacheModel_1(IntPtr thisPtr, IntPtr offlineDriverPath)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.PrivateCommon.IModelManager>(thisPtr).GenerateCacheModel(MarshalString.FromAbi(offlineDriverPath));

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe void global::Microsoft.Windows.PrivateCommon.IModelManager.EnsureModelInitialized()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.PrivateCommon.IModelManager).TypeHandle));
            global::ABI.Microsoft.Windows.PrivateCommon.IModelManagerMethods.EnsureModelInitialized(_obj);
        }

        unsafe void global::Microsoft.Windows.PrivateCommon.IModelManager.GenerateCacheModel(string offlineDriverPath)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.PrivateCommon.IModelManager).TypeHandle));
            global::ABI.Microsoft.Windows.PrivateCommon.IModelManagerMethods.GenerateCacheModel(_obj, offlineDriverPath);
        }
    }

    public static class IModelManager2Methods
    {


        public static unsafe void SetPackageFamilyName(IObjectReference _obj, string packageFamilyName)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __packageFamilyName = new(packageFamilyName);
            fixed(void* ___packageFamilyName = __packageFamilyName)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __packageFamilyName)));
                global::System.GC.KeepAlive(_obj);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x35, 0x4, 0xAA, 0xE, 0xDC, 0x97, 0x4C, 0x56, 0xA5, 0xBD, 0x70, 0xC6, 0x9F, 0xD1, 0x24, 0xF1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IModelManager2.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("0EAA0435-97DC-564C-A5BD-70C69FD124F1")]
    internal unsafe interface IModelManager2 : global::Microsoft.Windows.PrivateCommon.IModelManager2
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IModelManager2()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IModelManager2), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_SetPackageFamilyName_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_SetPackageFamilyName_0(IntPtr thisPtr, IntPtr packageFamilyName)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.PrivateCommon.IModelManager2>(thisPtr).SetPackageFamilyName(MarshalString.FromAbi(packageFamilyName));

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe void global::Microsoft.Windows.PrivateCommon.IModelManager2.SetPackageFamilyName(string packageFamilyName)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.PrivateCommon.IModelManager2).TypeHandle));
            global::ABI.Microsoft.Windows.PrivateCommon.IModelManager2Methods.SetPackageFamilyName(_obj, packageFamilyName);
        }

        void global::Microsoft.Windows.PrivateCommon.IModelManager.EnsureModelInitialized() => ((global::Microsoft.Windows.PrivateCommon.IModelManager)(IWinRTObject)this).EnsureModelInitialized();

        void global::Microsoft.Windows.PrivateCommon.IModelManager.GenerateCacheModel(string offlineDriverPath) => ((global::Microsoft.Windows.PrivateCommon.IModelManager)(IWinRTObject)this).GenerateCacheModel(offlineDriverPath);
    }

    public static class IModelManager3Methods
    {


        public static unsafe void GenerateCacheModel(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[6](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        public static unsafe void SetCorrelationVector(IObjectReference _obj, string correlationVector)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __correlationVector = new(correlationVector);
            fixed(void* ___correlationVector = __correlationVector)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __correlationVector)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        public static unsafe bool IsModelCacheReady(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD, 0xAD, 0x4E, 0x54, 0xB7, 0xAA, 0xA, 0x5A, 0x82, 0xB6, 0xB5, 0xD8, 0xCF, 0xEF, 0xC, 0x5F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IModelManager3.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("544EAD0D-AAB7-5A0A-82B6-B5D8CFEF0C5F")]
    internal unsafe interface IModelManager3 : global::Microsoft.Windows.PrivateCommon.IModelManager3
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IModelManager3()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IModelManager3), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 3);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_GenerateCacheModel_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_SetCorrelationVector_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_IsModelCacheReady_2;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GenerateCacheModel_0(IntPtr thisPtr)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.PrivateCommon.IModelManager3>(thisPtr).GenerateCacheModel();

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_SetCorrelationVector_1(IntPtr thisPtr, IntPtr correlationVector)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.PrivateCommon.IModelManager3>(thisPtr).SetCorrelationVector(MarshalString.FromAbi(correlationVector));

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_IsModelCacheReady_2(IntPtr thisPtr, byte* result)
        {

            bool __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.PrivateCommon.IModelManager3>(thisPtr).IsModelCacheReady();
                *result = (byte)(__result ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe void global::Microsoft.Windows.PrivateCommon.IModelManager3.GenerateCacheModel()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.PrivateCommon.IModelManager3).TypeHandle));
            global::ABI.Microsoft.Windows.PrivateCommon.IModelManager3Methods.GenerateCacheModel(_obj);
        }

        unsafe void global::Microsoft.Windows.PrivateCommon.IModelManager3.SetCorrelationVector(string correlationVector)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.PrivateCommon.IModelManager3).TypeHandle));
            global::ABI.Microsoft.Windows.PrivateCommon.IModelManager3Methods.SetCorrelationVector(_obj, correlationVector);
        }

        unsafe bool global::Microsoft.Windows.PrivateCommon.IModelManager3.IsModelCacheReady()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.PrivateCommon.IModelManager3).TypeHandle));
            return global::ABI.Microsoft.Windows.PrivateCommon.IModelManager3Methods.IsModelCacheReady(_obj);
        }

        void global::Microsoft.Windows.PrivateCommon.IModelManager.EnsureModelInitialized() => ((global::Microsoft.Windows.PrivateCommon.IModelManager)(IWinRTObject)this).EnsureModelInitialized();

        void global::Microsoft.Windows.PrivateCommon.IModelManager.GenerateCacheModel(string offlineDriverPath) => ((global::Microsoft.Windows.PrivateCommon.IModelManager)(IWinRTObject)this).GenerateCacheModel(offlineDriverPath);

        void global::Microsoft.Windows.PrivateCommon.IModelManager2.SetPackageFamilyName(string packageFamilyName) => ((global::Microsoft.Windows.PrivateCommon.IModelManager2)(IWinRTObject)this).SetPackageFamilyName(packageFamilyName);
    }

    public static class INotifyExpiredSessionHostMethods
    {


        public static unsafe global::Windows.Foundation.IAsyncAction NotifyExpiredSessionHost(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Windows.Foundation.IAsyncAction>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncAction>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD6, 0x62, 0xC5, 0x94, 0x52, 0x47, 0x8, 0x50, 0xAF, 0x26, 0x4, 0xC8, 0x2A, 0xC7, 0x3F, 0x80 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => INotifyExpiredSessionHost.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("94C562D6-4752-5008-AF26-04C82AC73F80")]
    internal unsafe interface INotifyExpiredSessionHost : global::Microsoft.Windows.PrivateCommon.INotifyExpiredSessionHost
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe INotifyExpiredSessionHost()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(INotifyExpiredSessionHost), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_NotifyExpiredSessionHost_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_NotifyExpiredSessionHost_0(IntPtr thisPtr, IntPtr* operation)
        {

            global::Windows.Foundation.IAsyncAction __operation = default;

            *operation = default;

            try
            {
                __operation = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.PrivateCommon.INotifyExpiredSessionHost>(thisPtr).NotifyExpiredSessionHost();
                *operation = MarshalInterface<global::Windows.Foundation.IAsyncAction>.FromManaged(__operation);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Windows.Foundation.IAsyncAction global::Microsoft.Windows.PrivateCommon.INotifyExpiredSessionHost.NotifyExpiredSessionHost()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.PrivateCommon.INotifyExpiredSessionHost).TypeHandle));
            return global::ABI.Microsoft.Windows.PrivateCommon.INotifyExpiredSessionHostMethods.NotifyExpiredSessionHost(_obj);
        }
    }

    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ImageBufferResource
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.PrivateCommon.ImageBufferResource obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.PrivateCommon.ImageBufferResource>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.PrivateCommon.IImageBufferResourceMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.PrivateCommon.ImageBufferResource obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.PrivateCommon.IImageBufferResourceMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.PrivateCommon.ImageBufferResource FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.PrivateCommon.ImageBufferResource.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.PrivateCommon.ImageBufferResource obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.PrivateCommon.ImageBufferResource>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.PrivateCommon.ImageBufferResource[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.PrivateCommon.ImageBufferResource>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.PrivateCommon.ImageBufferResource>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.PrivateCommon.ImageBufferResource[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.PrivateCommon.ImageBufferResource>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.PrivateCommon.ImageBufferResource[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.PrivateCommon.ImageBufferResource>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.PrivateCommon.ImageBufferResource[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.PrivateCommon.ImageBufferResource>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.PrivateCommon.ImageBufferResource>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.PrivateCommon.ImageBufferResource>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ImageBufferResourceRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.PrivateCommon.ImageBufferResource(inspectable.ObjRef);
    }
}
#pragma warning restore CA1416
