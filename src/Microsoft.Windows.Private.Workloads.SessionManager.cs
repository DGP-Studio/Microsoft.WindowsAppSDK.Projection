//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.Windows.Private.Workloads.SessionManager
{
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Private.Workloads.SessionManager")][Guid("52010AB7-BBCE-591B-A2BC-A5743A5673D2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Private.Workloads.SessionManager.ISessionManager))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(SessionManagerContract), 65536u)]
    internal interface ISessionManager
    {
        global::Windows.Foundation.IAsyncOperation<object> GetOrCreateSessionAsync(string packageName, string typeName, uint priority);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Private.Workloads.SessionManager")][Guid("EF69FD6A-766E-5A92-8CE1-1BBE988DF0FC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Private.Workloads.SessionManager.ISessionManager2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(SessionManagerContract), 131072u)]
    internal interface ISessionManager2
    {
        bool ReportSessionFailure(object session, int hrFailure, string failureMessage);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Private.Workloads.SessionManager")][Guid("C1D6FBFA-5CDC-591A-9D90-416EB4ECC4D7")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Private.Workloads.SessionManager.ISessionManager3))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(SessionManagerContract), 196608u)]
    internal interface ISessionManager3
    {
        global::Windows.Foundation.IAsyncOperation<object> GetOrCreateUninitializedSessionAsync(string packageName, string typeName, uint priority);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Private.Workloads.SessionManager")][Guid("2E9ECA64-7D54-5BD1-82BE-9B91F80133DB")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Private.Workloads.SessionManager.ISessionManagerStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(SessionManagerContract), 65536u)]
    internal interface ISessionManagerStatics
    {
        global::Windows.Foundation.IAsyncOperation<SessionManager> GetOrCreateAsync();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Private.Workloads.SessionManager")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Private.Workloads.SessionManager.SessionManager))]
    [global::ABI.Microsoft.Windows.Private.Workloads.SessionManager.SessionManagerRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ISessionManager))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(SessionManagerContract), 65536u)]
    public sealed class SessionManager : global::Microsoft.Windows.PrivateCommon.IAnchorInstance, global::Microsoft.Windows.PrivateCommon.INotifyExpiredSessionHost, global::System.IDisposable, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<SessionManager>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_Private_Workloads_SessionManager_ISessionManager => _inner;
        private volatile IObjectReference ___objRef_global__Microsoft_Windows_Private_Workloads_SessionManager_ISessionManager2;
        private IObjectReference Make___objRef_global__Microsoft_Windows_Private_Workloads_SessionManager_ISessionManager2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Windows_Private_Workloads_SessionManager_ISessionManager2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Windows.Private.Workloads.SessionManager.ISessionManager2Methods.IID), null);
            return ___objRef_global__Microsoft_Windows_Private_Workloads_SessionManager_ISessionManager2;
        }
        private IObjectReference _objRef_global__Microsoft_Windows_Private_Workloads_SessionManager_ISessionManager2 => ___objRef_global__Microsoft_Windows_Private_Workloads_SessionManager_ISessionManager2 ?? Make___objRef_global__Microsoft_Windows_Private_Workloads_SessionManager_ISessionManager2();

        private volatile IObjectReference ___objRef_global__Microsoft_Windows_Private_Workloads_SessionManager_ISessionManager3;
        private IObjectReference Make___objRef_global__Microsoft_Windows_Private_Workloads_SessionManager_ISessionManager3()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Windows_Private_Workloads_SessionManager_ISessionManager3, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Windows.Private.Workloads.SessionManager.ISessionManager3Methods.IID), null);
            return ___objRef_global__Microsoft_Windows_Private_Workloads_SessionManager_ISessionManager3;
        }
        private IObjectReference _objRef_global__Microsoft_Windows_Private_Workloads_SessionManager_ISessionManager3 => ___objRef_global__Microsoft_Windows_Private_Workloads_SessionManager_ISessionManager3 ?? Make___objRef_global__Microsoft_Windows_Private_Workloads_SessionManager_ISessionManager3();

        private volatile IObjectReference ___objRef_global__Microsoft_Windows_PrivateCommon_IAnchorInstance;
        private IObjectReference Make___objRef_global__Microsoft_Windows_PrivateCommon_IAnchorInstance()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Windows_PrivateCommon_IAnchorInstance, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Windows.PrivateCommon.IAnchorInstanceMethods.IID), null);
            return ___objRef_global__Microsoft_Windows_PrivateCommon_IAnchorInstance;
        }
        private IObjectReference _objRef_global__Microsoft_Windows_PrivateCommon_IAnchorInstance => ___objRef_global__Microsoft_Windows_PrivateCommon_IAnchorInstance ?? Make___objRef_global__Microsoft_Windows_PrivateCommon_IAnchorInstance();

        private volatile IObjectReference ___objRef_global__Microsoft_Windows_PrivateCommon_INotifyExpiredSessionHost;
        private IObjectReference Make___objRef_global__Microsoft_Windows_PrivateCommon_INotifyExpiredSessionHost()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Windows_PrivateCommon_INotifyExpiredSessionHost, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Windows.PrivateCommon.INotifyExpiredSessionHostMethods.IID), null);
            return ___objRef_global__Microsoft_Windows_PrivateCommon_INotifyExpiredSessionHost;
        }
        private IObjectReference _objRef_global__Microsoft_Windows_PrivateCommon_INotifyExpiredSessionHost => ___objRef_global__Microsoft_Windows_PrivateCommon_INotifyExpiredSessionHost ?? Make___objRef_global__Microsoft_Windows_PrivateCommon_INotifyExpiredSessionHost();

        private volatile IObjectReference ___objRef_global__System_IDisposable;
        private IObjectReference Make___objRef_global__System_IDisposable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_IDisposable, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.IDisposableMethods.IID), null);
            return ___objRef_global__System_IDisposable;
        }
        private IObjectReference _objRef_global__System_IDisposable => ___objRef_global__System_IDisposable ?? Make___objRef_global__System_IDisposable();



        public static I As<I>() => ActivationFactory.Get("Microsoft.Windows.Private.Workloads.SessionManager.SessionManager").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_Private_Workloads_SessionManager_ISessionManagerStatics;
        private static IObjectReference _objRef_global__Microsoft_Windows_Private_Workloads_SessionManager_ISessionManagerStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Windows_Private_Workloads_SessionManager_ISessionManagerStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_Private_Workloads_SessionManager_ISessionManagerStatics = ActivationFactory.Get("Microsoft.Windows.Private.Workloads.SessionManager.SessionManager", global::ABI.Microsoft.Windows.Private.Workloads.SessionManager.ISessionManagerStaticsMethods.IID);
                }
            }
        }

        public static global::Windows.Foundation.IAsyncOperation<SessionManager> GetOrCreateAsync() => global::ABI.Microsoft.Windows.Private.Workloads.SessionManager.ISessionManagerStaticsMethods.GetOrCreateAsync(_objRef_global__Microsoft_Windows_Private_Workloads_SessionManager_ISessionManagerStatics);

        public static SessionManager FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<SessionManager>.FromAbi(thisPtr);
        }

        internal SessionManager(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.Private.Workloads.SessionManager.ISessionManagerMethods.IID);

        }


        public static bool operator ==(SessionManager x, SessionManager y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(SessionManager x, SessionManager y) => !(x == y);
        public bool Equals(SessionManager other) => this == other;
        public override bool Equals(object obj) => obj is SessionManager that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.IAsyncOperation<object> GetOrCreateSessionAsync(string packageName, string typeName, uint priority) => global::ABI.Microsoft.Windows.Private.Workloads.SessionManager.ISessionManagerMethods.GetOrCreateSessionAsync(_objRef_global__Microsoft_Windows_Private_Workloads_SessionManager_ISessionManager, packageName, typeName, priority);

        public bool ReportSessionFailure(object session, int hrFailure, string failureMessage) => global::ABI.Microsoft.Windows.Private.Workloads.SessionManager.ISessionManager2Methods.ReportSessionFailure(_objRef_global__Microsoft_Windows_Private_Workloads_SessionManager_ISessionManager2, session, hrFailure, failureMessage);

        public global::Windows.Foundation.IAsyncOperation<object> GetOrCreateUninitializedSessionAsync(string packageName, string typeName, uint priority) => global::ABI.Microsoft.Windows.Private.Workloads.SessionManager.ISessionManager3Methods.GetOrCreateUninitializedSessionAsync(_objRef_global__Microsoft_Windows_Private_Workloads_SessionManager_ISessionManager3, packageName, typeName, priority);

        public void AnchorInstance(object instance) => global::ABI.Microsoft.Windows.PrivateCommon.IAnchorInstanceMethods.AnchorInstance(_objRef_global__Microsoft_Windows_PrivateCommon_IAnchorInstance, instance);

        public global::Windows.Foundation.IAsyncAction NotifyExpiredSessionHost() => global::ABI.Microsoft.Windows.PrivateCommon.INotifyExpiredSessionHostMethods.NotifyExpiredSessionHost(_objRef_global__Microsoft_Windows_PrivateCommon_INotifyExpiredSessionHost);

        public void Dispose() => global::ABI.System.IDisposableMethods.Dispose(_objRef_global__System_IDisposable);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::Windows.Foundation.Metadata.ContractVersion(196608u)]
    public enum SessionManagerContract
    {
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.Windows.Private.Workloads.SessionManager
{
    internal static class ISessionManagerMethods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<object> GetOrCreateSessionAsync(IObjectReference _obj, string packageName, string typeName, uint priority)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __packageName = new(packageName);
                MarshalString.Pinnable __typeName = new(typeName);
                fixed(void* ___packageName = __packageName, ___typeName = __typeName)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, uint, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __packageName), MarshalString.GetAbi(ref __typeName), priority, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_object.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperation<object>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<object>>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB7, 0xA, 0x1, 0x52, 0xCE, 0xBB, 0x1B, 0x59, 0xA2, 0xBC, 0xA5, 0x74, 0x3A, 0x56, 0x73, 0xD2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("52010AB7-BBCE-591B-A2BC-A5743A5673D2")]
    internal interface ISessionManager : global::Microsoft.Windows.Private.Workloads.SessionManager.ISessionManager
    {
    }
    internal static class ISessionManager2Methods
    {


        internal static unsafe bool ReportSessionFailure(IObjectReference _obj, object session, int hrFailure, string failureMessage)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __session = default;
            byte __retval = default;
            try
            {
                __session = MarshalInspectable<object>.CreateMarshaler2(session);
                MarshalString.Pinnable __failureMessage = new(failureMessage);
                fixed(void* ___failureMessage = __failureMessage)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int, IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__session), hrFailure, MarshalString.GetAbi(ref __failureMessage), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return __retval != 0;
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__session);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x6A, 0xFD, 0x69, 0xEF, 0x6E, 0x76, 0x92, 0x5A, 0x8C, 0xE1, 0x1B, 0xBE, 0x98, 0x8D, 0xF0, 0xFC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("EF69FD6A-766E-5A92-8CE1-1BBE988DF0FC")]
    internal interface ISessionManager2 : global::Microsoft.Windows.Private.Workloads.SessionManager.ISessionManager2
    {
    }
    internal static class ISessionManager3Methods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<object> GetOrCreateUninitializedSessionAsync(IObjectReference _obj, string packageName, string typeName, uint priority)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __packageName = new(packageName);
                MarshalString.Pinnable __typeName = new(typeName);
                fixed(void* ___packageName = __packageName, ___typeName = __typeName)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, uint, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __packageName), MarshalString.GetAbi(ref __typeName), priority, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_object.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperation<object>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<object>>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFA, 0xFB, 0xD6, 0xC1, 0xDC, 0x5C, 0x1A, 0x59, 0x9D, 0x90, 0x41, 0x6E, 0xB4, 0xEC, 0xC4, 0xD7 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C1D6FBFA-5CDC-591A-9D90-416EB4ECC4D7")]
    internal interface ISessionManager3 : global::Microsoft.Windows.Private.Workloads.SessionManager.ISessionManager3
    {
    }
    internal static class ISessionManagerStaticsMethods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.Private.Workloads.SessionManager.SessionManager> GetOrCreateAsync(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Windows_Private_Workloads_SessionManager_SessionManager.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.Private.Workloads.SessionManager.SessionManager>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.Private.Workloads.SessionManager.SessionManager>>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x64, 0xCA, 0x9E, 0x2E, 0x54, 0x7D, 0xD1, 0x5B, 0x82, 0xBE, 0x9B, 0x91, 0xF8, 0x1, 0x33, 0xDB };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2E9ECA64-7D54-5BD1-82BE-9B91F80133DB")]
    internal interface ISessionManagerStatics : global::Microsoft.Windows.Private.Workloads.SessionManager.ISessionManagerStatics
    {
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct SessionManager
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.Private.Workloads.SessionManager.SessionManager obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.Private.Workloads.SessionManager.SessionManager>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.Private.Workloads.SessionManager.ISessionManagerMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.Private.Workloads.SessionManager.SessionManager obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.Private.Workloads.SessionManager.ISessionManagerMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.Private.Workloads.SessionManager.SessionManager FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.Private.Workloads.SessionManager.SessionManager.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.Private.Workloads.SessionManager.SessionManager obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.Private.Workloads.SessionManager.SessionManager>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.Private.Workloads.SessionManager.SessionManager[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Private.Workloads.SessionManager.SessionManager>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Private.Workloads.SessionManager.SessionManager>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.Private.Workloads.SessionManager.SessionManager[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Private.Workloads.SessionManager.SessionManager>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.Private.Workloads.SessionManager.SessionManager[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Private.Workloads.SessionManager.SessionManager>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.Private.Workloads.SessionManager.SessionManager[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Private.Workloads.SessionManager.SessionManager>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.Private.Workloads.SessionManager.SessionManager>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.Private.Workloads.SessionManager.SessionManager>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class SessionManagerRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.Private.Workloads.SessionManager.SessionManager(inspectable.ObjRef);
    }
}
#pragma warning restore CA1416
