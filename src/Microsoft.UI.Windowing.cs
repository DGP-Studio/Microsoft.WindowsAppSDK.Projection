//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.UI.Windowing
{
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.AppWindow))]
    [global::ABI.Microsoft.UI.Windowing.AppWindowRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IAppWindow))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class AppWindow : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<AppWindow>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Windowing_IAppWindow => _inner;
        private volatile IObjectReference ___objRef_global__Microsoft_UI_Windowing_IAppWindow2;
        private IObjectReference Make___objRef_global__Microsoft_UI_Windowing_IAppWindow2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Windowing_IAppWindow2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Windowing.IAppWindow2Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Windowing_IAppWindow2;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Windowing_IAppWindow2 => ___objRef_global__Microsoft_UI_Windowing_IAppWindow2 ?? Make___objRef_global__Microsoft_UI_Windowing_IAppWindow2();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Windowing_IAppWindow3;
        private IObjectReference Make___objRef_global__Microsoft_UI_Windowing_IAppWindow3()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Windowing_IAppWindow3, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Windowing.IAppWindow3Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Windowing_IAppWindow3;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Windowing_IAppWindow3 => ___objRef_global__Microsoft_UI_Windowing_IAppWindow3 ?? Make___objRef_global__Microsoft_UI_Windowing_IAppWindow3();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Windowing_IAppWindow4;
        private IObjectReference Make___objRef_global__Microsoft_UI_Windowing_IAppWindow4()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Windowing_IAppWindow4, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Windowing.IAppWindow4Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Windowing_IAppWindow4;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Windowing_IAppWindow4 => ___objRef_global__Microsoft_UI_Windowing_IAppWindow4 ?? Make___objRef_global__Microsoft_UI_Windowing_IAppWindow4();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Windowing_IAppWindowExperimental;
        private IObjectReference Make___objRef_global__Microsoft_UI_Windowing_IAppWindowExperimental()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Windowing_IAppWindowExperimental, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Windowing.IAppWindowExperimentalMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Windowing_IAppWindowExperimental;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Windowing_IAppWindowExperimental => ___objRef_global__Microsoft_UI_Windowing_IAppWindowExperimental ?? Make___objRef_global__Microsoft_UI_Windowing_IAppWindowExperimental();



        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Windowing.AppWindow").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Windowing_IAppWindowStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Windowing_IAppWindowStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Windowing_IAppWindowStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Windowing_IAppWindowStatics = ActivationFactory.Get("Microsoft.UI.Windowing.AppWindow", global::ABI.Microsoft.UI.Windowing.IAppWindowStaticsMethods.IID);
                }
            }
        }

        public static AppWindow Create() => global::ABI.Microsoft.UI.Windowing.IAppWindowStaticsMethods.Create(_objRef_global__Microsoft_UI_Windowing_IAppWindowStatics);

        public static AppWindow Create(AppWindowPresenter appWindowPresenter) => global::ABI.Microsoft.UI.Windowing.IAppWindowStaticsMethods.Create(_objRef_global__Microsoft_UI_Windowing_IAppWindowStatics, appWindowPresenter);

        public static AppWindow Create(AppWindowPresenter appWindowPresenter, global::Microsoft.UI.WindowId ownerWindowId) => global::ABI.Microsoft.UI.Windowing.IAppWindowStaticsMethods.Create(_objRef_global__Microsoft_UI_Windowing_IAppWindowStatics, appWindowPresenter, ownerWindowId);

        public static AppWindow GetFromWindowId(global::Microsoft.UI.WindowId windowId) => global::ABI.Microsoft.UI.Windowing.IAppWindowStaticsMethods.GetFromWindowId(_objRef_global__Microsoft_UI_Windowing_IAppWindowStatics, windowId);

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Windowing_IAppWindowStatics2;
        private static IObjectReference _objRef_global__Microsoft_UI_Windowing_IAppWindowStatics2
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Windowing_IAppWindowStatics2;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Windowing_IAppWindowStatics2 = ActivationFactory.Get("Microsoft.UI.Windowing.AppWindow", global::ABI.Microsoft.UI.Windowing.IAppWindowStatics2Methods.IID);
                }
            }
        }

        public static AppWindow Create(AppWindowPresenter appWindowPresenter, global::Microsoft.UI.WindowId ownerWindowId, global::Microsoft.UI.Dispatching.DispatcherQueue DispatcherQueue) => global::ABI.Microsoft.UI.Windowing.IAppWindowStatics2Methods.Create(_objRef_global__Microsoft_UI_Windowing_IAppWindowStatics2, appWindowPresenter, ownerWindowId, DispatcherQueue);

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Windowing_IAppWindowStatics3;
        private static IObjectReference _objRef_global__Microsoft_UI_Windowing_IAppWindowStatics3
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Windowing_IAppWindowStatics3;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Windowing_IAppWindowStatics3 = ActivationFactory.Get("Microsoft.UI.Windowing.AppWindow", global::ABI.Microsoft.UI.Windowing.IAppWindowStatics3Methods.IID);
                }
            }
        }

        public static void SaveCurrentPlacementForAllPersistedStateIds() => global::ABI.Microsoft.UI.Windowing.IAppWindowStatics3Methods.SaveCurrentPlacementForAllPersistedStateIds(_objRef_global__Microsoft_UI_Windowing_IAppWindowStatics3);

        public static AppWindow FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<AppWindow>.FromAbi(thisPtr);
        }

        internal AppWindow(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Windowing.IAppWindowMethods.IID);

        }


        public static bool operator ==(AppWindow x, AppWindow y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(AppWindow x, AppWindow y) => !(x == y);
        public bool Equals(AppWindow other) => this == other;
        public override bool Equals(object obj) => obj is AppWindow that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void Destroy() => global::ABI.Microsoft.UI.Windowing.IAppWindowMethods.Destroy(_objRef_global__Microsoft_UI_Windowing_IAppWindow);

        public void Hide() => global::ABI.Microsoft.UI.Windowing.IAppWindowMethods.Hide(_objRef_global__Microsoft_UI_Windowing_IAppWindow);

        public void Move(global::Windows.Graphics.PointInt32 position) => global::ABI.Microsoft.UI.Windowing.IAppWindowMethods.Move(_objRef_global__Microsoft_UI_Windowing_IAppWindow, position);

        public void MoveAndResize(global::Windows.Graphics.RectInt32 rect) => global::ABI.Microsoft.UI.Windowing.IAppWindowMethods.MoveAndResize(_objRef_global__Microsoft_UI_Windowing_IAppWindow, rect);

        public void MoveAndResize(global::Windows.Graphics.RectInt32 rect, DisplayArea displayarea) => global::ABI.Microsoft.UI.Windowing.IAppWindowMethods.MoveAndResize(_objRef_global__Microsoft_UI_Windowing_IAppWindow, rect, displayarea);

        public void Resize(global::Windows.Graphics.SizeInt32 size) => global::ABI.Microsoft.UI.Windowing.IAppWindowMethods.Resize(_objRef_global__Microsoft_UI_Windowing_IAppWindow, size);

        public void SetIcon(string iconPath) => global::ABI.Microsoft.UI.Windowing.IAppWindowMethods.SetIcon(_objRef_global__Microsoft_UI_Windowing_IAppWindow, iconPath);

        public void SetIcon(global::Microsoft.UI.IconId iconId) => global::ABI.Microsoft.UI.Windowing.IAppWindowMethods.SetIcon(_objRef_global__Microsoft_UI_Windowing_IAppWindow, iconId);

        public void SetPresenter(AppWindowPresenter appWindowPresenter) => global::ABI.Microsoft.UI.Windowing.IAppWindowMethods.SetPresenter(_objRef_global__Microsoft_UI_Windowing_IAppWindow, appWindowPresenter);

        public void SetPresenter(AppWindowPresenterKind appWindowPresenterKind) => global::ABI.Microsoft.UI.Windowing.IAppWindowMethods.SetPresenter(_objRef_global__Microsoft_UI_Windowing_IAppWindow, appWindowPresenterKind);

        public void Show() => global::ABI.Microsoft.UI.Windowing.IAppWindowMethods.Show(_objRef_global__Microsoft_UI_Windowing_IAppWindow);

        public void Show(bool activateWindow) => global::ABI.Microsoft.UI.Windowing.IAppWindowMethods.Show(_objRef_global__Microsoft_UI_Windowing_IAppWindow, activateWindow);

        public event global::Windows.Foundation.TypedEventHandler<AppWindow, AppWindowChangedEventArgs> Changed
        {
            add => global::ABI.Microsoft.UI.Windowing.IAppWindowMethods.Get_Changed2(_objRef_global__Microsoft_UI_Windowing_IAppWindow, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Windowing.IAppWindowMethods.Get_Changed2(_objRef_global__Microsoft_UI_Windowing_IAppWindow, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<AppWindow, AppWindowClosingEventArgs> Closing
        {
            add => global::ABI.Microsoft.UI.Windowing.IAppWindowMethods.Get_Closing2(_objRef_global__Microsoft_UI_Windowing_IAppWindow, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Windowing.IAppWindowMethods.Get_Closing2(_objRef_global__Microsoft_UI_Windowing_IAppWindow, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<AppWindow, object> Destroying
        {
            add => global::ABI.Microsoft.UI.Windowing.IAppWindowMethods.Get_Destroying2(_objRef_global__Microsoft_UI_Windowing_IAppWindow, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Windowing.IAppWindowMethods.Get_Destroying2(_objRef_global__Microsoft_UI_Windowing_IAppWindow, (IWinRTObject)this).Unsubscribe(value);
        }

        public void MoveInZOrderAtBottom() => global::ABI.Microsoft.UI.Windowing.IAppWindow2Methods.MoveInZOrderAtBottom(_objRef_global__Microsoft_UI_Windowing_IAppWindow2);

        public void MoveInZOrderAtTop() => global::ABI.Microsoft.UI.Windowing.IAppWindow2Methods.MoveInZOrderAtTop(_objRef_global__Microsoft_UI_Windowing_IAppWindow2);

        public void MoveInZOrderBelow(global::Microsoft.UI.WindowId windowId) => global::ABI.Microsoft.UI.Windowing.IAppWindow2Methods.MoveInZOrderBelow(_objRef_global__Microsoft_UI_Windowing_IAppWindow2, windowId);

        public void ResizeClient(global::Windows.Graphics.SizeInt32 size) => global::ABI.Microsoft.UI.Windowing.IAppWindow2Methods.ResizeClient(_objRef_global__Microsoft_UI_Windowing_IAppWindow2, size);

        public void ShowOnceWithRequestedStartupState() => global::ABI.Microsoft.UI.Windowing.IAppWindow2Methods.ShowOnceWithRequestedStartupState(_objRef_global__Microsoft_UI_Windowing_IAppWindow2);

        public void AssociateWithDispatcherQueue(global::Microsoft.UI.Dispatching.DispatcherQueue dispatcherQueue) => global::ABI.Microsoft.UI.Windowing.IAppWindow3Methods.AssociateWithDispatcherQueue(_objRef_global__Microsoft_UI_Windowing_IAppWindow3, dispatcherQueue);

        public void SetTaskbarIcon(string iconPath) => global::ABI.Microsoft.UI.Windowing.IAppWindow4Methods.SetTaskbarIcon(_objRef_global__Microsoft_UI_Windowing_IAppWindow4, iconPath);

        public void SetTaskbarIcon(global::Microsoft.UI.IconId iconId) => global::ABI.Microsoft.UI.Windowing.IAppWindow4Methods.SetTaskbarIcon(_objRef_global__Microsoft_UI_Windowing_IAppWindow4, iconId);

        public void SetTitleBarIcon(string iconPath) => global::ABI.Microsoft.UI.Windowing.IAppWindow4Methods.SetTitleBarIcon(_objRef_global__Microsoft_UI_Windowing_IAppWindow4, iconPath);

        public void SetTitleBarIcon(global::Microsoft.UI.IconId iconId) => global::ABI.Microsoft.UI.Windowing.IAppWindow4Methods.SetTitleBarIcon(_objRef_global__Microsoft_UI_Windowing_IAppWindow4, iconId);

        public AppWindowPlacementDetails GetCurrentPlacement() => global::ABI.Microsoft.UI.Windowing.IAppWindowExperimentalMethods.GetCurrentPlacement(_objRef_global__Microsoft_UI_Windowing_IAppWindowExperimental);

        public void SaveCurrentPlacement() => global::ABI.Microsoft.UI.Windowing.IAppWindowExperimentalMethods.SaveCurrentPlacement(_objRef_global__Microsoft_UI_Windowing_IAppWindowExperimental);

        public bool SetCurrentPlacement(AppWindowPlacementDetails placementDetails, bool isFirstWindow) => global::ABI.Microsoft.UI.Windowing.IAppWindowExperimentalMethods.SetCurrentPlacement(_objRef_global__Microsoft_UI_Windowing_IAppWindowExperimental, placementDetails, isFirstWindow);

        public global::Windows.Graphics.SizeInt32 ClientSize => global::ABI.Microsoft.UI.Windowing.IAppWindow2Methods.get_ClientSize(_objRef_global__Microsoft_UI_Windowing_IAppWindow2);

        public global::Microsoft.UI.Dispatching.DispatcherQueue DispatcherQueue => global::ABI.Microsoft.UI.Windowing.IAppWindow3Methods.get_DispatcherQueue(_objRef_global__Microsoft_UI_Windowing_IAppWindow3);

        public global::Microsoft.UI.WindowId Id => global::ABI.Microsoft.UI.Windowing.IAppWindowMethods.get_Id(_objRef_global__Microsoft_UI_Windowing_IAppWindow);

        public bool IsShownInSwitchers
        {
            get => global::ABI.Microsoft.UI.Windowing.IAppWindowMethods.get_IsShownInSwitchers(_objRef_global__Microsoft_UI_Windowing_IAppWindow);
            set => global::ABI.Microsoft.UI.Windowing.IAppWindowMethods.set_IsShownInSwitchers(_objRef_global__Microsoft_UI_Windowing_IAppWindow, value);
        }

        public bool IsVisible => global::ABI.Microsoft.UI.Windowing.IAppWindowMethods.get_IsVisible(_objRef_global__Microsoft_UI_Windowing_IAppWindow);

        public global::Microsoft.UI.WindowId OwnerWindowId => global::ABI.Microsoft.UI.Windowing.IAppWindowMethods.get_OwnerWindowId(_objRef_global__Microsoft_UI_Windowing_IAppWindow);

        public global::System.Nullable<Guid> PersistedStateId
        {
            get => global::ABI.Microsoft.UI.Windowing.IAppWindowExperimentalMethods.get_PersistedStateId(_objRef_global__Microsoft_UI_Windowing_IAppWindowExperimental);
            set => global::ABI.Microsoft.UI.Windowing.IAppWindowExperimentalMethods.set_PersistedStateId(_objRef_global__Microsoft_UI_Windowing_IAppWindowExperimental, value);
        }

        public PlacementRestorationBehavior PlacementRestorationBehavior
        {
            get => global::ABI.Microsoft.UI.Windowing.IAppWindowExperimentalMethods.get_PlacementRestorationBehavior(_objRef_global__Microsoft_UI_Windowing_IAppWindowExperimental);
            set => global::ABI.Microsoft.UI.Windowing.IAppWindowExperimentalMethods.set_PlacementRestorationBehavior(_objRef_global__Microsoft_UI_Windowing_IAppWindowExperimental, value);
        }

        public global::Windows.Graphics.PointInt32 Position => global::ABI.Microsoft.UI.Windowing.IAppWindowMethods.get_Position(_objRef_global__Microsoft_UI_Windowing_IAppWindow);

        public AppWindowPresenter Presenter => global::ABI.Microsoft.UI.Windowing.IAppWindowMethods.get_Presenter(_objRef_global__Microsoft_UI_Windowing_IAppWindow);

        public global::Windows.Graphics.SizeInt32 Size => global::ABI.Microsoft.UI.Windowing.IAppWindowMethods.get_Size(_objRef_global__Microsoft_UI_Windowing_IAppWindow);

        public string Title
        {
            get => global::ABI.Microsoft.UI.Windowing.IAppWindowMethods.get_Title(_objRef_global__Microsoft_UI_Windowing_IAppWindow);
            set => global::ABI.Microsoft.UI.Windowing.IAppWindowMethods.set_Title(_objRef_global__Microsoft_UI_Windowing_IAppWindow, value);
        }

        public AppWindowTitleBar TitleBar => global::ABI.Microsoft.UI.Windowing.IAppWindowMethods.get_TitleBar(_objRef_global__Microsoft_UI_Windowing_IAppWindow);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.AppWindowChangedEventArgs))]
    [global::ABI.Microsoft.UI.Windowing.AppWindowChangedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IAppWindowChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class AppWindowChangedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<AppWindowChangedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Windowing_IAppWindowChangedEventArgs => _inner;
        private volatile IObjectReference ___objRef_global__Microsoft_UI_Windowing_IAppWindowChangedEventArgs2;
        private IObjectReference Make___objRef_global__Microsoft_UI_Windowing_IAppWindowChangedEventArgs2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Windowing_IAppWindowChangedEventArgs2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Windowing.IAppWindowChangedEventArgs2Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Windowing_IAppWindowChangedEventArgs2;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Windowing_IAppWindowChangedEventArgs2 => ___objRef_global__Microsoft_UI_Windowing_IAppWindowChangedEventArgs2 ?? Make___objRef_global__Microsoft_UI_Windowing_IAppWindowChangedEventArgs2();



        public static AppWindowChangedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<AppWindowChangedEventArgs>.FromAbi(thisPtr);
        }

        internal AppWindowChangedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Windowing.IAppWindowChangedEventArgsMethods.IID);

        }


        public static bool operator ==(AppWindowChangedEventArgs x, AppWindowChangedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(AppWindowChangedEventArgs x, AppWindowChangedEventArgs y) => !(x == y);
        public bool Equals(AppWindowChangedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is AppWindowChangedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool DidPositionChange => global::ABI.Microsoft.UI.Windowing.IAppWindowChangedEventArgsMethods.get_DidPositionChange(_objRef_global__Microsoft_UI_Windowing_IAppWindowChangedEventArgs);

        public bool DidPresenterChange => global::ABI.Microsoft.UI.Windowing.IAppWindowChangedEventArgsMethods.get_DidPresenterChange(_objRef_global__Microsoft_UI_Windowing_IAppWindowChangedEventArgs);

        public bool DidSizeChange => global::ABI.Microsoft.UI.Windowing.IAppWindowChangedEventArgsMethods.get_DidSizeChange(_objRef_global__Microsoft_UI_Windowing_IAppWindowChangedEventArgs);

        public bool DidVisibilityChange => global::ABI.Microsoft.UI.Windowing.IAppWindowChangedEventArgsMethods.get_DidVisibilityChange(_objRef_global__Microsoft_UI_Windowing_IAppWindowChangedEventArgs);

        public bool DidZOrderChange => global::ABI.Microsoft.UI.Windowing.IAppWindowChangedEventArgs2Methods.get_DidZOrderChange(_objRef_global__Microsoft_UI_Windowing_IAppWindowChangedEventArgs2);

        public bool IsZOrderAtBottom => global::ABI.Microsoft.UI.Windowing.IAppWindowChangedEventArgs2Methods.get_IsZOrderAtBottom(_objRef_global__Microsoft_UI_Windowing_IAppWindowChangedEventArgs2);

        public bool IsZOrderAtTop => global::ABI.Microsoft.UI.Windowing.IAppWindowChangedEventArgs2Methods.get_IsZOrderAtTop(_objRef_global__Microsoft_UI_Windowing_IAppWindowChangedEventArgs2);

        public global::Microsoft.UI.WindowId ZOrderBelowWindowId => global::ABI.Microsoft.UI.Windowing.IAppWindowChangedEventArgs2Methods.get_ZOrderBelowWindowId(_objRef_global__Microsoft_UI_Windowing_IAppWindowChangedEventArgs2);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.AppWindowClosingEventArgs))]
    [global::ABI.Microsoft.UI.Windowing.AppWindowClosingEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IAppWindowClosingEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class AppWindowClosingEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<AppWindowClosingEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Windowing_IAppWindowClosingEventArgs => _inner;


        public static AppWindowClosingEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<AppWindowClosingEventArgs>.FromAbi(thisPtr);
        }

        internal AppWindowClosingEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Windowing.IAppWindowClosingEventArgsMethods.IID);

        }


        public static bool operator ==(AppWindowClosingEventArgs x, AppWindowClosingEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(AppWindowClosingEventArgs x, AppWindowClosingEventArgs y) => !(x == y);
        public bool Equals(AppWindowClosingEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is AppWindowClosingEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool Cancel
        {
            get => global::ABI.Microsoft.UI.Windowing.IAppWindowClosingEventArgsMethods.get_Cancel(_objRef_global__Microsoft_UI_Windowing_IAppWindowClosingEventArgs);
            set => global::ABI.Microsoft.UI.Windowing.IAppWindowClosingEventArgsMethods.set_Cancel(_objRef_global__Microsoft_UI_Windowing_IAppWindowClosingEventArgs, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.AppWindowPlacementDetails))]
    [global::ABI.Microsoft.UI.Windowing.AppWindowPlacementDetailsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IAppWindowPlacementDetails))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65543u)]
    [global::Windows.Foundation.Metadata.Experimental]
    public sealed class AppWindowPlacementDetails : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<AppWindowPlacementDetails>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Windowing_IAppWindowPlacementDetails => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Windowing.AppWindowPlacementDetails").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Windowing_IAppWindowPlacementDetailsStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Windowing_IAppWindowPlacementDetailsStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Windowing_IAppWindowPlacementDetailsStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Windowing_IAppWindowPlacementDetailsStatics = ActivationFactory.Get("Microsoft.UI.Windowing.AppWindowPlacementDetails", global::ABI.Microsoft.UI.Windowing.IAppWindowPlacementDetailsStaticsMethods.IID);
                }
            }
        }

        public static AppWindowPlacementDetails Create(global::Windows.Graphics.RectInt32 normalRect, global::Windows.Graphics.RectInt32 workArea, int dpi, int showCmd, global::Windows.Graphics.RectInt32 arrangeRect, PlacementInfo flags, string deviceName) => global::ABI.Microsoft.UI.Windowing.IAppWindowPlacementDetailsStaticsMethods.Create(_objRef_global__Microsoft_UI_Windowing_IAppWindowPlacementDetailsStatics, normalRect, workArea, dpi, showCmd, arrangeRect, flags, deviceName);

        public static AppWindowPlacementDetails FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<AppWindowPlacementDetails>.FromAbi(thisPtr);
        }

        internal AppWindowPlacementDetails(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Windowing.IAppWindowPlacementDetailsMethods.IID);

        }


        public static bool operator ==(AppWindowPlacementDetails x, AppWindowPlacementDetails y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(AppWindowPlacementDetails x, AppWindowPlacementDetails y) => !(x == y);
        public bool Equals(AppWindowPlacementDetails other) => this == other;
        public override bool Equals(object obj) => obj is AppWindowPlacementDetails that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Graphics.RectInt32 ArrangeRect => global::ABI.Microsoft.UI.Windowing.IAppWindowPlacementDetailsMethods.get_ArrangeRect(_objRef_global__Microsoft_UI_Windowing_IAppWindowPlacementDetails);

        public string DeviceName => global::ABI.Microsoft.UI.Windowing.IAppWindowPlacementDetailsMethods.get_DeviceName(_objRef_global__Microsoft_UI_Windowing_IAppWindowPlacementDetails);

        public int Dpi => global::ABI.Microsoft.UI.Windowing.IAppWindowPlacementDetailsMethods.get_Dpi(_objRef_global__Microsoft_UI_Windowing_IAppWindowPlacementDetails);

        public PlacementInfo Flags => global::ABI.Microsoft.UI.Windowing.IAppWindowPlacementDetailsMethods.get_Flags(_objRef_global__Microsoft_UI_Windowing_IAppWindowPlacementDetails);

        public global::Windows.Graphics.RectInt32 NormalRect => global::ABI.Microsoft.UI.Windowing.IAppWindowPlacementDetailsMethods.get_NormalRect(_objRef_global__Microsoft_UI_Windowing_IAppWindowPlacementDetails);

        public int ShowCmd => global::ABI.Microsoft.UI.Windowing.IAppWindowPlacementDetailsMethods.get_ShowCmd(_objRef_global__Microsoft_UI_Windowing_IAppWindowPlacementDetails);

        public global::Windows.Graphics.RectInt32 WorkArea => global::ABI.Microsoft.UI.Windowing.IAppWindowPlacementDetailsMethods.get_WorkArea(_objRef_global__Microsoft_UI_Windowing_IAppWindowPlacementDetails);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.AppWindowPresenter))]
    [global::ABI.Microsoft.UI.Windowing.AppWindowPresenterRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IAppWindowPresenter))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public class AppWindowPresenter : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<AppWindowPresenter>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Windowing_IAppWindowPresenter;
        private IObjectReference Make___objRef_global__Microsoft_UI_Windowing_IAppWindowPresenter()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Windowing_IAppWindowPresenter, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Windowing.IAppWindowPresenterMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Windowing_IAppWindowPresenter;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Windowing_IAppWindowPresenter => ___objRef_global__Microsoft_UI_Windowing_IAppWindowPresenter ?? Make___objRef_global__Microsoft_UI_Windowing_IAppWindowPresenter();



        private static class _IAppWindowPresenterFactoryMethods
        {}

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Windowing_IAppWindowPresenterFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Windowing_IAppWindowPresenterFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Windowing_IAppWindowPresenterFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Windowing_IAppWindowPresenterFactory = ActivationFactory.Get("Microsoft.UI.Windowing.AppWindowPresenter", global::ABI.Microsoft.UI.Windowing.IAppWindowPresenterFactoryMethods.IID);
                }
            }
        }

        public static AppWindowPresenter FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<AppWindowPresenter>.FromAbi(thisPtr);
        }

        protected internal AppWindowPresenter(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Windowing.IAppWindowPresenterMethods.IID);

        }


        public static bool operator ==(AppWindowPresenter x, AppWindowPresenter y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(AppWindowPresenter x, AppWindowPresenter y) => !(x == y);
        public bool Equals(AppWindowPresenter other) => this == other;
        public override bool Equals(object obj) => obj is AppWindowPresenter that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected AppWindowPresenter(global::WinRT.DerivedComposed _)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(AppWindowPresenter);
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public AppWindowPresenterKind Kind => global::ABI.Microsoft.UI.Windowing.IAppWindowPresenterMethods.get_Kind(_objRef_global__Microsoft_UI_Windowing_IAppWindowPresenter);

        protected virtual bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<AppWindowPresenterKind>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public enum AppWindowPresenterKind : int
    {
        Default = unchecked((int)0),
        CompactOverlay = unchecked((int)0x1),
        FullScreen = unchecked((int)0x2),
        Overlapped = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.AppWindowTitleBar))]
    [global::ABI.Microsoft.UI.Windowing.AppWindowTitleBarRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IAppWindowTitleBar))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class AppWindowTitleBar : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<AppWindowTitleBar>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar => _inner;
        private volatile IObjectReference ___objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar2;
        private IObjectReference Make___objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBar2Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar2;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar2 => ___objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar2 ?? Make___objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar2();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar3;
        private IObjectReference Make___objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar3()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar3, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBar3Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar3;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar3 => ___objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar3 ?? Make___objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar3();



        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Windowing.AppWindowTitleBar").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBarStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBarStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBarStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBarStatics = ActivationFactory.Get("Microsoft.UI.Windowing.AppWindowTitleBar", global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarStaticsMethods.IID);
                }
            }
        }

        public static bool IsCustomizationSupported() => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarStaticsMethods.IsCustomizationSupported(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBarStatics);

        public static AppWindowTitleBar FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<AppWindowTitleBar>.FromAbi(thisPtr);
        }

        internal AppWindowTitleBar(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.IID);

        }


        public static bool operator ==(AppWindowTitleBar x, AppWindowTitleBar y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(AppWindowTitleBar x, AppWindowTitleBar y) => !(x == y);
        public bool Equals(AppWindowTitleBar other) => this == other;
        public override bool Equals(object obj) => obj is AppWindowTitleBar that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void ResetToDefault() => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.ResetToDefault(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar);

        public void SetDragRectangles(global::Windows.Graphics.RectInt32[] value) => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.SetDragRectangles(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar, value);

        public global::System.Nullable<global::Windows.UI.Color> BackgroundColor
        {
            get => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.get_BackgroundColor(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar);
            set => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.set_BackgroundColor(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> ButtonBackgroundColor
        {
            get => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.get_ButtonBackgroundColor(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar);
            set => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.set_ButtonBackgroundColor(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> ButtonForegroundColor
        {
            get => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.get_ButtonForegroundColor(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar);
            set => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.set_ButtonForegroundColor(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> ButtonHoverBackgroundColor
        {
            get => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.get_ButtonHoverBackgroundColor(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar);
            set => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.set_ButtonHoverBackgroundColor(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> ButtonHoverForegroundColor
        {
            get => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.get_ButtonHoverForegroundColor(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar);
            set => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.set_ButtonHoverForegroundColor(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> ButtonInactiveBackgroundColor
        {
            get => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.get_ButtonInactiveBackgroundColor(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar);
            set => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.set_ButtonInactiveBackgroundColor(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> ButtonInactiveForegroundColor
        {
            get => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.get_ButtonInactiveForegroundColor(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar);
            set => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.set_ButtonInactiveForegroundColor(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> ButtonPressedBackgroundColor
        {
            get => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.get_ButtonPressedBackgroundColor(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar);
            set => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.set_ButtonPressedBackgroundColor(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> ButtonPressedForegroundColor
        {
            get => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.get_ButtonPressedForegroundColor(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar);
            set => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.set_ButtonPressedForegroundColor(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar, value);
        }

        public bool ExtendsContentIntoTitleBar
        {
            get => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.get_ExtendsContentIntoTitleBar(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar);
            set => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.set_ExtendsContentIntoTitleBar(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> ForegroundColor
        {
            get => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.get_ForegroundColor(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar);
            set => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.set_ForegroundColor(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar, value);
        }

        public int Height => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.get_Height(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar);

        public IconShowOptions IconShowOptions
        {
            get => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.get_IconShowOptions(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar);
            set => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.set_IconShowOptions(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> InactiveBackgroundColor
        {
            get => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.get_InactiveBackgroundColor(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar);
            set => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.set_InactiveBackgroundColor(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> InactiveForegroundColor
        {
            get => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.get_InactiveForegroundColor(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar);
            set => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.set_InactiveForegroundColor(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar, value);
        }

        public int LeftInset => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.get_LeftInset(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar);

        public TitleBarHeightOption PreferredHeightOption
        {
            get => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBar2Methods.get_PreferredHeightOption(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar2);
            set => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBar2Methods.set_PreferredHeightOption(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar2, value);
        }

        public TitleBarTheme PreferredTheme
        {
            get => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBar3Methods.get_PreferredTheme(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar3);
            set => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBar3Methods.set_PreferredTheme(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar3, value);
        }

        public int RightInset => global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.get_RightInset(_objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.CompactOverlayPresenter))]
    [global::ABI.Microsoft.UI.Windowing.CompactOverlayPresenterRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICompactOverlayPresenter))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class CompactOverlayPresenter : AppWindowPresenter, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CompactOverlayPresenter>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Windowing_ICompactOverlayPresenter => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Windowing.CompactOverlayPresenter").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Windowing_ICompactOverlayPresenterStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Windowing_ICompactOverlayPresenterStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Windowing_ICompactOverlayPresenterStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Windowing_ICompactOverlayPresenterStatics = ActivationFactory.Get("Microsoft.UI.Windowing.CompactOverlayPresenter", global::ABI.Microsoft.UI.Windowing.ICompactOverlayPresenterStaticsMethods.IID);
                }
            }
        }

        public static CompactOverlayPresenter Create() => global::ABI.Microsoft.UI.Windowing.ICompactOverlayPresenterStaticsMethods.Create(_objRef_global__Microsoft_UI_Windowing_ICompactOverlayPresenterStatics);

        public static new CompactOverlayPresenter FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CompactOverlayPresenter>.FromAbi(thisPtr);
        }

        internal CompactOverlayPresenter(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Windowing.ICompactOverlayPresenterMethods.IID);

        }


        public static bool operator ==(CompactOverlayPresenter x, CompactOverlayPresenter y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CompactOverlayPresenter x, CompactOverlayPresenter y) => !(x == y);
        public bool Equals(CompactOverlayPresenter other) => this == other;
        public override bool Equals(object obj) => obj is CompactOverlayPresenter that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public CompactOverlaySize InitialSize
        {
            get => global::ABI.Microsoft.UI.Windowing.ICompactOverlayPresenterMethods.get_InitialSize(_objRef_global__Microsoft_UI_Windowing_ICompactOverlayPresenter);
            set => global::ABI.Microsoft.UI.Windowing.ICompactOverlayPresenterMethods.set_InitialSize(_objRef_global__Microsoft_UI_Windowing_ICompactOverlayPresenter, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CompactOverlaySize>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public enum CompactOverlaySize : int
    {
        Small = unchecked((int)0),
        Medium = unchecked((int)0x1),
        Large = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.DisplayArea))]
    [global::ABI.Microsoft.UI.Windowing.DisplayAreaRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDisplayArea))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class DisplayArea : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DisplayArea>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Windowing_IDisplayArea => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Windowing.DisplayArea").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Windowing_IDisplayAreaStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Windowing_IDisplayAreaStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Windowing_IDisplayAreaStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Windowing_IDisplayAreaStatics = ActivationFactory.Get("Microsoft.UI.Windowing.DisplayArea", global::ABI.Microsoft.UI.Windowing.IDisplayAreaStaticsMethods.IID);
                }
            }
        }

        public static DisplayAreaWatcher CreateWatcher() => global::ABI.Microsoft.UI.Windowing.IDisplayAreaStaticsMethods.CreateWatcher(_objRef_global__Microsoft_UI_Windowing_IDisplayAreaStatics);

        public static global::System.Collections.Generic.IReadOnlyList<DisplayArea> FindAll() => global::ABI.Microsoft.UI.Windowing.IDisplayAreaStaticsMethods.FindAll(_objRef_global__Microsoft_UI_Windowing_IDisplayAreaStatics);

        public static DisplayArea GetFromWindowId(global::Microsoft.UI.WindowId windowId, DisplayAreaFallback displayAreaFallback) => global::ABI.Microsoft.UI.Windowing.IDisplayAreaStaticsMethods.GetFromWindowId(_objRef_global__Microsoft_UI_Windowing_IDisplayAreaStatics, windowId, displayAreaFallback);

        public static DisplayArea GetFromPoint(global::Windows.Graphics.PointInt32 point, DisplayAreaFallback displayAreaFallback) => global::ABI.Microsoft.UI.Windowing.IDisplayAreaStaticsMethods.GetFromPoint(_objRef_global__Microsoft_UI_Windowing_IDisplayAreaStatics, point, displayAreaFallback);

        public static DisplayArea GetFromRect(global::Windows.Graphics.RectInt32 rect, DisplayAreaFallback displayAreaFallback) => global::ABI.Microsoft.UI.Windowing.IDisplayAreaStaticsMethods.GetFromRect(_objRef_global__Microsoft_UI_Windowing_IDisplayAreaStatics, rect, displayAreaFallback);

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Windowing_IDisplayAreaStatics2;
        private static IObjectReference _objRef_global__Microsoft_UI_Windowing_IDisplayAreaStatics2
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Windowing_IDisplayAreaStatics2;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Windowing_IDisplayAreaStatics2 = ActivationFactory.Get("Microsoft.UI.Windowing.DisplayArea", global::ABI.Microsoft.UI.Windowing.IDisplayAreaStatics2Methods.IID);
                }
            }
        }

        public static DisplayArea GetFromDisplayId(global::Microsoft.UI.DisplayId displayId) => global::ABI.Microsoft.UI.Windowing.IDisplayAreaStatics2Methods.GetFromDisplayId(_objRef_global__Microsoft_UI_Windowing_IDisplayAreaStatics2, displayId);

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Windowing_IDisplayAreaStatics3;
        private static IObjectReference _objRef_global__Microsoft_UI_Windowing_IDisplayAreaStatics3
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Windowing_IDisplayAreaStatics3;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Windowing_IDisplayAreaStatics3 = ActivationFactory.Get("Microsoft.UI.Windowing.DisplayArea", global::ABI.Microsoft.UI.Windowing.IDisplayAreaStatics3Methods.IID);
                }
            }
        }

        public static global::Microsoft.UI.DisplayId GetMetricsFromWindowId(global::Microsoft.UI.WindowId windowId) => global::ABI.Microsoft.UI.Windowing.IDisplayAreaStatics3Methods.GetMetricsFromWindowId(_objRef_global__Microsoft_UI_Windowing_IDisplayAreaStatics3, windowId);

        public static DisplayArea Primary => global::ABI.Microsoft.UI.Windowing.IDisplayAreaStaticsMethods.get_Primary(_objRef_global__Microsoft_UI_Windowing_IDisplayAreaStatics);

        public static DisplayArea FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DisplayArea>.FromAbi(thisPtr);
        }

        internal DisplayArea(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Windowing.IDisplayAreaMethods.IID);

        }


        public static bool operator ==(DisplayArea x, DisplayArea y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DisplayArea x, DisplayArea y) => !(x == y);
        public bool Equals(DisplayArea other) => this == other;
        public override bool Equals(object obj) => obj is DisplayArea that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Microsoft.UI.DisplayId DisplayId => global::ABI.Microsoft.UI.Windowing.IDisplayAreaMethods.get_DisplayId(_objRef_global__Microsoft_UI_Windowing_IDisplayArea);

        public bool IsPrimary => global::ABI.Microsoft.UI.Windowing.IDisplayAreaMethods.get_IsPrimary(_objRef_global__Microsoft_UI_Windowing_IDisplayArea);

        public global::Windows.Graphics.RectInt32 OuterBounds => global::ABI.Microsoft.UI.Windowing.IDisplayAreaMethods.get_OuterBounds(_objRef_global__Microsoft_UI_Windowing_IDisplayArea);

        public global::Windows.Graphics.RectInt32 WorkArea => global::ABI.Microsoft.UI.Windowing.IDisplayAreaMethods.get_WorkArea(_objRef_global__Microsoft_UI_Windowing_IDisplayArea);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<DisplayAreaFallback>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public enum DisplayAreaFallback : int
    {
        None = unchecked((int)0),
        Primary = unchecked((int)0x1),
        Nearest = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.DisplayAreaWatcher))]
    [global::ABI.Microsoft.UI.Windowing.DisplayAreaWatcherRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDisplayAreaWatcher))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class DisplayAreaWatcher : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DisplayAreaWatcher>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Windowing_IDisplayAreaWatcher => _inner;


        public static DisplayAreaWatcher FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DisplayAreaWatcher>.FromAbi(thisPtr);
        }

        internal DisplayAreaWatcher(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Windowing.IDisplayAreaWatcherMethods.IID);

        }


        public static bool operator ==(DisplayAreaWatcher x, DisplayAreaWatcher y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DisplayAreaWatcher x, DisplayAreaWatcher y) => !(x == y);
        public bool Equals(DisplayAreaWatcher other) => this == other;
        public override bool Equals(object obj) => obj is DisplayAreaWatcher that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void Start() => global::ABI.Microsoft.UI.Windowing.IDisplayAreaWatcherMethods.Start(_objRef_global__Microsoft_UI_Windowing_IDisplayAreaWatcher);

        public void Stop() => global::ABI.Microsoft.UI.Windowing.IDisplayAreaWatcherMethods.Stop(_objRef_global__Microsoft_UI_Windowing_IDisplayAreaWatcher);

        public event global::Windows.Foundation.TypedEventHandler<DisplayAreaWatcher, DisplayArea> Added
        {
            add => global::ABI.Microsoft.UI.Windowing.IDisplayAreaWatcherMethods.Get_Added2(_objRef_global__Microsoft_UI_Windowing_IDisplayAreaWatcher, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Windowing.IDisplayAreaWatcherMethods.Get_Added2(_objRef_global__Microsoft_UI_Windowing_IDisplayAreaWatcher, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<DisplayAreaWatcher, object> EnumerationCompleted
        {
            add => global::ABI.Microsoft.UI.Windowing.IDisplayAreaWatcherMethods.Get_EnumerationCompleted2(_objRef_global__Microsoft_UI_Windowing_IDisplayAreaWatcher, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Windowing.IDisplayAreaWatcherMethods.Get_EnumerationCompleted2(_objRef_global__Microsoft_UI_Windowing_IDisplayAreaWatcher, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<DisplayAreaWatcher, DisplayArea> Removed
        {
            add => global::ABI.Microsoft.UI.Windowing.IDisplayAreaWatcherMethods.Get_Removed2(_objRef_global__Microsoft_UI_Windowing_IDisplayAreaWatcher, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Windowing.IDisplayAreaWatcherMethods.Get_Removed2(_objRef_global__Microsoft_UI_Windowing_IDisplayAreaWatcher, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<DisplayAreaWatcher, object> Stopped
        {
            add => global::ABI.Microsoft.UI.Windowing.IDisplayAreaWatcherMethods.Get_Stopped2(_objRef_global__Microsoft_UI_Windowing_IDisplayAreaWatcher, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Windowing.IDisplayAreaWatcherMethods.Get_Stopped2(_objRef_global__Microsoft_UI_Windowing_IDisplayAreaWatcher, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<DisplayAreaWatcher, DisplayArea> Updated
        {
            add => global::ABI.Microsoft.UI.Windowing.IDisplayAreaWatcherMethods.Get_Updated2(_objRef_global__Microsoft_UI_Windowing_IDisplayAreaWatcher, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Windowing.IDisplayAreaWatcherMethods.Get_Updated2(_objRef_global__Microsoft_UI_Windowing_IDisplayAreaWatcher, (IWinRTObject)this).Unsubscribe(value);
        }

        public DisplayAreaWatcherStatus Status => global::ABI.Microsoft.UI.Windowing.IDisplayAreaWatcherMethods.get_Status(_objRef_global__Microsoft_UI_Windowing_IDisplayAreaWatcher);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<DisplayAreaWatcherStatus>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public enum DisplayAreaWatcherStatus : int
    {
        Created = unchecked((int)0),
        Started = unchecked((int)0x1),
        EnumerationCompleted = unchecked((int)0x2),
        Stopping = unchecked((int)0x3),
        Stopped = unchecked((int)0x4),
        Aborted = unchecked((int)0x5),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.FullScreenPresenter))]
    [global::ABI.Microsoft.UI.Windowing.FullScreenPresenterRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IFullScreenPresenter))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class FullScreenPresenter : AppWindowPresenter, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<FullScreenPresenter>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Windowing_IFullScreenPresenter => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Windowing.FullScreenPresenter").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Windowing_IFullScreenPresenterStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Windowing_IFullScreenPresenterStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Windowing_IFullScreenPresenterStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Windowing_IFullScreenPresenterStatics = ActivationFactory.Get("Microsoft.UI.Windowing.FullScreenPresenter", global::ABI.Microsoft.UI.Windowing.IFullScreenPresenterStaticsMethods.IID);
                }
            }
        }

        public static FullScreenPresenter Create() => global::ABI.Microsoft.UI.Windowing.IFullScreenPresenterStaticsMethods.Create(_objRef_global__Microsoft_UI_Windowing_IFullScreenPresenterStatics);

        public static new FullScreenPresenter FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<FullScreenPresenter>.FromAbi(thisPtr);
        }

        internal FullScreenPresenter(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Windowing.IFullScreenPresenterMethods.IID);

        }


        public static bool operator ==(FullScreenPresenter x, FullScreenPresenter y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(FullScreenPresenter x, FullScreenPresenter y) => !(x == y);
        public bool Equals(FullScreenPresenter other) => this == other;
        public override bool Equals(object obj) => obj is FullScreenPresenter that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("CFA788B3-643B-5C5E-AD4E-321D48A82ACD")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.IAppWindow))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IAppWindow
    {
        void Destroy();
        void Hide();
        void Move(global::Windows.Graphics.PointInt32 position);
        [global::Windows.Foundation.Metadata.Overload(@"MoveAndResize")]
        void MoveAndResize(global::Windows.Graphics.RectInt32 rect);
        [global::Windows.Foundation.Metadata.Overload(@"MoveAndResizeRelativeToDisplayArea")]
        void MoveAndResize(global::Windows.Graphics.RectInt32 rect, DisplayArea displayarea);
        void Resize(global::Windows.Graphics.SizeInt32 size);
        [global::Windows.Foundation.Metadata.DefaultOverload]
        [global::Windows.Foundation.Metadata.Overload(@"SetIcon")]
        void SetIcon(string iconPath);
        [global::Windows.Foundation.Metadata.Overload(@"SetIconWithIconId")]
        void SetIcon(global::Microsoft.UI.IconId iconId);
        [global::Windows.Foundation.Metadata.DefaultOverload]
        [global::Windows.Foundation.Metadata.Overload(@"SetPresenter")]
        void SetPresenter(AppWindowPresenter appWindowPresenter);
        [global::Windows.Foundation.Metadata.Overload(@"SetPresenterByKind")]
        void SetPresenter(AppWindowPresenterKind appWindowPresenterKind);
        [global::Windows.Foundation.Metadata.Overload(@"Show")]
        void Show();
        [global::Windows.Foundation.Metadata.Overload(@"ShowWithActivation")]
        void Show(bool activateWindow);
        global::Microsoft.UI.WindowId Id { get; }
        bool IsShownInSwitchers { get; set; }
        bool IsVisible { get; }
        global::Microsoft.UI.WindowId OwnerWindowId { get; }
        global::Windows.Graphics.PointInt32 Position { get; }
        AppWindowPresenter Presenter { get; }
        global::Windows.Graphics.SizeInt32 Size { get; }
        string Title { get; set; }
        AppWindowTitleBar TitleBar { get; }
        event global::Windows.Foundation.TypedEventHandler<AppWindow, AppWindowChangedEventArgs> Changed;
        event global::Windows.Foundation.TypedEventHandler<AppWindow, AppWindowClosingEventArgs> Closing;
        event global::Windows.Foundation.TypedEventHandler<AppWindow, object> Destroying;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("6CD41292-794C-5CAC-8961-210D012C6EBC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.IAppWindow2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65537u)]
    internal interface IAppWindow2
    {
        void MoveInZOrderAtBottom();
        void MoveInZOrderAtTop();
        void MoveInZOrderBelow(global::Microsoft.UI.WindowId windowId);
        void ResizeClient(global::Windows.Graphics.SizeInt32 size);
        void ShowOnceWithRequestedStartupState();
        global::Windows.Graphics.SizeInt32 ClientSize { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("2F260CEA-193D-5DD6-A904-D7649A608D2F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.IAppWindow3))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    internal interface IAppWindow3
    {
        void AssociateWithDispatcherQueue(global::Microsoft.UI.Dispatching.DispatcherQueue dispatcherQueue);
        global::Microsoft.UI.Dispatching.DispatcherQueue DispatcherQueue { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("383BFB91-EA29-5414-80CD-6C76D981EB31")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.IAppWindow4))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65543u)]
    internal interface IAppWindow4
    {
        [global::Windows.Foundation.Metadata.DefaultOverload]
        [global::Windows.Foundation.Metadata.Overload(@"SetTaskbarIcon")]
        void SetTaskbarIcon(string iconPath);
        [global::Windows.Foundation.Metadata.Overload(@"SetTaskbarIconWithIconId")]
        void SetTaskbarIcon(global::Microsoft.UI.IconId iconId);
        [global::Windows.Foundation.Metadata.DefaultOverload]
        [global::Windows.Foundation.Metadata.Overload(@"SetTitleBarIcon")]
        void SetTitleBarIcon(string iconPath);
        [global::Windows.Foundation.Metadata.Overload(@"SetTitleBarIconWithIconId")]
        void SetTitleBarIcon(global::Microsoft.UI.IconId iconId);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("2182BC5D-FDAC-5C3E-BF37-7D8D684E9D1D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.IAppWindowChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IAppWindowChangedEventArgs
    {
        bool DidPositionChange { get; }
        bool DidPresenterChange { get; }
        bool DidSizeChange { get; }
        bool DidVisibilityChange { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("A773AB4C-A5EC-50E8-98AC-247FE6CD4227")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.IAppWindowChangedEventArgs2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65537u)]
    internal interface IAppWindowChangedEventArgs2
    {
        bool DidZOrderChange { get; }
        bool IsZOrderAtBottom { get; }
        bool IsZOrderAtTop { get; }
        global::Microsoft.UI.WindowId ZOrderBelowWindowId { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("0E09D90B-2261-590B-9AD1-8504991D8754")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.IAppWindowClosingEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IAppWindowClosingEventArgs
    {
        bool Cancel { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("04DB96C7-DEB6-5BE4-BFDC-1BC0361C8A12")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.IAppWindowExperimental))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65543u)]
    [global::Windows.Foundation.Metadata.Experimental]
    internal interface IAppWindowExperimental
    {
        AppWindowPlacementDetails GetCurrentPlacement();
        void SaveCurrentPlacement();
        bool SetCurrentPlacement(AppWindowPlacementDetails placementDetails, bool isFirstWindow);
        global::System.Nullable<Guid> PersistedStateId { get; set; }
        PlacementRestorationBehavior PlacementRestorationBehavior { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("639EC5B2-AC0C-5BBF-8422-98DCA540D219")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.IAppWindowPlacementDetails))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65543u)]
    [global::Windows.Foundation.Metadata.Experimental]
    internal interface IAppWindowPlacementDetails
    {
        global::Windows.Graphics.RectInt32 ArrangeRect { get; }
        string DeviceName { get; }
        int Dpi { get; }
        PlacementInfo Flags { get; }
        global::Windows.Graphics.RectInt32 NormalRect { get; }
        int ShowCmd { get; }
        global::Windows.Graphics.RectInt32 WorkArea { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("F19F1745-52AD-5CF7-97EA-76C5FD6FF3C1")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.IAppWindowPlacementDetailsStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65543u)]
    [global::Windows.Foundation.Metadata.Experimental]
    internal interface IAppWindowPlacementDetailsStatics
    {
        AppWindowPlacementDetails Create(global::Windows.Graphics.RectInt32 normalRect, global::Windows.Graphics.RectInt32 workArea, int dpi, int showCmd, global::Windows.Graphics.RectInt32 arrangeRect, PlacementInfo flags, string deviceName);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("BC3042C2-C6C6-5632-8989-FF0EC6D3B40D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.IAppWindowPresenter))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IAppWindowPresenter
    {
        AppWindowPresenterKind Kind { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("62082E3C-1368-5238-90D1-E932DC718A82")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.IAppWindowPresenterFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IAppWindowPresenterFactory
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("3C315C24-D540-5D72-B518-B226B83627CB")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.IAppWindowStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IAppWindowStatics
    {
        [global::Windows.Foundation.Metadata.Overload(@"Create")]
        AppWindow Create();
        [global::Windows.Foundation.Metadata.Overload(@"CreateWithPresenter")]
        AppWindow Create(AppWindowPresenter appWindowPresenter);
        [global::Windows.Foundation.Metadata.Overload(@"CreateWithPresenterAndOwner")]
        AppWindow Create(AppWindowPresenter appWindowPresenter, global::Microsoft.UI.WindowId ownerWindowId);
        AppWindow GetFromWindowId(global::Microsoft.UI.WindowId windowId);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("CABC23DB-4606-5D6E-89A5-06DE1D8BD3E2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.IAppWindowStatics2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    internal interface IAppWindowStatics2
    {
        [global::Windows.Foundation.Metadata.Overload(@"CreateWithDispatcherQueue")]
        AppWindow Create(AppWindowPresenter appWindowPresenter, global::Microsoft.UI.WindowId ownerWindowId, global::Microsoft.UI.Dispatching.DispatcherQueue DispatcherQueue);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("0BCC835A-1286-5113-9F59-F1093D2E087A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.IAppWindowStatics3))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65543u)]
    [global::Windows.Foundation.Metadata.Experimental]
    internal interface IAppWindowStatics3
    {
        void SaveCurrentPlacementForAllPersistedStateIds();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("5574EFA2-C91C-5700-A363-539C71A7AAF4")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBar))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IAppWindowTitleBar
    {
        void ResetToDefault();
        void SetDragRectangles(global::Windows.Graphics.RectInt32[] value);
        global::System.Nullable<global::Windows.UI.Color> BackgroundColor { get; set; }
        global::System.Nullable<global::Windows.UI.Color> ButtonBackgroundColor { get; set; }
        global::System.Nullable<global::Windows.UI.Color> ButtonForegroundColor { get; set; }
        global::System.Nullable<global::Windows.UI.Color> ButtonHoverBackgroundColor { get; set; }
        global::System.Nullable<global::Windows.UI.Color> ButtonHoverForegroundColor { get; set; }
        global::System.Nullable<global::Windows.UI.Color> ButtonInactiveBackgroundColor { get; set; }
        global::System.Nullable<global::Windows.UI.Color> ButtonInactiveForegroundColor { get; set; }
        global::System.Nullable<global::Windows.UI.Color> ButtonPressedBackgroundColor { get; set; }
        global::System.Nullable<global::Windows.UI.Color> ButtonPressedForegroundColor { get; set; }
        bool ExtendsContentIntoTitleBar { get; set; }
        global::System.Nullable<global::Windows.UI.Color> ForegroundColor { get; set; }
        int Height { get; }
        IconShowOptions IconShowOptions { get; set; }
        global::System.Nullable<global::Windows.UI.Color> InactiveBackgroundColor { get; set; }
        global::System.Nullable<global::Windows.UI.Color> InactiveForegroundColor { get; set; }
        int LeftInset { get; }
        int RightInset { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("86FAED38-748A-5B4B-9CCF-3BA0496C9041")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBar2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65537u)]
    internal interface IAppWindowTitleBar2
    {
        TitleBarHeightOption PreferredHeightOption { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("07146E74-0410-5597-ABA7-1AF276D2AE07")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBar3))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65543u)]
    internal interface IAppWindowTitleBar3
    {
        TitleBarTheme PreferredTheme { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("9E1DA52E-8B15-54D6-A886-F7B9F9D930B2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IAppWindowTitleBarStatics
    {
        bool IsCustomizationSupported();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("EFEB0812-6FC7-5B7D-BD92-CC8F9A6454C9")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.ICompactOverlayPresenter))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface ICompactOverlayPresenter
    {
        CompactOverlaySize InitialSize { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("EAB93186-4F6A-52F9-8C03-DA57A1522F6E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.ICompactOverlayPresenterStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface ICompactOverlayPresenterStatics
    {
        CompactOverlayPresenter Create();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("5C7E0537-B621-5579-BCAE-A84AA8746167")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.IDisplayArea))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IDisplayArea
    {
        global::Microsoft.UI.DisplayId DisplayId { get; }
        bool IsPrimary { get; }
        global::Windows.Graphics.RectInt32 OuterBounds { get; }
        global::Windows.Graphics.RectInt32 WorkArea { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("02AB4926-211E-5D49-8E4B-2AF193DAED09")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.IDisplayAreaStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IDisplayAreaStatics
    {
        DisplayAreaWatcher CreateWatcher();
        global::System.Collections.Generic.IReadOnlyList<DisplayArea> FindAll();
        DisplayArea GetFromWindowId(global::Microsoft.UI.WindowId windowId, DisplayAreaFallback displayAreaFallback);
        DisplayArea GetFromPoint(global::Windows.Graphics.PointInt32 point, DisplayAreaFallback displayAreaFallback);
        DisplayArea GetFromRect(global::Windows.Graphics.RectInt32 rect, DisplayAreaFallback displayAreaFallback);
        DisplayArea Primary { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("7207AD4B-890D-5DD7-BC18-78FFD9544D8F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.IDisplayAreaStatics2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65538u)]
    internal interface IDisplayAreaStatics2
    {
        DisplayArea GetFromDisplayId(global::Microsoft.UI.DisplayId displayId);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("745D3602-268B-5060-8437-FCC025E255D6")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.IDisplayAreaStatics3))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65543u)]
    [global::Windows.Foundation.Metadata.Experimental]
    internal interface IDisplayAreaStatics3
    {
        global::Microsoft.UI.DisplayId GetMetricsFromWindowId(global::Microsoft.UI.WindowId windowId);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("83F6562F-D3A0-548B-8E4F-A99BE3D95C9C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.IDisplayAreaWatcher))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IDisplayAreaWatcher
    {
        void Start();
        void Stop();
        DisplayAreaWatcherStatus Status { get; }
        event global::Windows.Foundation.TypedEventHandler<DisplayAreaWatcher, DisplayArea> Added;
        event global::Windows.Foundation.TypedEventHandler<DisplayAreaWatcher, object> EnumerationCompleted;
        event global::Windows.Foundation.TypedEventHandler<DisplayAreaWatcher, DisplayArea> Removed;
        event global::Windows.Foundation.TypedEventHandler<DisplayAreaWatcher, object> Stopped;
        event global::Windows.Foundation.TypedEventHandler<DisplayAreaWatcher, DisplayArea> Updated;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("FA9141FD-B8DD-5DA1-8B2B-7CDADB76F593")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.IFullScreenPresenter))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IFullScreenPresenter
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("2EC0D2C1-E086-55BB-A3B2-44942E231C67")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.IFullScreenPresenterStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IFullScreenPresenterStatics
    {
        FullScreenPresenter Create();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("21693970-4F4C-5172-9E9D-682A2D174884")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.IOverlappedPresenter))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IOverlappedPresenter
    {
        void Maximize();
        void Minimize();
        void Restore();
        void SetBorderAndTitleBar(bool hasBorder, bool hasTitleBar);
        bool HasBorder { get; }
        bool HasTitleBar { get; }
        bool IsAlwaysOnTop { get; set; }
        bool IsMaximizable { get; set; }
        bool IsMinimizable { get; set; }
        bool IsModal { get; set; }
        bool IsResizable { get; set; }
        OverlappedPresenterState State { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("5C6CCD93-4244-5CD2-B355-ED5EA34DF730")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.IOverlappedPresenter2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65537u)]
    internal interface IOverlappedPresenter2
    {
        [global::Windows.Foundation.Metadata.Overload(@"MinimizeWithActivation")]
        void Minimize(bool activateWindow);
        [global::Windows.Foundation.Metadata.Overload(@"RestoreWithActivation")]
        void Restore(bool activateWindow);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("55D26138-4C38-57E7-A0C1-D467B774DB8C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.IOverlappedPresenter3))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65543u)]
    internal interface IOverlappedPresenter3
    {
        global::System.Nullable<int> PreferredMaximumHeight { get; set; }
        global::System.Nullable<int> PreferredMaximumWidth { get; set; }
        global::System.Nullable<int> PreferredMinimumHeight { get; set; }
        global::System.Nullable<int> PreferredMinimumWidth { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("997225E4-7B00-5AEE-A4BE-D4068D1999E2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.IOverlappedPresenterStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IOverlappedPresenterStatics
    {
        OverlappedPresenter Create();
        OverlappedPresenter CreateForContextMenu();
        OverlappedPresenter CreateForDialog();
        OverlappedPresenter CreateForToolWindow();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("ED5C4F92-32F4-5D15-80D0-B2A5EFA04D39")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.IOverlappedPresenterStatics2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65537u)]
    internal interface IOverlappedPresenterStatics2
    {
        OverlappedPresenterState RequestedStartupState { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<IconShowOptions>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public enum IconShowOptions : int
    {
        ShowIconAndSystemMenu = unchecked((int)0),
        HideIconAndSystemMenu = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Windowing.OverlappedPresenter))]
    [global::ABI.Microsoft.UI.Windowing.OverlappedPresenterRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IOverlappedPresenter))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class OverlappedPresenter : AppWindowPresenter, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<OverlappedPresenter>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter => _inner;
        private volatile IObjectReference ___objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter2;
        private IObjectReference Make___objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Windowing.IOverlappedPresenter2Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter2;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter2 => ___objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter2 ?? Make___objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter2();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter3;
        private IObjectReference Make___objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter3()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter3, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Windowing.IOverlappedPresenter3Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter3;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter3 => ___objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter3 ?? Make___objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter3();



        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Windowing.OverlappedPresenter").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Windowing_IOverlappedPresenterStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Windowing_IOverlappedPresenterStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Windowing_IOverlappedPresenterStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Windowing_IOverlappedPresenterStatics = ActivationFactory.Get("Microsoft.UI.Windowing.OverlappedPresenter", global::ABI.Microsoft.UI.Windowing.IOverlappedPresenterStaticsMethods.IID);
                }
            }
        }

        public static OverlappedPresenter Create() => global::ABI.Microsoft.UI.Windowing.IOverlappedPresenterStaticsMethods.Create(_objRef_global__Microsoft_UI_Windowing_IOverlappedPresenterStatics);

        public static OverlappedPresenter CreateForContextMenu() => global::ABI.Microsoft.UI.Windowing.IOverlappedPresenterStaticsMethods.CreateForContextMenu(_objRef_global__Microsoft_UI_Windowing_IOverlappedPresenterStatics);

        public static OverlappedPresenter CreateForDialog() => global::ABI.Microsoft.UI.Windowing.IOverlappedPresenterStaticsMethods.CreateForDialog(_objRef_global__Microsoft_UI_Windowing_IOverlappedPresenterStatics);

        public static OverlappedPresenter CreateForToolWindow() => global::ABI.Microsoft.UI.Windowing.IOverlappedPresenterStaticsMethods.CreateForToolWindow(_objRef_global__Microsoft_UI_Windowing_IOverlappedPresenterStatics);

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Windowing_IOverlappedPresenterStatics2;
        private static IObjectReference _objRef_global__Microsoft_UI_Windowing_IOverlappedPresenterStatics2
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Windowing_IOverlappedPresenterStatics2;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Windowing_IOverlappedPresenterStatics2 = ActivationFactory.Get("Microsoft.UI.Windowing.OverlappedPresenter", global::ABI.Microsoft.UI.Windowing.IOverlappedPresenterStatics2Methods.IID);
                }
            }
        }

        public static OverlappedPresenterState RequestedStartupState => global::ABI.Microsoft.UI.Windowing.IOverlappedPresenterStatics2Methods.get_RequestedStartupState(_objRef_global__Microsoft_UI_Windowing_IOverlappedPresenterStatics2);

        public static new OverlappedPresenter FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<OverlappedPresenter>.FromAbi(thisPtr);
        }

        internal OverlappedPresenter(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Windowing.IOverlappedPresenterMethods.IID);

        }


        public static bool operator ==(OverlappedPresenter x, OverlappedPresenter y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(OverlappedPresenter x, OverlappedPresenter y) => !(x == y);
        public bool Equals(OverlappedPresenter other) => this == other;
        public override bool Equals(object obj) => obj is OverlappedPresenter that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public void Maximize() => global::ABI.Microsoft.UI.Windowing.IOverlappedPresenterMethods.Maximize(_objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter);

        public void Minimize() => global::ABI.Microsoft.UI.Windowing.IOverlappedPresenterMethods.Minimize(_objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter);

        public void Restore() => global::ABI.Microsoft.UI.Windowing.IOverlappedPresenterMethods.Restore(_objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter);

        public void SetBorderAndTitleBar(bool hasBorder, bool hasTitleBar) => global::ABI.Microsoft.UI.Windowing.IOverlappedPresenterMethods.SetBorderAndTitleBar(_objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter, hasBorder, hasTitleBar);

        public void Minimize(bool activateWindow) => global::ABI.Microsoft.UI.Windowing.IOverlappedPresenter2Methods.Minimize(_objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter2, activateWindow);

        public void Restore(bool activateWindow) => global::ABI.Microsoft.UI.Windowing.IOverlappedPresenter2Methods.Restore(_objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter2, activateWindow);

        public bool HasBorder => global::ABI.Microsoft.UI.Windowing.IOverlappedPresenterMethods.get_HasBorder(_objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter);

        public bool HasTitleBar => global::ABI.Microsoft.UI.Windowing.IOverlappedPresenterMethods.get_HasTitleBar(_objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter);

        public bool IsAlwaysOnTop
        {
            get => global::ABI.Microsoft.UI.Windowing.IOverlappedPresenterMethods.get_IsAlwaysOnTop(_objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter);
            set => global::ABI.Microsoft.UI.Windowing.IOverlappedPresenterMethods.set_IsAlwaysOnTop(_objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter, value);
        }

        public bool IsMaximizable
        {
            get => global::ABI.Microsoft.UI.Windowing.IOverlappedPresenterMethods.get_IsMaximizable(_objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter);
            set => global::ABI.Microsoft.UI.Windowing.IOverlappedPresenterMethods.set_IsMaximizable(_objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter, value);
        }

        public bool IsMinimizable
        {
            get => global::ABI.Microsoft.UI.Windowing.IOverlappedPresenterMethods.get_IsMinimizable(_objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter);
            set => global::ABI.Microsoft.UI.Windowing.IOverlappedPresenterMethods.set_IsMinimizable(_objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter, value);
        }

        public bool IsModal
        {
            get => global::ABI.Microsoft.UI.Windowing.IOverlappedPresenterMethods.get_IsModal(_objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter);
            set => global::ABI.Microsoft.UI.Windowing.IOverlappedPresenterMethods.set_IsModal(_objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter, value);
        }

        public bool IsResizable
        {
            get => global::ABI.Microsoft.UI.Windowing.IOverlappedPresenterMethods.get_IsResizable(_objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter);
            set => global::ABI.Microsoft.UI.Windowing.IOverlappedPresenterMethods.set_IsResizable(_objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter, value);
        }

        public global::System.Nullable<int> PreferredMaximumHeight
        {
            get => global::ABI.Microsoft.UI.Windowing.IOverlappedPresenter3Methods.get_PreferredMaximumHeight(_objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter3);
            set => global::ABI.Microsoft.UI.Windowing.IOverlappedPresenter3Methods.set_PreferredMaximumHeight(_objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter3, value);
        }

        public global::System.Nullable<int> PreferredMaximumWidth
        {
            get => global::ABI.Microsoft.UI.Windowing.IOverlappedPresenter3Methods.get_PreferredMaximumWidth(_objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter3);
            set => global::ABI.Microsoft.UI.Windowing.IOverlappedPresenter3Methods.set_PreferredMaximumWidth(_objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter3, value);
        }

        public global::System.Nullable<int> PreferredMinimumHeight
        {
            get => global::ABI.Microsoft.UI.Windowing.IOverlappedPresenter3Methods.get_PreferredMinimumHeight(_objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter3);
            set => global::ABI.Microsoft.UI.Windowing.IOverlappedPresenter3Methods.set_PreferredMinimumHeight(_objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter3, value);
        }

        public global::System.Nullable<int> PreferredMinimumWidth
        {
            get => global::ABI.Microsoft.UI.Windowing.IOverlappedPresenter3Methods.get_PreferredMinimumWidth(_objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter3);
            set => global::ABI.Microsoft.UI.Windowing.IOverlappedPresenter3Methods.set_PreferredMinimumWidth(_objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter3, value);
        }

        public OverlappedPresenterState State => global::ABI.Microsoft.UI.Windowing.IOverlappedPresenterMethods.get_State(_objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<OverlappedPresenterState>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public enum OverlappedPresenterState : int
    {
        Maximized = unchecked((int)0),
        Minimized = unchecked((int)0x1),
        Restored = unchecked((int)0x2),
    }
    [FlagsAttribute]
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<PlacementInfo>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65543u)]
    [global::Windows.Foundation.Metadata.Experimental]
    public enum PlacementInfo : uint
    {
        None = unchecked((uint)0),
        RestoreToMaximized = unchecked((uint)0x2),
        RestoreToArranged = unchecked((uint)0x8),
        Arranged = unchecked((uint)0x10),
        Resizable = unchecked((uint)0x20),
        FullScreen = unchecked((uint)0x40),
    }
    [FlagsAttribute]
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<PlacementRestorationBehavior>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65543u)]
    [global::Windows.Foundation.Metadata.Experimental]
    public enum PlacementRestorationBehavior : uint
    {
        None = unchecked((uint)0),
        AllowShowMaximized = unchecked((uint)0x1),
        AllowShowFullScreen = unchecked((uint)0x2),
        AllowShowArranged = unchecked((uint)0x4),
        UseStartupInfoForFirstWindow = unchecked((uint)0x8),
        All = unchecked((uint)0xffffffff),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<TitleBarHeightOption>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65537u)]
    public enum TitleBarHeightOption : int
    {
        Standard = unchecked((int)0),
        Tall = unchecked((int)0x1),
        Collapsed = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<TitleBarTheme>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65543u)]
    public enum TitleBarTheme : int
    {
        Legacy = unchecked((int)0),
        UseDefaultAppMode = unchecked((int)0x1),
        Light = unchecked((int)0x2),
        Dark = unchecked((int)0x3),
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.UI.Windowing
{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct AppWindow
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Windowing.AppWindow obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Windowing.AppWindow>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Windowing.IAppWindowMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Windowing.AppWindow obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Windowing.IAppWindowMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Windowing.AppWindow FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Windowing.AppWindow.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Windowing.AppWindow obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindow>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Windowing.AppWindow[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindow>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindow>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Windowing.AppWindow[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindow>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Windowing.AppWindow[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindow>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Windowing.AppWindow[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindow>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindow>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindow>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class AppWindowRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Windowing.AppWindow(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct AppWindowChangedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Windowing.AppWindowChangedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Windowing.AppWindowChangedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Windowing.IAppWindowChangedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Windowing.AppWindowChangedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Windowing.IAppWindowChangedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Windowing.AppWindowChangedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Windowing.AppWindowChangedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Windowing.AppWindowChangedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowChangedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Windowing.AppWindowChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowChangedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowChangedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Windowing.AppWindowChangedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowChangedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Windowing.AppWindowChangedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowChangedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Windowing.AppWindowChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowChangedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowChangedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowChangedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class AppWindowChangedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Windowing.AppWindowChangedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct AppWindowClosingEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Windowing.AppWindowClosingEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Windowing.AppWindowClosingEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Windowing.IAppWindowClosingEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Windowing.AppWindowClosingEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Windowing.IAppWindowClosingEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Windowing.AppWindowClosingEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Windowing.AppWindowClosingEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Windowing.AppWindowClosingEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowClosingEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Windowing.AppWindowClosingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowClosingEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowClosingEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Windowing.AppWindowClosingEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowClosingEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Windowing.AppWindowClosingEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowClosingEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Windowing.AppWindowClosingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowClosingEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowClosingEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowClosingEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class AppWindowClosingEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Windowing.AppWindowClosingEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct AppWindowPlacementDetails
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Windowing.AppWindowPlacementDetails obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Windowing.AppWindowPlacementDetails>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Windowing.IAppWindowPlacementDetailsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Windowing.AppWindowPlacementDetails obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Windowing.IAppWindowPlacementDetailsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Windowing.AppWindowPlacementDetails FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Windowing.AppWindowPlacementDetails.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Windowing.AppWindowPlacementDetails obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowPlacementDetails>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Windowing.AppWindowPlacementDetails[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowPlacementDetails>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowPlacementDetails>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Windowing.AppWindowPlacementDetails[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowPlacementDetails>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Windowing.AppWindowPlacementDetails[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowPlacementDetails>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Windowing.AppWindowPlacementDetails[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowPlacementDetails>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowPlacementDetails>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowPlacementDetails>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class AppWindowPlacementDetailsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Windowing.AppWindowPlacementDetails(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct AppWindowPresenter
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Windowing.AppWindowPresenter obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Windowing.AppWindowPresenter>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Windowing.IAppWindowPresenterMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Windowing.AppWindowPresenter obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Windowing.IAppWindowPresenterMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Windowing.AppWindowPresenter FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Windowing.AppWindowPresenter.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Windowing.AppWindowPresenter obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowPresenter>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Windowing.AppWindowPresenter[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowPresenter>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowPresenter>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Windowing.AppWindowPresenter[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowPresenter>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Windowing.AppWindowPresenter[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowPresenter>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Windowing.AppWindowPresenter[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowPresenter>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowPresenter>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowPresenter>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class AppWindowPresenterRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Windowing.AppWindowPresenter(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct AppWindowTitleBar
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Windowing.AppWindowTitleBar obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Windowing.AppWindowTitleBar>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Windowing.AppWindowTitleBar obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Windowing.AppWindowTitleBar FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Windowing.AppWindowTitleBar.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Windowing.AppWindowTitleBar obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowTitleBar>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Windowing.AppWindowTitleBar[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowTitleBar>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowTitleBar>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Windowing.AppWindowTitleBar[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowTitleBar>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Windowing.AppWindowTitleBar[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowTitleBar>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Windowing.AppWindowTitleBar[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowTitleBar>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowTitleBar>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.AppWindowTitleBar>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class AppWindowTitleBarRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Windowing.AppWindowTitleBar(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CompactOverlayPresenter
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Windowing.CompactOverlayPresenter obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Windowing.CompactOverlayPresenter>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Windowing.ICompactOverlayPresenterMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Windowing.CompactOverlayPresenter obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Windowing.ICompactOverlayPresenterMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Windowing.CompactOverlayPresenter FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Windowing.CompactOverlayPresenter.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Windowing.CompactOverlayPresenter obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Windowing.CompactOverlayPresenter>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Windowing.CompactOverlayPresenter[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.CompactOverlayPresenter>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.CompactOverlayPresenter>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Windowing.CompactOverlayPresenter[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.CompactOverlayPresenter>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Windowing.CompactOverlayPresenter[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.CompactOverlayPresenter>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Windowing.CompactOverlayPresenter[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.CompactOverlayPresenter>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Windowing.CompactOverlayPresenter>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.CompactOverlayPresenter>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CompactOverlayPresenterRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Windowing.CompactOverlayPresenter(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DisplayArea
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Windowing.DisplayArea obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Windowing.DisplayArea>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Windowing.IDisplayAreaMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Windowing.DisplayArea obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Windowing.IDisplayAreaMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Windowing.DisplayArea FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Windowing.DisplayArea.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Windowing.DisplayArea obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Windowing.DisplayArea>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Windowing.DisplayArea[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.DisplayArea>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.DisplayArea>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Windowing.DisplayArea[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.DisplayArea>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Windowing.DisplayArea[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.DisplayArea>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Windowing.DisplayArea[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.DisplayArea>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Windowing.DisplayArea>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.DisplayArea>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DisplayAreaRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Windowing.DisplayArea(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DisplayAreaWatcher
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Windowing.DisplayAreaWatcher obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Windowing.DisplayAreaWatcher>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Windowing.IDisplayAreaWatcherMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Windowing.DisplayAreaWatcher obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Windowing.IDisplayAreaWatcherMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Windowing.DisplayAreaWatcher FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Windowing.DisplayAreaWatcher.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Windowing.DisplayAreaWatcher obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Windowing.DisplayAreaWatcher>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Windowing.DisplayAreaWatcher[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.DisplayAreaWatcher>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.DisplayAreaWatcher>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Windowing.DisplayAreaWatcher[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.DisplayAreaWatcher>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Windowing.DisplayAreaWatcher[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.DisplayAreaWatcher>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Windowing.DisplayAreaWatcher[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.DisplayAreaWatcher>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Windowing.DisplayAreaWatcher>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.DisplayAreaWatcher>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DisplayAreaWatcherRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Windowing.DisplayAreaWatcher(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct FullScreenPresenter
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Windowing.FullScreenPresenter obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Windowing.FullScreenPresenter>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Windowing.IFullScreenPresenterMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Windowing.FullScreenPresenter obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Windowing.IFullScreenPresenterMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Windowing.FullScreenPresenter FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Windowing.FullScreenPresenter.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Windowing.FullScreenPresenter obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Windowing.FullScreenPresenter>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Windowing.FullScreenPresenter[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.FullScreenPresenter>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.FullScreenPresenter>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Windowing.FullScreenPresenter[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.FullScreenPresenter>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Windowing.FullScreenPresenter[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.FullScreenPresenter>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Windowing.FullScreenPresenter[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.FullScreenPresenter>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Windowing.FullScreenPresenter>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.FullScreenPresenter>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class FullScreenPresenterRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Windowing.FullScreenPresenter(inspectable.ObjRef);
    }
    internal static class IAppWindowMethods
    {


        internal static unsafe void Destroy(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[17](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void Hide(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[18](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void Move(IObjectReference _obj, global::Windows.Graphics.PointInt32 position)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Graphics.PointInt32, int>**)ThisPtr)[19](ThisPtr, position));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void MoveAndResize(IObjectReference _obj, global::Windows.Graphics.RectInt32 rect)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Graphics.RectInt32, int>**)ThisPtr)[20](ThisPtr, rect));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void MoveAndResize(IObjectReference _obj, global::Windows.Graphics.RectInt32 rect, global::Microsoft.UI.Windowing.DisplayArea displayarea)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __displayarea = default;
            try
            {
                __displayarea = global::ABI.Microsoft.UI.Windowing.DisplayArea.CreateMarshaler2(displayarea);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Graphics.RectInt32, IntPtr, int>**)ThisPtr)[21](ThisPtr, rect, MarshalInspectable<object>.GetAbi(__displayarea)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__displayarea);
            }
        }

        internal static unsafe void Resize(IObjectReference _obj, global::Windows.Graphics.SizeInt32 size)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Graphics.SizeInt32, int>**)ThisPtr)[22](ThisPtr, size));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void SetIcon(IObjectReference _obj, string iconPath)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __iconPath = new(iconPath);
            fixed(void* ___iconPath = __iconPath)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[23](ThisPtr, MarshalString.GetAbi(ref __iconPath)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe void SetIcon(IObjectReference _obj, global::Microsoft.UI.IconId iconId)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.IconId, int>**)ThisPtr)[24](ThisPtr, iconId));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void SetPresenter(IObjectReference _obj, global::Microsoft.UI.Windowing.AppWindowPresenter appWindowPresenter)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __appWindowPresenter = default;
            try
            {
                __appWindowPresenter = global::ABI.Microsoft.UI.Windowing.AppWindowPresenter.CreateMarshaler2(appWindowPresenter);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[25](ThisPtr, MarshalInspectable<object>.GetAbi(__appWindowPresenter)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__appWindowPresenter);
            }
        }

        internal static unsafe void SetPresenter(IObjectReference _obj, global::Microsoft.UI.Windowing.AppWindowPresenterKind appWindowPresenterKind)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Windowing.AppWindowPresenterKind, int>**)ThisPtr)[26](ThisPtr, appWindowPresenterKind));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void Show(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[27](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void Show(IObjectReference _obj, bool activateWindow)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[28](ThisPtr, (byte)(activateWindow ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }
        internal static unsafe global::Microsoft.UI.WindowId get_Id(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.WindowId __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.WindowId*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe bool get_IsShownInSwitchers(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsShownInSwitchers(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[8](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsVisible(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe global::Microsoft.UI.WindowId get_OwnerWindowId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.WindowId __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.WindowId*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Graphics.PointInt32 get_Position(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Graphics.PointInt32 __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Graphics.PointInt32*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Windowing.AppWindowPresenter get_Presenter(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Windowing.AppWindowPresenter.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Windowing.AppWindowPresenter.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Graphics.SizeInt32 get_Size(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Graphics.SizeInt32 __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Graphics.SizeInt32*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe string get_Title(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Title(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[15](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::Microsoft.UI.Windowing.AppWindowTitleBar get_TitleBar(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[16](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Windowing.AppWindowTitleBar.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Windowing.AppWindowTitleBar.DisposeAbi(__retval);
            }
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Windowing.AppWindow, global::Microsoft.UI.Windowing.AppWindowChangedEventArgs>>> _Changed_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Windowing.AppWindow, global::Microsoft.UI.Windowing.AppWindowChangedEventArgs>>> MakeChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Changed_, new(), null);
            return _Changed_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Windowing.AppWindow, global::Microsoft.UI.Windowing.AppWindowChangedEventArgs>>> _Changed => _Changed_ ?? MakeChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Windowing.AppWindow, global::Microsoft.UI.Windowing.AppWindowChangedEventArgs>> Get_Changed2(IObjectReference _obj, object _thisObj)
        {
            return _Changed.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Windowing_AppWindow__global__Microsoft_UI_Windowing_AppWindowChangedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[29],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[30],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Windowing.AppWindow, global::Microsoft.UI.Windowing.AppWindowClosingEventArgs>>> _Closing_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Windowing.AppWindow, global::Microsoft.UI.Windowing.AppWindowClosingEventArgs>>> MakeClosingTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Closing_, new(), null);
            return _Closing_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Windowing.AppWindow, global::Microsoft.UI.Windowing.AppWindowClosingEventArgs>>> _Closing => _Closing_ ?? MakeClosingTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Windowing.AppWindow, global::Microsoft.UI.Windowing.AppWindowClosingEventArgs>> Get_Closing2(IObjectReference _obj, object _thisObj)
        {
            return _Closing.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Windowing_AppWindow__global__Microsoft_UI_Windowing_AppWindowClosingEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[31],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[32],
                1);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Windowing.AppWindow, object>>> _Destroying_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Windowing.AppWindow, object>>> MakeDestroyingTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Destroying_, new(), null);
            return _Destroying_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Windowing.AppWindow, object>>> _Destroying => _Destroying_ ?? MakeDestroyingTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Windowing.AppWindow, object>> Get_Destroying2(IObjectReference _obj, object _thisObj)
        {
            return _Destroying.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Windowing_AppWindow__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[33],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[34],
                2);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB3, 0x88, 0xA7, 0xCF, 0x3B, 0x64, 0x5E, 0x5C, 0xAD, 0x4E, 0x32, 0x1D, 0x48, 0xA8, 0x2A, 0xCD };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("CFA788B3-643B-5C5E-AD4E-321D48A82ACD")]
    internal interface IAppWindow : global::Microsoft.UI.Windowing.IAppWindow
    {
    }
    internal static class IAppWindow2Methods
    {


        internal static unsafe void MoveInZOrderAtBottom(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[7](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void MoveInZOrderAtTop(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[8](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void MoveInZOrderBelow(IObjectReference _obj, global::Microsoft.UI.WindowId windowId)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.WindowId, int>**)ThisPtr)[9](ThisPtr, windowId));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void ResizeClient(IObjectReference _obj, global::Windows.Graphics.SizeInt32 size)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Graphics.SizeInt32, int>**)ThisPtr)[10](ThisPtr, size));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void ShowOnceWithRequestedStartupState(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[11](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }
        internal static unsafe global::Windows.Graphics.SizeInt32 get_ClientSize(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Graphics.SizeInt32 __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Graphics.SizeInt32*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x92, 0x12, 0xD4, 0x6C, 0x4C, 0x79, 0xAC, 0x5C, 0x89, 0x61, 0x21, 0xD, 0x1, 0x2C, 0x6E, 0xBC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("6CD41292-794C-5CAC-8961-210D012C6EBC")]
    internal interface IAppWindow2 : global::Microsoft.UI.Windowing.IAppWindow2
    {
    }
    internal static class IAppWindow3Methods
    {


        internal static unsafe void AssociateWithDispatcherQueue(IObjectReference _obj, global::Microsoft.UI.Dispatching.DispatcherQueue dispatcherQueue)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dispatcherQueue = default;
            try
            {
                __dispatcherQueue = global::ABI.Microsoft.UI.Dispatching.DispatcherQueue.CreateMarshaler2(dispatcherQueue);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__dispatcherQueue)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dispatcherQueue);
            }
        }
        internal static unsafe global::Microsoft.UI.Dispatching.DispatcherQueue get_DispatcherQueue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Dispatching.DispatcherQueue.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Dispatching.DispatcherQueue.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xEA, 0xC, 0x26, 0x2F, 0x3D, 0x19, 0xD6, 0x5D, 0xA9, 0x4, 0xD7, 0x64, 0x9A, 0x60, 0x8D, 0x2F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2F260CEA-193D-5DD6-A904-D7649A608D2F")]
    internal interface IAppWindow3 : global::Microsoft.UI.Windowing.IAppWindow3
    {
    }
    internal static class IAppWindow4Methods
    {


        internal static unsafe void SetTaskbarIcon(IObjectReference _obj, string iconPath)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __iconPath = new(iconPath);
            fixed(void* ___iconPath = __iconPath)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __iconPath)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe void SetTaskbarIcon(IObjectReference _obj, global::Microsoft.UI.IconId iconId)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.IconId, int>**)ThisPtr)[7](ThisPtr, iconId));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void SetTitleBarIcon(IObjectReference _obj, string iconPath)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __iconPath = new(iconPath);
            fixed(void* ___iconPath = __iconPath)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[8](ThisPtr, MarshalString.GetAbi(ref __iconPath)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe void SetTitleBarIcon(IObjectReference _obj, global::Microsoft.UI.IconId iconId)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.IconId, int>**)ThisPtr)[9](ThisPtr, iconId));
            global::System.GC.KeepAlive(_obj);
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x91, 0xFB, 0x3B, 0x38, 0x29, 0xEA, 0x14, 0x54, 0x80, 0xCD, 0x6C, 0x76, 0xD9, 0x81, 0xEB, 0x31 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("383BFB91-EA29-5414-80CD-6C76D981EB31")]
    internal interface IAppWindow4 : global::Microsoft.UI.Windowing.IAppWindow4
    {
    }
    internal static class IAppWindowChangedEventArgsMethods
    {

        internal static unsafe bool get_DidPositionChange(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_DidPresenterChange(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_DidSizeChange(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_DidVisibilityChange(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x5D, 0xBC, 0x82, 0x21, 0xAC, 0xFD, 0x3E, 0x5C, 0xBF, 0x37, 0x7D, 0x8D, 0x68, 0x4E, 0x9D, 0x1D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2182BC5D-FDAC-5C3E-BF37-7D8D684E9D1D")]
    internal interface IAppWindowChangedEventArgs : global::Microsoft.UI.Windowing.IAppWindowChangedEventArgs
    {
    }
    internal static class IAppWindowChangedEventArgs2Methods
    {

        internal static unsafe bool get_DidZOrderChange(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_IsZOrderAtBottom(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_IsZOrderAtTop(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe global::Microsoft.UI.WindowId get_ZOrderBelowWindowId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.WindowId __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.WindowId*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x4C, 0xAB, 0x73, 0xA7, 0xEC, 0xA5, 0xE8, 0x50, 0x98, 0xAC, 0x24, 0x7F, 0xE6, 0xCD, 0x42, 0x27 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A773AB4C-A5EC-50E8-98AC-247FE6CD4227")]
    internal interface IAppWindowChangedEventArgs2 : global::Microsoft.UI.Windowing.IAppWindowChangedEventArgs2
    {
    }
    internal static class IAppWindowClosingEventArgsMethods
    {

        internal static unsafe bool get_Cancel(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Cancel(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB, 0xD9, 0x9, 0xE, 0x61, 0x22, 0xB, 0x59, 0x9A, 0xD1, 0x85, 0x4, 0x99, 0x1D, 0x87, 0x54 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("0E09D90B-2261-590B-9AD1-8504991D8754")]
    internal interface IAppWindowClosingEventArgs : global::Microsoft.UI.Windowing.IAppWindowClosingEventArgs
    {
    }
    internal static class IAppWindowExperimentalMethods
    {


        internal static unsafe global::Microsoft.UI.Windowing.AppWindowPlacementDetails GetCurrentPlacement(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Windowing.AppWindowPlacementDetails.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Windowing.AppWindowPlacementDetails.DisposeAbi(__retval);
            }
        }

        internal static unsafe void SaveCurrentPlacement(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[11](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool SetCurrentPlacement(IObjectReference _obj, global::Microsoft.UI.Windowing.AppWindowPlacementDetails placementDetails, bool isFirstWindow)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __placementDetails = default;
            byte __retval = default;
            try
            {
                __placementDetails = global::ABI.Microsoft.UI.Windowing.AppWindowPlacementDetails.CreateMarshaler2(placementDetails);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte, byte*, int>**)ThisPtr)[12](ThisPtr, MarshalInspectable<object>.GetAbi(__placementDetails), (byte)(isFirstWindow ? 1 : 0), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__placementDetails);
            }
        }
        internal static unsafe global::System.Nullable<Guid> get_PersistedStateId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<Guid>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<Guid>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_PersistedStateId(IObjectReference _obj, global::System.Nullable<Guid> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<Guid>>.CreateMarshaler2(value, global::ABI.System.Nullable<Guid>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Windowing.PlacementRestorationBehavior get_PlacementRestorationBehavior(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Windowing.PlacementRestorationBehavior __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Windowing.PlacementRestorationBehavior*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_PlacementRestorationBehavior(IObjectReference _obj, global::Microsoft.UI.Windowing.PlacementRestorationBehavior value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Windowing.PlacementRestorationBehavior, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC7, 0x96, 0xDB, 0x4, 0xB6, 0xDE, 0xE4, 0x5B, 0xBF, 0xDC, 0x1B, 0xC0, 0x36, 0x1C, 0x8A, 0x12 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("04DB96C7-DEB6-5BE4-BFDC-1BC0361C8A12")]
    internal interface IAppWindowExperimental : global::Microsoft.UI.Windowing.IAppWindowExperimental
    {
    }
    internal static class IAppWindowPlacementDetailsMethods
    {

        internal static unsafe global::Windows.Graphics.RectInt32 get_ArrangeRect(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Graphics.RectInt32 __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Graphics.RectInt32*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe string get_DeviceName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe int get_Dpi(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Windowing.PlacementInfo get_Flags(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Windowing.PlacementInfo __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Windowing.PlacementInfo*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Graphics.RectInt32 get_NormalRect(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Graphics.RectInt32 __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Graphics.RectInt32*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe int get_ShowCmd(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Graphics.RectInt32 get_WorkArea(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Graphics.RectInt32 __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Graphics.RectInt32*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB2, 0xC5, 0x9E, 0x63, 0xC, 0xAC, 0xBF, 0x5B, 0x84, 0x22, 0x98, 0xDC, 0xA5, 0x40, 0xD2, 0x19 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("639EC5B2-AC0C-5BBF-8422-98DCA540D219")]
    internal interface IAppWindowPlacementDetails : global::Microsoft.UI.Windowing.IAppWindowPlacementDetails
    {
    }
    internal static class IAppWindowPlacementDetailsStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Windowing.AppWindowPlacementDetails Create(IObjectReference _obj, global::Windows.Graphics.RectInt32 normalRect, global::Windows.Graphics.RectInt32 workArea, int dpi, int showCmd, global::Windows.Graphics.RectInt32 arrangeRect, global::Microsoft.UI.Windowing.PlacementInfo flags, string deviceName)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __deviceName = new(deviceName);
                fixed(void* ___deviceName = __deviceName)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Graphics.RectInt32, global::Windows.Graphics.RectInt32, int, int, global::Windows.Graphics.RectInt32, global::Microsoft.UI.Windowing.PlacementInfo, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, normalRect, workArea, dpi, showCmd, arrangeRect, flags, MarshalString.GetAbi(ref __deviceName), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.UI.Windowing.AppWindowPlacementDetails.FromAbi(__retval);
                }
            }
            finally
            {
                global::ABI.Microsoft.UI.Windowing.AppWindowPlacementDetails.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x45, 0x17, 0x9F, 0xF1, 0xAD, 0x52, 0xF7, 0x5C, 0x97, 0xEA, 0x76, 0xC5, 0xFD, 0x6F, 0xF3, 0xC1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F19F1745-52AD-5CF7-97EA-76C5FD6FF3C1")]
    internal interface IAppWindowPlacementDetailsStatics : global::Microsoft.UI.Windowing.IAppWindowPlacementDetailsStatics
    {
    }
    internal static class IAppWindowPresenterMethods
    {

        internal static unsafe global::Microsoft.UI.Windowing.AppWindowPresenterKind get_Kind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Windowing.AppWindowPresenterKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Windowing.AppWindowPresenterKind*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC2, 0x42, 0x30, 0xBC, 0xC6, 0xC6, 0x32, 0x56, 0x89, 0x89, 0xFF, 0xE, 0xC6, 0xD3, 0xB4, 0xD };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("BC3042C2-C6C6-5632-8989-FF0EC6D3B40D")]
    internal interface IAppWindowPresenter : global::Microsoft.UI.Windowing.IAppWindowPresenter
    {
    }
    internal static class IAppWindowPresenterFactoryMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3C, 0x2E, 0x8, 0x62, 0x68, 0x13, 0x38, 0x52, 0x90, 0xD1, 0xE9, 0x32, 0xDC, 0x71, 0x8A, 0x82 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("62082E3C-1368-5238-90D1-E932DC718A82")]
    internal interface IAppWindowPresenterFactory : global::Microsoft.UI.Windowing.IAppWindowPresenterFactory
    {
    }
    internal static class IAppWindowStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Windowing.AppWindow Create(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Windowing.AppWindow.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Windowing.AppWindow.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Windowing.AppWindow Create(IObjectReference _obj, global::Microsoft.UI.Windowing.AppWindowPresenter appWindowPresenter)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __appWindowPresenter = default;
            IntPtr __retval = default;
            try
            {
                __appWindowPresenter = global::ABI.Microsoft.UI.Windowing.AppWindowPresenter.CreateMarshaler2(appWindowPresenter);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__appWindowPresenter), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Windowing.AppWindow.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__appWindowPresenter);
                global::ABI.Microsoft.UI.Windowing.AppWindow.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Windowing.AppWindow Create(IObjectReference _obj, global::Microsoft.UI.Windowing.AppWindowPresenter appWindowPresenter, global::Microsoft.UI.WindowId ownerWindowId)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __appWindowPresenter = default;
            IntPtr __retval = default;
            try
            {
                __appWindowPresenter = global::ABI.Microsoft.UI.Windowing.AppWindowPresenter.CreateMarshaler2(appWindowPresenter);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Microsoft.UI.WindowId, IntPtr*, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__appWindowPresenter), ownerWindowId, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Windowing.AppWindow.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__appWindowPresenter);
                global::ABI.Microsoft.UI.Windowing.AppWindow.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Windowing.AppWindow GetFromWindowId(IObjectReference _obj, global::Microsoft.UI.WindowId windowId)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.WindowId, IntPtr*, int>**)ThisPtr)[9](ThisPtr, windowId, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Windowing.AppWindow.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Windowing.AppWindow.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x24, 0x5C, 0x31, 0x3C, 0x40, 0xD5, 0x72, 0x5D, 0xB5, 0x18, 0xB2, 0x26, 0xB8, 0x36, 0x27, 0xCB };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("3C315C24-D540-5D72-B518-B226B83627CB")]
    internal interface IAppWindowStatics : global::Microsoft.UI.Windowing.IAppWindowStatics
    {
    }
    internal static class IAppWindowStatics2Methods
    {


        internal static unsafe global::Microsoft.UI.Windowing.AppWindow Create(IObjectReference _obj, global::Microsoft.UI.Windowing.AppWindowPresenter appWindowPresenter, global::Microsoft.UI.WindowId ownerWindowId, global::Microsoft.UI.Dispatching.DispatcherQueue DispatcherQueue)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __appWindowPresenter = default;
            ObjectReferenceValue __DispatcherQueue = default;
            IntPtr __retval = default;
            try
            {
                __appWindowPresenter = global::ABI.Microsoft.UI.Windowing.AppWindowPresenter.CreateMarshaler2(appWindowPresenter);
                __DispatcherQueue = global::ABI.Microsoft.UI.Dispatching.DispatcherQueue.CreateMarshaler2(DispatcherQueue);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Microsoft.UI.WindowId, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__appWindowPresenter), ownerWindowId, MarshalInspectable<object>.GetAbi(__DispatcherQueue), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Windowing.AppWindow.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__appWindowPresenter);
                MarshalInspectable<object>.DisposeMarshaler(__DispatcherQueue);
                global::ABI.Microsoft.UI.Windowing.AppWindow.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xDB, 0x23, 0xBC, 0xCA, 0x6, 0x46, 0x6E, 0x5D, 0x89, 0xA5, 0x6, 0xDE, 0x1D, 0x8B, 0xD3, 0xE2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("CABC23DB-4606-5D6E-89A5-06DE1D8BD3E2")]
    internal interface IAppWindowStatics2 : global::Microsoft.UI.Windowing.IAppWindowStatics2
    {
    }
    internal static class IAppWindowStatics3Methods
    {


        internal static unsafe void SaveCurrentPlacementForAllPersistedStateIds(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[6](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x5A, 0x83, 0xCC, 0xB, 0x86, 0x12, 0x13, 0x51, 0x9F, 0x59, 0xF1, 0x9, 0x3D, 0x2E, 0x8, 0x7A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("0BCC835A-1286-5113-9F59-F1093D2E087A")]
    internal interface IAppWindowStatics3 : global::Microsoft.UI.Windowing.IAppWindowStatics3
    {
    }
    internal static class IAppWindowTitleBarMethods
    {


        internal static unsafe void ResetToDefault(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[37](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void SetDragRectangles(IObjectReference _obj, global::Windows.Graphics.RectInt32[] value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalBlittable<global::Windows.Graphics.RectInt32>.MarshalerArray __value = default;
            int __value_length = default;
            IntPtr __value_data = default;
            try
            {
                __value = MarshalBlittable<global::Windows.Graphics.RectInt32>.CreateMarshalerArray(value);
                (__value_length, __value_data) = MarshalBlittable<global::Windows.Graphics.RectInt32>.GetAbiArray(__value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, IntPtr, int>**)ThisPtr)[38](ThisPtr, __value_length, __value_data));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalBlittable<global::Windows.Graphics.RectInt32>.DisposeMarshalerArray(__value);
            }
        }
        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_BackgroundColor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_BackgroundColor(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_ButtonBackgroundColor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ButtonBackgroundColor(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_ButtonForegroundColor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ButtonForegroundColor(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_ButtonHoverBackgroundColor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ButtonHoverBackgroundColor(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[13](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_ButtonHoverForegroundColor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ButtonHoverForegroundColor(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[15](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_ButtonInactiveBackgroundColor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[16](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ButtonInactiveBackgroundColor(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[17](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_ButtonInactiveForegroundColor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[18](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ButtonInactiveForegroundColor(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[19](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_ButtonPressedBackgroundColor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[20](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ButtonPressedBackgroundColor(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[21](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_ButtonPressedForegroundColor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[22](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ButtonPressedForegroundColor(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[23](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe bool get_ExtendsContentIntoTitleBar(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[24](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_ExtendsContentIntoTitleBar(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[25](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_ForegroundColor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[26](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ForegroundColor(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[27](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe int get_Height(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[28](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Windowing.IconShowOptions get_IconShowOptions(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Windowing.IconShowOptions __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Windowing.IconShowOptions*, int>**)ThisPtr)[29](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_IconShowOptions(IObjectReference _obj, global::Microsoft.UI.Windowing.IconShowOptions value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Windowing.IconShowOptions, int>**)ThisPtr)[30](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_InactiveBackgroundColor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[31](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_InactiveBackgroundColor(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[32](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_InactiveForegroundColor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[33](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_InactiveForegroundColor(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[34](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe int get_LeftInset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[35](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe int get_RightInset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[36](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA2, 0xEF, 0x74, 0x55, 0x1C, 0xC9, 0x0, 0x57, 0xA3, 0x63, 0x53, 0x9C, 0x71, 0xA7, 0xAA, 0xF4 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("5574EFA2-C91C-5700-A363-539C71A7AAF4")]
    internal interface IAppWindowTitleBar : global::Microsoft.UI.Windowing.IAppWindowTitleBar
    {
    }
    internal static class IAppWindowTitleBar2Methods
    {

        internal static unsafe global::Microsoft.UI.Windowing.TitleBarHeightOption get_PreferredHeightOption(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Windowing.TitleBarHeightOption __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Windowing.TitleBarHeightOption*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_PreferredHeightOption(IObjectReference _obj, global::Microsoft.UI.Windowing.TitleBarHeightOption value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Windowing.TitleBarHeightOption, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x38, 0xED, 0xFA, 0x86, 0x8A, 0x74, 0x4B, 0x5B, 0x9C, 0xCF, 0x3B, 0xA0, 0x49, 0x6C, 0x90, 0x41 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("86FAED38-748A-5B4B-9CCF-3BA0496C9041")]
    internal interface IAppWindowTitleBar2 : global::Microsoft.UI.Windowing.IAppWindowTitleBar2
    {
    }
    internal static class IAppWindowTitleBar3Methods
    {

        internal static unsafe global::Microsoft.UI.Windowing.TitleBarTheme get_PreferredTheme(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Windowing.TitleBarTheme __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Windowing.TitleBarTheme*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_PreferredTheme(IObjectReference _obj, global::Microsoft.UI.Windowing.TitleBarTheme value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Windowing.TitleBarTheme, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x74, 0x6E, 0x14, 0x7, 0x10, 0x4, 0x97, 0x55, 0xAB, 0xA7, 0x1A, 0xF2, 0x76, 0xD2, 0xAE, 0x7 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("07146E74-0410-5597-ABA7-1AF276D2AE07")]
    internal interface IAppWindowTitleBar3 : global::Microsoft.UI.Windowing.IAppWindowTitleBar3
    {
    }
    internal static class IAppWindowTitleBarStaticsMethods
    {


        internal static unsafe bool IsCustomizationSupported(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x2E, 0xA5, 0x1D, 0x9E, 0x15, 0x8B, 0xD6, 0x54, 0xA8, 0x86, 0xF7, 0xB9, 0xF9, 0xD9, 0x30, 0xB2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("9E1DA52E-8B15-54D6-A886-F7B9F9D930B2")]
    internal interface IAppWindowTitleBarStatics : global::Microsoft.UI.Windowing.IAppWindowTitleBarStatics
    {
    }
    internal static class ICompactOverlayPresenterMethods
    {

        internal static unsafe global::Microsoft.UI.Windowing.CompactOverlaySize get_InitialSize(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Windowing.CompactOverlaySize __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Windowing.CompactOverlaySize*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_InitialSize(IObjectReference _obj, global::Microsoft.UI.Windowing.CompactOverlaySize value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Windowing.CompactOverlaySize, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x12, 0x8, 0xEB, 0xEF, 0xC7, 0x6F, 0x7D, 0x5B, 0xBD, 0x92, 0xCC, 0x8F, 0x9A, 0x64, 0x54, 0xC9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("EFEB0812-6FC7-5B7D-BD92-CC8F9A6454C9")]
    internal interface ICompactOverlayPresenter : global::Microsoft.UI.Windowing.ICompactOverlayPresenter
    {
    }
    internal static class ICompactOverlayPresenterStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Windowing.CompactOverlayPresenter Create(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Windowing.CompactOverlayPresenter.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Windowing.CompactOverlayPresenter.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x86, 0x31, 0xB9, 0xEA, 0x6A, 0x4F, 0xF9, 0x52, 0x8C, 0x3, 0xDA, 0x57, 0xA1, 0x52, 0x2F, 0x6E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("EAB93186-4F6A-52F9-8C03-DA57A1522F6E")]
    internal interface ICompactOverlayPresenterStatics : global::Microsoft.UI.Windowing.ICompactOverlayPresenterStatics
    {
    }
    internal static class IDisplayAreaMethods
    {

        internal static unsafe global::Microsoft.UI.DisplayId get_DisplayId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.DisplayId __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.DisplayId*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe bool get_IsPrimary(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe global::Windows.Graphics.RectInt32 get_OuterBounds(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Graphics.RectInt32 __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Graphics.RectInt32*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Graphics.RectInt32 get_WorkArea(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Graphics.RectInt32 __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Graphics.RectInt32*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x37, 0x5, 0x7E, 0x5C, 0x21, 0xB6, 0x79, 0x55, 0xBC, 0xAE, 0xA8, 0x4A, 0xA8, 0x74, 0x61, 0x67 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("5C7E0537-B621-5579-BCAE-A84AA8746167")]
    internal interface IDisplayArea : global::Microsoft.UI.Windowing.IDisplayArea
    {
    }
    internal static class IDisplayAreaStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Windowing.DisplayAreaWatcher CreateWatcher(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Windowing.DisplayAreaWatcher.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Windowing.DisplayAreaWatcher.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Collections.Generic.IReadOnlyList<global::Microsoft.UI.Windowing.DisplayArea> FindAll(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Microsoft_UI_Windowing_DisplayArea.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.UI.Windowing.DisplayArea>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.UI.Windowing.DisplayArea>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Windowing.DisplayArea GetFromWindowId(IObjectReference _obj, global::Microsoft.UI.WindowId windowId, global::Microsoft.UI.Windowing.DisplayAreaFallback displayAreaFallback)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.WindowId, global::Microsoft.UI.Windowing.DisplayAreaFallback, IntPtr*, int>**)ThisPtr)[9](ThisPtr, windowId, displayAreaFallback, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Windowing.DisplayArea.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Windowing.DisplayArea.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Windowing.DisplayArea GetFromPoint(IObjectReference _obj, global::Windows.Graphics.PointInt32 point, global::Microsoft.UI.Windowing.DisplayAreaFallback displayAreaFallback)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Graphics.PointInt32, global::Microsoft.UI.Windowing.DisplayAreaFallback, IntPtr*, int>**)ThisPtr)[10](ThisPtr, point, displayAreaFallback, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Windowing.DisplayArea.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Windowing.DisplayArea.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Windowing.DisplayArea GetFromRect(IObjectReference _obj, global::Windows.Graphics.RectInt32 rect, global::Microsoft.UI.Windowing.DisplayAreaFallback displayAreaFallback)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Graphics.RectInt32, global::Microsoft.UI.Windowing.DisplayAreaFallback, IntPtr*, int>**)ThisPtr)[11](ThisPtr, rect, displayAreaFallback, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Windowing.DisplayArea.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Windowing.DisplayArea.DisposeAbi(__retval);
            }
        }
        internal static unsafe global::Microsoft.UI.Windowing.DisplayArea get_Primary(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Windowing.DisplayArea.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Windowing.DisplayArea.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x26, 0x49, 0xAB, 0x2, 0x1E, 0x21, 0x49, 0x5D, 0x8E, 0x4B, 0x2A, 0xF1, 0x93, 0xDA, 0xED, 0x9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("02AB4926-211E-5D49-8E4B-2AF193DAED09")]
    internal interface IDisplayAreaStatics : global::Microsoft.UI.Windowing.IDisplayAreaStatics
    {
    }
    internal static class IDisplayAreaStatics2Methods
    {


        internal static unsafe global::Microsoft.UI.Windowing.DisplayArea GetFromDisplayId(IObjectReference _obj, global::Microsoft.UI.DisplayId displayId)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.DisplayId, IntPtr*, int>**)ThisPtr)[6](ThisPtr, displayId, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Windowing.DisplayArea.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Windowing.DisplayArea.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x4B, 0xAD, 0x7, 0x72, 0xD, 0x89, 0xD7, 0x5D, 0xBC, 0x18, 0x78, 0xFF, 0xD9, 0x54, 0x4D, 0x8F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("7207AD4B-890D-5DD7-BC18-78FFD9544D8F")]
    internal interface IDisplayAreaStatics2 : global::Microsoft.UI.Windowing.IDisplayAreaStatics2
    {
    }
    internal static class IDisplayAreaStatics3Methods
    {


        internal static unsafe global::Microsoft.UI.DisplayId GetMetricsFromWindowId(IObjectReference _obj, global::Microsoft.UI.WindowId windowId)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.DisplayId __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.WindowId, global::Microsoft.UI.DisplayId*, int>**)ThisPtr)[6](ThisPtr, windowId, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x2, 0x36, 0x5D, 0x74, 0x8B, 0x26, 0x60, 0x50, 0x84, 0x37, 0xFC, 0xC0, 0x25, 0xE2, 0x55, 0xD6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("745D3602-268B-5060-8437-FCC025E255D6")]
    internal interface IDisplayAreaStatics3 : global::Microsoft.UI.Windowing.IDisplayAreaStatics3
    {
    }
    internal static class IDisplayAreaWatcherMethods
    {


        internal static unsafe void Start(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[7](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void Stop(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[8](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }
        internal static unsafe global::Microsoft.UI.Windowing.DisplayAreaWatcherStatus get_Status(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Windowing.DisplayAreaWatcherStatus __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Windowing.DisplayAreaWatcherStatus*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Windowing.DisplayAreaWatcher, global::Microsoft.UI.Windowing.DisplayArea>>> _Added_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Windowing.DisplayAreaWatcher, global::Microsoft.UI.Windowing.DisplayArea>>> MakeAddedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Added_, new(), null);
            return _Added_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Windowing.DisplayAreaWatcher, global::Microsoft.UI.Windowing.DisplayArea>>> _Added => _Added_ ?? MakeAddedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Windowing.DisplayAreaWatcher, global::Microsoft.UI.Windowing.DisplayArea>> Get_Added2(IObjectReference _obj, object _thisObj)
        {
            return _Added.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Windowing_DisplayAreaWatcher__global__Microsoft_UI_Windowing_DisplayArea_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[9],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[10],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Windowing.DisplayAreaWatcher, object>>> _EnumerationCompleted_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Windowing.DisplayAreaWatcher, object>>> MakeEnumerationCompletedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _EnumerationCompleted_, new(), null);
            return _EnumerationCompleted_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Windowing.DisplayAreaWatcher, object>>> _EnumerationCompleted => _EnumerationCompleted_ ?? MakeEnumerationCompletedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Windowing.DisplayAreaWatcher, object>> Get_EnumerationCompleted2(IObjectReference _obj, object _thisObj)
        {
            return _EnumerationCompleted.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Windowing_DisplayAreaWatcher__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[11],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[12],
                1);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Windowing.DisplayAreaWatcher, global::Microsoft.UI.Windowing.DisplayArea>>> _Removed_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Windowing.DisplayAreaWatcher, global::Microsoft.UI.Windowing.DisplayArea>>> MakeRemovedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Removed_, new(), null);
            return _Removed_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Windowing.DisplayAreaWatcher, global::Microsoft.UI.Windowing.DisplayArea>>> _Removed => _Removed_ ?? MakeRemovedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Windowing.DisplayAreaWatcher, global::Microsoft.UI.Windowing.DisplayArea>> Get_Removed2(IObjectReference _obj, object _thisObj)
        {
            return _Removed.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Windowing_DisplayAreaWatcher__global__Microsoft_UI_Windowing_DisplayArea_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[13],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[14],
                2);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Windowing.DisplayAreaWatcher, object>>> _Stopped_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Windowing.DisplayAreaWatcher, object>>> MakeStoppedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Stopped_, new(), null);
            return _Stopped_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Windowing.DisplayAreaWatcher, object>>> _Stopped => _Stopped_ ?? MakeStoppedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Windowing.DisplayAreaWatcher, object>> Get_Stopped2(IObjectReference _obj, object _thisObj)
        {
            return _Stopped.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Windowing_DisplayAreaWatcher__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[15],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[16],
                3);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Windowing.DisplayAreaWatcher, global::Microsoft.UI.Windowing.DisplayArea>>> _Updated_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Windowing.DisplayAreaWatcher, global::Microsoft.UI.Windowing.DisplayArea>>> MakeUpdatedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Updated_, new(), null);
            return _Updated_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Windowing.DisplayAreaWatcher, global::Microsoft.UI.Windowing.DisplayArea>>> _Updated => _Updated_ ?? MakeUpdatedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Windowing.DisplayAreaWatcher, global::Microsoft.UI.Windowing.DisplayArea>> Get_Updated2(IObjectReference _obj, object _thisObj)
        {
            return _Updated.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Windowing_DisplayAreaWatcher__global__Microsoft_UI_Windowing_DisplayArea_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[17],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[18],
                4);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x2F, 0x56, 0xF6, 0x83, 0xA0, 0xD3, 0x8B, 0x54, 0x8E, 0x4F, 0xA9, 0x9B, 0xE3, 0xD9, 0x5C, 0x9C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("83F6562F-D3A0-548B-8E4F-A99BE3D95C9C")]
    internal interface IDisplayAreaWatcher : global::Microsoft.UI.Windowing.IDisplayAreaWatcher
    {
    }
    internal static class IFullScreenPresenterMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFD, 0x41, 0x91, 0xFA, 0xDD, 0xB8, 0xA1, 0x5D, 0x8B, 0x2B, 0x7C, 0xDA, 0xDB, 0x76, 0xF5, 0x93 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("FA9141FD-B8DD-5DA1-8B2B-7CDADB76F593")]
    internal interface IFullScreenPresenter : global::Microsoft.UI.Windowing.IFullScreenPresenter
    {
    }
    internal static class IFullScreenPresenterStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Windowing.FullScreenPresenter Create(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Windowing.FullScreenPresenter.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Windowing.FullScreenPresenter.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC1, 0xD2, 0xC0, 0x2E, 0x86, 0xE0, 0xBB, 0x55, 0xA3, 0xB2, 0x44, 0x94, 0x2E, 0x23, 0x1C, 0x67 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2EC0D2C1-E086-55BB-A3B2-44942E231C67")]
    internal interface IFullScreenPresenterStatics : global::Microsoft.UI.Windowing.IFullScreenPresenterStatics
    {
    }
    internal static class IOverlappedPresenterMethods
    {


        internal static unsafe void Maximize(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[19](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void Minimize(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[20](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void Restore(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[21](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void SetBorderAndTitleBar(IObjectReference _obj, bool hasBorder, bool hasTitleBar)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, byte, int>**)ThisPtr)[22](ThisPtr, (byte)(hasBorder ? 1 : 0), (byte)(hasTitleBar ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }
        internal static unsafe bool get_HasBorder(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_HasTitleBar(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_IsAlwaysOnTop(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsAlwaysOnTop(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[9](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsMaximizable(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsMaximizable(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[11](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsMinimizable(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsMinimizable(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[13](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsModal(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsModal(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[15](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsResizable(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[16](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsResizable(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[17](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Windowing.OverlappedPresenterState get_State(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Windowing.OverlappedPresenterState __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Windowing.OverlappedPresenterState*, int>**)ThisPtr)[18](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x70, 0x39, 0x69, 0x21, 0x4C, 0x4F, 0x72, 0x51, 0x9E, 0x9D, 0x68, 0x2A, 0x2D, 0x17, 0x48, 0x84 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("21693970-4F4C-5172-9E9D-682A2D174884")]
    internal interface IOverlappedPresenter : global::Microsoft.UI.Windowing.IOverlappedPresenter
    {
    }
    internal static class IOverlappedPresenter2Methods
    {


        internal static unsafe void Minimize(IObjectReference _obj, bool activateWindow)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[6](ThisPtr, (byte)(activateWindow ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void Restore(IObjectReference _obj, bool activateWindow)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(activateWindow ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x93, 0xCD, 0x6C, 0x5C, 0x44, 0x42, 0xD2, 0x5C, 0xB3, 0x55, 0xED, 0x5E, 0xA3, 0x4D, 0xF7, 0x30 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("5C6CCD93-4244-5CD2-B355-ED5EA34DF730")]
    internal interface IOverlappedPresenter2 : global::Microsoft.UI.Windowing.IOverlappedPresenter2
    {
    }
    internal static class IOverlappedPresenter3Methods
    {

        internal static unsafe global::System.Nullable<int> get_PreferredMaximumHeight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<int>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<int>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_PreferredMaximumHeight(IObjectReference _obj, global::System.Nullable<int> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<int>>.CreateMarshaler2(value, global::ABI.System.Nullable<int>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[13](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<int> get_PreferredMaximumWidth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<int>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<int>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_PreferredMaximumWidth(IObjectReference _obj, global::System.Nullable<int> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<int>>.CreateMarshaler2(value, global::ABI.System.Nullable<int>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<int> get_PreferredMinimumHeight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<int>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<int>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_PreferredMinimumHeight(IObjectReference _obj, global::System.Nullable<int> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<int>>.CreateMarshaler2(value, global::ABI.System.Nullable<int>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<int> get_PreferredMinimumWidth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<int>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<int>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_PreferredMinimumWidth(IObjectReference _obj, global::System.Nullable<int> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<int>>.CreateMarshaler2(value, global::ABI.System.Nullable<int>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x38, 0x61, 0xD2, 0x55, 0x38, 0x4C, 0xE7, 0x57, 0xA0, 0xC1, 0xD4, 0x67, 0xB7, 0x74, 0xDB, 0x8C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("55D26138-4C38-57E7-A0C1-D467B774DB8C")]
    internal interface IOverlappedPresenter3 : global::Microsoft.UI.Windowing.IOverlappedPresenter3
    {
    }
    internal static class IOverlappedPresenterStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Windowing.OverlappedPresenter Create(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Windowing.OverlappedPresenter.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Windowing.OverlappedPresenter.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Windowing.OverlappedPresenter CreateForContextMenu(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Windowing.OverlappedPresenter.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Windowing.OverlappedPresenter.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Windowing.OverlappedPresenter CreateForDialog(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Windowing.OverlappedPresenter.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Windowing.OverlappedPresenter.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Windowing.OverlappedPresenter CreateForToolWindow(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Windowing.OverlappedPresenter.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Windowing.OverlappedPresenter.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE4, 0x25, 0x72, 0x99, 0x0, 0x7B, 0xEE, 0x5A, 0xA4, 0xBE, 0xD4, 0x6, 0x8D, 0x19, 0x99, 0xE2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("997225E4-7B00-5AEE-A4BE-D4068D1999E2")]
    internal interface IOverlappedPresenterStatics : global::Microsoft.UI.Windowing.IOverlappedPresenterStatics
    {
    }
    internal static class IOverlappedPresenterStatics2Methods
    {

        internal static unsafe global::Microsoft.UI.Windowing.OverlappedPresenterState get_RequestedStartupState(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Windowing.OverlappedPresenterState __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Windowing.OverlappedPresenterState*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x92, 0x4F, 0x5C, 0xED, 0xF4, 0x32, 0x15, 0x5D, 0x80, 0xD0, 0xB2, 0xA5, 0xEF, 0xA0, 0x4D, 0x39 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("ED5C4F92-32F4-5D15-80D0-B2A5EFA04D39")]
    internal interface IOverlappedPresenterStatics2 : global::Microsoft.UI.Windowing.IOverlappedPresenterStatics2
    {
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct OverlappedPresenter
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Windowing.OverlappedPresenter obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Windowing.OverlappedPresenter>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Windowing.IOverlappedPresenterMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Windowing.OverlappedPresenter obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Windowing.IOverlappedPresenterMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Windowing.OverlappedPresenter FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Windowing.OverlappedPresenter.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Windowing.OverlappedPresenter obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Windowing.OverlappedPresenter>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Windowing.OverlappedPresenter[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.OverlappedPresenter>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.OverlappedPresenter>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Windowing.OverlappedPresenter[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.OverlappedPresenter>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Windowing.OverlappedPresenter[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.OverlappedPresenter>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Windowing.OverlappedPresenter[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.OverlappedPresenter>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Windowing.OverlappedPresenter>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Windowing.OverlappedPresenter>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class OverlappedPresenterRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Windowing.OverlappedPresenter(inspectable.ObjRef);
    }
}
#pragma warning restore CA1416
