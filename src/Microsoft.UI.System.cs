//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.UI.System
{
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("2228EE7E-6D15-563C-8F3C-E8783BA13846")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.System.IThemeSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    internal interface IThemeSettings
    {
        bool HighContrast { get; }
        string HighContrastScheme { get; }
        event global::Windows.Foundation.TypedEventHandler<ThemeSettings, object> Changed;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("1586907D-30DB-5F97-8FA1-8940C75DCCC0")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.System.IThemeSettingsStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    internal interface IThemeSettingsStatics
    {
        ThemeSettings CreateForWindowId(global::Microsoft.UI.WindowId windowId);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.System.ThemeSettings))]
    [global::ABI.Microsoft.UI.System.ThemeSettingsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IThemeSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    public sealed class ThemeSettings : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ThemeSettings>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_System_IThemeSettings => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.System.ThemeSettings").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_System_IThemeSettingsStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_System_IThemeSettingsStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_System_IThemeSettingsStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_System_IThemeSettingsStatics = ActivationFactory.Get("Microsoft.UI.System.ThemeSettings", global::ABI.Microsoft.UI.System.IThemeSettingsStaticsMethods.IID);
                }
            }
        }

        public static ThemeSettings CreateForWindowId(global::Microsoft.UI.WindowId windowId) => global::ABI.Microsoft.UI.System.IThemeSettingsStaticsMethods.CreateForWindowId(_objRef_global__Microsoft_UI_System_IThemeSettingsStatics, windowId);

        public static ThemeSettings FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ThemeSettings>.FromAbi(thisPtr);
        }

        internal ThemeSettings(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.System.IThemeSettingsMethods.IID);

        }


        public static bool operator ==(ThemeSettings x, ThemeSettings y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ThemeSettings x, ThemeSettings y) => !(x == y);
        public bool Equals(ThemeSettings other) => this == other;
        public override bool Equals(object obj) => obj is ThemeSettings that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public event global::Windows.Foundation.TypedEventHandler<ThemeSettings, object> Changed
        {
            add => global::ABI.Microsoft.UI.System.IThemeSettingsMethods.Get_Changed2(_objRef_global__Microsoft_UI_System_IThemeSettings, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.System.IThemeSettingsMethods.Get_Changed2(_objRef_global__Microsoft_UI_System_IThemeSettings, (IWinRTObject)this).Unsubscribe(value);
        }

        public bool HighContrast => global::ABI.Microsoft.UI.System.IThemeSettingsMethods.get_HighContrast(_objRef_global__Microsoft_UI_System_IThemeSettings);

        public string HighContrastScheme => global::ABI.Microsoft.UI.System.IThemeSettingsMethods.get_HighContrastScheme(_objRef_global__Microsoft_UI_System_IThemeSettings);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.UI.System
{
    internal static class IThemeSettingsMethods
    {

        internal static unsafe bool get_HighContrast(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe string get_HighContrastScheme(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.System.ThemeSettings, object>>> _Changed_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.System.ThemeSettings, object>>> MakeChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Changed_, new(), null);
            return _Changed_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.System.ThemeSettings, object>>> _Changed => _Changed_ ?? MakeChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.System.ThemeSettings, object>> Get_Changed2(IObjectReference _obj, object _thisObj)
        {
            return _Changed.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_System_ThemeSettings__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[6],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[7],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7E, 0xEE, 0x28, 0x22, 0x15, 0x6D, 0x3C, 0x56, 0x8F, 0x3C, 0xE8, 0x78, 0x3B, 0xA1, 0x38, 0x46 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2228EE7E-6D15-563C-8F3C-E8783BA13846")]
    internal interface IThemeSettings : global::Microsoft.UI.System.IThemeSettings
    {
    }
    internal static class IThemeSettingsStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.System.ThemeSettings CreateForWindowId(IObjectReference _obj, global::Microsoft.UI.WindowId windowId)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.WindowId, IntPtr*, int>**)ThisPtr)[6](ThisPtr, windowId, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.System.ThemeSettings.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.System.ThemeSettings.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7D, 0x90, 0x86, 0x15, 0xDB, 0x30, 0x97, 0x5F, 0x8F, 0xA1, 0x89, 0x40, 0xC7, 0x5D, 0xCC, 0xC0 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("1586907D-30DB-5F97-8FA1-8940C75DCCC0")]
    internal interface IThemeSettingsStatics : global::Microsoft.UI.System.IThemeSettingsStatics
    {
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ThemeSettings
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.System.ThemeSettings obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.System.ThemeSettings>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.System.IThemeSettingsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.System.ThemeSettings obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.System.IThemeSettingsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.System.ThemeSettings FromAbi(IntPtr thisPtr) => global::Microsoft.UI.System.ThemeSettings.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.System.ThemeSettings obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.System.ThemeSettings>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.System.ThemeSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.System.ThemeSettings>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.System.ThemeSettings>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.System.ThemeSettings[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.System.ThemeSettings>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.System.ThemeSettings[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.System.ThemeSettings>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.System.ThemeSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.System.ThemeSettings>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.System.ThemeSettings>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.System.ThemeSettings>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ThemeSettingsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.System.ThemeSettings(inspectable.ObjRef);
    }
}
#pragma warning restore CA1416
