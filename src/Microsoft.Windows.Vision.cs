//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.Windows.Vision
{
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Vision", "struct(Microsoft.Windows.Vision.BoundingBox;struct(Windows.Foundation.Point;f4;f4);struct(Windows.Foundation.Point;f4;f4);struct(Windows.Foundation.Point;f4;f4);struct(Windows.Foundation.Point;f4;f4))")][global::WinRT.WindowsRuntimeHelperType][global::WinRT.WinRTExposedType(typeof(global::WinRT.StructTypeDetails<BoundingBox, BoundingBox>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(TextRecognitionContract), 65536u)]
    [global::Windows.Foundation.Metadata.Experimental]
    public struct BoundingBox: IEquatable<BoundingBox>
    {
        public global::Windows.Foundation.Point BottomLeft;
        public global::Windows.Foundation.Point BottomRight;
        public global::Windows.Foundation.Point TopLeft;
        public global::Windows.Foundation.Point TopRight;

        public BoundingBox(global::Windows.Foundation.Point _BottomLeft, global::Windows.Foundation.Point _BottomRight, global::Windows.Foundation.Point _TopLeft, global::Windows.Foundation.Point _TopRight)
        {
            BottomLeft = _BottomLeft; BottomRight = _BottomRight; TopLeft = _TopLeft; TopRight = _TopRight; 
        }

        public static bool operator ==(BoundingBox x, BoundingBox y) => x.BottomLeft == y.BottomLeft && x.BottomRight == y.BottomRight && x.TopLeft == y.TopLeft && x.TopRight == y.TopRight;
        public static bool operator !=(BoundingBox x, BoundingBox y) => !(x == y);
        public bool Equals(BoundingBox other) => this == other;
        public override bool Equals(object obj) => obj is BoundingBox that && this == that;
        public override int GetHashCode() => BottomLeft.GetHashCode() ^ BottomRight.GetHashCode() ^ TopLeft.GetHashCode() ^ TopRight.GetHashCode();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Vision")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<DetectedLineStyle>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(TextRecognitionContract), 65536u)]
    [global::Windows.Foundation.Metadata.Experimental]
    public enum DetectedLineStyle : int
    {
        Handwritten = unchecked((int)0),
        Other = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Vision")][Guid("D2BC3061-C751-52C2-902A-72B2FE9BF1E3")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Vision.IRecognizedLine))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(TextRecognitionContract), 65536u)]
    [global::Windows.Foundation.Metadata.Experimental]
    internal interface IRecognizedLine
    {
        BoundingBox BoundingBox { get; }
        RecognizedLineStyle Style { get; }
        string Text { get; }
        RecognizedWord[] Words { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Vision")][Guid("35241760-DC1D-564E-B3D8-C49342121373")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Vision.IRecognizedText))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(TextRecognitionContract), 65536u)]
    [global::Windows.Foundation.Metadata.Experimental]
    internal interface IRecognizedText
    {
        float ImageAngle { get; }
        RecognizedLine[] Lines { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Vision")][Guid("A71B8929-C0C2-56AA-825A-556F5FAF44D5")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Vision.IRecognizedWord))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(TextRecognitionContract), 65536u)]
    [global::Windows.Foundation.Metadata.Experimental]
    internal interface IRecognizedWord
    {
        BoundingBox BoundingBox { get; }
        float Confidence { get; }
        string Text { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Vision")][Guid("B6E2DED7-BC15-521E-9A3A-D83C0DCF5CA0")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Vision.ITextRecognizer))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(TextRecognitionContract), 65536u)]
    [global::Windows.Foundation.Metadata.Experimental]
    internal interface ITextRecognizer
    {
        [global::Windows.Foundation.Metadata.Overload(@"RecognizeTextFromImageAsync")]
        global::Windows.Foundation.IAsyncOperation<RecognizedText> RecognizeTextFromImageAsync(global::Microsoft.Graphics.Imaging.ImageBuffer imageBuffer, TextRecognizerOptions options);
        [global::Windows.Foundation.Metadata.Overload(@"RecognizeTextFromImage")]
        RecognizedText RecognizeTextFromImage(global::Microsoft.Graphics.Imaging.ImageBuffer imageBuffer, TextRecognizerOptions options);
        [global::Windows.Foundation.Metadata.Overload(@"RecognizeTextFromImageAsync2")]
        global::Windows.Foundation.IAsyncOperation<RecognizedText> RecognizeTextFromImageAsync(global::Microsoft.Graphics.Imaging.ImageBuffer imageBuffer, TextRecognizerOptions options, global::Microsoft.Windows.Workloads.WorkloadPriority priority);
        [global::Windows.Foundation.Metadata.Overload(@"RecognizeTextFromImage2")]
        RecognizedText RecognizeTextFromImage(global::Microsoft.Graphics.Imaging.ImageBuffer imageBuffer, TextRecognizerOptions options, global::Microsoft.Windows.Workloads.WorkloadPriority priority);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Vision")][Guid("99C1DEC2-98E8-5D4D-B0A4-8549AD78FFDE")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Vision.ITextRecognizerOptions))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(TextRecognitionContract), 65536u)]
    [global::Windows.Foundation.Metadata.Experimental]
    internal interface ITextRecognizerOptions
    {
        global::Windows.Graphics.SizeInt32 MaxAnalysisSize { get; set; }
        uint MaxLineCount { get; set; }
        OrientationDetectionOptions OrientationDetection { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Vision")][Guid("D350964B-9C23-5365-AFDB-3C6A9F89BF8F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Vision.ITextRecognizerStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(TextRecognitionContract), 65536u)]
    [global::Windows.Foundation.Metadata.Experimental]
    internal interface ITextRecognizerStatics
    {
        global::Microsoft.Windows.AI.AIFeatureReadyState GetReadyState();
        global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.AI.AIFeatureReadyResult, double> EnsureReadyAsync();
        global::Windows.Foundation.IAsyncOperation<TextRecognizer> CreateAsync();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Vision")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<OrientationDetectionOptions>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(TextRecognitionContract), 65536u)]
    [global::Windows.Foundation.Metadata.Experimental]
    public enum OrientationDetectionOptions : int
    {
        None = unchecked((int)0),
        DetectOrientation = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Vision")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Vision.RecognizedLine))]
    [global::ABI.Microsoft.Windows.Vision.RecognizedLineRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IRecognizedLine))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(TextRecognitionContract), 65536u)]
    [global::Windows.Foundation.Metadata.Experimental]
    public sealed class RecognizedLine : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<RecognizedLine>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_Vision_IRecognizedLine => _inner;


        public static RecognizedLine FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<RecognizedLine>.FromAbi(thisPtr);
        }

        internal RecognizedLine(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.Vision.IRecognizedLineMethods.IID);

        }


        public static bool operator ==(RecognizedLine x, RecognizedLine y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(RecognizedLine x, RecognizedLine y) => !(x == y);
        public bool Equals(RecognizedLine other) => this == other;
        public override bool Equals(object obj) => obj is RecognizedLine that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public BoundingBox BoundingBox => global::ABI.Microsoft.Windows.Vision.IRecognizedLineMethods.get_BoundingBox(_objRef_global__Microsoft_Windows_Vision_IRecognizedLine);

        public RecognizedLineStyle Style => global::ABI.Microsoft.Windows.Vision.IRecognizedLineMethods.get_Style(_objRef_global__Microsoft_Windows_Vision_IRecognizedLine);

        public string Text => global::ABI.Microsoft.Windows.Vision.IRecognizedLineMethods.get_Text(_objRef_global__Microsoft_Windows_Vision_IRecognizedLine);

        public RecognizedWord[] Words => global::ABI.Microsoft.Windows.Vision.IRecognizedLineMethods.get_Words(_objRef_global__Microsoft_Windows_Vision_IRecognizedLine);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Vision", "struct(Microsoft.Windows.Vision.RecognizedLineStyle;f4;enum(Microsoft.Windows.Vision.DetectedLineStyle;i4))")][global::WinRT.WindowsRuntimeHelperType][global::WinRT.WinRTExposedType(typeof(global::WinRT.StructTypeDetails<RecognizedLineStyle, RecognizedLineStyle>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(TextRecognitionContract), 65536u)]
    [global::Windows.Foundation.Metadata.Experimental]
    public struct RecognizedLineStyle: IEquatable<RecognizedLineStyle>
    {
        public float Confidence;
        public DetectedLineStyle Name;

        public RecognizedLineStyle(float _Confidence, DetectedLineStyle _Name)
        {
            Confidence = _Confidence; Name = _Name; 
        }

        public static bool operator ==(RecognizedLineStyle x, RecognizedLineStyle y) => x.Confidence == y.Confidence && x.Name == y.Name;
        public static bool operator !=(RecognizedLineStyle x, RecognizedLineStyle y) => !(x == y);
        public bool Equals(RecognizedLineStyle other) => this == other;
        public override bool Equals(object obj) => obj is RecognizedLineStyle that && this == that;
        public override int GetHashCode() => Confidence.GetHashCode() ^ Name.GetHashCode();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Vision")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Vision.RecognizedText))]
    [global::ABI.Microsoft.Windows.Vision.RecognizedTextRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IRecognizedText))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(TextRecognitionContract), 65536u)]
    [global::Windows.Foundation.Metadata.Experimental]
    public sealed class RecognizedText : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<RecognizedText>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_Vision_IRecognizedText => _inner;


        public static RecognizedText FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<RecognizedText>.FromAbi(thisPtr);
        }

        internal RecognizedText(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.Vision.IRecognizedTextMethods.IID);

        }


        public static bool operator ==(RecognizedText x, RecognizedText y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(RecognizedText x, RecognizedText y) => !(x == y);
        public bool Equals(RecognizedText other) => this == other;
        public override bool Equals(object obj) => obj is RecognizedText that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public float ImageAngle => global::ABI.Microsoft.Windows.Vision.IRecognizedTextMethods.get_ImageAngle(_objRef_global__Microsoft_Windows_Vision_IRecognizedText);

        public RecognizedLine[] Lines => global::ABI.Microsoft.Windows.Vision.IRecognizedTextMethods.get_Lines(_objRef_global__Microsoft_Windows_Vision_IRecognizedText);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Vision")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Vision.RecognizedWord))]
    [global::ABI.Microsoft.Windows.Vision.RecognizedWordRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IRecognizedWord))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(TextRecognitionContract), 65536u)]
    [global::Windows.Foundation.Metadata.Experimental]
    public sealed class RecognizedWord : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<RecognizedWord>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_Vision_IRecognizedWord => _inner;


        public static RecognizedWord FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<RecognizedWord>.FromAbi(thisPtr);
        }

        internal RecognizedWord(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.Vision.IRecognizedWordMethods.IID);

        }


        public static bool operator ==(RecognizedWord x, RecognizedWord y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(RecognizedWord x, RecognizedWord y) => !(x == y);
        public bool Equals(RecognizedWord other) => this == other;
        public override bool Equals(object obj) => obj is RecognizedWord that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public BoundingBox BoundingBox => global::ABI.Microsoft.Windows.Vision.IRecognizedWordMethods.get_BoundingBox(_objRef_global__Microsoft_Windows_Vision_IRecognizedWord);

        public float Confidence => global::ABI.Microsoft.Windows.Vision.IRecognizedWordMethods.get_Confidence(_objRef_global__Microsoft_Windows_Vision_IRecognizedWord);

        public string Text => global::ABI.Microsoft.Windows.Vision.IRecognizedWordMethods.get_Text(_objRef_global__Microsoft_Windows_Vision_IRecognizedWord);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::Windows.Foundation.Metadata.ContractVersion(65536u)]
    public enum TextRecognitionContract
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Vision")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Vision.TextRecognizer))]
    [global::ABI.Microsoft.Windows.Vision.TextRecognizerRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ITextRecognizer))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(TextRecognitionContract), 65536u)]
    [global::Windows.Foundation.Metadata.Experimental]
    public sealed class TextRecognizer : global::System.IDisposable, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<TextRecognizer>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_Vision_ITextRecognizer => _inner;
        private volatile IObjectReference ___objRef_global__System_IDisposable;
        private IObjectReference Make___objRef_global__System_IDisposable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_IDisposable, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.IDisposableMethods.IID), null);
            return ___objRef_global__System_IDisposable;
        }
        private IObjectReference _objRef_global__System_IDisposable => ___objRef_global__System_IDisposable ?? Make___objRef_global__System_IDisposable();



        public static I As<I>() => ActivationFactory.Get("Microsoft.Windows.Vision.TextRecognizer").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_Vision_ITextRecognizerStatics;
        private static IObjectReference _objRef_global__Microsoft_Windows_Vision_ITextRecognizerStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Windows_Vision_ITextRecognizerStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_Vision_ITextRecognizerStatics = ActivationFactory.Get("Microsoft.Windows.Vision.TextRecognizer", global::ABI.Microsoft.Windows.Vision.ITextRecognizerStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.Windows.AI.AIFeatureReadyState GetReadyState() => global::ABI.Microsoft.Windows.Vision.ITextRecognizerStaticsMethods.GetReadyState(_objRef_global__Microsoft_Windows_Vision_ITextRecognizerStatics);

        public static global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.AI.AIFeatureReadyResult, double> EnsureReadyAsync() => global::ABI.Microsoft.Windows.Vision.ITextRecognizerStaticsMethods.EnsureReadyAsync(_objRef_global__Microsoft_Windows_Vision_ITextRecognizerStatics);

        public static global::Windows.Foundation.IAsyncOperation<TextRecognizer> CreateAsync() => global::ABI.Microsoft.Windows.Vision.ITextRecognizerStaticsMethods.CreateAsync(_objRef_global__Microsoft_Windows_Vision_ITextRecognizerStatics);

        public static TextRecognizer FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<TextRecognizer>.FromAbi(thisPtr);
        }

        internal TextRecognizer(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.Vision.ITextRecognizerMethods.IID);

        }


        public static bool operator ==(TextRecognizer x, TextRecognizer y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(TextRecognizer x, TextRecognizer y) => !(x == y);
        public bool Equals(TextRecognizer other) => this == other;
        public override bool Equals(object obj) => obj is TextRecognizer that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.IAsyncOperation<RecognizedText> RecognizeTextFromImageAsync(global::Microsoft.Graphics.Imaging.ImageBuffer imageBuffer, TextRecognizerOptions options) => global::ABI.Microsoft.Windows.Vision.ITextRecognizerMethods.RecognizeTextFromImageAsync(_objRef_global__Microsoft_Windows_Vision_ITextRecognizer, imageBuffer, options);

        public RecognizedText RecognizeTextFromImage(global::Microsoft.Graphics.Imaging.ImageBuffer imageBuffer, TextRecognizerOptions options) => global::ABI.Microsoft.Windows.Vision.ITextRecognizerMethods.RecognizeTextFromImage(_objRef_global__Microsoft_Windows_Vision_ITextRecognizer, imageBuffer, options);

        public global::Windows.Foundation.IAsyncOperation<RecognizedText> RecognizeTextFromImageAsync(global::Microsoft.Graphics.Imaging.ImageBuffer imageBuffer, TextRecognizerOptions options, global::Microsoft.Windows.Workloads.WorkloadPriority priority) => global::ABI.Microsoft.Windows.Vision.ITextRecognizerMethods.RecognizeTextFromImageAsync(_objRef_global__Microsoft_Windows_Vision_ITextRecognizer, imageBuffer, options, priority);

        public RecognizedText RecognizeTextFromImage(global::Microsoft.Graphics.Imaging.ImageBuffer imageBuffer, TextRecognizerOptions options, global::Microsoft.Windows.Workloads.WorkloadPriority priority) => global::ABI.Microsoft.Windows.Vision.ITextRecognizerMethods.RecognizeTextFromImage(_objRef_global__Microsoft_Windows_Vision_ITextRecognizer, imageBuffer, options, priority);

        public void Dispose() => global::ABI.System.IDisposableMethods.Dispose(_objRef_global__System_IDisposable);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Vision")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Vision.TextRecognizerOptions))]
    [global::ABI.Microsoft.Windows.Vision.TextRecognizerOptionsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ITextRecognizerOptions))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(TextRecognitionContract), 65536u)]
    [global::Windows.Foundation.Metadata.Experimental]
    public sealed class TextRecognizerOptions : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<TextRecognizerOptions>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_Vision_ITextRecognizerOptions => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_Vision_TextRecognizerOptions;
        private static IObjectReference _objRef_global__Microsoft_Windows_Vision_TextRecognizerOptions
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Windows_Vision_TextRecognizerOptions;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_Vision_TextRecognizerOptions = ActivationFactory.Get("Microsoft.Windows.Vision.TextRecognizerOptions");
                }
            }
        }

        public TextRecognizerOptions() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_Windows_Vision_TextRecognizerOptions, global::ABI.Microsoft.Windows.Vision.ITextRecognizerOptionsMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static TextRecognizerOptions FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<TextRecognizerOptions>.FromAbi(thisPtr);
        }

        internal TextRecognizerOptions(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.Vision.ITextRecognizerOptionsMethods.IID);

        }


        public static bool operator ==(TextRecognizerOptions x, TextRecognizerOptions y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(TextRecognizerOptions x, TextRecognizerOptions y) => !(x == y);
        public bool Equals(TextRecognizerOptions other) => this == other;
        public override bool Equals(object obj) => obj is TextRecognizerOptions that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Graphics.SizeInt32 MaxAnalysisSize
        {
            get => global::ABI.Microsoft.Windows.Vision.ITextRecognizerOptionsMethods.get_MaxAnalysisSize(_objRef_global__Microsoft_Windows_Vision_ITextRecognizerOptions);
            set => global::ABI.Microsoft.Windows.Vision.ITextRecognizerOptionsMethods.set_MaxAnalysisSize(_objRef_global__Microsoft_Windows_Vision_ITextRecognizerOptions, value);
        }

        public uint MaxLineCount
        {
            get => global::ABI.Microsoft.Windows.Vision.ITextRecognizerOptionsMethods.get_MaxLineCount(_objRef_global__Microsoft_Windows_Vision_ITextRecognizerOptions);
            set => global::ABI.Microsoft.Windows.Vision.ITextRecognizerOptionsMethods.set_MaxLineCount(_objRef_global__Microsoft_Windows_Vision_ITextRecognizerOptions, value);
        }

        public OrientationDetectionOptions OrientationDetection
        {
            get => global::ABI.Microsoft.Windows.Vision.ITextRecognizerOptionsMethods.get_OrientationDetection(_objRef_global__Microsoft_Windows_Vision_ITextRecognizerOptions);
            set => global::ABI.Microsoft.Windows.Vision.ITextRecognizerOptionsMethods.set_OrientationDetection(_objRef_global__Microsoft_Windows_Vision_ITextRecognizerOptions, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.Windows.Vision
{
    internal static class IRecognizedLineMethods
    {

        internal static unsafe global::Microsoft.Windows.Vision.BoundingBox get_BoundingBox(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.Vision.BoundingBox __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.Vision.BoundingBox*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.Windows.Vision.RecognizedLineStyle get_Style(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.Vision.RecognizedLineStyle __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.Vision.RecognizedLineStyle*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe string get_Text(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Windows.Vision.RecognizedWord[] get_Words(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval_length = default;
            IntPtr __retval_data = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval_length, &__retval_data));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Windows.Vision.RecognizedWord.FromAbiArray((__retval_length, __retval_data));
            }
            finally
            {
                global::ABI.Microsoft.Windows.Vision.RecognizedWord.DisposeAbiArray((__retval_length, __retval_data));
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x61, 0x30, 0xBC, 0xD2, 0x51, 0xC7, 0xC2, 0x52, 0x90, 0x2A, 0x72, 0xB2, 0xFE, 0x9B, 0xF1, 0xE3 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D2BC3061-C751-52C2-902A-72B2FE9BF1E3")]
    internal interface IRecognizedLine : global::Microsoft.Windows.Vision.IRecognizedLine
    {
    }
    internal static class IRecognizedTextMethods
    {

        internal static unsafe float get_ImageAngle(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            float __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.Windows.Vision.RecognizedLine[] get_Lines(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval_length = default;
            IntPtr __retval_data = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval_length, &__retval_data));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Windows.Vision.RecognizedLine.FromAbiArray((__retval_length, __retval_data));
            }
            finally
            {
                global::ABI.Microsoft.Windows.Vision.RecognizedLine.DisposeAbiArray((__retval_length, __retval_data));
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x60, 0x17, 0x24, 0x35, 0x1D, 0xDC, 0x4E, 0x56, 0xB3, 0xD8, 0xC4, 0x93, 0x42, 0x12, 0x13, 0x73 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("35241760-DC1D-564E-B3D8-C49342121373")]
    internal interface IRecognizedText : global::Microsoft.Windows.Vision.IRecognizedText
    {
    }
    internal static class IRecognizedWordMethods
    {

        internal static unsafe global::Microsoft.Windows.Vision.BoundingBox get_BoundingBox(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.Vision.BoundingBox __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.Vision.BoundingBox*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe float get_Confidence(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            float __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe string get_Text(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x29, 0x89, 0x1B, 0xA7, 0xC2, 0xC0, 0xAA, 0x56, 0x82, 0x5A, 0x55, 0x6F, 0x5F, 0xAF, 0x44, 0xD5 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A71B8929-C0C2-56AA-825A-556F5FAF44D5")]
    internal interface IRecognizedWord : global::Microsoft.Windows.Vision.IRecognizedWord
    {
    }
    internal static class ITextRecognizerMethods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.Vision.RecognizedText> RecognizeTextFromImageAsync(IObjectReference _obj, global::Microsoft.Graphics.Imaging.ImageBuffer imageBuffer, global::Microsoft.Windows.Vision.TextRecognizerOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __imageBuffer = default;
            ObjectReferenceValue __options = default;
            IntPtr __retval = default;
            try
            {
                __imageBuffer = global::ABI.Microsoft.Graphics.Imaging.ImageBuffer.CreateMarshaler2(imageBuffer);
                __options = global::ABI.Microsoft.Windows.Vision.TextRecognizerOptions.CreateMarshaler2(options);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__imageBuffer), MarshalInspectable<object>.GetAbi(__options), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Windows_Vision_RecognizedText.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.Vision.RecognizedText>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__imageBuffer);
                MarshalInspectable<object>.DisposeMarshaler(__options);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.Vision.RecognizedText>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Windows.Vision.RecognizedText RecognizeTextFromImage(IObjectReference _obj, global::Microsoft.Graphics.Imaging.ImageBuffer imageBuffer, global::Microsoft.Windows.Vision.TextRecognizerOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __imageBuffer = default;
            ObjectReferenceValue __options = default;
            IntPtr __retval = default;
            try
            {
                __imageBuffer = global::ABI.Microsoft.Graphics.Imaging.ImageBuffer.CreateMarshaler2(imageBuffer);
                __options = global::ABI.Microsoft.Windows.Vision.TextRecognizerOptions.CreateMarshaler2(options);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__imageBuffer), MarshalInspectable<object>.GetAbi(__options), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Windows.Vision.RecognizedText.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__imageBuffer);
                MarshalInspectable<object>.DisposeMarshaler(__options);
                global::ABI.Microsoft.Windows.Vision.RecognizedText.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.Vision.RecognizedText> RecognizeTextFromImageAsync(IObjectReference _obj, global::Microsoft.Graphics.Imaging.ImageBuffer imageBuffer, global::Microsoft.Windows.Vision.TextRecognizerOptions options, global::Microsoft.Windows.Workloads.WorkloadPriority priority)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __imageBuffer = default;
            ObjectReferenceValue __options = default;
            IntPtr __retval = default;
            try
            {
                __imageBuffer = global::ABI.Microsoft.Graphics.Imaging.ImageBuffer.CreateMarshaler2(imageBuffer);
                __options = global::ABI.Microsoft.Windows.Vision.TextRecognizerOptions.CreateMarshaler2(options);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, global::Microsoft.Windows.Workloads.WorkloadPriority, IntPtr*, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__imageBuffer), MarshalInspectable<object>.GetAbi(__options), priority, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Windows_Vision_RecognizedText.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.Vision.RecognizedText>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__imageBuffer);
                MarshalInspectable<object>.DisposeMarshaler(__options);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.Vision.RecognizedText>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Windows.Vision.RecognizedText RecognizeTextFromImage(IObjectReference _obj, global::Microsoft.Graphics.Imaging.ImageBuffer imageBuffer, global::Microsoft.Windows.Vision.TextRecognizerOptions options, global::Microsoft.Windows.Workloads.WorkloadPriority priority)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __imageBuffer = default;
            ObjectReferenceValue __options = default;
            IntPtr __retval = default;
            try
            {
                __imageBuffer = global::ABI.Microsoft.Graphics.Imaging.ImageBuffer.CreateMarshaler2(imageBuffer);
                __options = global::ABI.Microsoft.Windows.Vision.TextRecognizerOptions.CreateMarshaler2(options);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, global::Microsoft.Windows.Workloads.WorkloadPriority, IntPtr*, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__imageBuffer), MarshalInspectable<object>.GetAbi(__options), priority, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Windows.Vision.RecognizedText.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__imageBuffer);
                MarshalInspectable<object>.DisposeMarshaler(__options);
                global::ABI.Microsoft.Windows.Vision.RecognizedText.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD7, 0xDE, 0xE2, 0xB6, 0x15, 0xBC, 0x1E, 0x52, 0x9A, 0x3A, 0xD8, 0x3C, 0xD, 0xCF, 0x5C, 0xA0 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B6E2DED7-BC15-521E-9A3A-D83C0DCF5CA0")]
    internal interface ITextRecognizer : global::Microsoft.Windows.Vision.ITextRecognizer
    {
    }
    internal static class ITextRecognizerOptionsMethods
    {

        internal static unsafe global::Windows.Graphics.SizeInt32 get_MaxAnalysisSize(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Graphics.SizeInt32 __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Graphics.SizeInt32*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_MaxAnalysisSize(IObjectReference _obj, global::Windows.Graphics.SizeInt32 value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Graphics.SizeInt32, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe uint get_MaxLineCount(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_MaxLineCount(IObjectReference _obj, uint value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.Windows.Vision.OrientationDetectionOptions get_OrientationDetection(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.Vision.OrientationDetectionOptions __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.Vision.OrientationDetectionOptions*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_OrientationDetection(IObjectReference _obj, global::Microsoft.Windows.Vision.OrientationDetectionOptions value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.Vision.OrientationDetectionOptions, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC2, 0xDE, 0xC1, 0x99, 0xE8, 0x98, 0x4D, 0x5D, 0xB0, 0xA4, 0x85, 0x49, 0xAD, 0x78, 0xFF, 0xDE };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("99C1DEC2-98E8-5D4D-B0A4-8549AD78FFDE")]
    internal interface ITextRecognizerOptions : global::Microsoft.Windows.Vision.ITextRecognizerOptions
    {
    }
    internal static class ITextRecognizerStaticsMethods
    {


        internal static unsafe global::Microsoft.Windows.AI.AIFeatureReadyState GetReadyState(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.AI.AIFeatureReadyState __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.AI.AIFeatureReadyState*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.AI.AIFeatureReadyResult, double> EnsureReadyAsync(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_AI_AIFeatureReadyResult__Double.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.AI.AIFeatureReadyResult, double>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.AI.AIFeatureReadyResult, double>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.Vision.TextRecognizer> CreateAsync(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Windows_Vision_TextRecognizer.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.Vision.TextRecognizer>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.Vision.TextRecognizer>>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x4B, 0x96, 0x50, 0xD3, 0x23, 0x9C, 0x65, 0x53, 0xAF, 0xDB, 0x3C, 0x6A, 0x9F, 0x89, 0xBF, 0x8F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D350964B-9C23-5365-AFDB-3C6A9F89BF8F")]
    internal interface ITextRecognizerStatics : global::Microsoft.Windows.Vision.ITextRecognizerStatics
    {
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct RecognizedLine
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.Vision.RecognizedLine obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.Vision.RecognizedLine>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.Vision.IRecognizedLineMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.Vision.RecognizedLine obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.Vision.IRecognizedLineMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.Vision.RecognizedLine FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.Vision.RecognizedLine.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.Vision.RecognizedLine obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.Vision.RecognizedLine>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.Vision.RecognizedLine[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Vision.RecognizedLine>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Vision.RecognizedLine>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.Vision.RecognizedLine[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Vision.RecognizedLine>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.Vision.RecognizedLine[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Vision.RecognizedLine>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.Vision.RecognizedLine[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Vision.RecognizedLine>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.Vision.RecognizedLine>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.Vision.RecognizedLine>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class RecognizedLineRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.Vision.RecognizedLine(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct RecognizedText
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.Vision.RecognizedText obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.Vision.RecognizedText>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.Vision.IRecognizedTextMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.Vision.RecognizedText obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.Vision.IRecognizedTextMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.Vision.RecognizedText FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.Vision.RecognizedText.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.Vision.RecognizedText obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.Vision.RecognizedText>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.Vision.RecognizedText[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Vision.RecognizedText>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Vision.RecognizedText>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.Vision.RecognizedText[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Vision.RecognizedText>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.Vision.RecognizedText[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Vision.RecognizedText>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.Vision.RecognizedText[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Vision.RecognizedText>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.Vision.RecognizedText>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.Vision.RecognizedText>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class RecognizedTextRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.Vision.RecognizedText(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct RecognizedWord
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.Vision.RecognizedWord obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.Vision.RecognizedWord>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.Vision.IRecognizedWordMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.Vision.RecognizedWord obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.Vision.IRecognizedWordMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.Vision.RecognizedWord FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.Vision.RecognizedWord.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.Vision.RecognizedWord obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.Vision.RecognizedWord>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.Vision.RecognizedWord[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Vision.RecognizedWord>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Vision.RecognizedWord>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.Vision.RecognizedWord[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Vision.RecognizedWord>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.Vision.RecognizedWord[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Vision.RecognizedWord>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.Vision.RecognizedWord[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Vision.RecognizedWord>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.Vision.RecognizedWord>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.Vision.RecognizedWord>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class RecognizedWordRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.Vision.RecognizedWord(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct TextRecognizer
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.Vision.TextRecognizer obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.Vision.TextRecognizer>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.Vision.ITextRecognizerMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.Vision.TextRecognizer obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.Vision.ITextRecognizerMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.Vision.TextRecognizer FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.Vision.TextRecognizer.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.Vision.TextRecognizer obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.Vision.TextRecognizer>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.Vision.TextRecognizer[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Vision.TextRecognizer>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Vision.TextRecognizer>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.Vision.TextRecognizer[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Vision.TextRecognizer>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.Vision.TextRecognizer[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Vision.TextRecognizer>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.Vision.TextRecognizer[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Vision.TextRecognizer>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.Vision.TextRecognizer>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.Vision.TextRecognizer>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class TextRecognizerRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.Vision.TextRecognizer(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct TextRecognizerOptions
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.Vision.TextRecognizerOptions obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.Vision.TextRecognizerOptions>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.Vision.ITextRecognizerOptionsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.Vision.TextRecognizerOptions obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.Vision.ITextRecognizerOptionsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.Vision.TextRecognizerOptions FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.Vision.TextRecognizerOptions.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.Vision.TextRecognizerOptions obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.Vision.TextRecognizerOptions>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.Vision.TextRecognizerOptions[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Vision.TextRecognizerOptions>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Vision.TextRecognizerOptions>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.Vision.TextRecognizerOptions[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Vision.TextRecognizerOptions>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.Vision.TextRecognizerOptions[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Vision.TextRecognizerOptions>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.Vision.TextRecognizerOptions[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Vision.TextRecognizerOptions>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.Vision.TextRecognizerOptions>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.Vision.TextRecognizerOptions>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class TextRecognizerOptionsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.Vision.TextRecognizerOptions(inspectable.ObjRef);
    }
}
#pragma warning restore CA1416
