//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.Windows.Management.Deployment
{
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.AddPackageOptions))]
    [global::ABI.Microsoft.Windows.Management.Deployment.AddPackageOptionsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IAddPackageOptions))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    public sealed class AddPackageOptions : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<AddPackageOptions>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_Management_Deployment_AddPackageOptions;
        private static IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_AddPackageOptions
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Windows_Management_Deployment_AddPackageOptions;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_Management_Deployment_AddPackageOptions = ActivationFactory.Get("Microsoft.Windows.Management.Deployment.AddPackageOptions");
                }
            }
        }

        public AddPackageOptions() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_Windows_Management_Deployment_AddPackageOptions, global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static AddPackageOptions FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<AddPackageOptions>.FromAbi(thisPtr);
        }

        internal AddPackageOptions(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.IID);

        }


        public static bool operator ==(AddPackageOptions x, AddPackageOptions y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(AddPackageOptions x, AddPackageOptions y) => !(x == y);
        public bool Equals(AddPackageOptions other) => this == other;
        public override bool Equals(object obj) => obj is AddPackageOptions that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool AllowUnsigned
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.get_AllowUnsigned(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.set_AllowUnsigned(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions, value);
        }

        public bool DeferRegistrationWhenPackagesAreInUse
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.get_DeferRegistrationWhenPackagesAreInUse(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.set_DeferRegistrationWhenPackagesAreInUse(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions, value);
        }

        public global::System.Collections.Generic.IList<global::System.Uri> DependencyPackageUris => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.get_DependencyPackageUris(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions);

        public bool DeveloperMode
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.get_DeveloperMode(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.set_DeveloperMode(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions, value);
        }

        public global::System.Collections.Generic.IDictionary<global::System.Uri, string> ExpectedDigests => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.get_ExpectedDigests(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions);

        public global::System.Uri ExternalLocationUri
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.get_ExternalLocationUri(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.set_ExternalLocationUri(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions, value);
        }

        public bool ForceAppShutdown
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.get_ForceAppShutdown(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.set_ForceAppShutdown(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions, value);
        }

        public bool ForceTargetAppShutdown
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.get_ForceTargetAppShutdown(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.set_ForceTargetAppShutdown(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions, value);
        }

        public bool ForceUpdateFromAnyVersion
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.get_ForceUpdateFromAnyVersion(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.set_ForceUpdateFromAnyVersion(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions, value);
        }

        public bool InstallAllResources
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.get_InstallAllResources(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.set_InstallAllResources(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions, value);
        }

        public bool IsExpectedDigestsSupported => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.get_IsExpectedDigestsSupported(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions);

        public bool IsLimitToExistingPackagesSupported => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.get_IsLimitToExistingPackagesSupported(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions);

        public bool LimitToExistingPackages
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.get_LimitToExistingPackages(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.set_LimitToExistingPackages(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions, value);
        }

        public global::System.Collections.Generic.IList<string> OptionalPackageFamilyNames => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.get_OptionalPackageFamilyNames(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions);

        public global::System.Collections.Generic.IList<global::System.Uri> OptionalPackageUris => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.get_OptionalPackageUris(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions);

        public global::System.Collections.Generic.IList<global::System.Uri> RelatedPackageUris => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.get_RelatedPackageUris(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions);

        public bool RequiredContentGroupOnly
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.get_RequiredContentGroupOnly(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.set_RequiredContentGroupOnly(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions, value);
        }

        public bool RetainFilesOnFailure
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.get_RetainFilesOnFailure(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.set_RetainFilesOnFailure(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions, value);
        }

        public bool StageInPlace
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.get_StageInPlace(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.set_StageInPlace(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions, value);
        }

        public StubPackageOption StubPackageOption
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.get_StubPackageOption(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.set_StubPackageOption(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions, value);
        }

        public PackageVolume TargetVolume
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.get_TargetVolume(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.set_TargetVolume(_objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.EnsureReadyOptions))]
    [global::ABI.Microsoft.Windows.Management.Deployment.EnsureReadyOptionsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IEnsureReadyOptions))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    public sealed class EnsureReadyOptions : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<EnsureReadyOptions>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IEnsureReadyOptions => _inner;
        private volatile IObjectReference ___objRef_global__Microsoft_Windows_Management_Deployment_IEnsureReadyOptions2;
        private IObjectReference Make___objRef_global__Microsoft_Windows_Management_Deployment_IEnsureReadyOptions2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Windows_Management_Deployment_IEnsureReadyOptions2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Windows.Management.Deployment.IEnsureReadyOptions2Methods.IID), null);
            return ___objRef_global__Microsoft_Windows_Management_Deployment_IEnsureReadyOptions2;
        }
        private IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IEnsureReadyOptions2 => ___objRef_global__Microsoft_Windows_Management_Deployment_IEnsureReadyOptions2 ?? Make___objRef_global__Microsoft_Windows_Management_Deployment_IEnsureReadyOptions2();



        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_Management_Deployment_EnsureReadyOptions;
        private static IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_EnsureReadyOptions
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Windows_Management_Deployment_EnsureReadyOptions;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_Management_Deployment_EnsureReadyOptions = ActivationFactory.Get("Microsoft.Windows.Management.Deployment.EnsureReadyOptions");
                }
            }
        }

        public EnsureReadyOptions() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_Windows_Management_Deployment_EnsureReadyOptions, global::ABI.Microsoft.Windows.Management.Deployment.IEnsureReadyOptionsMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static EnsureReadyOptions FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<EnsureReadyOptions>.FromAbi(thisPtr);
        }

        internal EnsureReadyOptions(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.Management.Deployment.IEnsureReadyOptionsMethods.IID);

        }


        public static bool operator ==(EnsureReadyOptions x, EnsureReadyOptions y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(EnsureReadyOptions x, EnsureReadyOptions y) => !(x == y);
        public bool Equals(EnsureReadyOptions other) => this == other;
        public override bool Equals(object obj) => obj is EnsureReadyOptions that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public AddPackageOptions AddPackageOptions => global::ABI.Microsoft.Windows.Management.Deployment.IEnsureReadyOptionsMethods.get_AddPackageOptions(_objRef_global__Microsoft_Windows_Management_Deployment_IEnsureReadyOptions);

        public bool RegisterNewerIfAvailable
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IEnsureReadyOptions2Methods.get_RegisterNewerIfAvailable(_objRef_global__Microsoft_Windows_Management_Deployment_IEnsureReadyOptions2);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IEnsureReadyOptions2Methods.set_RegisterNewerIfAvailable(_objRef_global__Microsoft_Windows_Management_Deployment_IEnsureReadyOptions2, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")][Guid("E3DB7F39-F9D0-5884-BDEF-6153B54574A3")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptions))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    internal interface IAddPackageOptions
    {
        bool AllowUnsigned { get; set; }
        bool DeferRegistrationWhenPackagesAreInUse { get; set; }
        global::System.Collections.Generic.IList<global::System.Uri> DependencyPackageUris { get; }
        bool DeveloperMode { get; set; }
        global::System.Collections.Generic.IDictionary<global::System.Uri, string> ExpectedDigests { get; }
        global::System.Uri ExternalLocationUri { get; set; }
        bool ForceAppShutdown { get; set; }
        bool ForceTargetAppShutdown { get; set; }
        bool ForceUpdateFromAnyVersion { get; set; }
        bool InstallAllResources { get; set; }
        bool IsExpectedDigestsSupported { get; }
        bool IsLimitToExistingPackagesSupported { get; }
        bool LimitToExistingPackages { get; set; }
        global::System.Collections.Generic.IList<string> OptionalPackageFamilyNames { get; }
        global::System.Collections.Generic.IList<global::System.Uri> OptionalPackageUris { get; }
        global::System.Collections.Generic.IList<global::System.Uri> RelatedPackageUris { get; }
        bool RequiredContentGroupOnly { get; set; }
        bool RetainFilesOnFailure { get; set; }
        bool StageInPlace { get; set; }
        StubPackageOption StubPackageOption { get; set; }
        PackageVolume TargetVolume { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")][Guid("20102D03-EC44-5C2B-8FD6-1104DC99755D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.IEnsureReadyOptions))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    internal interface IEnsureReadyOptions
    {
        AddPackageOptions AddPackageOptions { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")][Guid("EEFA9259-B13A-50A3-919E-AE116D83C0DA")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.IEnsureReadyOptions2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 131072u)]
    internal interface IEnsureReadyOptions2
    {
        bool RegisterNewerIfAvailable { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")][Guid("F41717D8-5AB2-57AC-83CD-D0C48CC784CD")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManager))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    internal interface IPackageDeploymentManager
    {
        bool IsPackageReady(string package);
        bool IsPackageReadyByUri(global::System.Uri packageUri);
        bool IsPackageSetReady(PackageSet packageSet);
        global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> EnsurePackageReadyAsync(string package, EnsureReadyOptions options);
        global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> EnsurePackageReadyByUriAsync(global::System.Uri packageUri, EnsureReadyOptions options);
        global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> EnsurePackageSetReadyAsync(PackageSet packageSet, EnsureReadyOptions options);
        global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> AddPackageAsync(string package, AddPackageOptions options);
        global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> AddPackageByUriAsync(global::System.Uri packageUri, AddPackageOptions options);
        global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> AddPackageSetAsync(PackageSet packageSet, AddPackageOptions options);
        global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> StagePackageAsync(string package, StagePackageOptions options);
        global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> StagePackageByUriAsync(global::System.Uri packageUri, StagePackageOptions options);
        global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> StagePackageSetAsync(PackageSet packageSet, StagePackageOptions options);
        global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> RegisterPackageAsync(string package, RegisterPackageOptions options);
        global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> RegisterPackageByUriAsync(global::System.Uri packageUri, RegisterPackageOptions options);
        global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> RegisterPackageSetAsync(PackageSet packageSet, RegisterPackageOptions options);
        global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> RemovePackageAsync(string package, RemovePackageOptions options);
        global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> RemovePackageByFullNameAsync(string packageFullName, RemovePackageOptions options);
        global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> RemovePackageByFamilyNameAsync(string packageFamilyName, RemovePackageOptions options);
        global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> RemovePackageByUriAsync(global::System.Uri packageUri, RemovePackageOptions options);
        global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> RemovePackageSetAsync(PackageSet packageSet, RemovePackageOptions options);
        global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> ResetPackageAsync(string package);
        global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> ResetPackageByUriAsync(global::System.Uri packageUri);
        global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> ResetPackageSetAsync(PackageSet packageSet);
        global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> RepairPackageAsync(string package);
        global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> RepairPackageByUriAsync(global::System.Uri packageUri);
        global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> RepairPackageSetAsync(PackageSet packageSet);
        global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> ProvisionPackageAsync(string package, ProvisionPackageOptions options);
        global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> ProvisionPackageByUriAsync(global::System.Uri packageUri, ProvisionPackageOptions options);
        global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> ProvisionPackageSetAsync(PackageSet packageSet, ProvisionPackageOptions options);
        global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> DeprovisionPackageAsync(string package);
        global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> DeprovisionPackageByUriAsync(global::System.Uri packageUri);
        global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> DeprovisionPackageSetAsync(PackageSet packageSet);
        bool IsPackageRegistrationPending(string packageFamilyName);
        bool IsPackageRegistrationPendingForUser(string userSecurityId, string packageFamilyName);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")][Guid("6FC6D0F3-F9DD-5C14-9D3F-077165EDDF98")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManager2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 131072u)]
    internal interface IPackageDeploymentManager2
    {
        PackageReadyOrNewerAvailableStatus IsPackageReadyOrNewerAvailable(string package);
        PackageReadyOrNewerAvailableStatus IsPackageReadyOrNewerAvailableByUri(global::System.Uri packageUri);
        PackageReadyOrNewerAvailableStatus IsPackageSetReadyOrNewerAvailable(PackageSet packageSet);
        bool IsPackageProvisioned(string package);
        bool IsPackageProvisionedByUri(global::System.Uri packageUri);
        bool IsPackageSetProvisioned(PackageSet packageSet);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")][Guid("DBDA4AC6-CA28-59B8-9FC6-DBFB5765F1C2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    internal interface IPackageDeploymentManagerStatics
    {
        PackageDeploymentManager GetDefault();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")][Guid("0EC31486-00B5-5937-8CD4-759260FDC4A2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerStatics2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 131072u)]
    internal interface IPackageDeploymentManagerStatics2
    {
        bool IsPackageDeploymentFeatureSupported(PackageDeploymentFeature feature);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")][Guid("D6B99601-18C2-599E-8BD1-40A9310AD263")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentResult))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    internal interface IPackageDeploymentResult
    {
        Guid ActivityId { get; }
        global::System.Exception Error { get; }
        string ErrorText { get; }
        global::System.Exception ExtendedError { get; }
        PackageDeploymentStatus Status { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")][Guid("6BF0FD29-6C2A-58D1-AF0C-ABD2EAC45E29")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.IPackageRuntimeManager))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    internal interface IPackageRuntimeManager
    {
        [global::Windows.Foundation.Metadata.Overload(@"AddPackageSet")]
        PackageSetRuntimeDisposition AddPackageSet(PackageSet packageSet);
        [global::Windows.Foundation.Metadata.Overload(@"AddPackageSetWithOptions")]
        PackageSetRuntimeDisposition AddPackageSet(PackageSet packageSet, global::Microsoft.Windows.ApplicationModel.DynamicDependency.CreatePackageDependencyOptions createOptions, global::Microsoft.Windows.ApplicationModel.DynamicDependency.AddPackageDependencyOptions addOptions);
        void RemovePackageSet(PackageSetRuntimeDisposition packageSetRuntimeDisposition);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")][Guid("790947DE-01D4-5858-AA69-9C9390FB7D3E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.IPackageRuntimeManagerStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    internal interface IPackageRuntimeManagerStatics
    {
        PackageRuntimeManager GetDefault();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")][Guid("229FDF93-8529-5F8D-988C-AF8A39AD46F7")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.IPackageSet))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    internal interface IPackageSet
    {
        string Id { get; set; }
        global::System.Collections.Generic.IList<PackageSetItem> Items { get; }
        global::System.Uri PackageUri { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")][Guid("8F254E15-C371-550F-B4E8-3F0BB1AE375F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetItem))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    internal interface IPackageSetItem
    {
        string Id { get; set; }
        global::Windows.ApplicationModel.PackageVersion MinVersion { get; set; }
        string PackageFamilyName { get; set; }
        global::System.Uri PackageUri { get; set; }
        global::Microsoft.Windows.ApplicationModel.DynamicDependency.PackageDependencyProcessorArchitectures ProcessorArchitectureFilter { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")][Guid("7A7F9F70-D416-5F83-A3CD-027BF3D2ABFD")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetItemRuntimeDisposition))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    internal interface IPackageSetItemRuntimeDisposition
    {
        global::Microsoft.Windows.ApplicationModel.DynamicDependency.PackageDependencyContextId PackageDependencyContextId { get; }
        string PackageDependencyId { get; }
        string PackageFullName { get; }
        string PackageSetItemId { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")][Guid("C13F1088-EA36-5DB3-BCDD-E6D59E6C9B71")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetRuntimeDisposition))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    internal interface IPackageSetRuntimeDisposition
    {
        string PackageSetId { get; set; }
        global::System.Collections.Generic.IList<PackageSetItemRuntimeDisposition> PackageSetItemRuntimeDispositions { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")][Guid("9C9710F4-795A-58B3-93F4-C991C4329C49")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.IPackageVolume))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    internal interface IPackageVolume
    {
        bool IsRepairNeeded();
        void Repair();
        bool IsAppxInstallSupported { get; }
        bool IsFullTrustPackageSupported { get; }
        bool IsSystemVolume { get; }
        string MountPoint { get; }
        string Name { get; }
        string PackageStorePath { get; }
        bool SupportsHardLinks { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")][Guid("4C731835-8BC0-5313-9B56-8A4100EAEA01")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.IPackageVolumeStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    internal interface IPackageVolumeStatics
    {
        global::System.Collections.Generic.IList<PackageVolume> FindPackageVolumes();
        PackageVolume FindPackageVolumeByPath(string packageStorePath);
        PackageVolume FindPackageVolumeByName(string name);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")][Guid("415E300F-D1E3-581E-A114-76D277B06136")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.IProvisionPackageOptions))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    internal interface IProvisionPackageOptions
    {
        bool IsOptionalPackageFamilyNamesSupported { get; }
        bool IsProjectionOrderPackageFamilyNamesSupported { get; }
        global::System.Collections.Generic.IList<string> OptionalPackageFamilyNames { get; }
        global::System.Collections.Generic.IList<string> ProjectionOrderPackageFamilyNames { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")][Guid("83068623-2046-505F-8425-55226C0F84CC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptions))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    internal interface IRegisterPackageOptions
    {
        bool AllowUnsigned { get; set; }
        PackageVolume AppDataVolume { get; set; }
        bool DeferRegistrationWhenPackagesAreInUse { get; set; }
        global::System.Collections.Generic.IList<string> DependencyPackageFamilyNames { get; }
        global::System.Collections.Generic.IList<global::System.Uri> DependencyPackageUris { get; }
        bool DeveloperMode { get; set; }
        global::System.Collections.Generic.IDictionary<global::System.Uri, string> ExpectedDigests { get; }
        global::System.Uri ExternalLocationUri { get; set; }
        bool ForceAppShutdown { get; set; }
        bool ForceTargetAppShutdown { get; set; }
        bool ForceUpdateFromAnyVersion { get; set; }
        bool InstallAllResources { get; set; }
        bool IsExpectedDigestsSupported { get; }
        global::System.Collections.Generic.IList<string> OptionalPackageFamilyNames { get; }
        bool StageInPlace { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")][Guid("E7C90595-9A44-5046-8EBF-41ED326B200E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.IRemovePackageOptions))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    internal interface IRemovePackageOptions
    {
        bool FailIfNotFound { get; set; }
        bool PreserveApplicationData { get; set; }
        bool PreserveRoamableApplicationData { get; set; }
        bool RemoveForAllUsers { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")][Guid("9B6B3203-FD7C-5EAD-A9D6-AB2E8566BE5E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.IStagePackageOptions))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    internal interface IStagePackageOptions
    {
        bool AllowUnsigned { get; set; }
        global::System.Collections.Generic.IList<global::System.Uri> DependencyPackageUris { get; }
        bool DeveloperMode { get; set; }
        global::System.Collections.Generic.IDictionary<global::System.Uri, string> ExpectedDigests { get; }
        global::System.Uri ExternalLocationUri { get; set; }
        bool ForceUpdateFromAnyVersion { get; set; }
        bool InstallAllResources { get; set; }
        bool IsExpectedDigestsSupported { get; }
        global::System.Collections.Generic.IList<string> OptionalPackageFamilyNames { get; }
        global::System.Collections.Generic.IList<global::System.Uri> OptionalPackageUris { get; }
        global::System.Collections.Generic.IList<global::System.Uri> RelatedPackageUris { get; }
        bool RequiredContentGroupOnly { get; set; }
        bool StageInPlace { get; set; }
        StubPackageOption StubPackageOption { get; set; }
        PackageVolume TargetVolume { get; set; }
    }
    [global::Windows.Foundation.Metadata.ContractVersion(131072u)]
    public enum PackageDeploymentContract
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<PackageDeploymentFeature>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 131072u)]
    public enum PackageDeploymentFeature : int
    {
        PackageUriScheme_ms_uup = unchecked((int)0x1),
        IsPackageReadyOrNewerAvailable = unchecked((int)0x2),
        RemovePackageByUri = unchecked((int)0x3),
        ResetPackage = unchecked((int)0x4),
        RepairPackage = unchecked((int)0x5),
        ProvisionPackage_Framework = unchecked((int)0x6),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.PackageDeploymentManager))]
    [global::ABI.Microsoft.Windows.Management.Deployment.PackageDeploymentManagerRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPackageDeploymentManager))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    public sealed class PackageDeploymentManager : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PackageDeploymentManager>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager => _inner;
        private volatile IObjectReference ___objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager2;
        private IObjectReference Make___objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManager2Methods.IID), null);
            return ___objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager2;
        }
        private IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager2 => ___objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager2 ?? Make___objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager2();



        public static I As<I>() => ActivationFactory.Get("Microsoft.Windows.Management.Deployment.PackageDeploymentManager").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManagerStatics;
        private static IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManagerStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManagerStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManagerStatics = ActivationFactory.Get("Microsoft.Windows.Management.Deployment.PackageDeploymentManager", global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerStaticsMethods.IID);
                }
            }
        }

        public static PackageDeploymentManager GetDefault() => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerStaticsMethods.GetDefault(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManagerStatics);

        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManagerStatics2;
        private static IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManagerStatics2
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManagerStatics2;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManagerStatics2 = ActivationFactory.Get("Microsoft.Windows.Management.Deployment.PackageDeploymentManager", global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerStatics2Methods.IID);
                }
            }
        }

        public static bool IsPackageDeploymentFeatureSupported(PackageDeploymentFeature feature) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerStatics2Methods.IsPackageDeploymentFeatureSupported(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManagerStatics2, feature);

        public static PackageDeploymentManager FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PackageDeploymentManager>.FromAbi(thisPtr);
        }

        internal PackageDeploymentManager(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.IID);

        }


        public static bool operator ==(PackageDeploymentManager x, PackageDeploymentManager y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PackageDeploymentManager x, PackageDeploymentManager y) => !(x == y);
        public bool Equals(PackageDeploymentManager other) => this == other;
        public override bool Equals(object obj) => obj is PackageDeploymentManager that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool IsPackageReady(string package) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.IsPackageReady(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, package);

        public bool IsPackageReadyByUri(global::System.Uri packageUri) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.IsPackageReadyByUri(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, packageUri);

        public bool IsPackageSetReady(PackageSet packageSet) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.IsPackageSetReady(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, packageSet);

        public global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> EnsurePackageReadyAsync(string package, EnsureReadyOptions options) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.EnsurePackageReadyAsync(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, package, options);

        public global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> EnsurePackageReadyByUriAsync(global::System.Uri packageUri, EnsureReadyOptions options) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.EnsurePackageReadyByUriAsync(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, packageUri, options);

        public global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> EnsurePackageSetReadyAsync(PackageSet packageSet, EnsureReadyOptions options) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.EnsurePackageSetReadyAsync(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, packageSet, options);

        public global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> AddPackageAsync(string package, AddPackageOptions options) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.AddPackageAsync(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, package, options);

        public global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> AddPackageByUriAsync(global::System.Uri packageUri, AddPackageOptions options) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.AddPackageByUriAsync(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, packageUri, options);

        public global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> AddPackageSetAsync(PackageSet packageSet, AddPackageOptions options) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.AddPackageSetAsync(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, packageSet, options);

        public global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> StagePackageAsync(string package, StagePackageOptions options) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.StagePackageAsync(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, package, options);

        public global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> StagePackageByUriAsync(global::System.Uri packageUri, StagePackageOptions options) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.StagePackageByUriAsync(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, packageUri, options);

        public global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> StagePackageSetAsync(PackageSet packageSet, StagePackageOptions options) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.StagePackageSetAsync(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, packageSet, options);

        public global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> RegisterPackageAsync(string package, RegisterPackageOptions options) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.RegisterPackageAsync(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, package, options);

        public global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> RegisterPackageByUriAsync(global::System.Uri packageUri, RegisterPackageOptions options) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.RegisterPackageByUriAsync(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, packageUri, options);

        public global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> RegisterPackageSetAsync(PackageSet packageSet, RegisterPackageOptions options) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.RegisterPackageSetAsync(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, packageSet, options);

        public global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> RemovePackageAsync(string package, RemovePackageOptions options) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.RemovePackageAsync(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, package, options);

        public global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> RemovePackageByFullNameAsync(string packageFullName, RemovePackageOptions options) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.RemovePackageByFullNameAsync(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, packageFullName, options);

        public global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> RemovePackageByFamilyNameAsync(string packageFamilyName, RemovePackageOptions options) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.RemovePackageByFamilyNameAsync(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, packageFamilyName, options);

        public global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> RemovePackageByUriAsync(global::System.Uri packageUri, RemovePackageOptions options) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.RemovePackageByUriAsync(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, packageUri, options);

        public global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> RemovePackageSetAsync(PackageSet packageSet, RemovePackageOptions options) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.RemovePackageSetAsync(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, packageSet, options);

        public global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> ResetPackageAsync(string package) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.ResetPackageAsync(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, package);

        public global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> ResetPackageByUriAsync(global::System.Uri packageUri) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.ResetPackageByUriAsync(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, packageUri);

        public global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> ResetPackageSetAsync(PackageSet packageSet) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.ResetPackageSetAsync(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, packageSet);

        public global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> RepairPackageAsync(string package) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.RepairPackageAsync(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, package);

        public global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> RepairPackageByUriAsync(global::System.Uri packageUri) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.RepairPackageByUriAsync(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, packageUri);

        public global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> RepairPackageSetAsync(PackageSet packageSet) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.RepairPackageSetAsync(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, packageSet);

        public global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> ProvisionPackageAsync(string package, ProvisionPackageOptions options) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.ProvisionPackageAsync(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, package, options);

        public global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> ProvisionPackageByUriAsync(global::System.Uri packageUri, ProvisionPackageOptions options) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.ProvisionPackageByUriAsync(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, packageUri, options);

        public global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> ProvisionPackageSetAsync(PackageSet packageSet, ProvisionPackageOptions options) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.ProvisionPackageSetAsync(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, packageSet, options);

        public global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> DeprovisionPackageAsync(string package) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.DeprovisionPackageAsync(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, package);

        public global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> DeprovisionPackageByUriAsync(global::System.Uri packageUri) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.DeprovisionPackageByUriAsync(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, packageUri);

        public global::Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress> DeprovisionPackageSetAsync(PackageSet packageSet) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.DeprovisionPackageSetAsync(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, packageSet);

        public bool IsPackageRegistrationPending(string packageFamilyName) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.IsPackageRegistrationPending(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, packageFamilyName);

        public bool IsPackageRegistrationPendingForUser(string userSecurityId, string packageFamilyName) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.IsPackageRegistrationPendingForUser(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager, userSecurityId, packageFamilyName);

        public PackageReadyOrNewerAvailableStatus IsPackageReadyOrNewerAvailable(string package) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManager2Methods.IsPackageReadyOrNewerAvailable(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager2, package);

        public PackageReadyOrNewerAvailableStatus IsPackageReadyOrNewerAvailableByUri(global::System.Uri packageUri) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManager2Methods.IsPackageReadyOrNewerAvailableByUri(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager2, packageUri);

        public PackageReadyOrNewerAvailableStatus IsPackageSetReadyOrNewerAvailable(PackageSet packageSet) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManager2Methods.IsPackageSetReadyOrNewerAvailable(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager2, packageSet);

        public bool IsPackageProvisioned(string package) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManager2Methods.IsPackageProvisioned(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager2, package);

        public bool IsPackageProvisionedByUri(global::System.Uri packageUri) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManager2Methods.IsPackageProvisionedByUri(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager2, packageUri);

        public bool IsPackageSetProvisioned(PackageSet packageSet) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManager2Methods.IsPackageSetProvisioned(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager2, packageSet);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment", "struct(Microsoft.Windows.Management.Deployment.PackageDeploymentProgress;enum(Microsoft.Windows.Management.Deployment.PackageDeploymentProgressStatus;i4);f8)")][global::WinRT.WindowsRuntimeHelperType][global::WinRT.WinRTExposedType(typeof(global::WinRT.StructTypeDetails<PackageDeploymentProgress, PackageDeploymentProgress>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    public struct PackageDeploymentProgress: IEquatable<PackageDeploymentProgress>
    {
        public PackageDeploymentProgressStatus Status;
        public double Progress;

        public PackageDeploymentProgress(PackageDeploymentProgressStatus _Status, double _Progress)
        {
            Status = _Status; Progress = _Progress; 
        }

        public static bool operator ==(PackageDeploymentProgress x, PackageDeploymentProgress y) => x.Status == y.Status && x.Progress == y.Progress;
        public static bool operator !=(PackageDeploymentProgress x, PackageDeploymentProgress y) => !(x == y);
        public bool Equals(PackageDeploymentProgress other) => this == other;
        public override bool Equals(object obj) => obj is PackageDeploymentProgress that && this == that;
        public override int GetHashCode() => Status.GetHashCode() ^ Progress.GetHashCode();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<PackageDeploymentProgressStatus>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    public enum PackageDeploymentProgressStatus : int
    {
        Queued = unchecked((int)0),
        InProgress = unchecked((int)0x1),
        CompletedSuccess = unchecked((int)0x2),
        CompletedFailure = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.PackageDeploymentResult))]
    [global::ABI.Microsoft.Windows.Management.Deployment.PackageDeploymentResultRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPackageDeploymentResult))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    public sealed class PackageDeploymentResult : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PackageDeploymentResult>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentResult => _inner;


        public static PackageDeploymentResult FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PackageDeploymentResult>.FromAbi(thisPtr);
        }

        internal PackageDeploymentResult(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentResultMethods.IID);

        }


        public static bool operator ==(PackageDeploymentResult x, PackageDeploymentResult y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PackageDeploymentResult x, PackageDeploymentResult y) => !(x == y);
        public bool Equals(PackageDeploymentResult other) => this == other;
        public override bool Equals(object obj) => obj is PackageDeploymentResult that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public Guid ActivityId => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentResultMethods.get_ActivityId(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentResult);

        public global::System.Exception Error => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentResultMethods.get_Error(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentResult);

        public string ErrorText => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentResultMethods.get_ErrorText(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentResult);

        public global::System.Exception ExtendedError => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentResultMethods.get_ExtendedError(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentResult);

        public PackageDeploymentStatus Status => global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentResultMethods.get_Status(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentResult);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<PackageDeploymentStatus>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    public enum PackageDeploymentStatus : int
    {
        InProgress = unchecked((int)0),
        CompletedSuccess = unchecked((int)0x1),
        CompletedFailure = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<PackageReadyOrNewerAvailableStatus>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 131072u)]
    public enum PackageReadyOrNewerAvailableStatus : int
    {
        NotReady = unchecked((int)0),
        Ready = unchecked((int)0x1),
        NewerAvailable = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.PackageRuntimeManager))]
    [global::ABI.Microsoft.Windows.Management.Deployment.PackageRuntimeManagerRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPackageRuntimeManager))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    public sealed class PackageRuntimeManager : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PackageRuntimeManager>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IPackageRuntimeManager => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.Windows.Management.Deployment.PackageRuntimeManager").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_Management_Deployment_IPackageRuntimeManagerStatics;
        private static IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IPackageRuntimeManagerStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Windows_Management_Deployment_IPackageRuntimeManagerStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_Management_Deployment_IPackageRuntimeManagerStatics = ActivationFactory.Get("Microsoft.Windows.Management.Deployment.PackageRuntimeManager", global::ABI.Microsoft.Windows.Management.Deployment.IPackageRuntimeManagerStaticsMethods.IID);
                }
            }
        }

        public static PackageRuntimeManager GetDefault() => global::ABI.Microsoft.Windows.Management.Deployment.IPackageRuntimeManagerStaticsMethods.GetDefault(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageRuntimeManagerStatics);

        public static PackageRuntimeManager FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PackageRuntimeManager>.FromAbi(thisPtr);
        }

        internal PackageRuntimeManager(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.Management.Deployment.IPackageRuntimeManagerMethods.IID);

        }


        public static bool operator ==(PackageRuntimeManager x, PackageRuntimeManager y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PackageRuntimeManager x, PackageRuntimeManager y) => !(x == y);
        public bool Equals(PackageRuntimeManager other) => this == other;
        public override bool Equals(object obj) => obj is PackageRuntimeManager that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public PackageSetRuntimeDisposition AddPackageSet(PackageSet packageSet) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageRuntimeManagerMethods.AddPackageSet(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageRuntimeManager, packageSet);

        public PackageSetRuntimeDisposition AddPackageSet(PackageSet packageSet, global::Microsoft.Windows.ApplicationModel.DynamicDependency.CreatePackageDependencyOptions createOptions, global::Microsoft.Windows.ApplicationModel.DynamicDependency.AddPackageDependencyOptions addOptions) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageRuntimeManagerMethods.AddPackageSet(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageRuntimeManager, packageSet, createOptions, addOptions);

        public void RemovePackageSet(PackageSetRuntimeDisposition packageSetRuntimeDisposition) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageRuntimeManagerMethods.RemovePackageSet(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageRuntimeManager, packageSetRuntimeDisposition);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.PackageSet))]
    [global::ABI.Microsoft.Windows.Management.Deployment.PackageSetRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPackageSet))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    public sealed class PackageSet : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PackageSet>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IPackageSet => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_Management_Deployment_PackageSet;
        private static IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_PackageSet
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Windows_Management_Deployment_PackageSet;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_Management_Deployment_PackageSet = ActivationFactory.Get("Microsoft.Windows.Management.Deployment.PackageSet");
                }
            }
        }

        public PackageSet() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_Windows_Management_Deployment_PackageSet, global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static PackageSet FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PackageSet>.FromAbi(thisPtr);
        }

        internal PackageSet(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetMethods.IID);

        }


        public static bool operator ==(PackageSet x, PackageSet y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PackageSet x, PackageSet y) => !(x == y);
        public bool Equals(PackageSet other) => this == other;
        public override bool Equals(object obj) => obj is PackageSet that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public string Id
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetMethods.get_Id(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageSet);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetMethods.set_Id(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageSet, value);
        }

        public global::System.Collections.Generic.IList<PackageSetItem> Items => global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetMethods.get_Items(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageSet);

        public global::System.Uri PackageUri
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetMethods.get_PackageUri(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageSet);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetMethods.set_PackageUri(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageSet, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.PackageSetItem))]
    [global::ABI.Microsoft.Windows.Management.Deployment.PackageSetItemRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPackageSetItem))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    public sealed class PackageSetItem : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PackageSetItem>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IPackageSetItem => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_Management_Deployment_PackageSetItem;
        private static IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_PackageSetItem
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Windows_Management_Deployment_PackageSetItem;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_Management_Deployment_PackageSetItem = ActivationFactory.Get("Microsoft.Windows.Management.Deployment.PackageSetItem");
                }
            }
        }

        public PackageSetItem() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_Windows_Management_Deployment_PackageSetItem, global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetItemMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static PackageSetItem FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PackageSetItem>.FromAbi(thisPtr);
        }

        internal PackageSetItem(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetItemMethods.IID);

        }


        public static bool operator ==(PackageSetItem x, PackageSetItem y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PackageSetItem x, PackageSetItem y) => !(x == y);
        public bool Equals(PackageSetItem other) => this == other;
        public override bool Equals(object obj) => obj is PackageSetItem that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public string Id
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetItemMethods.get_Id(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageSetItem);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetItemMethods.set_Id(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageSetItem, value);
        }

        public global::Windows.ApplicationModel.PackageVersion MinVersion
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetItemMethods.get_MinVersion(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageSetItem);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetItemMethods.set_MinVersion(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageSetItem, value);
        }

        public string PackageFamilyName
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetItemMethods.get_PackageFamilyName(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageSetItem);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetItemMethods.set_PackageFamilyName(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageSetItem, value);
        }

        public global::System.Uri PackageUri
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetItemMethods.get_PackageUri(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageSetItem);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetItemMethods.set_PackageUri(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageSetItem, value);
        }

        public global::Microsoft.Windows.ApplicationModel.DynamicDependency.PackageDependencyProcessorArchitectures ProcessorArchitectureFilter
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetItemMethods.get_ProcessorArchitectureFilter(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageSetItem);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetItemMethods.set_ProcessorArchitectureFilter(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageSetItem, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition))]
    [global::ABI.Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDispositionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPackageSetItemRuntimeDisposition))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    public sealed class PackageSetItemRuntimeDisposition : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PackageSetItemRuntimeDisposition>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IPackageSetItemRuntimeDisposition => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_Management_Deployment_PackageSetItemRuntimeDisposition;
        private static IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_PackageSetItemRuntimeDisposition
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Windows_Management_Deployment_PackageSetItemRuntimeDisposition;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_Management_Deployment_PackageSetItemRuntimeDisposition = ActivationFactory.Get("Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition");
                }
            }
        }

        public PackageSetItemRuntimeDisposition() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_Windows_Management_Deployment_PackageSetItemRuntimeDisposition, global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetItemRuntimeDispositionMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static PackageSetItemRuntimeDisposition FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PackageSetItemRuntimeDisposition>.FromAbi(thisPtr);
        }

        internal PackageSetItemRuntimeDisposition(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetItemRuntimeDispositionMethods.IID);

        }


        public static bool operator ==(PackageSetItemRuntimeDisposition x, PackageSetItemRuntimeDisposition y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PackageSetItemRuntimeDisposition x, PackageSetItemRuntimeDisposition y) => !(x == y);
        public bool Equals(PackageSetItemRuntimeDisposition other) => this == other;
        public override bool Equals(object obj) => obj is PackageSetItemRuntimeDisposition that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Microsoft.Windows.ApplicationModel.DynamicDependency.PackageDependencyContextId PackageDependencyContextId => global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetItemRuntimeDispositionMethods.get_PackageDependencyContextId(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageSetItemRuntimeDisposition);

        public string PackageDependencyId => global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetItemRuntimeDispositionMethods.get_PackageDependencyId(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageSetItemRuntimeDisposition);

        public string PackageFullName => global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetItemRuntimeDispositionMethods.get_PackageFullName(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageSetItemRuntimeDisposition);

        public string PackageSetItemId => global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetItemRuntimeDispositionMethods.get_PackageSetItemId(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageSetItemRuntimeDisposition);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition))]
    [global::ABI.Microsoft.Windows.Management.Deployment.PackageSetRuntimeDispositionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPackageSetRuntimeDisposition))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    public sealed class PackageSetRuntimeDisposition : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PackageSetRuntimeDisposition>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IPackageSetRuntimeDisposition => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_Management_Deployment_PackageSetRuntimeDisposition;
        private static IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_PackageSetRuntimeDisposition
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Windows_Management_Deployment_PackageSetRuntimeDisposition;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_Management_Deployment_PackageSetRuntimeDisposition = ActivationFactory.Get("Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition");
                }
            }
        }

        public PackageSetRuntimeDisposition() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_Windows_Management_Deployment_PackageSetRuntimeDisposition, global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetRuntimeDispositionMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static PackageSetRuntimeDisposition FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PackageSetRuntimeDisposition>.FromAbi(thisPtr);
        }

        internal PackageSetRuntimeDisposition(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetRuntimeDispositionMethods.IID);

        }


        public static bool operator ==(PackageSetRuntimeDisposition x, PackageSetRuntimeDisposition y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PackageSetRuntimeDisposition x, PackageSetRuntimeDisposition y) => !(x == y);
        public bool Equals(PackageSetRuntimeDisposition other) => this == other;
        public override bool Equals(object obj) => obj is PackageSetRuntimeDisposition that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public string PackageSetId
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetRuntimeDispositionMethods.get_PackageSetId(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageSetRuntimeDisposition);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetRuntimeDispositionMethods.set_PackageSetId(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageSetRuntimeDisposition, value);
        }

        public global::System.Collections.Generic.IList<PackageSetItemRuntimeDisposition> PackageSetItemRuntimeDispositions => global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetRuntimeDispositionMethods.get_PackageSetItemRuntimeDispositions(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageSetRuntimeDisposition);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.PackageVolume))]
    [global::ABI.Microsoft.Windows.Management.Deployment.PackageVolumeRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPackageVolume))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    public sealed class PackageVolume : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PackageVolume>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IPackageVolume => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.Windows.Management.Deployment.PackageVolume").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_Management_Deployment_IPackageVolumeStatics;
        private static IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IPackageVolumeStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Windows_Management_Deployment_IPackageVolumeStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_Management_Deployment_IPackageVolumeStatics = ActivationFactory.Get("Microsoft.Windows.Management.Deployment.PackageVolume", global::ABI.Microsoft.Windows.Management.Deployment.IPackageVolumeStaticsMethods.IID);
                }
            }
        }

        public static global::System.Collections.Generic.IList<PackageVolume> FindPackageVolumes() => global::ABI.Microsoft.Windows.Management.Deployment.IPackageVolumeStaticsMethods.FindPackageVolumes(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageVolumeStatics);

        public static PackageVolume FindPackageVolumeByPath(string packageStorePath) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageVolumeStaticsMethods.FindPackageVolumeByPath(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageVolumeStatics, packageStorePath);

        public static PackageVolume FindPackageVolumeByName(string name) => global::ABI.Microsoft.Windows.Management.Deployment.IPackageVolumeStaticsMethods.FindPackageVolumeByName(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageVolumeStatics, name);

        public static PackageVolume FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PackageVolume>.FromAbi(thisPtr);
        }

        internal PackageVolume(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.Management.Deployment.IPackageVolumeMethods.IID);

        }


        public static bool operator ==(PackageVolume x, PackageVolume y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PackageVolume x, PackageVolume y) => !(x == y);
        public bool Equals(PackageVolume other) => this == other;
        public override bool Equals(object obj) => obj is PackageVolume that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool IsRepairNeeded() => global::ABI.Microsoft.Windows.Management.Deployment.IPackageVolumeMethods.IsRepairNeeded(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageVolume);

        public void Repair() => global::ABI.Microsoft.Windows.Management.Deployment.IPackageVolumeMethods.Repair(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageVolume);

        public bool IsAppxInstallSupported => global::ABI.Microsoft.Windows.Management.Deployment.IPackageVolumeMethods.get_IsAppxInstallSupported(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageVolume);

        public bool IsFullTrustPackageSupported => global::ABI.Microsoft.Windows.Management.Deployment.IPackageVolumeMethods.get_IsFullTrustPackageSupported(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageVolume);

        public bool IsSystemVolume => global::ABI.Microsoft.Windows.Management.Deployment.IPackageVolumeMethods.get_IsSystemVolume(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageVolume);

        public string MountPoint => global::ABI.Microsoft.Windows.Management.Deployment.IPackageVolumeMethods.get_MountPoint(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageVolume);

        public string Name => global::ABI.Microsoft.Windows.Management.Deployment.IPackageVolumeMethods.get_Name(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageVolume);

        public string PackageStorePath => global::ABI.Microsoft.Windows.Management.Deployment.IPackageVolumeMethods.get_PackageStorePath(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageVolume);

        public bool SupportsHardLinks => global::ABI.Microsoft.Windows.Management.Deployment.IPackageVolumeMethods.get_SupportsHardLinks(_objRef_global__Microsoft_Windows_Management_Deployment_IPackageVolume);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.ProvisionPackageOptions))]
    [global::ABI.Microsoft.Windows.Management.Deployment.ProvisionPackageOptionsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IProvisionPackageOptions))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    public sealed class ProvisionPackageOptions : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ProvisionPackageOptions>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IProvisionPackageOptions => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_Management_Deployment_ProvisionPackageOptions;
        private static IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_ProvisionPackageOptions
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Windows_Management_Deployment_ProvisionPackageOptions;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_Management_Deployment_ProvisionPackageOptions = ActivationFactory.Get("Microsoft.Windows.Management.Deployment.ProvisionPackageOptions");
                }
            }
        }

        public ProvisionPackageOptions() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_Windows_Management_Deployment_ProvisionPackageOptions, global::ABI.Microsoft.Windows.Management.Deployment.IProvisionPackageOptionsMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static ProvisionPackageOptions FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ProvisionPackageOptions>.FromAbi(thisPtr);
        }

        internal ProvisionPackageOptions(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.Management.Deployment.IProvisionPackageOptionsMethods.IID);

        }


        public static bool operator ==(ProvisionPackageOptions x, ProvisionPackageOptions y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ProvisionPackageOptions x, ProvisionPackageOptions y) => !(x == y);
        public bool Equals(ProvisionPackageOptions other) => this == other;
        public override bool Equals(object obj) => obj is ProvisionPackageOptions that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool IsOptionalPackageFamilyNamesSupported => global::ABI.Microsoft.Windows.Management.Deployment.IProvisionPackageOptionsMethods.get_IsOptionalPackageFamilyNamesSupported(_objRef_global__Microsoft_Windows_Management_Deployment_IProvisionPackageOptions);

        public bool IsProjectionOrderPackageFamilyNamesSupported => global::ABI.Microsoft.Windows.Management.Deployment.IProvisionPackageOptionsMethods.get_IsProjectionOrderPackageFamilyNamesSupported(_objRef_global__Microsoft_Windows_Management_Deployment_IProvisionPackageOptions);

        public global::System.Collections.Generic.IList<string> OptionalPackageFamilyNames => global::ABI.Microsoft.Windows.Management.Deployment.IProvisionPackageOptionsMethods.get_OptionalPackageFamilyNames(_objRef_global__Microsoft_Windows_Management_Deployment_IProvisionPackageOptions);

        public global::System.Collections.Generic.IList<string> ProjectionOrderPackageFamilyNames => global::ABI.Microsoft.Windows.Management.Deployment.IProvisionPackageOptionsMethods.get_ProjectionOrderPackageFamilyNames(_objRef_global__Microsoft_Windows_Management_Deployment_IProvisionPackageOptions);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.RegisterPackageOptions))]
    [global::ABI.Microsoft.Windows.Management.Deployment.RegisterPackageOptionsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IRegisterPackageOptions))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    public sealed class RegisterPackageOptions : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<RegisterPackageOptions>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IRegisterPackageOptions => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_Management_Deployment_RegisterPackageOptions;
        private static IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_RegisterPackageOptions
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Windows_Management_Deployment_RegisterPackageOptions;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_Management_Deployment_RegisterPackageOptions = ActivationFactory.Get("Microsoft.Windows.Management.Deployment.RegisterPackageOptions");
                }
            }
        }

        public RegisterPackageOptions() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_Windows_Management_Deployment_RegisterPackageOptions, global::ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptionsMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static RegisterPackageOptions FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<RegisterPackageOptions>.FromAbi(thisPtr);
        }

        internal RegisterPackageOptions(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptionsMethods.IID);

        }


        public static bool operator ==(RegisterPackageOptions x, RegisterPackageOptions y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(RegisterPackageOptions x, RegisterPackageOptions y) => !(x == y);
        public bool Equals(RegisterPackageOptions other) => this == other;
        public override bool Equals(object obj) => obj is RegisterPackageOptions that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool AllowUnsigned
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptionsMethods.get_AllowUnsigned(_objRef_global__Microsoft_Windows_Management_Deployment_IRegisterPackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptionsMethods.set_AllowUnsigned(_objRef_global__Microsoft_Windows_Management_Deployment_IRegisterPackageOptions, value);
        }

        public PackageVolume AppDataVolume
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptionsMethods.get_AppDataVolume(_objRef_global__Microsoft_Windows_Management_Deployment_IRegisterPackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptionsMethods.set_AppDataVolume(_objRef_global__Microsoft_Windows_Management_Deployment_IRegisterPackageOptions, value);
        }

        public bool DeferRegistrationWhenPackagesAreInUse
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptionsMethods.get_DeferRegistrationWhenPackagesAreInUse(_objRef_global__Microsoft_Windows_Management_Deployment_IRegisterPackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptionsMethods.set_DeferRegistrationWhenPackagesAreInUse(_objRef_global__Microsoft_Windows_Management_Deployment_IRegisterPackageOptions, value);
        }

        public global::System.Collections.Generic.IList<string> DependencyPackageFamilyNames => global::ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptionsMethods.get_DependencyPackageFamilyNames(_objRef_global__Microsoft_Windows_Management_Deployment_IRegisterPackageOptions);

        public global::System.Collections.Generic.IList<global::System.Uri> DependencyPackageUris => global::ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptionsMethods.get_DependencyPackageUris(_objRef_global__Microsoft_Windows_Management_Deployment_IRegisterPackageOptions);

        public bool DeveloperMode
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptionsMethods.get_DeveloperMode(_objRef_global__Microsoft_Windows_Management_Deployment_IRegisterPackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptionsMethods.set_DeveloperMode(_objRef_global__Microsoft_Windows_Management_Deployment_IRegisterPackageOptions, value);
        }

        public global::System.Collections.Generic.IDictionary<global::System.Uri, string> ExpectedDigests => global::ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptionsMethods.get_ExpectedDigests(_objRef_global__Microsoft_Windows_Management_Deployment_IRegisterPackageOptions);

        public global::System.Uri ExternalLocationUri
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptionsMethods.get_ExternalLocationUri(_objRef_global__Microsoft_Windows_Management_Deployment_IRegisterPackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptionsMethods.set_ExternalLocationUri(_objRef_global__Microsoft_Windows_Management_Deployment_IRegisterPackageOptions, value);
        }

        public bool ForceAppShutdown
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptionsMethods.get_ForceAppShutdown(_objRef_global__Microsoft_Windows_Management_Deployment_IRegisterPackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptionsMethods.set_ForceAppShutdown(_objRef_global__Microsoft_Windows_Management_Deployment_IRegisterPackageOptions, value);
        }

        public bool ForceTargetAppShutdown
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptionsMethods.get_ForceTargetAppShutdown(_objRef_global__Microsoft_Windows_Management_Deployment_IRegisterPackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptionsMethods.set_ForceTargetAppShutdown(_objRef_global__Microsoft_Windows_Management_Deployment_IRegisterPackageOptions, value);
        }

        public bool ForceUpdateFromAnyVersion
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptionsMethods.get_ForceUpdateFromAnyVersion(_objRef_global__Microsoft_Windows_Management_Deployment_IRegisterPackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptionsMethods.set_ForceUpdateFromAnyVersion(_objRef_global__Microsoft_Windows_Management_Deployment_IRegisterPackageOptions, value);
        }

        public bool InstallAllResources
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptionsMethods.get_InstallAllResources(_objRef_global__Microsoft_Windows_Management_Deployment_IRegisterPackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptionsMethods.set_InstallAllResources(_objRef_global__Microsoft_Windows_Management_Deployment_IRegisterPackageOptions, value);
        }

        public bool IsExpectedDigestsSupported => global::ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptionsMethods.get_IsExpectedDigestsSupported(_objRef_global__Microsoft_Windows_Management_Deployment_IRegisterPackageOptions);

        public global::System.Collections.Generic.IList<string> OptionalPackageFamilyNames => global::ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptionsMethods.get_OptionalPackageFamilyNames(_objRef_global__Microsoft_Windows_Management_Deployment_IRegisterPackageOptions);

        public bool StageInPlace
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptionsMethods.get_StageInPlace(_objRef_global__Microsoft_Windows_Management_Deployment_IRegisterPackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptionsMethods.set_StageInPlace(_objRef_global__Microsoft_Windows_Management_Deployment_IRegisterPackageOptions, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.RemovePackageOptions))]
    [global::ABI.Microsoft.Windows.Management.Deployment.RemovePackageOptionsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IRemovePackageOptions))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    public sealed class RemovePackageOptions : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<RemovePackageOptions>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IRemovePackageOptions => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_Management_Deployment_RemovePackageOptions;
        private static IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_RemovePackageOptions
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Windows_Management_Deployment_RemovePackageOptions;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_Management_Deployment_RemovePackageOptions = ActivationFactory.Get("Microsoft.Windows.Management.Deployment.RemovePackageOptions");
                }
            }
        }

        public RemovePackageOptions() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_Windows_Management_Deployment_RemovePackageOptions, global::ABI.Microsoft.Windows.Management.Deployment.IRemovePackageOptionsMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static RemovePackageOptions FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<RemovePackageOptions>.FromAbi(thisPtr);
        }

        internal RemovePackageOptions(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.Management.Deployment.IRemovePackageOptionsMethods.IID);

        }


        public static bool operator ==(RemovePackageOptions x, RemovePackageOptions y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(RemovePackageOptions x, RemovePackageOptions y) => !(x == y);
        public bool Equals(RemovePackageOptions other) => this == other;
        public override bool Equals(object obj) => obj is RemovePackageOptions that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool FailIfNotFound
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IRemovePackageOptionsMethods.get_FailIfNotFound(_objRef_global__Microsoft_Windows_Management_Deployment_IRemovePackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IRemovePackageOptionsMethods.set_FailIfNotFound(_objRef_global__Microsoft_Windows_Management_Deployment_IRemovePackageOptions, value);
        }

        public bool PreserveApplicationData
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IRemovePackageOptionsMethods.get_PreserveApplicationData(_objRef_global__Microsoft_Windows_Management_Deployment_IRemovePackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IRemovePackageOptionsMethods.set_PreserveApplicationData(_objRef_global__Microsoft_Windows_Management_Deployment_IRemovePackageOptions, value);
        }

        public bool PreserveRoamableApplicationData
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IRemovePackageOptionsMethods.get_PreserveRoamableApplicationData(_objRef_global__Microsoft_Windows_Management_Deployment_IRemovePackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IRemovePackageOptionsMethods.set_PreserveRoamableApplicationData(_objRef_global__Microsoft_Windows_Management_Deployment_IRemovePackageOptions, value);
        }

        public bool RemoveForAllUsers
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IRemovePackageOptionsMethods.get_RemoveForAllUsers(_objRef_global__Microsoft_Windows_Management_Deployment_IRemovePackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IRemovePackageOptionsMethods.set_RemoveForAllUsers(_objRef_global__Microsoft_Windows_Management_Deployment_IRemovePackageOptions, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Management.Deployment.StagePackageOptions))]
    [global::ABI.Microsoft.Windows.Management.Deployment.StagePackageOptionsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IStagePackageOptions))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    public sealed class StagePackageOptions : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<StagePackageOptions>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IStagePackageOptions => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_Management_Deployment_StagePackageOptions;
        private static IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_StagePackageOptions
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Windows_Management_Deployment_StagePackageOptions;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_Management_Deployment_StagePackageOptions = ActivationFactory.Get("Microsoft.Windows.Management.Deployment.StagePackageOptions");
                }
            }
        }

        public StagePackageOptions() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_Windows_Management_Deployment_StagePackageOptions, global::ABI.Microsoft.Windows.Management.Deployment.IStagePackageOptionsMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static StagePackageOptions FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<StagePackageOptions>.FromAbi(thisPtr);
        }

        internal StagePackageOptions(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.Management.Deployment.IStagePackageOptionsMethods.IID);

        }


        public static bool operator ==(StagePackageOptions x, StagePackageOptions y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(StagePackageOptions x, StagePackageOptions y) => !(x == y);
        public bool Equals(StagePackageOptions other) => this == other;
        public override bool Equals(object obj) => obj is StagePackageOptions that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool AllowUnsigned
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IStagePackageOptionsMethods.get_AllowUnsigned(_objRef_global__Microsoft_Windows_Management_Deployment_IStagePackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IStagePackageOptionsMethods.set_AllowUnsigned(_objRef_global__Microsoft_Windows_Management_Deployment_IStagePackageOptions, value);
        }

        public global::System.Collections.Generic.IList<global::System.Uri> DependencyPackageUris => global::ABI.Microsoft.Windows.Management.Deployment.IStagePackageOptionsMethods.get_DependencyPackageUris(_objRef_global__Microsoft_Windows_Management_Deployment_IStagePackageOptions);

        public bool DeveloperMode
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IStagePackageOptionsMethods.get_DeveloperMode(_objRef_global__Microsoft_Windows_Management_Deployment_IStagePackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IStagePackageOptionsMethods.set_DeveloperMode(_objRef_global__Microsoft_Windows_Management_Deployment_IStagePackageOptions, value);
        }

        public global::System.Collections.Generic.IDictionary<global::System.Uri, string> ExpectedDigests => global::ABI.Microsoft.Windows.Management.Deployment.IStagePackageOptionsMethods.get_ExpectedDigests(_objRef_global__Microsoft_Windows_Management_Deployment_IStagePackageOptions);

        public global::System.Uri ExternalLocationUri
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IStagePackageOptionsMethods.get_ExternalLocationUri(_objRef_global__Microsoft_Windows_Management_Deployment_IStagePackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IStagePackageOptionsMethods.set_ExternalLocationUri(_objRef_global__Microsoft_Windows_Management_Deployment_IStagePackageOptions, value);
        }

        public bool ForceUpdateFromAnyVersion
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IStagePackageOptionsMethods.get_ForceUpdateFromAnyVersion(_objRef_global__Microsoft_Windows_Management_Deployment_IStagePackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IStagePackageOptionsMethods.set_ForceUpdateFromAnyVersion(_objRef_global__Microsoft_Windows_Management_Deployment_IStagePackageOptions, value);
        }

        public bool InstallAllResources
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IStagePackageOptionsMethods.get_InstallAllResources(_objRef_global__Microsoft_Windows_Management_Deployment_IStagePackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IStagePackageOptionsMethods.set_InstallAllResources(_objRef_global__Microsoft_Windows_Management_Deployment_IStagePackageOptions, value);
        }

        public bool IsExpectedDigestsSupported => global::ABI.Microsoft.Windows.Management.Deployment.IStagePackageOptionsMethods.get_IsExpectedDigestsSupported(_objRef_global__Microsoft_Windows_Management_Deployment_IStagePackageOptions);

        public global::System.Collections.Generic.IList<string> OptionalPackageFamilyNames => global::ABI.Microsoft.Windows.Management.Deployment.IStagePackageOptionsMethods.get_OptionalPackageFamilyNames(_objRef_global__Microsoft_Windows_Management_Deployment_IStagePackageOptions);

        public global::System.Collections.Generic.IList<global::System.Uri> OptionalPackageUris => global::ABI.Microsoft.Windows.Management.Deployment.IStagePackageOptionsMethods.get_OptionalPackageUris(_objRef_global__Microsoft_Windows_Management_Deployment_IStagePackageOptions);

        public global::System.Collections.Generic.IList<global::System.Uri> RelatedPackageUris => global::ABI.Microsoft.Windows.Management.Deployment.IStagePackageOptionsMethods.get_RelatedPackageUris(_objRef_global__Microsoft_Windows_Management_Deployment_IStagePackageOptions);

        public bool RequiredContentGroupOnly
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IStagePackageOptionsMethods.get_RequiredContentGroupOnly(_objRef_global__Microsoft_Windows_Management_Deployment_IStagePackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IStagePackageOptionsMethods.set_RequiredContentGroupOnly(_objRef_global__Microsoft_Windows_Management_Deployment_IStagePackageOptions, value);
        }

        public bool StageInPlace
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IStagePackageOptionsMethods.get_StageInPlace(_objRef_global__Microsoft_Windows_Management_Deployment_IStagePackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IStagePackageOptionsMethods.set_StageInPlace(_objRef_global__Microsoft_Windows_Management_Deployment_IStagePackageOptions, value);
        }

        public StubPackageOption StubPackageOption
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IStagePackageOptionsMethods.get_StubPackageOption(_objRef_global__Microsoft_Windows_Management_Deployment_IStagePackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IStagePackageOptionsMethods.set_StubPackageOption(_objRef_global__Microsoft_Windows_Management_Deployment_IStagePackageOptions, value);
        }

        public PackageVolume TargetVolume
        {
            get => global::ABI.Microsoft.Windows.Management.Deployment.IStagePackageOptionsMethods.get_TargetVolume(_objRef_global__Microsoft_Windows_Management_Deployment_IStagePackageOptions);
            set => global::ABI.Microsoft.Windows.Management.Deployment.IStagePackageOptionsMethods.set_TargetVolume(_objRef_global__Microsoft_Windows_Management_Deployment_IStagePackageOptions, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Management.Deployment")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<StubPackageOption>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(PackageDeploymentContract), 65536u)]
    public enum StubPackageOption : int
    {
        Default = unchecked((int)0),
        InstallFull = unchecked((int)0x1),
        InstallStub = unchecked((int)0x2),
        UsePreference = unchecked((int)0x3),
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.Windows.Management.Deployment
{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct AddPackageOptions
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.Management.Deployment.AddPackageOptions obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.Management.Deployment.AddPackageOptions>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.Management.Deployment.AddPackageOptions obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.Management.Deployment.AddPackageOptions FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.Management.Deployment.AddPackageOptions.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.Management.Deployment.AddPackageOptions obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.AddPackageOptions>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.Management.Deployment.AddPackageOptions[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.AddPackageOptions>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.AddPackageOptions>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.Management.Deployment.AddPackageOptions[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.AddPackageOptions>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.Management.Deployment.AddPackageOptions[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.AddPackageOptions>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.Management.Deployment.AddPackageOptions[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.AddPackageOptions>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.AddPackageOptions>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.AddPackageOptions>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class AddPackageOptionsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.Management.Deployment.AddPackageOptions(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct EnsureReadyOptions
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.Management.Deployment.EnsureReadyOptions obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.Management.Deployment.EnsureReadyOptions>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.Management.Deployment.IEnsureReadyOptionsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.Management.Deployment.EnsureReadyOptions obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.Management.Deployment.IEnsureReadyOptionsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.Management.Deployment.EnsureReadyOptions FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.Management.Deployment.EnsureReadyOptions.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.Management.Deployment.EnsureReadyOptions obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.EnsureReadyOptions>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.Management.Deployment.EnsureReadyOptions[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.EnsureReadyOptions>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.EnsureReadyOptions>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.Management.Deployment.EnsureReadyOptions[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.EnsureReadyOptions>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.Management.Deployment.EnsureReadyOptions[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.EnsureReadyOptions>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.Management.Deployment.EnsureReadyOptions[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.EnsureReadyOptions>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.EnsureReadyOptions>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.EnsureReadyOptions>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class EnsureReadyOptionsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.Management.Deployment.EnsureReadyOptions(inspectable.ObjRef);
    }
    internal static class IAddPackageOptionsMethods
    {

        internal static unsafe bool get_AllowUnsigned(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[16](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_AllowUnsigned(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[17](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_DeferRegistrationWhenPackagesAreInUse(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[34](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_DeferRegistrationWhenPackagesAreInUse(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[35](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::System.Collections.Generic.IList<global::System.Uri> get_DependencyPackageUris(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Windows_Foundation_Uri.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<global::System.Uri>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<global::System.Uri>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool get_DeveloperMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[18](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_DeveloperMode(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[19](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::System.Collections.Generic.IDictionary<global::System.Uri, string> get_ExpectedDigests(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[37](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMap_2_Windows_Foundation_Uri__String.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IDictionary<global::System.Uri, string>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IDictionary<global::System.Uri, string>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Uri get_ExternalLocationUri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.Uri.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.Uri.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ExternalLocationUri(IObjectReference _obj, global::System.Uri value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.System.Uri.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[13](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe bool get_ForceAppShutdown(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[20](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_ForceAppShutdown(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[21](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_ForceTargetAppShutdown(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[22](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_ForceTargetAppShutdown(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[23](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_ForceUpdateFromAnyVersion(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[24](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_ForceUpdateFromAnyVersion(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[25](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_InstallAllResources(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[26](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_InstallAllResources(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[27](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsExpectedDigestsSupported(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[36](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_IsLimitToExistingPackagesSupported(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[38](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_LimitToExistingPackages(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[39](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_LimitToExistingPackages(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[40](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::System.Collections.Generic.IList<string> get_OptionalPackageFamilyNames(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_String.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<string>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<string>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Collections.Generic.IList<global::System.Uri> get_OptionalPackageUris(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Windows_Foundation_Uri.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<global::System.Uri>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<global::System.Uri>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Collections.Generic.IList<global::System.Uri> get_RelatedPackageUris(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Windows_Foundation_Uri.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<global::System.Uri>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<global::System.Uri>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool get_RequiredContentGroupOnly(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[28](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_RequiredContentGroupOnly(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[29](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_RetainFilesOnFailure(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[30](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_RetainFilesOnFailure(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[31](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_StageInPlace(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[32](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_StageInPlace(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[33](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.Windows.Management.Deployment.StubPackageOption get_StubPackageOption(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.Management.Deployment.StubPackageOption __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.Management.Deployment.StubPackageOption*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_StubPackageOption(IObjectReference _obj, global::Microsoft.Windows.Management.Deployment.StubPackageOption value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.Management.Deployment.StubPackageOption, int>**)ThisPtr)[15](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.Windows.Management.Deployment.PackageVolume get_TargetVolume(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Windows.Management.Deployment.PackageVolume.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Windows.Management.Deployment.PackageVolume.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_TargetVolume(IObjectReference _obj, global::Microsoft.Windows.Management.Deployment.PackageVolume value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.Windows.Management.Deployment.PackageVolume.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x39, 0x7F, 0xDB, 0xE3, 0xD0, 0xF9, 0x84, 0x58, 0xBD, 0xEF, 0x61, 0x53, 0xB5, 0x45, 0x74, 0xA3 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E3DB7F39-F9D0-5884-BDEF-6153B54574A3")]
    internal interface IAddPackageOptions : global::Microsoft.Windows.Management.Deployment.IAddPackageOptions
    {
    }
    internal static class IEnsureReadyOptionsMethods
    {

        internal static unsafe global::Microsoft.Windows.Management.Deployment.AddPackageOptions get_AddPackageOptions(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Windows.Management.Deployment.AddPackageOptions.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Windows.Management.Deployment.AddPackageOptions.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3, 0x2D, 0x10, 0x20, 0x44, 0xEC, 0x2B, 0x5C, 0x8F, 0xD6, 0x11, 0x4, 0xDC, 0x99, 0x75, 0x5D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("20102D03-EC44-5C2B-8FD6-1104DC99755D")]
    internal interface IEnsureReadyOptions : global::Microsoft.Windows.Management.Deployment.IEnsureReadyOptions
    {
    }
    internal static class IEnsureReadyOptions2Methods
    {

        internal static unsafe bool get_RegisterNewerIfAvailable(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_RegisterNewerIfAvailable(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x59, 0x92, 0xFA, 0xEE, 0x3A, 0xB1, 0xA3, 0x50, 0x91, 0x9E, 0xAE, 0x11, 0x6D, 0x83, 0xC0, 0xDA };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("EEFA9259-B13A-50A3-919E-AE116D83C0DA")]
    internal interface IEnsureReadyOptions2 : global::Microsoft.Windows.Management.Deployment.IEnsureReadyOptions2
    {
    }
    internal static class IPackageDeploymentManagerMethods
    {


        internal static unsafe bool IsPackageReady(IObjectReference _obj, string package)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            MarshalString.Pinnable __package = new(package);
            fixed(void* ___package = __package)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __package), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
        }

        internal static unsafe bool IsPackageReadyByUri(IObjectReference _obj, global::System.Uri packageUri)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __packageUri = default;
            byte __retval = default;
            try
            {
                __packageUri = global::ABI.System.Uri.CreateMarshaler2(packageUri);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__packageUri), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__packageUri);
            }
        }

        internal static unsafe bool IsPackageSetReady(IObjectReference _obj, global::Microsoft.Windows.Management.Deployment.PackageSet packageSet)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __packageSet = default;
            byte __retval = default;
            try
            {
                __packageSet = global::ABI.Microsoft.Windows.Management.Deployment.PackageSet.CreateMarshaler2(packageSet);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__packageSet), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__packageSet);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress> EnsurePackageReadyAsync(IObjectReference _obj, string package, global::Microsoft.Windows.Management.Deployment.EnsureReadyOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __options = default;
            IntPtr __retval = default;
            try
            {
                __options = global::ABI.Microsoft.Windows.Management.Deployment.EnsureReadyOptions.CreateMarshaler2(options);
                MarshalString.Pinnable __package = new(package);
                fixed(void* ___package = __package)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, MarshalString.GetAbi(ref __package), MarshalInspectable<object>.GetAbi(__options), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__options);
                MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress> EnsurePackageReadyByUriAsync(IObjectReference _obj, global::System.Uri packageUri, global::Microsoft.Windows.Management.Deployment.EnsureReadyOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __packageUri = default;
            ObjectReferenceValue __options = default;
            IntPtr __retval = default;
            try
            {
                __packageUri = global::ABI.System.Uri.CreateMarshaler2(packageUri);
                __options = global::ABI.Microsoft.Windows.Management.Deployment.EnsureReadyOptions.CreateMarshaler2(options);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, MarshalInspectable<object>.GetAbi(__packageUri), MarshalInspectable<object>.GetAbi(__options), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__packageUri);
                MarshalInspectable<object>.DisposeMarshaler(__options);
                MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress> EnsurePackageSetReadyAsync(IObjectReference _obj, global::Microsoft.Windows.Management.Deployment.PackageSet packageSet, global::Microsoft.Windows.Management.Deployment.EnsureReadyOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __packageSet = default;
            ObjectReferenceValue __options = default;
            IntPtr __retval = default;
            try
            {
                __packageSet = global::ABI.Microsoft.Windows.Management.Deployment.PackageSet.CreateMarshaler2(packageSet);
                __options = global::ABI.Microsoft.Windows.Management.Deployment.EnsureReadyOptions.CreateMarshaler2(options);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, MarshalInspectable<object>.GetAbi(__packageSet), MarshalInspectable<object>.GetAbi(__options), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__packageSet);
                MarshalInspectable<object>.DisposeMarshaler(__options);
                MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress> AddPackageAsync(IObjectReference _obj, string package, global::Microsoft.Windows.Management.Deployment.AddPackageOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __options = default;
            IntPtr __retval = default;
            try
            {
                __options = global::ABI.Microsoft.Windows.Management.Deployment.AddPackageOptions.CreateMarshaler2(options);
                MarshalString.Pinnable __package = new(package);
                fixed(void* ___package = __package)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, MarshalString.GetAbi(ref __package), MarshalInspectable<object>.GetAbi(__options), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__options);
                MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress> AddPackageByUriAsync(IObjectReference _obj, global::System.Uri packageUri, global::Microsoft.Windows.Management.Deployment.AddPackageOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __packageUri = default;
            ObjectReferenceValue __options = default;
            IntPtr __retval = default;
            try
            {
                __packageUri = global::ABI.System.Uri.CreateMarshaler2(packageUri);
                __options = global::ABI.Microsoft.Windows.Management.Deployment.AddPackageOptions.CreateMarshaler2(options);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, MarshalInspectable<object>.GetAbi(__packageUri), MarshalInspectable<object>.GetAbi(__options), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__packageUri);
                MarshalInspectable<object>.DisposeMarshaler(__options);
                MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress> AddPackageSetAsync(IObjectReference _obj, global::Microsoft.Windows.Management.Deployment.PackageSet packageSet, global::Microsoft.Windows.Management.Deployment.AddPackageOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __packageSet = default;
            ObjectReferenceValue __options = default;
            IntPtr __retval = default;
            try
            {
                __packageSet = global::ABI.Microsoft.Windows.Management.Deployment.PackageSet.CreateMarshaler2(packageSet);
                __options = global::ABI.Microsoft.Windows.Management.Deployment.AddPackageOptions.CreateMarshaler2(options);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, MarshalInspectable<object>.GetAbi(__packageSet), MarshalInspectable<object>.GetAbi(__options), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__packageSet);
                MarshalInspectable<object>.DisposeMarshaler(__options);
                MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress> StagePackageAsync(IObjectReference _obj, string package, global::Microsoft.Windows.Management.Deployment.StagePackageOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __options = default;
            IntPtr __retval = default;
            try
            {
                __options = global::ABI.Microsoft.Windows.Management.Deployment.StagePackageOptions.CreateMarshaler2(options);
                MarshalString.Pinnable __package = new(package);
                fixed(void* ___package = __package)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[15](ThisPtr, MarshalString.GetAbi(ref __package), MarshalInspectable<object>.GetAbi(__options), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__options);
                MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress> StagePackageByUriAsync(IObjectReference _obj, global::System.Uri packageUri, global::Microsoft.Windows.Management.Deployment.StagePackageOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __packageUri = default;
            ObjectReferenceValue __options = default;
            IntPtr __retval = default;
            try
            {
                __packageUri = global::ABI.System.Uri.CreateMarshaler2(packageUri);
                __options = global::ABI.Microsoft.Windows.Management.Deployment.StagePackageOptions.CreateMarshaler2(options);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[16](ThisPtr, MarshalInspectable<object>.GetAbi(__packageUri), MarshalInspectable<object>.GetAbi(__options), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__packageUri);
                MarshalInspectable<object>.DisposeMarshaler(__options);
                MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress> StagePackageSetAsync(IObjectReference _obj, global::Microsoft.Windows.Management.Deployment.PackageSet packageSet, global::Microsoft.Windows.Management.Deployment.StagePackageOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __packageSet = default;
            ObjectReferenceValue __options = default;
            IntPtr __retval = default;
            try
            {
                __packageSet = global::ABI.Microsoft.Windows.Management.Deployment.PackageSet.CreateMarshaler2(packageSet);
                __options = global::ABI.Microsoft.Windows.Management.Deployment.StagePackageOptions.CreateMarshaler2(options);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[17](ThisPtr, MarshalInspectable<object>.GetAbi(__packageSet), MarshalInspectable<object>.GetAbi(__options), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__packageSet);
                MarshalInspectable<object>.DisposeMarshaler(__options);
                MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress> RegisterPackageAsync(IObjectReference _obj, string package, global::Microsoft.Windows.Management.Deployment.RegisterPackageOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __options = default;
            IntPtr __retval = default;
            try
            {
                __options = global::ABI.Microsoft.Windows.Management.Deployment.RegisterPackageOptions.CreateMarshaler2(options);
                MarshalString.Pinnable __package = new(package);
                fixed(void* ___package = __package)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[18](ThisPtr, MarshalString.GetAbi(ref __package), MarshalInspectable<object>.GetAbi(__options), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__options);
                MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress> RegisterPackageByUriAsync(IObjectReference _obj, global::System.Uri packageUri, global::Microsoft.Windows.Management.Deployment.RegisterPackageOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __packageUri = default;
            ObjectReferenceValue __options = default;
            IntPtr __retval = default;
            try
            {
                __packageUri = global::ABI.System.Uri.CreateMarshaler2(packageUri);
                __options = global::ABI.Microsoft.Windows.Management.Deployment.RegisterPackageOptions.CreateMarshaler2(options);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[19](ThisPtr, MarshalInspectable<object>.GetAbi(__packageUri), MarshalInspectable<object>.GetAbi(__options), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__packageUri);
                MarshalInspectable<object>.DisposeMarshaler(__options);
                MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress> RegisterPackageSetAsync(IObjectReference _obj, global::Microsoft.Windows.Management.Deployment.PackageSet packageSet, global::Microsoft.Windows.Management.Deployment.RegisterPackageOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __packageSet = default;
            ObjectReferenceValue __options = default;
            IntPtr __retval = default;
            try
            {
                __packageSet = global::ABI.Microsoft.Windows.Management.Deployment.PackageSet.CreateMarshaler2(packageSet);
                __options = global::ABI.Microsoft.Windows.Management.Deployment.RegisterPackageOptions.CreateMarshaler2(options);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[20](ThisPtr, MarshalInspectable<object>.GetAbi(__packageSet), MarshalInspectable<object>.GetAbi(__options), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__packageSet);
                MarshalInspectable<object>.DisposeMarshaler(__options);
                MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress> RemovePackageAsync(IObjectReference _obj, string package, global::Microsoft.Windows.Management.Deployment.RemovePackageOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __options = default;
            IntPtr __retval = default;
            try
            {
                __options = global::ABI.Microsoft.Windows.Management.Deployment.RemovePackageOptions.CreateMarshaler2(options);
                MarshalString.Pinnable __package = new(package);
                fixed(void* ___package = __package)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[21](ThisPtr, MarshalString.GetAbi(ref __package), MarshalInspectable<object>.GetAbi(__options), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__options);
                MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress> RemovePackageByFullNameAsync(IObjectReference _obj, string packageFullName, global::Microsoft.Windows.Management.Deployment.RemovePackageOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __options = default;
            IntPtr __retval = default;
            try
            {
                __options = global::ABI.Microsoft.Windows.Management.Deployment.RemovePackageOptions.CreateMarshaler2(options);
                MarshalString.Pinnable __packageFullName = new(packageFullName);
                fixed(void* ___packageFullName = __packageFullName)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[22](ThisPtr, MarshalString.GetAbi(ref __packageFullName), MarshalInspectable<object>.GetAbi(__options), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__options);
                MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress> RemovePackageByFamilyNameAsync(IObjectReference _obj, string packageFamilyName, global::Microsoft.Windows.Management.Deployment.RemovePackageOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __options = default;
            IntPtr __retval = default;
            try
            {
                __options = global::ABI.Microsoft.Windows.Management.Deployment.RemovePackageOptions.CreateMarshaler2(options);
                MarshalString.Pinnable __packageFamilyName = new(packageFamilyName);
                fixed(void* ___packageFamilyName = __packageFamilyName)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[23](ThisPtr, MarshalString.GetAbi(ref __packageFamilyName), MarshalInspectable<object>.GetAbi(__options), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__options);
                MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress> RemovePackageByUriAsync(IObjectReference _obj, global::System.Uri packageUri, global::Microsoft.Windows.Management.Deployment.RemovePackageOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __packageUri = default;
            ObjectReferenceValue __options = default;
            IntPtr __retval = default;
            try
            {
                __packageUri = global::ABI.System.Uri.CreateMarshaler2(packageUri);
                __options = global::ABI.Microsoft.Windows.Management.Deployment.RemovePackageOptions.CreateMarshaler2(options);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[24](ThisPtr, MarshalInspectable<object>.GetAbi(__packageUri), MarshalInspectable<object>.GetAbi(__options), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__packageUri);
                MarshalInspectable<object>.DisposeMarshaler(__options);
                MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress> RemovePackageSetAsync(IObjectReference _obj, global::Microsoft.Windows.Management.Deployment.PackageSet packageSet, global::Microsoft.Windows.Management.Deployment.RemovePackageOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __packageSet = default;
            ObjectReferenceValue __options = default;
            IntPtr __retval = default;
            try
            {
                __packageSet = global::ABI.Microsoft.Windows.Management.Deployment.PackageSet.CreateMarshaler2(packageSet);
                __options = global::ABI.Microsoft.Windows.Management.Deployment.RemovePackageOptions.CreateMarshaler2(options);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[25](ThisPtr, MarshalInspectable<object>.GetAbi(__packageSet), MarshalInspectable<object>.GetAbi(__options), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__packageSet);
                MarshalInspectable<object>.DisposeMarshaler(__options);
                MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress> ResetPackageAsync(IObjectReference _obj, string package)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __package = new(package);
                fixed(void* ___package = __package)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[26](ThisPtr, MarshalString.GetAbi(ref __package), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress> ResetPackageByUriAsync(IObjectReference _obj, global::System.Uri packageUri)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __packageUri = default;
            IntPtr __retval = default;
            try
            {
                __packageUri = global::ABI.System.Uri.CreateMarshaler2(packageUri);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[27](ThisPtr, MarshalInspectable<object>.GetAbi(__packageUri), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__packageUri);
                MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress> ResetPackageSetAsync(IObjectReference _obj, global::Microsoft.Windows.Management.Deployment.PackageSet packageSet)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __packageSet = default;
            IntPtr __retval = default;
            try
            {
                __packageSet = global::ABI.Microsoft.Windows.Management.Deployment.PackageSet.CreateMarshaler2(packageSet);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[28](ThisPtr, MarshalInspectable<object>.GetAbi(__packageSet), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__packageSet);
                MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress> RepairPackageAsync(IObjectReference _obj, string package)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __package = new(package);
                fixed(void* ___package = __package)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[29](ThisPtr, MarshalString.GetAbi(ref __package), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress> RepairPackageByUriAsync(IObjectReference _obj, global::System.Uri packageUri)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __packageUri = default;
            IntPtr __retval = default;
            try
            {
                __packageUri = global::ABI.System.Uri.CreateMarshaler2(packageUri);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[30](ThisPtr, MarshalInspectable<object>.GetAbi(__packageUri), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__packageUri);
                MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress> RepairPackageSetAsync(IObjectReference _obj, global::Microsoft.Windows.Management.Deployment.PackageSet packageSet)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __packageSet = default;
            IntPtr __retval = default;
            try
            {
                __packageSet = global::ABI.Microsoft.Windows.Management.Deployment.PackageSet.CreateMarshaler2(packageSet);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[31](ThisPtr, MarshalInspectable<object>.GetAbi(__packageSet), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__packageSet);
                MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress> ProvisionPackageAsync(IObjectReference _obj, string package, global::Microsoft.Windows.Management.Deployment.ProvisionPackageOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __options = default;
            IntPtr __retval = default;
            try
            {
                __options = global::ABI.Microsoft.Windows.Management.Deployment.ProvisionPackageOptions.CreateMarshaler2(options);
                MarshalString.Pinnable __package = new(package);
                fixed(void* ___package = __package)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[32](ThisPtr, MarshalString.GetAbi(ref __package), MarshalInspectable<object>.GetAbi(__options), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__options);
                MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress> ProvisionPackageByUriAsync(IObjectReference _obj, global::System.Uri packageUri, global::Microsoft.Windows.Management.Deployment.ProvisionPackageOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __packageUri = default;
            ObjectReferenceValue __options = default;
            IntPtr __retval = default;
            try
            {
                __packageUri = global::ABI.System.Uri.CreateMarshaler2(packageUri);
                __options = global::ABI.Microsoft.Windows.Management.Deployment.ProvisionPackageOptions.CreateMarshaler2(options);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[33](ThisPtr, MarshalInspectable<object>.GetAbi(__packageUri), MarshalInspectable<object>.GetAbi(__options), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__packageUri);
                MarshalInspectable<object>.DisposeMarshaler(__options);
                MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress> ProvisionPackageSetAsync(IObjectReference _obj, global::Microsoft.Windows.Management.Deployment.PackageSet packageSet, global::Microsoft.Windows.Management.Deployment.ProvisionPackageOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __packageSet = default;
            ObjectReferenceValue __options = default;
            IntPtr __retval = default;
            try
            {
                __packageSet = global::ABI.Microsoft.Windows.Management.Deployment.PackageSet.CreateMarshaler2(packageSet);
                __options = global::ABI.Microsoft.Windows.Management.Deployment.ProvisionPackageOptions.CreateMarshaler2(options);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[34](ThisPtr, MarshalInspectable<object>.GetAbi(__packageSet), MarshalInspectable<object>.GetAbi(__options), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__packageSet);
                MarshalInspectable<object>.DisposeMarshaler(__options);
                MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress> DeprovisionPackageAsync(IObjectReference _obj, string package)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __package = new(package);
                fixed(void* ___package = __package)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[35](ThisPtr, MarshalString.GetAbi(ref __package), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress> DeprovisionPackageByUriAsync(IObjectReference _obj, global::System.Uri packageUri)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __packageUri = default;
            IntPtr __retval = default;
            try
            {
                __packageUri = global::ABI.System.Uri.CreateMarshaler2(packageUri);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[36](ThisPtr, MarshalInspectable<object>.GetAbi(__packageUri), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__packageUri);
                MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress> DeprovisionPackageSetAsync(IObjectReference _obj, global::Microsoft.Windows.Management.Deployment.PackageSet packageSet)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __packageSet = default;
            IntPtr __retval = default;
            try
            {
                __packageSet = global::ABI.Microsoft.Windows.Management.Deployment.PackageSet.CreateMarshaler2(packageSet);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[37](ThisPtr, MarshalInspectable<object>.GetAbi(__packageSet), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__packageSet);
                MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult, global::Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool IsPackageRegistrationPending(IObjectReference _obj, string packageFamilyName)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            MarshalString.Pinnable __packageFamilyName = new(packageFamilyName);
            fixed(void* ___packageFamilyName = __packageFamilyName)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte*, int>**)ThisPtr)[38](ThisPtr, MarshalString.GetAbi(ref __packageFamilyName), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
        }

        internal static unsafe bool IsPackageRegistrationPendingForUser(IObjectReference _obj, string userSecurityId, string packageFamilyName)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            MarshalString.Pinnable __userSecurityId = new(userSecurityId);
            MarshalString.Pinnable __packageFamilyName = new(packageFamilyName);
            fixed(void* ___userSecurityId = __userSecurityId, ___packageFamilyName = __packageFamilyName)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, byte*, int>**)ThisPtr)[39](ThisPtr, MarshalString.GetAbi(ref __userSecurityId), MarshalString.GetAbi(ref __packageFamilyName), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD8, 0x17, 0x17, 0xF4, 0xB2, 0x5A, 0xAC, 0x57, 0x83, 0xCD, 0xD0, 0xC4, 0x8C, 0xC7, 0x84, 0xCD };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F41717D8-5AB2-57AC-83CD-D0C48CC784CD")]
    internal interface IPackageDeploymentManager : global::Microsoft.Windows.Management.Deployment.IPackageDeploymentManager
    {
    }
    internal static class IPackageDeploymentManager2Methods
    {


        internal static unsafe global::Microsoft.Windows.Management.Deployment.PackageReadyOrNewerAvailableStatus IsPackageReadyOrNewerAvailable(IObjectReference _obj, string package)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.Management.Deployment.PackageReadyOrNewerAvailableStatus __retval = default;
            MarshalString.Pinnable __package = new(package);
            fixed(void* ___package = __package)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Microsoft.Windows.Management.Deployment.PackageReadyOrNewerAvailableStatus*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __package), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
        }

        internal static unsafe global::Microsoft.Windows.Management.Deployment.PackageReadyOrNewerAvailableStatus IsPackageReadyOrNewerAvailableByUri(IObjectReference _obj, global::System.Uri packageUri)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __packageUri = default;
            global::Microsoft.Windows.Management.Deployment.PackageReadyOrNewerAvailableStatus __retval = default;
            try
            {
                __packageUri = global::ABI.System.Uri.CreateMarshaler2(packageUri);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Microsoft.Windows.Management.Deployment.PackageReadyOrNewerAvailableStatus*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__packageUri), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__packageUri);
            }
        }

        internal static unsafe global::Microsoft.Windows.Management.Deployment.PackageReadyOrNewerAvailableStatus IsPackageSetReadyOrNewerAvailable(IObjectReference _obj, global::Microsoft.Windows.Management.Deployment.PackageSet packageSet)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __packageSet = default;
            global::Microsoft.Windows.Management.Deployment.PackageReadyOrNewerAvailableStatus __retval = default;
            try
            {
                __packageSet = global::ABI.Microsoft.Windows.Management.Deployment.PackageSet.CreateMarshaler2(packageSet);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Microsoft.Windows.Management.Deployment.PackageReadyOrNewerAvailableStatus*, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__packageSet), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__packageSet);
            }
        }

        internal static unsafe bool IsPackageProvisioned(IObjectReference _obj, string package)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            MarshalString.Pinnable __package = new(package);
            fixed(void* ___package = __package)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte*, int>**)ThisPtr)[9](ThisPtr, MarshalString.GetAbi(ref __package), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
        }

        internal static unsafe bool IsPackageProvisionedByUri(IObjectReference _obj, global::System.Uri packageUri)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __packageUri = default;
            byte __retval = default;
            try
            {
                __packageUri = global::ABI.System.Uri.CreateMarshaler2(packageUri);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte*, int>**)ThisPtr)[10](ThisPtr, MarshalInspectable<object>.GetAbi(__packageUri), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__packageUri);
            }
        }

        internal static unsafe bool IsPackageSetProvisioned(IObjectReference _obj, global::Microsoft.Windows.Management.Deployment.PackageSet packageSet)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __packageSet = default;
            byte __retval = default;
            try
            {
                __packageSet = global::ABI.Microsoft.Windows.Management.Deployment.PackageSet.CreateMarshaler2(packageSet);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte*, int>**)ThisPtr)[11](ThisPtr, MarshalInspectable<object>.GetAbi(__packageSet), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__packageSet);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF3, 0xD0, 0xC6, 0x6F, 0xDD, 0xF9, 0x14, 0x5C, 0x9D, 0x3F, 0x7, 0x71, 0x65, 0xED, 0xDF, 0x98 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("6FC6D0F3-F9DD-5C14-9D3F-077165EDDF98")]
    internal interface IPackageDeploymentManager2 : global::Microsoft.Windows.Management.Deployment.IPackageDeploymentManager2
    {
    }
    internal static class IPackageDeploymentManagerStaticsMethods
    {


        internal static unsafe global::Microsoft.Windows.Management.Deployment.PackageDeploymentManager GetDefault(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Windows.Management.Deployment.PackageDeploymentManager.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Windows.Management.Deployment.PackageDeploymentManager.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC6, 0x4A, 0xDA, 0xDB, 0x28, 0xCA, 0xB8, 0x59, 0x9F, 0xC6, 0xDB, 0xFB, 0x57, 0x65, 0xF1, 0xC2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("DBDA4AC6-CA28-59B8-9FC6-DBFB5765F1C2")]
    internal interface IPackageDeploymentManagerStatics : global::Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerStatics
    {
    }
    internal static class IPackageDeploymentManagerStatics2Methods
    {


        internal static unsafe bool IsPackageDeploymentFeatureSupported(IObjectReference _obj, global::Microsoft.Windows.Management.Deployment.PackageDeploymentFeature feature)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.Management.Deployment.PackageDeploymentFeature, byte*, int>**)ThisPtr)[6](ThisPtr, feature, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x86, 0x14, 0xC3, 0xE, 0xB5, 0x0, 0x37, 0x59, 0x8C, 0xD4, 0x75, 0x92, 0x60, 0xFD, 0xC4, 0xA2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("0EC31486-00B5-5937-8CD4-759260FDC4A2")]
    internal interface IPackageDeploymentManagerStatics2 : global::Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerStatics2
    {
    }
    internal static class IPackageDeploymentResultMethods
    {

        internal static unsafe Guid get_ActivityId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            Guid __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, Guid*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::System.Exception get_Error(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.Exception __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.Exception*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.Exception.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.Exception.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_ErrorText(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Exception get_ExtendedError(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.Exception __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.Exception*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.Exception.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.Exception.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Windows.Management.Deployment.PackageDeploymentStatus get_Status(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.Management.Deployment.PackageDeploymentStatus __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.Management.Deployment.PackageDeploymentStatus*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x1, 0x96, 0xB9, 0xD6, 0xC2, 0x18, 0x9E, 0x59, 0x8B, 0xD1, 0x40, 0xA9, 0x31, 0xA, 0xD2, 0x63 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D6B99601-18C2-599E-8BD1-40A9310AD263")]
    internal interface IPackageDeploymentResult : global::Microsoft.Windows.Management.Deployment.IPackageDeploymentResult
    {
    }
    internal static class IPackageRuntimeManagerMethods
    {


        internal static unsafe global::Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition AddPackageSet(IObjectReference _obj, global::Microsoft.Windows.Management.Deployment.PackageSet packageSet)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __packageSet = default;
            IntPtr __retval = default;
            try
            {
                __packageSet = global::ABI.Microsoft.Windows.Management.Deployment.PackageSet.CreateMarshaler2(packageSet);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__packageSet), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__packageSet);
                global::ABI.Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition AddPackageSet(IObjectReference _obj, global::Microsoft.Windows.Management.Deployment.PackageSet packageSet, global::Microsoft.Windows.ApplicationModel.DynamicDependency.CreatePackageDependencyOptions createOptions, global::Microsoft.Windows.ApplicationModel.DynamicDependency.AddPackageDependencyOptions addOptions)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __packageSet = default;
            ObjectReferenceValue __createOptions = default;
            ObjectReferenceValue __addOptions = default;
            IntPtr __retval = default;
            try
            {
                __packageSet = global::ABI.Microsoft.Windows.Management.Deployment.PackageSet.CreateMarshaler2(packageSet);
                __createOptions = global::ABI.Microsoft.Windows.ApplicationModel.DynamicDependency.CreatePackageDependencyOptions.CreateMarshaler2(createOptions);
                __addOptions = global::ABI.Microsoft.Windows.ApplicationModel.DynamicDependency.AddPackageDependencyOptions.CreateMarshaler2(addOptions);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__packageSet), MarshalInspectable<object>.GetAbi(__createOptions), MarshalInspectable<object>.GetAbi(__addOptions), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__packageSet);
                MarshalInspectable<object>.DisposeMarshaler(__createOptions);
                MarshalInspectable<object>.DisposeMarshaler(__addOptions);
                global::ABI.Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition.DisposeAbi(__retval);
            }
        }

        internal static unsafe void RemovePackageSet(IObjectReference _obj, global::Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition packageSetRuntimeDisposition)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __packageSetRuntimeDisposition = default;
            try
            {
                __packageSetRuntimeDisposition = global::ABI.Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition.CreateMarshaler2(packageSetRuntimeDisposition);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__packageSetRuntimeDisposition)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__packageSetRuntimeDisposition);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x29, 0xFD, 0xF0, 0x6B, 0x2A, 0x6C, 0xD1, 0x58, 0xAF, 0xC, 0xAB, 0xD2, 0xEA, 0xC4, 0x5E, 0x29 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("6BF0FD29-6C2A-58D1-AF0C-ABD2EAC45E29")]
    internal interface IPackageRuntimeManager : global::Microsoft.Windows.Management.Deployment.IPackageRuntimeManager
    {
    }
    internal static class IPackageRuntimeManagerStaticsMethods
    {


        internal static unsafe global::Microsoft.Windows.Management.Deployment.PackageRuntimeManager GetDefault(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Windows.Management.Deployment.PackageRuntimeManager.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Windows.Management.Deployment.PackageRuntimeManager.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xDE, 0x47, 0x9, 0x79, 0xD4, 0x1, 0x58, 0x58, 0xAA, 0x69, 0x9C, 0x93, 0x90, 0xFB, 0x7D, 0x3E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("790947DE-01D4-5858-AA69-9C9390FB7D3E")]
    internal interface IPackageRuntimeManagerStatics : global::Microsoft.Windows.Management.Deployment.IPackageRuntimeManagerStatics
    {
    }
    internal static class IPackageSetMethods
    {

        internal static unsafe string get_Id(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Id(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::System.Collections.Generic.IList<global::Microsoft.Windows.Management.Deployment.PackageSetItem> get_Items(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_Windows_Management_Deployment_PackageSetItem.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.Windows.Management.Deployment.PackageSetItem>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.Windows.Management.Deployment.PackageSetItem>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Uri get_PackageUri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.Uri.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.Uri.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_PackageUri(IObjectReference _obj, global::System.Uri value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.System.Uri.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x93, 0xDF, 0x9F, 0x22, 0x29, 0x85, 0x8D, 0x5F, 0x98, 0x8C, 0xAF, 0x8A, 0x39, 0xAD, 0x46, 0xF7 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("229FDF93-8529-5F8D-988C-AF8A39AD46F7")]
    internal interface IPackageSet : global::Microsoft.Windows.Management.Deployment.IPackageSet
    {
    }
    internal static class IPackageSetItemMethods
    {

        internal static unsafe string get_Id(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Id(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::Windows.ApplicationModel.PackageVersion get_MinVersion(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.ApplicationModel.PackageVersion __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.ApplicationModel.PackageVersion*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_MinVersion(IObjectReference _obj, global::Windows.ApplicationModel.PackageVersion value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.ApplicationModel.PackageVersion, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe string get_PackageFamilyName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_PackageFamilyName(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::System.Uri get_PackageUri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.Uri.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.Uri.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_PackageUri(IObjectReference _obj, global::System.Uri value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.System.Uri.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[15](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.Windows.ApplicationModel.DynamicDependency.PackageDependencyProcessorArchitectures get_ProcessorArchitectureFilter(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.ApplicationModel.DynamicDependency.PackageDependencyProcessorArchitectures __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.ApplicationModel.DynamicDependency.PackageDependencyProcessorArchitectures*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ProcessorArchitectureFilter(IObjectReference _obj, global::Microsoft.Windows.ApplicationModel.DynamicDependency.PackageDependencyProcessorArchitectures value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.ApplicationModel.DynamicDependency.PackageDependencyProcessorArchitectures, int>**)ThisPtr)[13](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x15, 0x4E, 0x25, 0x8F, 0x71, 0xC3, 0xF, 0x55, 0xB4, 0xE8, 0x3F, 0xB, 0xB1, 0xAE, 0x37, 0x5F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8F254E15-C371-550F-B4E8-3F0BB1AE375F")]
    internal interface IPackageSetItem : global::Microsoft.Windows.Management.Deployment.IPackageSetItem
    {
    }
    internal static class IPackageSetItemRuntimeDispositionMethods
    {

        internal static unsafe global::Microsoft.Windows.ApplicationModel.DynamicDependency.PackageDependencyContextId get_PackageDependencyContextId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.ApplicationModel.DynamicDependency.PackageDependencyContextId __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.ApplicationModel.DynamicDependency.PackageDependencyContextId*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe string get_PackageDependencyId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_PackageFullName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_PackageSetItemId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x70, 0x9F, 0x7F, 0x7A, 0x16, 0xD4, 0x83, 0x5F, 0xA3, 0xCD, 0x2, 0x7B, 0xF3, 0xD2, 0xAB, 0xFD };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("7A7F9F70-D416-5F83-A3CD-027BF3D2ABFD")]
    internal interface IPackageSetItemRuntimeDisposition : global::Microsoft.Windows.Management.Deployment.IPackageSetItemRuntimeDisposition
    {
    }
    internal static class IPackageSetRuntimeDispositionMethods
    {

        internal static unsafe string get_PackageSetId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_PackageSetId(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::System.Collections.Generic.IList<global::Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition> get_PackageSetItemRuntimeDispositions(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_Windows_Management_Deployment_PackageSetItemRuntimeDisposition.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition>>.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x88, 0x10, 0x3F, 0xC1, 0x36, 0xEA, 0xB3, 0x5D, 0xBC, 0xDD, 0xE6, 0xD5, 0x9E, 0x6C, 0x9B, 0x71 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C13F1088-EA36-5DB3-BCDD-E6D59E6C9B71")]
    internal interface IPackageSetRuntimeDisposition : global::Microsoft.Windows.Management.Deployment.IPackageSetRuntimeDisposition
    {
    }
    internal static class IPackageVolumeMethods
    {


        internal static unsafe bool IsRepairNeeded(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe void Repair(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[14](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }
        internal static unsafe bool get_IsAppxInstallSupported(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_IsFullTrustPackageSupported(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_IsSystemVolume(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe string get_MountPoint(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_Name(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_PackageStorePath(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool get_SupportsHardLinks(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF4, 0x10, 0x97, 0x9C, 0x5A, 0x79, 0xB3, 0x58, 0x93, 0xF4, 0xC9, 0x91, 0xC4, 0x32, 0x9C, 0x49 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("9C9710F4-795A-58B3-93F4-C991C4329C49")]
    internal interface IPackageVolume : global::Microsoft.Windows.Management.Deployment.IPackageVolume
    {
    }
    internal static class IPackageVolumeStaticsMethods
    {


        internal static unsafe global::System.Collections.Generic.IList<global::Microsoft.Windows.Management.Deployment.PackageVolume> FindPackageVolumes(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_Windows_Management_Deployment_PackageVolume.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.Windows.Management.Deployment.PackageVolume>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.Windows.Management.Deployment.PackageVolume>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Windows.Management.Deployment.PackageVolume FindPackageVolumeByPath(IObjectReference _obj, string packageStorePath)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __packageStorePath = new(packageStorePath);
                fixed(void* ___packageStorePath = __packageStorePath)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __packageStorePath), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.Windows.Management.Deployment.PackageVolume.FromAbi(__retval);
                }
            }
            finally
            {
                global::ABI.Microsoft.Windows.Management.Deployment.PackageVolume.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Windows.Management.Deployment.PackageVolume FindPackageVolumeByName(IObjectReference _obj, string name)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __name = new(name);
                fixed(void* ___name = __name)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, MarshalString.GetAbi(ref __name), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.Windows.Management.Deployment.PackageVolume.FromAbi(__retval);
                }
            }
            finally
            {
                global::ABI.Microsoft.Windows.Management.Deployment.PackageVolume.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x35, 0x18, 0x73, 0x4C, 0xC0, 0x8B, 0x13, 0x53, 0x9B, 0x56, 0x8A, 0x41, 0x0, 0xEA, 0xEA, 0x1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4C731835-8BC0-5313-9B56-8A4100EAEA01")]
    internal interface IPackageVolumeStatics : global::Microsoft.Windows.Management.Deployment.IPackageVolumeStatics
    {
    }
    internal static class IProvisionPackageOptionsMethods
    {

        internal static unsafe bool get_IsOptionalPackageFamilyNamesSupported(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_IsProjectionOrderPackageFamilyNamesSupported(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe global::System.Collections.Generic.IList<string> get_OptionalPackageFamilyNames(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_String.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<string>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<string>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Collections.Generic.IList<string> get_ProjectionOrderPackageFamilyNames(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_String.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<string>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<string>>.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF, 0x30, 0x5E, 0x41, 0xE3, 0xD1, 0x1E, 0x58, 0xA1, 0x14, 0x76, 0xD2, 0x77, 0xB0, 0x61, 0x36 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("415E300F-D1E3-581E-A114-76D277B06136")]
    internal interface IProvisionPackageOptions : global::Microsoft.Windows.Management.Deployment.IProvisionPackageOptions
    {
    }
    internal static class IRegisterPackageOptionsMethods
    {

        internal static unsafe bool get_AllowUnsigned(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_AllowUnsigned(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[14](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.Windows.Management.Deployment.PackageVolume get_AppDataVolume(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Windows.Management.Deployment.PackageVolume.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Windows.Management.Deployment.PackageVolume.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_AppDataVolume(IObjectReference _obj, global::Microsoft.Windows.Management.Deployment.PackageVolume value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.Windows.Management.Deployment.PackageVolume.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe bool get_DeferRegistrationWhenPackagesAreInUse(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[27](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_DeferRegistrationWhenPackagesAreInUse(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[28](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::System.Collections.Generic.IList<string> get_DependencyPackageFamilyNames(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_String.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<string>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<string>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Collections.Generic.IList<global::System.Uri> get_DependencyPackageUris(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Windows_Foundation_Uri.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<global::System.Uri>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<global::System.Uri>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool get_DeveloperMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[15](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_DeveloperMode(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[16](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::System.Collections.Generic.IDictionary<global::System.Uri, string> get_ExpectedDigests(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[30](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMap_2_Windows_Foundation_Uri__String.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IDictionary<global::System.Uri, string>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IDictionary<global::System.Uri, string>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Uri get_ExternalLocationUri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.Uri.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.Uri.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ExternalLocationUri(IObjectReference _obj, global::System.Uri value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.System.Uri.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[12](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe bool get_ForceAppShutdown(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[17](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_ForceAppShutdown(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[18](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_ForceTargetAppShutdown(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[19](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_ForceTargetAppShutdown(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[20](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_ForceUpdateFromAnyVersion(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[21](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_ForceUpdateFromAnyVersion(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[22](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_InstallAllResources(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[23](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_InstallAllResources(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[24](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsExpectedDigestsSupported(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[29](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe global::System.Collections.Generic.IList<string> get_OptionalPackageFamilyNames(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_String.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<string>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<string>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool get_StageInPlace(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[25](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_StageInPlace(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[26](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x23, 0x86, 0x6, 0x83, 0x46, 0x20, 0x5F, 0x50, 0x84, 0x25, 0x55, 0x22, 0x6C, 0xF, 0x84, 0xCC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("83068623-2046-505F-8425-55226C0F84CC")]
    internal interface IRegisterPackageOptions : global::Microsoft.Windows.Management.Deployment.IRegisterPackageOptions
    {
    }
    internal static class IRemovePackageOptionsMethods
    {

        internal static unsafe bool get_FailIfNotFound(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_FailIfNotFound(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_PreserveApplicationData(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_PreserveApplicationData(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[9](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_PreserveRoamableApplicationData(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_PreserveRoamableApplicationData(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[11](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_RemoveForAllUsers(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_RemoveForAllUsers(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[13](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x95, 0x5, 0xC9, 0xE7, 0x44, 0x9A, 0x46, 0x50, 0x8E, 0xBF, 0x41, 0xED, 0x32, 0x6B, 0x20, 0xE };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E7C90595-9A44-5046-8EBF-41ED326B200E")]
    internal interface IRemovePackageOptions : global::Microsoft.Windows.Management.Deployment.IRemovePackageOptions
    {
    }
    internal static class IStagePackageOptionsMethods
    {

        internal static unsafe bool get_AllowUnsigned(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[26](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_AllowUnsigned(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[27](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::System.Collections.Generic.IList<global::System.Uri> get_DependencyPackageUris(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Windows_Foundation_Uri.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<global::System.Uri>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<global::System.Uri>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool get_DeveloperMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[16](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_DeveloperMode(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[17](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::System.Collections.Generic.IDictionary<global::System.Uri, string> get_ExpectedDigests(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[29](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMap_2_Windows_Foundation_Uri__String.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IDictionary<global::System.Uri, string>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IDictionary<global::System.Uri, string>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Uri get_ExternalLocationUri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.Uri.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.Uri.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ExternalLocationUri(IObjectReference _obj, global::System.Uri value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.System.Uri.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[13](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe bool get_ForceUpdateFromAnyVersion(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[18](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_ForceUpdateFromAnyVersion(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[19](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_InstallAllResources(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[20](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_InstallAllResources(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[21](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsExpectedDigestsSupported(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[28](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe global::System.Collections.Generic.IList<string> get_OptionalPackageFamilyNames(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_String.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<string>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<string>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Collections.Generic.IList<global::System.Uri> get_OptionalPackageUris(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Windows_Foundation_Uri.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<global::System.Uri>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<global::System.Uri>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Collections.Generic.IList<global::System.Uri> get_RelatedPackageUris(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Windows_Foundation_Uri.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<global::System.Uri>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<global::System.Uri>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool get_RequiredContentGroupOnly(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[22](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_RequiredContentGroupOnly(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[23](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_StageInPlace(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[24](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_StageInPlace(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[25](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.Windows.Management.Deployment.StubPackageOption get_StubPackageOption(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.Management.Deployment.StubPackageOption __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.Management.Deployment.StubPackageOption*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_StubPackageOption(IObjectReference _obj, global::Microsoft.Windows.Management.Deployment.StubPackageOption value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.Management.Deployment.StubPackageOption, int>**)ThisPtr)[15](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.Windows.Management.Deployment.PackageVolume get_TargetVolume(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Windows.Management.Deployment.PackageVolume.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Windows.Management.Deployment.PackageVolume.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_TargetVolume(IObjectReference _obj, global::Microsoft.Windows.Management.Deployment.PackageVolume value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.Windows.Management.Deployment.PackageVolume.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3, 0x32, 0x6B, 0x9B, 0x7C, 0xFD, 0xAD, 0x5E, 0xA9, 0xD6, 0xAB, 0x2E, 0x85, 0x66, 0xBE, 0x5E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("9B6B3203-FD7C-5EAD-A9D6-AB2E8566BE5E")]
    internal interface IStagePackageOptions : global::Microsoft.Windows.Management.Deployment.IStagePackageOptions
    {
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PackageDeploymentManager
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.Management.Deployment.PackageDeploymentManager obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.Management.Deployment.PackageDeploymentManager>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.Management.Deployment.PackageDeploymentManager obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.Management.Deployment.PackageDeploymentManager FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.Management.Deployment.PackageDeploymentManager.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.Management.Deployment.PackageDeploymentManager obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageDeploymentManager>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.Management.Deployment.PackageDeploymentManager[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageDeploymentManager>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageDeploymentManager>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.Management.Deployment.PackageDeploymentManager[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageDeploymentManager>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.Management.Deployment.PackageDeploymentManager[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageDeploymentManager>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.Management.Deployment.PackageDeploymentManager[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageDeploymentManager>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageDeploymentManager>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageDeploymentManager>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PackageDeploymentManagerRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.Management.Deployment.PackageDeploymentManager(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PackageDeploymentResult
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentResultMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentResultMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PackageDeploymentResultRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.Management.Deployment.PackageDeploymentResult(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PackageRuntimeManager
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.Management.Deployment.PackageRuntimeManager obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.Management.Deployment.PackageRuntimeManager>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.Management.Deployment.IPackageRuntimeManagerMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.Management.Deployment.PackageRuntimeManager obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.Management.Deployment.IPackageRuntimeManagerMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.Management.Deployment.PackageRuntimeManager FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.Management.Deployment.PackageRuntimeManager.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.Management.Deployment.PackageRuntimeManager obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageRuntimeManager>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.Management.Deployment.PackageRuntimeManager[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageRuntimeManager>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageRuntimeManager>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.Management.Deployment.PackageRuntimeManager[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageRuntimeManager>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.Management.Deployment.PackageRuntimeManager[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageRuntimeManager>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.Management.Deployment.PackageRuntimeManager[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageRuntimeManager>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageRuntimeManager>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageRuntimeManager>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PackageRuntimeManagerRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.Management.Deployment.PackageRuntimeManager(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PackageSet
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.Management.Deployment.PackageSet obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.Management.Deployment.PackageSet>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.Management.Deployment.PackageSet obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.Management.Deployment.PackageSet FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.Management.Deployment.PackageSet.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.Management.Deployment.PackageSet obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageSet>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.Management.Deployment.PackageSet[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageSet>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageSet>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.Management.Deployment.PackageSet[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageSet>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.Management.Deployment.PackageSet[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageSet>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.Management.Deployment.PackageSet[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageSet>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageSet>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageSet>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PackageSetRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.Management.Deployment.PackageSet(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PackageSetItem
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.Management.Deployment.PackageSetItem obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.Management.Deployment.PackageSetItem>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetItemMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.Management.Deployment.PackageSetItem obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetItemMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.Management.Deployment.PackageSetItem FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.Management.Deployment.PackageSetItem.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.Management.Deployment.PackageSetItem obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageSetItem>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.Management.Deployment.PackageSetItem[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageSetItem>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageSetItem>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.Management.Deployment.PackageSetItem[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageSetItem>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.Management.Deployment.PackageSetItem[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageSetItem>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.Management.Deployment.PackageSetItem[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageSetItem>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageSetItem>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageSetItem>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PackageSetItemRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.Management.Deployment.PackageSetItem(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PackageSetItemRuntimeDisposition
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetItemRuntimeDispositionMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetItemRuntimeDispositionMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PackageSetItemRuntimeDispositionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PackageSetRuntimeDisposition
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetRuntimeDispositionMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.Management.Deployment.IPackageSetRuntimeDispositionMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PackageSetRuntimeDispositionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PackageVolume
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.Management.Deployment.PackageVolume obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.Management.Deployment.PackageVolume>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.Management.Deployment.IPackageVolumeMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.Management.Deployment.PackageVolume obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.Management.Deployment.IPackageVolumeMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.Management.Deployment.PackageVolume FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.Management.Deployment.PackageVolume.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.Management.Deployment.PackageVolume obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageVolume>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.Management.Deployment.PackageVolume[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageVolume>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageVolume>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.Management.Deployment.PackageVolume[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageVolume>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.Management.Deployment.PackageVolume[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageVolume>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.Management.Deployment.PackageVolume[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageVolume>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageVolume>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.PackageVolume>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PackageVolumeRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.Management.Deployment.PackageVolume(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ProvisionPackageOptions
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.Management.Deployment.ProvisionPackageOptions obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.Management.Deployment.ProvisionPackageOptions>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.Management.Deployment.IProvisionPackageOptionsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.Management.Deployment.ProvisionPackageOptions obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.Management.Deployment.IProvisionPackageOptionsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.Management.Deployment.ProvisionPackageOptions FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.Management.Deployment.ProvisionPackageOptions.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.Management.Deployment.ProvisionPackageOptions obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.ProvisionPackageOptions>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.Management.Deployment.ProvisionPackageOptions[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.ProvisionPackageOptions>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.ProvisionPackageOptions>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.Management.Deployment.ProvisionPackageOptions[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.ProvisionPackageOptions>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.Management.Deployment.ProvisionPackageOptions[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.ProvisionPackageOptions>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.Management.Deployment.ProvisionPackageOptions[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.ProvisionPackageOptions>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.ProvisionPackageOptions>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.ProvisionPackageOptions>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ProvisionPackageOptionsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.Management.Deployment.ProvisionPackageOptions(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct RegisterPackageOptions
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.Management.Deployment.RegisterPackageOptions obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.Management.Deployment.RegisterPackageOptions>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptionsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.Management.Deployment.RegisterPackageOptions obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptionsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.Management.Deployment.RegisterPackageOptions FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.Management.Deployment.RegisterPackageOptions.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.Management.Deployment.RegisterPackageOptions obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.RegisterPackageOptions>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.Management.Deployment.RegisterPackageOptions[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.RegisterPackageOptions>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.RegisterPackageOptions>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.Management.Deployment.RegisterPackageOptions[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.RegisterPackageOptions>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.Management.Deployment.RegisterPackageOptions[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.RegisterPackageOptions>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.Management.Deployment.RegisterPackageOptions[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.RegisterPackageOptions>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.RegisterPackageOptions>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.RegisterPackageOptions>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class RegisterPackageOptionsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.Management.Deployment.RegisterPackageOptions(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct RemovePackageOptions
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.Management.Deployment.RemovePackageOptions obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.Management.Deployment.RemovePackageOptions>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.Management.Deployment.IRemovePackageOptionsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.Management.Deployment.RemovePackageOptions obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.Management.Deployment.IRemovePackageOptionsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.Management.Deployment.RemovePackageOptions FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.Management.Deployment.RemovePackageOptions.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.Management.Deployment.RemovePackageOptions obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.RemovePackageOptions>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.Management.Deployment.RemovePackageOptions[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.RemovePackageOptions>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.RemovePackageOptions>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.Management.Deployment.RemovePackageOptions[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.RemovePackageOptions>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.Management.Deployment.RemovePackageOptions[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.RemovePackageOptions>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.Management.Deployment.RemovePackageOptions[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.RemovePackageOptions>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.RemovePackageOptions>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.RemovePackageOptions>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class RemovePackageOptionsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.Management.Deployment.RemovePackageOptions(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct StagePackageOptions
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.Management.Deployment.StagePackageOptions obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.Management.Deployment.StagePackageOptions>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.Management.Deployment.IStagePackageOptionsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.Management.Deployment.StagePackageOptions obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.Management.Deployment.IStagePackageOptionsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.Management.Deployment.StagePackageOptions FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.Management.Deployment.StagePackageOptions.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.Management.Deployment.StagePackageOptions obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.StagePackageOptions>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.Management.Deployment.StagePackageOptions[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.StagePackageOptions>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.StagePackageOptions>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.Management.Deployment.StagePackageOptions[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.StagePackageOptions>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.Management.Deployment.StagePackageOptions[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.StagePackageOptions>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.Management.Deployment.StagePackageOptions[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.StagePackageOptions>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.StagePackageOptions>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.Management.Deployment.StagePackageOptions>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class StagePackageOptionsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.Management.Deployment.StagePackageOptions(inspectable.ObjRef);
    }
}
#pragma warning restore CA1416
