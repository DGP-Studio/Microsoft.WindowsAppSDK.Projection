//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.Graphics.Display
{
    [global::WinRT.WindowsRuntimeType("Microsoft.Graphics")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Graphics.Display.DisplayAdvancedColorInfo))]
    [global::ABI.Microsoft.Graphics.Display.DisplayAdvancedColorInfoRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDisplayAdvancedColorInfo))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65538u)]
    public sealed class DisplayAdvancedColorInfo : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DisplayAdvancedColorInfo>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Graphics_Display_IDisplayAdvancedColorInfo => _inner;


        public static DisplayAdvancedColorInfo FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DisplayAdvancedColorInfo>.FromAbi(thisPtr);
        }

        internal DisplayAdvancedColorInfo(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Graphics.Display.IDisplayAdvancedColorInfoMethods.IID);

        }


        public static bool operator ==(DisplayAdvancedColorInfo x, DisplayAdvancedColorInfo y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DisplayAdvancedColorInfo x, DisplayAdvancedColorInfo y) => !(x == y);
        public bool Equals(DisplayAdvancedColorInfo other) => this == other;
        public override bool Equals(object obj) => obj is DisplayAdvancedColorInfo that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool IsHdrMetadataFormatCurrentlySupported(DisplayHdrMetadataFormat format) => global::ABI.Microsoft.Graphics.Display.IDisplayAdvancedColorInfoMethods.IsHdrMetadataFormatCurrentlySupported(_objRef_global__Microsoft_Graphics_Display_IDisplayAdvancedColorInfo, format);

        public bool IsAdvancedColorKindAvailable(DisplayAdvancedColorKind kind) => global::ABI.Microsoft.Graphics.Display.IDisplayAdvancedColorInfoMethods.IsAdvancedColorKindAvailable(_objRef_global__Microsoft_Graphics_Display_IDisplayAdvancedColorInfo, kind);

        public global::Windows.Foundation.Point BluePrimary => global::ABI.Microsoft.Graphics.Display.IDisplayAdvancedColorInfoMethods.get_BluePrimary(_objRef_global__Microsoft_Graphics_Display_IDisplayAdvancedColorInfo);

        public DisplayAdvancedColorKind CurrentAdvancedColorKind => global::ABI.Microsoft.Graphics.Display.IDisplayAdvancedColorInfoMethods.get_CurrentAdvancedColorKind(_objRef_global__Microsoft_Graphics_Display_IDisplayAdvancedColorInfo);

        public global::Windows.Foundation.Point GreenPrimary => global::ABI.Microsoft.Graphics.Display.IDisplayAdvancedColorInfoMethods.get_GreenPrimary(_objRef_global__Microsoft_Graphics_Display_IDisplayAdvancedColorInfo);

        public double MaxAverageFullFrameLuminanceInNits => global::ABI.Microsoft.Graphics.Display.IDisplayAdvancedColorInfoMethods.get_MaxAverageFullFrameLuminanceInNits(_objRef_global__Microsoft_Graphics_Display_IDisplayAdvancedColorInfo);

        public double MaxLuminanceInNits => global::ABI.Microsoft.Graphics.Display.IDisplayAdvancedColorInfoMethods.get_MaxLuminanceInNits(_objRef_global__Microsoft_Graphics_Display_IDisplayAdvancedColorInfo);

        public double MinLuminanceInNits => global::ABI.Microsoft.Graphics.Display.IDisplayAdvancedColorInfoMethods.get_MinLuminanceInNits(_objRef_global__Microsoft_Graphics_Display_IDisplayAdvancedColorInfo);

        public global::Windows.Foundation.Point RedPrimary => global::ABI.Microsoft.Graphics.Display.IDisplayAdvancedColorInfoMethods.get_RedPrimary(_objRef_global__Microsoft_Graphics_Display_IDisplayAdvancedColorInfo);

        public double SdrWhiteLevelInNits => global::ABI.Microsoft.Graphics.Display.IDisplayAdvancedColorInfoMethods.get_SdrWhiteLevelInNits(_objRef_global__Microsoft_Graphics_Display_IDisplayAdvancedColorInfo);

        public global::Windows.Foundation.Point WhitePoint => global::ABI.Microsoft.Graphics.Display.IDisplayAdvancedColorInfoMethods.get_WhitePoint(_objRef_global__Microsoft_Graphics_Display_IDisplayAdvancedColorInfo);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Graphics")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<DisplayAdvancedColorKind>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65538u)]
    public enum DisplayAdvancedColorKind : int
    {
        StandardDynamicRange = unchecked((int)0),
        WideColorGamut = unchecked((int)0x1),
        HighDynamicRange = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Graphics")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<DisplayHdrMetadataFormat>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65538u)]
    public enum DisplayHdrMetadataFormat : int
    {
        Hdr10 = unchecked((int)0),
        Hdr10Plus = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Graphics")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Graphics.Display.DisplayInformation))]
    [global::ABI.Microsoft.Graphics.Display.DisplayInformationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDisplayInformation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65538u)]
    public sealed class DisplayInformation : global::System.IDisposable, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DisplayInformation>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Graphics_Display_IDisplayInformation => _inner;
        private volatile IObjectReference ___objRef_global__Microsoft_Graphics_Display_IDisplayInformation2;
        private IObjectReference Make___objRef_global__Microsoft_Graphics_Display_IDisplayInformation2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Graphics_Display_IDisplayInformation2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Graphics.Display.IDisplayInformation2Methods.IID), null);
            return ___objRef_global__Microsoft_Graphics_Display_IDisplayInformation2;
        }
        private IObjectReference _objRef_global__Microsoft_Graphics_Display_IDisplayInformation2 => ___objRef_global__Microsoft_Graphics_Display_IDisplayInformation2 ?? Make___objRef_global__Microsoft_Graphics_Display_IDisplayInformation2();

        private volatile IObjectReference ___objRef_global__System_IDisposable;
        private IObjectReference Make___objRef_global__System_IDisposable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_IDisposable, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.IDisposableMethods.IID), null);
            return ___objRef_global__System_IDisposable;
        }
        private IObjectReference _objRef_global__System_IDisposable => ___objRef_global__System_IDisposable ?? Make___objRef_global__System_IDisposable();



        public static I As<I>() => ActivationFactory.Get("Microsoft.Graphics.Display.DisplayInformation").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_Graphics_Display_IDisplayInformationStatics;
        private static IObjectReference _objRef_global__Microsoft_Graphics_Display_IDisplayInformationStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Graphics_Display_IDisplayInformationStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Graphics_Display_IDisplayInformationStatics = ActivationFactory.Get("Microsoft.Graphics.Display.DisplayInformation", global::ABI.Microsoft.Graphics.Display.IDisplayInformationStaticsMethods.IID);
                }
            }
        }

        public static DisplayInformation CreateForWindowId(global::Microsoft.UI.WindowId windowId) => global::ABI.Microsoft.Graphics.Display.IDisplayInformationStaticsMethods.CreateForWindowId(_objRef_global__Microsoft_Graphics_Display_IDisplayInformationStatics, windowId);

        public static DisplayInformation CreateForDisplayId(global::Microsoft.UI.DisplayId displayId) => global::ABI.Microsoft.Graphics.Display.IDisplayInformationStaticsMethods.CreateForDisplayId(_objRef_global__Microsoft_Graphics_Display_IDisplayInformationStatics, displayId);

        public static DisplayInformation FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DisplayInformation>.FromAbi(thisPtr);
        }

        internal DisplayInformation(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Graphics.Display.IDisplayInformationMethods.IID);

        }


        public static bool operator ==(DisplayInformation x, DisplayInformation y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DisplayInformation x, DisplayInformation y) => !(x == y);
        public bool Equals(DisplayInformation other) => this == other;
        public override bool Equals(object obj) => obj is DisplayInformation that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.Streams.IRandomAccessStream> GetColorProfileAsync() => global::ABI.Microsoft.Graphics.Display.IDisplayInformationMethods.GetColorProfileAsync(_objRef_global__Microsoft_Graphics_Display_IDisplayInformation);

        public global::Windows.Storage.Streams.IRandomAccessStream GetColorProfile() => global::ABI.Microsoft.Graphics.Display.IDisplayInformationMethods.GetColorProfile(_objRef_global__Microsoft_Graphics_Display_IDisplayInformation);

        public DisplayAdvancedColorInfo GetAdvancedColorInfo() => global::ABI.Microsoft.Graphics.Display.IDisplayInformationMethods.GetAdvancedColorInfo(_objRef_global__Microsoft_Graphics_Display_IDisplayInformation);

        public event global::Windows.Foundation.TypedEventHandler<DisplayInformation, object> AdvancedColorInfoChanged
        {
            add => global::ABI.Microsoft.Graphics.Display.IDisplayInformationMethods.Get_AdvancedColorInfoChanged2(_objRef_global__Microsoft_Graphics_Display_IDisplayInformation, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Graphics.Display.IDisplayInformationMethods.Get_AdvancedColorInfoChanged2(_objRef_global__Microsoft_Graphics_Display_IDisplayInformation, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<DisplayInformation, object> ColorProfileChanged
        {
            add => global::ABI.Microsoft.Graphics.Display.IDisplayInformationMethods.Get_ColorProfileChanged2(_objRef_global__Microsoft_Graphics_Display_IDisplayInformation, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Graphics.Display.IDisplayInformationMethods.Get_ColorProfileChanged2(_objRef_global__Microsoft_Graphics_Display_IDisplayInformation, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<DisplayInformation, object> Destroyed
        {
            add => global::ABI.Microsoft.Graphics.Display.IDisplayInformationMethods.Get_Destroyed2(_objRef_global__Microsoft_Graphics_Display_IDisplayInformation, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Graphics.Display.IDisplayInformationMethods.Get_Destroyed2(_objRef_global__Microsoft_Graphics_Display_IDisplayInformation, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<DisplayInformation, object> IsStereoEnabledChanged
        {
            add => global::ABI.Microsoft.Graphics.Display.IDisplayInformationMethods.Get_IsStereoEnabledChanged2(_objRef_global__Microsoft_Graphics_Display_IDisplayInformation, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Graphics.Display.IDisplayInformationMethods.Get_IsStereoEnabledChanged2(_objRef_global__Microsoft_Graphics_Display_IDisplayInformation, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<DisplayInformation, object> DpiChanged
        {
            add => global::ABI.Microsoft.Graphics.Display.IDisplayInformation2Methods.Get_DpiChanged2(_objRef_global__Microsoft_Graphics_Display_IDisplayInformation2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Graphics.Display.IDisplayInformation2Methods.Get_DpiChanged2(_objRef_global__Microsoft_Graphics_Display_IDisplayInformation2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<DisplayInformation, object> OrientationChanged
        {
            add => global::ABI.Microsoft.Graphics.Display.IDisplayInformation2Methods.Get_OrientationChanged2(_objRef_global__Microsoft_Graphics_Display_IDisplayInformation2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Graphics.Display.IDisplayInformation2Methods.Get_OrientationChanged2(_objRef_global__Microsoft_Graphics_Display_IDisplayInformation2, (IWinRTObject)this).Unsubscribe(value);
        }

        public void Dispose() => global::ABI.System.IDisposableMethods.Dispose(_objRef_global__System_IDisposable);

        public DisplayOrientation AngularOffsetFromNativeOrientation => global::ABI.Microsoft.Graphics.Display.IDisplayInformation2Methods.get_AngularOffsetFromNativeOrientation(_objRef_global__Microsoft_Graphics_Display_IDisplayInformation2);

        public global::Microsoft.UI.Dispatching.DispatcherQueue DispatcherQueue => global::ABI.Microsoft.Graphics.Display.IDisplayInformationMethods.get_DispatcherQueue(_objRef_global__Microsoft_Graphics_Display_IDisplayInformation);

        public bool IsStereoEnabled => global::ABI.Microsoft.Graphics.Display.IDisplayInformationMethods.get_IsStereoEnabled(_objRef_global__Microsoft_Graphics_Display_IDisplayInformation);

        public global::System.Nullable<global::Windows.Foundation.Point> RawDpi => global::ABI.Microsoft.Graphics.Display.IDisplayInformation2Methods.get_RawDpi(_objRef_global__Microsoft_Graphics_Display_IDisplayInformation2);

        public double RawPixelsPerViewPixel => global::ABI.Microsoft.Graphics.Display.IDisplayInformation2Methods.get_RawPixelsPerViewPixel(_objRef_global__Microsoft_Graphics_Display_IDisplayInformation2);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Graphics")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<DisplayOrientation>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65543u)]
    [global::Windows.Foundation.Metadata.Experimental]
    public enum DisplayOrientation : int
    {
        RotateNone = unchecked((int)0),
        Rotate90Degrees = unchecked((int)0x5a),
        Rotate180Degrees = unchecked((int)0xb4),
        Rotate270Degrees = unchecked((int)0x10e),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Graphics")][Guid("B44F0F47-7065-5175-BA3E-714489C85A3E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Graphics.Display.IDisplayAdvancedColorInfo))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65538u)]
    internal interface IDisplayAdvancedColorInfo
    {
        bool IsHdrMetadataFormatCurrentlySupported(DisplayHdrMetadataFormat format);
        bool IsAdvancedColorKindAvailable(DisplayAdvancedColorKind kind);
        global::Windows.Foundation.Point BluePrimary { get; }
        DisplayAdvancedColorKind CurrentAdvancedColorKind { get; }
        global::Windows.Foundation.Point GreenPrimary { get; }
        double MaxAverageFullFrameLuminanceInNits { get; }
        double MaxLuminanceInNits { get; }
        double MinLuminanceInNits { get; }
        global::Windows.Foundation.Point RedPrimary { get; }
        double SdrWhiteLevelInNits { get; }
        global::Windows.Foundation.Point WhitePoint { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Graphics")][Guid("F0D58D4F-84CE-5B27-B222-4F8F7DC0AAEB")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Graphics.Display.IDisplayInformation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65538u)]
    internal interface IDisplayInformation
    {
        global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.Streams.IRandomAccessStream> GetColorProfileAsync();
        global::Windows.Storage.Streams.IRandomAccessStream GetColorProfile();
        DisplayAdvancedColorInfo GetAdvancedColorInfo();
        global::Microsoft.UI.Dispatching.DispatcherQueue DispatcherQueue { get; }
        bool IsStereoEnabled { get; }
        event global::Windows.Foundation.TypedEventHandler<DisplayInformation, object> AdvancedColorInfoChanged;
        event global::Windows.Foundation.TypedEventHandler<DisplayInformation, object> ColorProfileChanged;
        event global::Windows.Foundation.TypedEventHandler<DisplayInformation, object> Destroyed;
        event global::Windows.Foundation.TypedEventHandler<DisplayInformation, object> IsStereoEnabledChanged;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Graphics")][Guid("5586D03C-B4B6-594E-96AD-8372700B08DD")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Graphics.Display.IDisplayInformation2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65543u)]
    [global::Windows.Foundation.Metadata.Experimental]
    internal interface IDisplayInformation2
    {
        DisplayOrientation AngularOffsetFromNativeOrientation { get; }
        global::System.Nullable<global::Windows.Foundation.Point> RawDpi { get; }
        double RawPixelsPerViewPixel { get; }
        event global::Windows.Foundation.TypedEventHandler<DisplayInformation, object> DpiChanged;
        event global::Windows.Foundation.TypedEventHandler<DisplayInformation, object> OrientationChanged;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Graphics")][Guid("2DE85048-37FA-56C0-AC30-47E2044D7EA8")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Graphics.Display.IDisplayInformationStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65538u)]
    internal interface IDisplayInformationStatics
    {
        DisplayInformation CreateForWindowId(global::Microsoft.UI.WindowId windowId);
        DisplayInformation CreateForDisplayId(global::Microsoft.UI.DisplayId displayId);
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.Graphics.Display
{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DisplayAdvancedColorInfo
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Graphics.Display.DisplayAdvancedColorInfo obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Graphics.Display.DisplayAdvancedColorInfo>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Graphics.Display.IDisplayAdvancedColorInfoMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Graphics.Display.DisplayAdvancedColorInfo obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Graphics.Display.IDisplayAdvancedColorInfoMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Graphics.Display.DisplayAdvancedColorInfo FromAbi(IntPtr thisPtr) => global::Microsoft.Graphics.Display.DisplayAdvancedColorInfo.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Graphics.Display.DisplayAdvancedColorInfo obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Graphics.Display.DisplayAdvancedColorInfo>.MarshalerArray CreateMarshalerArray(global::Microsoft.Graphics.Display.DisplayAdvancedColorInfo[] array) => MarshalInterfaceHelper<global::Microsoft.Graphics.Display.DisplayAdvancedColorInfo>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Graphics.Display.DisplayAdvancedColorInfo>.GetAbiArray(box);
        public static unsafe global::Microsoft.Graphics.Display.DisplayAdvancedColorInfo[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Graphics.Display.DisplayAdvancedColorInfo>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Graphics.Display.DisplayAdvancedColorInfo[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Graphics.Display.DisplayAdvancedColorInfo>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Graphics.Display.DisplayAdvancedColorInfo[] array) => MarshalInterfaceHelper<global::Microsoft.Graphics.Display.DisplayAdvancedColorInfo>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Graphics.Display.DisplayAdvancedColorInfo>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Graphics.Display.DisplayAdvancedColorInfo>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DisplayAdvancedColorInfoRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Graphics.Display.DisplayAdvancedColorInfo(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DisplayInformation
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Graphics.Display.DisplayInformation obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Graphics.Display.DisplayInformation>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Graphics.Display.IDisplayInformationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Graphics.Display.DisplayInformation obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Graphics.Display.IDisplayInformationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Graphics.Display.DisplayInformation FromAbi(IntPtr thisPtr) => global::Microsoft.Graphics.Display.DisplayInformation.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Graphics.Display.DisplayInformation obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Graphics.Display.DisplayInformation>.MarshalerArray CreateMarshalerArray(global::Microsoft.Graphics.Display.DisplayInformation[] array) => MarshalInterfaceHelper<global::Microsoft.Graphics.Display.DisplayInformation>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Graphics.Display.DisplayInformation>.GetAbiArray(box);
        public static unsafe global::Microsoft.Graphics.Display.DisplayInformation[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Graphics.Display.DisplayInformation>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Graphics.Display.DisplayInformation[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Graphics.Display.DisplayInformation>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Graphics.Display.DisplayInformation[] array) => MarshalInterfaceHelper<global::Microsoft.Graphics.Display.DisplayInformation>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Graphics.Display.DisplayInformation>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Graphics.Display.DisplayInformation>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DisplayInformationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Graphics.Display.DisplayInformation(inspectable.ObjRef);
    }
    internal static class IDisplayAdvancedColorInfoMethods
    {


        internal static unsafe bool IsHdrMetadataFormatCurrentlySupported(IObjectReference _obj, global::Microsoft.Graphics.Display.DisplayHdrMetadataFormat format)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Graphics.Display.DisplayHdrMetadataFormat, byte*, int>**)ThisPtr)[15](ThisPtr, format, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool IsAdvancedColorKindAvailable(IObjectReference _obj, global::Microsoft.Graphics.Display.DisplayAdvancedColorKind kind)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Graphics.Display.DisplayAdvancedColorKind, byte*, int>**)ThisPtr)[16](ThisPtr, kind, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe global::Windows.Foundation.Point get_BluePrimary(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.Graphics.Display.DisplayAdvancedColorKind get_CurrentAdvancedColorKind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Graphics.Display.DisplayAdvancedColorKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Graphics.Display.DisplayAdvancedColorKind*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.Point get_GreenPrimary(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_MaxAverageFullFrameLuminanceInNits(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_MaxLuminanceInNits(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_MinLuminanceInNits(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.Point get_RedPrimary(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_SdrWhiteLevelInNits(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.Point get_WhitePoint(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x47, 0xF, 0x4F, 0xB4, 0x65, 0x70, 0x75, 0x51, 0xBA, 0x3E, 0x71, 0x44, 0x89, 0xC8, 0x5A, 0x3E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B44F0F47-7065-5175-BA3E-714489C85A3E")]
    internal interface IDisplayAdvancedColorInfo : global::Microsoft.Graphics.Display.IDisplayAdvancedColorInfo
    {
    }
    internal static class IDisplayInformationMethods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.Streams.IRandomAccessStream> GetColorProfileAsync(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Storage_Streams_IRandomAccessStream.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.Streams.IRandomAccessStream>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.Streams.IRandomAccessStream>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Storage.Streams.IRandomAccessStream GetColorProfile(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Windows.Storage.Streams.IRandomAccessStream>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Storage.Streams.IRandomAccessStream>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Graphics.Display.DisplayAdvancedColorInfo GetAdvancedColorInfo(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Graphics.Display.DisplayAdvancedColorInfo.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Graphics.Display.DisplayAdvancedColorInfo.DisposeAbi(__retval);
            }
        }
        internal static unsafe global::Microsoft.UI.Dispatching.DispatcherQueue get_DispatcherQueue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Dispatching.DispatcherQueue.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Dispatching.DispatcherQueue.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool get_IsStereoEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Display.DisplayInformation, object>>> _AdvancedColorInfoChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Display.DisplayInformation, object>>> MakeAdvancedColorInfoChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _AdvancedColorInfoChanged_, new(), null);
            return _AdvancedColorInfoChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Display.DisplayInformation, object>>> _AdvancedColorInfoChanged => _AdvancedColorInfoChanged_ ?? MakeAdvancedColorInfoChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Display.DisplayInformation, object>> Get_AdvancedColorInfoChanged2(IObjectReference _obj, object _thisObj)
        {
            return _AdvancedColorInfoChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Display_DisplayInformation__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[15],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[16],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Display.DisplayInformation, object>>> _ColorProfileChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Display.DisplayInformation, object>>> MakeColorProfileChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ColorProfileChanged_, new(), null);
            return _ColorProfileChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Display.DisplayInformation, object>>> _ColorProfileChanged => _ColorProfileChanged_ ?? MakeColorProfileChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Display.DisplayInformation, object>> Get_ColorProfileChanged2(IObjectReference _obj, object _thisObj)
        {
            return _ColorProfileChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Display_DisplayInformation__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[12],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[13],
                1);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Display.DisplayInformation, object>>> _Destroyed_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Display.DisplayInformation, object>>> MakeDestroyedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Destroyed_, new(), null);
            return _Destroyed_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Display.DisplayInformation, object>>> _Destroyed => _Destroyed_ ?? MakeDestroyedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Display.DisplayInformation, object>> Get_Destroyed2(IObjectReference _obj, object _thisObj)
        {
            return _Destroyed.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Display_DisplayInformation__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[17],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[18],
                2);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Display.DisplayInformation, object>>> _IsStereoEnabledChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Display.DisplayInformation, object>>> MakeIsStereoEnabledChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _IsStereoEnabledChanged_, new(), null);
            return _IsStereoEnabledChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Display.DisplayInformation, object>>> _IsStereoEnabledChanged => _IsStereoEnabledChanged_ ?? MakeIsStereoEnabledChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Display.DisplayInformation, object>> Get_IsStereoEnabledChanged2(IObjectReference _obj, object _thisObj)
        {
            return _IsStereoEnabledChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Display_DisplayInformation__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[8],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[9],
                3);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x4F, 0x8D, 0xD5, 0xF0, 0xCE, 0x84, 0x27, 0x5B, 0xB2, 0x22, 0x4F, 0x8F, 0x7D, 0xC0, 0xAA, 0xEB };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F0D58D4F-84CE-5B27-B222-4F8F7DC0AAEB")]
    internal interface IDisplayInformation : global::Microsoft.Graphics.Display.IDisplayInformation
    {
    }
    internal static class IDisplayInformation2Methods
    {

        internal static unsafe global::Microsoft.Graphics.Display.DisplayOrientation get_AngularOffsetFromNativeOrientation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Graphics.Display.DisplayOrientation __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Graphics.Display.DisplayOrientation*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::System.Nullable<global::Windows.Foundation.Point> get_RawDpi(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.Foundation.Point>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.Foundation.Point>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe double get_RawPixelsPerViewPixel(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Display.DisplayInformation, object>>> _DpiChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Display.DisplayInformation, object>>> MakeDpiChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _DpiChanged_, new(), null);
            return _DpiChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Display.DisplayInformation, object>>> _DpiChanged => _DpiChanged_ ?? MakeDpiChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Display.DisplayInformation, object>> Get_DpiChanged2(IObjectReference _obj, object _thisObj)
        {
            return _DpiChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Display_DisplayInformation__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[8],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[9],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Display.DisplayInformation, object>>> _OrientationChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Display.DisplayInformation, object>>> MakeOrientationChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _OrientationChanged_, new(), null);
            return _OrientationChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Display.DisplayInformation, object>>> _OrientationChanged => _OrientationChanged_ ?? MakeOrientationChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Display.DisplayInformation, object>> Get_OrientationChanged2(IObjectReference _obj, object _thisObj)
        {
            return _OrientationChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Display_DisplayInformation__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[11],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[12],
                1);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3C, 0xD0, 0x86, 0x55, 0xB6, 0xB4, 0x4E, 0x59, 0x96, 0xAD, 0x83, 0x72, 0x70, 0xB, 0x8, 0xDD };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("5586D03C-B4B6-594E-96AD-8372700B08DD")]
    internal interface IDisplayInformation2 : global::Microsoft.Graphics.Display.IDisplayInformation2
    {
    }
    internal static class IDisplayInformationStaticsMethods
    {


        internal static unsafe global::Microsoft.Graphics.Display.DisplayInformation CreateForWindowId(IObjectReference _obj, global::Microsoft.UI.WindowId windowId)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.WindowId, IntPtr*, int>**)ThisPtr)[6](ThisPtr, windowId, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Graphics.Display.DisplayInformation.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Graphics.Display.DisplayInformation.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Graphics.Display.DisplayInformation CreateForDisplayId(IObjectReference _obj, global::Microsoft.UI.DisplayId displayId)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.DisplayId, IntPtr*, int>**)ThisPtr)[7](ThisPtr, displayId, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Graphics.Display.DisplayInformation.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Graphics.Display.DisplayInformation.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x48, 0x50, 0xE8, 0x2D, 0xFA, 0x37, 0xC0, 0x56, 0xAC, 0x30, 0x47, 0xE2, 0x4, 0x4D, 0x7E, 0xA8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2DE85048-37FA-56C0-AC30-47E2044D7EA8")]
    internal interface IDisplayInformationStatics : global::Microsoft.Graphics.Display.IDisplayInformationStatics
    {
    }
}
#pragma warning restore CA1416
