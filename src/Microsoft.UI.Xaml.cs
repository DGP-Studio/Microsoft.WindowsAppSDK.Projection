//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.UI.Xaml
{
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.AdaptiveTrigger))]
    [global::ABI.Microsoft.UI.Xaml.AdaptiveTriggerRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IAdaptiveTrigger))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public class AdaptiveTrigger : StateTriggerBase, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<AdaptiveTrigger>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IAdaptiveTrigger;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IAdaptiveTrigger()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IAdaptiveTrigger, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IAdaptiveTriggerMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IAdaptiveTrigger;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IAdaptiveTrigger => ___objRef_global__Microsoft_UI_Xaml_IAdaptiveTrigger ?? Make___objRef_global__Microsoft_UI_Xaml_IAdaptiveTrigger();



        private static class _IAdaptiveTriggerFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IAdaptiveTriggerFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IAdaptiveTriggerFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IAdaptiveTriggerFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IAdaptiveTriggerFactory = ActivationFactory.Get("Microsoft.UI.Xaml.AdaptiveTrigger", global::ABI.Microsoft.UI.Xaml.IAdaptiveTriggerFactoryMethods.IID);
                }
            }
        }

        public AdaptiveTrigger():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(AdaptiveTrigger);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IAdaptiveTriggerFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_IAdaptiveTriggerFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.IAdaptiveTriggerMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.AdaptiveTrigger").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IAdaptiveTriggerStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IAdaptiveTriggerStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IAdaptiveTriggerStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IAdaptiveTriggerStatics = ActivationFactory.Get("Microsoft.UI.Xaml.AdaptiveTrigger", global::ABI.Microsoft.UI.Xaml.IAdaptiveTriggerStaticsMethods.IID);
                }
            }
        }

        public static DependencyProperty MinWindowHeightProperty => global::ABI.Microsoft.UI.Xaml.IAdaptiveTriggerStaticsMethods.get_MinWindowHeightProperty(_objRef_global__Microsoft_UI_Xaml_IAdaptiveTriggerStatics);

        public static DependencyProperty MinWindowWidthProperty => global::ABI.Microsoft.UI.Xaml.IAdaptiveTriggerStaticsMethods.get_MinWindowWidthProperty(_objRef_global__Microsoft_UI_Xaml_IAdaptiveTriggerStatics);

        public static new AdaptiveTrigger FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<AdaptiveTrigger>.FromAbi(thisPtr);
        }

        protected internal AdaptiveTrigger(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IAdaptiveTriggerMethods.IID);

        }


        public static bool operator ==(AdaptiveTrigger x, AdaptiveTrigger y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(AdaptiveTrigger x, AdaptiveTrigger y) => !(x == y);
        public bool Equals(AdaptiveTrigger other) => this == other;
        public override bool Equals(object obj) => obj is AdaptiveTrigger that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected AdaptiveTrigger(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(AdaptiveTrigger);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double MinWindowHeight
        {
            get => global::ABI.Microsoft.UI.Xaml.IAdaptiveTriggerMethods.get_MinWindowHeight(_objRef_global__Microsoft_UI_Xaml_IAdaptiveTrigger);
            set => global::ABI.Microsoft.UI.Xaml.IAdaptiveTriggerMethods.set_MinWindowHeight(_objRef_global__Microsoft_UI_Xaml_IAdaptiveTrigger, value);
        }

        public double MinWindowWidth
        {
            get => global::ABI.Microsoft.UI.Xaml.IAdaptiveTriggerMethods.get_MinWindowWidth(_objRef_global__Microsoft_UI_Xaml_IAdaptiveTrigger);
            set => global::ABI.Microsoft.UI.Xaml.IAdaptiveTriggerMethods.set_MinWindowWidth(_objRef_global__Microsoft_UI_Xaml_IAdaptiveTrigger, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Application))]
    [global::ABI.Microsoft.UI.Xaml.ApplicationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IApplication))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public class Application : IApplicationOverrides, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<Application>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IApplication;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IApplication()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IApplication, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IApplicationMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IApplication;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IApplication => ___objRef_global__Microsoft_UI_Xaml_IApplication ?? Make___objRef_global__Microsoft_UI_Xaml_IApplication();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IApplication2;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IApplication2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IApplication2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IApplication2Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IApplication2;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IApplication2 => ___objRef_global__Microsoft_UI_Xaml_IApplication2 ?? Make___objRef_global__Microsoft_UI_Xaml_IApplication2();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IApplication3;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IApplication3()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IApplication3, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IApplication3Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IApplication3;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IApplication3 => ___objRef_global__Microsoft_UI_Xaml_IApplication3 ?? Make___objRef_global__Microsoft_UI_Xaml_IApplication3();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IApplicationOverrides;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IApplicationOverrides()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IApplicationOverrides, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IApplicationOverridesMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IApplicationOverrides;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IApplicationOverrides => ___objRef_global__Microsoft_UI_Xaml_IApplicationOverrides ?? Make___objRef_global__Microsoft_UI_Xaml_IApplicationOverrides();



        private static class _IApplicationFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IApplicationFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IApplicationFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IApplicationFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IApplicationFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Application", global::ABI.Microsoft.UI.Xaml.IApplicationFactoryMethods.IID);
                }
            }
        }

        public Application()
        {
            bool isAggregation = this.GetType() != typeof(Application);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IApplicationFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_IApplicationFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.IApplicationMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Application").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IApplicationStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IApplicationStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IApplicationStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IApplicationStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Application", global::ABI.Microsoft.UI.Xaml.IApplicationStaticsMethods.IID);
                }
            }
        }

        public static void Start(ApplicationInitializationCallback callback) => global::ABI.Microsoft.UI.Xaml.IApplicationStaticsMethods.Start(_objRef_global__Microsoft_UI_Xaml_IApplicationStatics, callback);

        public static void LoadComponent(object component, global::System.Uri resourceLocator) => global::ABI.Microsoft.UI.Xaml.IApplicationStaticsMethods.LoadComponent(_objRef_global__Microsoft_UI_Xaml_IApplicationStatics, component, resourceLocator);

        public static void LoadComponent(object component, global::System.Uri resourceLocator, global::Microsoft.UI.Xaml.Controls.Primitives.ComponentResourceLocation componentResourceLocation) => global::ABI.Microsoft.UI.Xaml.IApplicationStaticsMethods.LoadComponent(_objRef_global__Microsoft_UI_Xaml_IApplicationStatics, component, resourceLocator, componentResourceLocation);

        public static Application Current => global::ABI.Microsoft.UI.Xaml.IApplicationStaticsMethods.get_Current(_objRef_global__Microsoft_UI_Xaml_IApplicationStatics);

        public static Application FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<Application>.FromAbi(thisPtr);
        }

        protected internal Application(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IApplicationMethods.IID);

        }


        public static bool operator ==(Application x, Application y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(Application x, Application y) => !(x == y);
        public bool Equals(Application other) => this == other;
        public override bool Equals(object obj) => obj is Application that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected Application(global::WinRT.DerivedComposed _)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(Application);
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void Exit() => global::ABI.Microsoft.UI.Xaml.IApplicationMethods.Exit(_objRef_global__Microsoft_UI_Xaml_IApplication);

        public event UnhandledExceptionEventHandler UnhandledException
        {
            add => global::ABI.Microsoft.UI.Xaml.IApplicationMethods.Get_UnhandledException2(_objRef_global__Microsoft_UI_Xaml_IApplication, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IApplicationMethods.Get_UnhandledException2(_objRef_global__Microsoft_UI_Xaml_IApplication, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<object, ResourceManagerRequestedEventArgs> ResourceManagerRequested
        {
            add => global::ABI.Microsoft.UI.Xaml.IApplication2Methods.Get_ResourceManagerRequested2(_objRef_global__Microsoft_UI_Xaml_IApplication2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IApplication2Methods.Get_ResourceManagerRequested2(_objRef_global__Microsoft_UI_Xaml_IApplication2, (IWinRTObject)this).Unsubscribe(value);
        }

        protected virtual void OnLaunched(LaunchActivatedEventArgs args) => global::ABI.Microsoft.UI.Xaml.IApplicationOverridesMethods.OnLaunched(_objRef_global__Microsoft_UI_Xaml_IApplicationOverrides, args);

        void IApplicationOverrides.OnLaunched(LaunchActivatedEventArgs args) => OnLaunched(args);
        public DebugSettings DebugSettings => global::ABI.Microsoft.UI.Xaml.IApplicationMethods.get_DebugSettings(_objRef_global__Microsoft_UI_Xaml_IApplication);

        public DispatcherShutdownMode DispatcherShutdownMode
        {
            get => global::ABI.Microsoft.UI.Xaml.IApplication3Methods.get_DispatcherShutdownMode(_objRef_global__Microsoft_UI_Xaml_IApplication3);
            set => global::ABI.Microsoft.UI.Xaml.IApplication3Methods.set_DispatcherShutdownMode(_objRef_global__Microsoft_UI_Xaml_IApplication3, value);
        }

        public FocusVisualKind FocusVisualKind
        {
            get => global::ABI.Microsoft.UI.Xaml.IApplicationMethods.get_FocusVisualKind(_objRef_global__Microsoft_UI_Xaml_IApplication);
            set => global::ABI.Microsoft.UI.Xaml.IApplicationMethods.set_FocusVisualKind(_objRef_global__Microsoft_UI_Xaml_IApplication, value);
        }

        public ApplicationHighContrastAdjustment HighContrastAdjustment
        {
            get => global::ABI.Microsoft.UI.Xaml.IApplicationMethods.get_HighContrastAdjustment(_objRef_global__Microsoft_UI_Xaml_IApplication);
            set => global::ABI.Microsoft.UI.Xaml.IApplicationMethods.set_HighContrastAdjustment(_objRef_global__Microsoft_UI_Xaml_IApplication, value);
        }

        public ApplicationTheme RequestedTheme
        {
            get => global::ABI.Microsoft.UI.Xaml.IApplicationMethods.get_RequestedTheme(_objRef_global__Microsoft_UI_Xaml_IApplication);
            set => global::ABI.Microsoft.UI.Xaml.IApplicationMethods.set_RequestedTheme(_objRef_global__Microsoft_UI_Xaml_IApplication, value);
        }

        public ResourceDictionary Resources
        {
            get => global::ABI.Microsoft.UI.Xaml.IApplicationMethods.get_Resources(_objRef_global__Microsoft_UI_Xaml_IApplication);
            set => global::ABI.Microsoft.UI.Xaml.IApplicationMethods.set_Resources(_objRef_global__Microsoft_UI_Xaml_IApplication, value);
        }

        protected virtual bool IsOverridableInterface(Guid iid) => global::ABI.Microsoft.UI.Xaml.IApplicationOverridesMethods.IID == iid;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [FlagsAttribute]
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<ApplicationHighContrastAdjustment>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public enum ApplicationHighContrastAdjustment : uint
    {
        None = unchecked((uint)0),
        Auto = unchecked((uint)0xffffffff),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.ApplicationInitializationCallback))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.ApplicationInitializationCallbackWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public delegate void ApplicationInitializationCallback(ApplicationInitializationCallbackParams p);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.ApplicationInitializationCallbackParams))]
    [global::ABI.Microsoft.UI.Xaml.ApplicationInitializationCallbackParamsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IApplicationInitializationCallbackParams))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class ApplicationInitializationCallbackParams : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ApplicationInitializationCallbackParams>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IApplicationInitializationCallbackParams => _inner;


        public static ApplicationInitializationCallbackParams FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ApplicationInitializationCallbackParams>.FromAbi(thisPtr);
        }

        internal ApplicationInitializationCallbackParams(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IApplicationInitializationCallbackParamsMethods.IID);

        }


        public static bool operator ==(ApplicationInitializationCallbackParams x, ApplicationInitializationCallbackParams y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ApplicationInitializationCallbackParams x, ApplicationInitializationCallbackParams y) => !(x == y);
        public bool Equals(ApplicationInitializationCallbackParams other) => this == other;
        public override bool Equals(object obj) => obj is ApplicationInitializationCallbackParams that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<ApplicationRequiresPointerMode>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public enum ApplicationRequiresPointerMode : int
    {
        Auto = unchecked((int)0),
        WhenRequested = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<ApplicationTheme>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public enum ApplicationTheme : int
    {
        Light = unchecked((int)0),
        Dark = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<AutomationTextAttributesEnum>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public enum AutomationTextAttributesEnum : int
    {
        AnimationStyleAttribute = unchecked((int)0x9c40),
        BackgroundColorAttribute = unchecked((int)0x9c41),
        BulletStyleAttribute = unchecked((int)0x9c42),
        CapStyleAttribute = unchecked((int)0x9c43),
        CultureAttribute = unchecked((int)0x9c44),
        FontNameAttribute = unchecked((int)0x9c45),
        FontSizeAttribute = unchecked((int)0x9c46),
        FontWeightAttribute = unchecked((int)0x9c47),
        ForegroundColorAttribute = unchecked((int)0x9c48),
        HorizontalTextAlignmentAttribute = unchecked((int)0x9c49),
        IndentationFirstLineAttribute = unchecked((int)0x9c4a),
        IndentationLeadingAttribute = unchecked((int)0x9c4b),
        IndentationTrailingAttribute = unchecked((int)0x9c4c),
        IsHiddenAttribute = unchecked((int)0x9c4d),
        IsItalicAttribute = unchecked((int)0x9c4e),
        IsReadOnlyAttribute = unchecked((int)0x9c4f),
        IsSubscriptAttribute = unchecked((int)0x9c50),
        IsSuperscriptAttribute = unchecked((int)0x9c51),
        MarginBottomAttribute = unchecked((int)0x9c52),
        MarginLeadingAttribute = unchecked((int)0x9c53),
        MarginTopAttribute = unchecked((int)0x9c54),
        MarginTrailingAttribute = unchecked((int)0x9c55),
        OutlineStylesAttribute = unchecked((int)0x9c56),
        OverlineColorAttribute = unchecked((int)0x9c57),
        OverlineStyleAttribute = unchecked((int)0x9c58),
        StrikethroughColorAttribute = unchecked((int)0x9c59),
        StrikethroughStyleAttribute = unchecked((int)0x9c5a),
        TabsAttribute = unchecked((int)0x9c5b),
        TextFlowDirectionsAttribute = unchecked((int)0x9c5c),
        UnderlineColorAttribute = unchecked((int)0x9c5d),
        UnderlineStyleAttribute = unchecked((int)0x9c5e),
        AnnotationTypesAttribute = unchecked((int)0x9c5f),
        AnnotationObjectsAttribute = unchecked((int)0x9c60),
        StyleNameAttribute = unchecked((int)0x9c61),
        StyleIdAttribute = unchecked((int)0x9c62),
        LinkAttribute = unchecked((int)0x9c63),
        IsActiveAttribute = unchecked((int)0x9c64),
        SelectionActiveEndAttribute = unchecked((int)0x9c65),
        CaretPositionAttribute = unchecked((int)0x9c66),
        CaretBidiModeAttribute = unchecked((int)0x9c67),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.BindingFailedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.BindingFailedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IBindingFailedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class BindingFailedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<BindingFailedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IBindingFailedEventArgs => _inner;


        public static BindingFailedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<BindingFailedEventArgs>.FromAbi(thisPtr);
        }

        internal BindingFailedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IBindingFailedEventArgsMethods.IID);

        }


        public static bool operator ==(BindingFailedEventArgs x, BindingFailedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(BindingFailedEventArgs x, BindingFailedEventArgs y) => !(x == y);
        public bool Equals(BindingFailedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is BindingFailedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public string Message => global::ABI.Microsoft.UI.Xaml.IBindingFailedEventArgsMethods.get_Message(_objRef_global__Microsoft_UI_Xaml_IBindingFailedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.BindingFailedEventHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.BindingFailedEventHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public delegate void BindingFailedEventHandler(object sender, BindingFailedEventArgs e);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.BringIntoViewOptions))]
    [global::ABI.Microsoft.UI.Xaml.BringIntoViewOptionsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IBringIntoViewOptions))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class BringIntoViewOptions : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<BringIntoViewOptions>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IBringIntoViewOptions => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_BringIntoViewOptions;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_BringIntoViewOptions
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_BringIntoViewOptions;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_BringIntoViewOptions = ActivationFactory.Get("Microsoft.UI.Xaml.BringIntoViewOptions");
                }
            }
        }

        public BringIntoViewOptions() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_BringIntoViewOptions, global::ABI.Microsoft.UI.Xaml.IBringIntoViewOptionsMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static BringIntoViewOptions FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<BringIntoViewOptions>.FromAbi(thisPtr);
        }

        internal BringIntoViewOptions(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IBringIntoViewOptionsMethods.IID);

        }


        public static bool operator ==(BringIntoViewOptions x, BringIntoViewOptions y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(BringIntoViewOptions x, BringIntoViewOptions y) => !(x == y);
        public bool Equals(BringIntoViewOptions other) => this == other;
        public override bool Equals(object obj) => obj is BringIntoViewOptions that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool AnimationDesired
        {
            get => global::ABI.Microsoft.UI.Xaml.IBringIntoViewOptionsMethods.get_AnimationDesired(_objRef_global__Microsoft_UI_Xaml_IBringIntoViewOptions);
            set => global::ABI.Microsoft.UI.Xaml.IBringIntoViewOptionsMethods.set_AnimationDesired(_objRef_global__Microsoft_UI_Xaml_IBringIntoViewOptions, value);
        }

        public double HorizontalAlignmentRatio
        {
            get => global::ABI.Microsoft.UI.Xaml.IBringIntoViewOptionsMethods.get_HorizontalAlignmentRatio(_objRef_global__Microsoft_UI_Xaml_IBringIntoViewOptions);
            set => global::ABI.Microsoft.UI.Xaml.IBringIntoViewOptionsMethods.set_HorizontalAlignmentRatio(_objRef_global__Microsoft_UI_Xaml_IBringIntoViewOptions, value);
        }

        public double HorizontalOffset
        {
            get => global::ABI.Microsoft.UI.Xaml.IBringIntoViewOptionsMethods.get_HorizontalOffset(_objRef_global__Microsoft_UI_Xaml_IBringIntoViewOptions);
            set => global::ABI.Microsoft.UI.Xaml.IBringIntoViewOptionsMethods.set_HorizontalOffset(_objRef_global__Microsoft_UI_Xaml_IBringIntoViewOptions, value);
        }

        public global::System.Nullable<global::Windows.Foundation.Rect> TargetRect
        {
            get => global::ABI.Microsoft.UI.Xaml.IBringIntoViewOptionsMethods.get_TargetRect(_objRef_global__Microsoft_UI_Xaml_IBringIntoViewOptions);
            set => global::ABI.Microsoft.UI.Xaml.IBringIntoViewOptionsMethods.set_TargetRect(_objRef_global__Microsoft_UI_Xaml_IBringIntoViewOptions, value);
        }

        public double VerticalAlignmentRatio
        {
            get => global::ABI.Microsoft.UI.Xaml.IBringIntoViewOptionsMethods.get_VerticalAlignmentRatio(_objRef_global__Microsoft_UI_Xaml_IBringIntoViewOptions);
            set => global::ABI.Microsoft.UI.Xaml.IBringIntoViewOptionsMethods.set_VerticalAlignmentRatio(_objRef_global__Microsoft_UI_Xaml_IBringIntoViewOptions, value);
        }

        public double VerticalOffset
        {
            get => global::ABI.Microsoft.UI.Xaml.IBringIntoViewOptionsMethods.get_VerticalOffset(_objRef_global__Microsoft_UI_Xaml_IBringIntoViewOptions);
            set => global::ABI.Microsoft.UI.Xaml.IBringIntoViewOptionsMethods.set_VerticalOffset(_objRef_global__Microsoft_UI_Xaml_IBringIntoViewOptions, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.BringIntoViewRequestedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IBringIntoViewRequestedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class BringIntoViewRequestedEventArgs : RoutedEventArgs, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<BringIntoViewRequestedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IBringIntoViewRequestedEventArgs => _inner;


        public static new BringIntoViewRequestedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<BringIntoViewRequestedEventArgs>.FromAbi(thisPtr);
        }

        internal BringIntoViewRequestedEventArgs(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IBringIntoViewRequestedEventArgsMethods.IID);

        }


        public static bool operator ==(BringIntoViewRequestedEventArgs x, BringIntoViewRequestedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(BringIntoViewRequestedEventArgs x, BringIntoViewRequestedEventArgs y) => !(x == y);
        public bool Equals(BringIntoViewRequestedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is BringIntoViewRequestedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public bool AnimationDesired
        {
            get => global::ABI.Microsoft.UI.Xaml.IBringIntoViewRequestedEventArgsMethods.get_AnimationDesired(_objRef_global__Microsoft_UI_Xaml_IBringIntoViewRequestedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.IBringIntoViewRequestedEventArgsMethods.set_AnimationDesired(_objRef_global__Microsoft_UI_Xaml_IBringIntoViewRequestedEventArgs, value);
        }

        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Xaml.IBringIntoViewRequestedEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Xaml_IBringIntoViewRequestedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.IBringIntoViewRequestedEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Xaml_IBringIntoViewRequestedEventArgs, value);
        }

        public double HorizontalAlignmentRatio => global::ABI.Microsoft.UI.Xaml.IBringIntoViewRequestedEventArgsMethods.get_HorizontalAlignmentRatio(_objRef_global__Microsoft_UI_Xaml_IBringIntoViewRequestedEventArgs);

        public double HorizontalOffset
        {
            get => global::ABI.Microsoft.UI.Xaml.IBringIntoViewRequestedEventArgsMethods.get_HorizontalOffset(_objRef_global__Microsoft_UI_Xaml_IBringIntoViewRequestedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.IBringIntoViewRequestedEventArgsMethods.set_HorizontalOffset(_objRef_global__Microsoft_UI_Xaml_IBringIntoViewRequestedEventArgs, value);
        }

        public UIElement TargetElement
        {
            get => global::ABI.Microsoft.UI.Xaml.IBringIntoViewRequestedEventArgsMethods.get_TargetElement(_objRef_global__Microsoft_UI_Xaml_IBringIntoViewRequestedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.IBringIntoViewRequestedEventArgsMethods.set_TargetElement(_objRef_global__Microsoft_UI_Xaml_IBringIntoViewRequestedEventArgs, value);
        }

        public global::Windows.Foundation.Rect TargetRect
        {
            get => global::ABI.Microsoft.UI.Xaml.IBringIntoViewRequestedEventArgsMethods.get_TargetRect(_objRef_global__Microsoft_UI_Xaml_IBringIntoViewRequestedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.IBringIntoViewRequestedEventArgsMethods.set_TargetRect(_objRef_global__Microsoft_UI_Xaml_IBringIntoViewRequestedEventArgs, value);
        }

        public double VerticalAlignmentRatio => global::ABI.Microsoft.UI.Xaml.IBringIntoViewRequestedEventArgsMethods.get_VerticalAlignmentRatio(_objRef_global__Microsoft_UI_Xaml_IBringIntoViewRequestedEventArgs);

        public double VerticalOffset
        {
            get => global::ABI.Microsoft.UI.Xaml.IBringIntoViewRequestedEventArgsMethods.get_VerticalOffset(_objRef_global__Microsoft_UI_Xaml_IBringIntoViewRequestedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.IBringIntoViewRequestedEventArgsMethods.set_VerticalOffset(_objRef_global__Microsoft_UI_Xaml_IBringIntoViewRequestedEventArgs, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.BrushTransition))]
    [global::ABI.Microsoft.UI.Xaml.BrushTransitionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IBrushTransition))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public class BrushTransition : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<BrushTransition>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IBrushTransition;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IBrushTransition()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IBrushTransition, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IBrushTransitionMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IBrushTransition;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IBrushTransition => ___objRef_global__Microsoft_UI_Xaml_IBrushTransition ?? Make___objRef_global__Microsoft_UI_Xaml_IBrushTransition();



        private static class _IBrushTransitionFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IBrushTransitionFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IBrushTransitionFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IBrushTransitionFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IBrushTransitionFactory = ActivationFactory.Get("Microsoft.UI.Xaml.BrushTransition", global::ABI.Microsoft.UI.Xaml.IBrushTransitionFactoryMethods.IID);
                }
            }
        }

        public BrushTransition()
        {
            bool isAggregation = this.GetType() != typeof(BrushTransition);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IBrushTransitionFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_IBrushTransitionFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.IBrushTransitionMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static BrushTransition FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<BrushTransition>.FromAbi(thisPtr);
        }

        protected internal BrushTransition(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IBrushTransitionMethods.IID);

        }


        public static bool operator ==(BrushTransition x, BrushTransition y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(BrushTransition x, BrushTransition y) => !(x == y);
        public bool Equals(BrushTransition other) => this == other;
        public override bool Equals(object obj) => obj is BrushTransition that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected BrushTransition(global::WinRT.DerivedComposed _)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(BrushTransition);
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::System.TimeSpan Duration
        {
            get => global::ABI.Microsoft.UI.Xaml.IBrushTransitionMethods.get_Duration(_objRef_global__Microsoft_UI_Xaml_IBrushTransition);
            set => global::ABI.Microsoft.UI.Xaml.IBrushTransitionMethods.set_Duration(_objRef_global__Microsoft_UI_Xaml_IBrushTransition, value);
        }

        protected virtual bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.ColorPaletteResources))]
    [global::ABI.Microsoft.UI.Xaml.ColorPaletteResourcesRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IColorPaletteResources))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public class ColorPaletteResources : ResourceDictionary, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ColorPaletteResources>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IColorPaletteResources;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IColorPaletteResources()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IColorPaletteResources, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IColorPaletteResources;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IColorPaletteResources => ___objRef_global__Microsoft_UI_Xaml_IColorPaletteResources ?? Make___objRef_global__Microsoft_UI_Xaml_IColorPaletteResources();



        private static class _IColorPaletteResourcesFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IColorPaletteResourcesFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IColorPaletteResourcesFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IColorPaletteResourcesFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IColorPaletteResourcesFactory = ActivationFactory.Get("Microsoft.UI.Xaml.ColorPaletteResources", global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesFactoryMethods.IID);
                }
            }
        }

        public ColorPaletteResources():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(ColorPaletteResources);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IColorPaletteResourcesFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResourcesFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new ColorPaletteResources FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ColorPaletteResources>.FromAbi(thisPtr);
        }

        protected internal ColorPaletteResources(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.IID);

        }


        public static bool operator ==(ColorPaletteResources x, ColorPaletteResources y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ColorPaletteResources x, ColorPaletteResources y) => !(x == y);
        public bool Equals(ColorPaletteResources other) => this == other;
        public override bool Equals(object obj) => obj is ColorPaletteResources that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected ColorPaletteResources(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(ColorPaletteResources);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::System.Nullable<global::Windows.UI.Color> Accent
        {
            get => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.get_Accent(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources);
            set => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.set_Accent(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> AltHigh
        {
            get => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.get_AltHigh(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources);
            set => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.set_AltHigh(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> AltLow
        {
            get => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.get_AltLow(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources);
            set => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.set_AltLow(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> AltMedium
        {
            get => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.get_AltMedium(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources);
            set => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.set_AltMedium(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> AltMediumHigh
        {
            get => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.get_AltMediumHigh(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources);
            set => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.set_AltMediumHigh(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> AltMediumLow
        {
            get => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.get_AltMediumLow(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources);
            set => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.set_AltMediumLow(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> BaseHigh
        {
            get => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.get_BaseHigh(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources);
            set => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.set_BaseHigh(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> BaseLow
        {
            get => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.get_BaseLow(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources);
            set => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.set_BaseLow(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> BaseMedium
        {
            get => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.get_BaseMedium(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources);
            set => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.set_BaseMedium(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> BaseMediumHigh
        {
            get => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.get_BaseMediumHigh(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources);
            set => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.set_BaseMediumHigh(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> BaseMediumLow
        {
            get => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.get_BaseMediumLow(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources);
            set => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.set_BaseMediumLow(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> ChromeAltLow
        {
            get => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.get_ChromeAltLow(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources);
            set => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.set_ChromeAltLow(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> ChromeBlackHigh
        {
            get => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.get_ChromeBlackHigh(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources);
            set => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.set_ChromeBlackHigh(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> ChromeBlackLow
        {
            get => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.get_ChromeBlackLow(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources);
            set => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.set_ChromeBlackLow(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> ChromeBlackMedium
        {
            get => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.get_ChromeBlackMedium(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources);
            set => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.set_ChromeBlackMedium(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> ChromeBlackMediumLow
        {
            get => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.get_ChromeBlackMediumLow(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources);
            set => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.set_ChromeBlackMediumLow(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> ChromeDisabledHigh
        {
            get => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.get_ChromeDisabledHigh(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources);
            set => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.set_ChromeDisabledHigh(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> ChromeDisabledLow
        {
            get => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.get_ChromeDisabledLow(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources);
            set => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.set_ChromeDisabledLow(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> ChromeGray
        {
            get => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.get_ChromeGray(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources);
            set => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.set_ChromeGray(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> ChromeHigh
        {
            get => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.get_ChromeHigh(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources);
            set => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.set_ChromeHigh(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> ChromeLow
        {
            get => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.get_ChromeLow(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources);
            set => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.set_ChromeLow(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> ChromeMedium
        {
            get => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.get_ChromeMedium(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources);
            set => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.set_ChromeMedium(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> ChromeMediumLow
        {
            get => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.get_ChromeMediumLow(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources);
            set => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.set_ChromeMediumLow(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> ChromeWhite
        {
            get => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.get_ChromeWhite(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources);
            set => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.set_ChromeWhite(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> ErrorText
        {
            get => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.get_ErrorText(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources);
            set => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.set_ErrorText(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> ListLow
        {
            get => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.get_ListLow(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources);
            set => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.set_ListLow(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> ListMedium
        {
            get => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.get_ListMedium(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources);
            set => global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.set_ListMedium(_objRef_global__Microsoft_UI_Xaml_IColorPaletteResources, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.CreateDefaultValueCallback))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.CreateDefaultValueCallbackWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public delegate object CreateDefaultValueCallback();
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.DataContextChangedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.DataContextChangedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDataContextChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class DataContextChangedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DataContextChangedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IDataContextChangedEventArgs => _inner;


        public static DataContextChangedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DataContextChangedEventArgs>.FromAbi(thisPtr);
        }

        internal DataContextChangedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IDataContextChangedEventArgsMethods.IID);

        }


        public static bool operator ==(DataContextChangedEventArgs x, DataContextChangedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DataContextChangedEventArgs x, DataContextChangedEventArgs y) => !(x == y);
        public bool Equals(DataContextChangedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is DataContextChangedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Xaml.IDataContextChangedEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Xaml_IDataContextChangedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.IDataContextChangedEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Xaml_IDataContextChangedEventArgs, value);
        }

        public object NewValue => global::ABI.Microsoft.UI.Xaml.IDataContextChangedEventArgsMethods.get_NewValue(_objRef_global__Microsoft_UI_Xaml_IDataContextChangedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.DataTemplate))]
    [global::ABI.Microsoft.UI.Xaml.DataTemplateRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDataTemplate))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public class DataTemplate : FrameworkTemplate, IElementFactory, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DataTemplate>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IDataTemplate;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IDataTemplate()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IDataTemplate, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IDataTemplateMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IDataTemplate;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IDataTemplate => ___objRef_global__Microsoft_UI_Xaml_IDataTemplate ?? Make___objRef_global__Microsoft_UI_Xaml_IDataTemplate();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IElementFactory;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IElementFactory()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IElementFactory, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IElementFactoryMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IElementFactory;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IElementFactory => ___objRef_global__Microsoft_UI_Xaml_IElementFactory ?? Make___objRef_global__Microsoft_UI_Xaml_IElementFactory();



        private static class _IDataTemplateFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IDataTemplateFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IDataTemplateFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IDataTemplateFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IDataTemplateFactory = ActivationFactory.Get("Microsoft.UI.Xaml.DataTemplate", global::ABI.Microsoft.UI.Xaml.IDataTemplateFactoryMethods.IID);
                }
            }
        }

        public DataTemplate():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(DataTemplate);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IDataTemplateFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_IDataTemplateFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.IDataTemplateMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.DataTemplate").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IDataTemplateStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IDataTemplateStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IDataTemplateStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IDataTemplateStatics = ActivationFactory.Get("Microsoft.UI.Xaml.DataTemplate", global::ABI.Microsoft.UI.Xaml.IDataTemplateStaticsMethods.IID);
                }
            }
        }

        public static IDataTemplateExtension GetExtensionInstance(FrameworkElement element) => global::ABI.Microsoft.UI.Xaml.IDataTemplateStaticsMethods.GetExtensionInstance(_objRef_global__Microsoft_UI_Xaml_IDataTemplateStatics, element);

        public static void SetExtensionInstance(FrameworkElement element, IDataTemplateExtension value) => global::ABI.Microsoft.UI.Xaml.IDataTemplateStaticsMethods.SetExtensionInstance(_objRef_global__Microsoft_UI_Xaml_IDataTemplateStatics, element, value);

        public static DependencyProperty ExtensionInstanceProperty => global::ABI.Microsoft.UI.Xaml.IDataTemplateStaticsMethods.get_ExtensionInstanceProperty(_objRef_global__Microsoft_UI_Xaml_IDataTemplateStatics);

        public static new DataTemplate FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DataTemplate>.FromAbi(thisPtr);
        }

        protected internal DataTemplate(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IDataTemplateMethods.IID);

        }


        public static bool operator ==(DataTemplate x, DataTemplate y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DataTemplate x, DataTemplate y) => !(x == y);
        public bool Equals(DataTemplate other) => this == other;
        public override bool Equals(object obj) => obj is DataTemplate that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected DataTemplate(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(DataTemplate);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public DependencyObject LoadContent() => global::ABI.Microsoft.UI.Xaml.IDataTemplateMethods.LoadContent(_objRef_global__Microsoft_UI_Xaml_IDataTemplate);

        public UIElement GetElement(ElementFactoryGetArgs args) => global::ABI.Microsoft.UI.Xaml.IElementFactoryMethods.GetElement(_objRef_global__Microsoft_UI_Xaml_IElementFactory, args);

        public void RecycleElement(ElementFactoryRecycleArgs args) => global::ABI.Microsoft.UI.Xaml.IElementFactoryMethods.RecycleElement(_objRef_global__Microsoft_UI_Xaml_IElementFactory, args);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.DataTemplateKey))]
    [global::ABI.Microsoft.UI.Xaml.DataTemplateKeyRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDataTemplateKey))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public class DataTemplateKey : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DataTemplateKey>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IDataTemplateKey;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IDataTemplateKey()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IDataTemplateKey, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IDataTemplateKeyMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IDataTemplateKey;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IDataTemplateKey => ___objRef_global__Microsoft_UI_Xaml_IDataTemplateKey ?? Make___objRef_global__Microsoft_UI_Xaml_IDataTemplateKey();



        private static class _IDataTemplateKeyFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }

            public static unsafe IntPtr CreateInstanceWithType(IObjectReference _obj, object dataType, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __dataType = default;
                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __dataType = MarshalInspectable<object>.CreateMarshaler2(dataType);
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__dataType), MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__dataType);
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IDataTemplateKeyFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IDataTemplateKeyFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IDataTemplateKeyFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IDataTemplateKeyFactory = ActivationFactory.Get("Microsoft.UI.Xaml.DataTemplateKey", global::ABI.Microsoft.UI.Xaml.IDataTemplateKeyFactoryMethods.IID);
                }
            }
        }

        public DataTemplateKey()
        {
            bool isAggregation = this.GetType() != typeof(DataTemplateKey);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IDataTemplateKeyFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_IDataTemplateKeyFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.IDataTemplateKeyMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public DataTemplateKey(object dataType)
        {
            bool isAggregation = this.GetType() != typeof(DataTemplateKey);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IDataTemplateKeyFactoryMethods.CreateInstanceWithType(_objRef_global__Microsoft_UI_Xaml_IDataTemplateKeyFactory, dataType, baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.IDataTemplateKeyMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static DataTemplateKey FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DataTemplateKey>.FromAbi(thisPtr);
        }

        protected internal DataTemplateKey(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IDataTemplateKeyMethods.IID);

        }


        public static bool operator ==(DataTemplateKey x, DataTemplateKey y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DataTemplateKey x, DataTemplateKey y) => !(x == y);
        public bool Equals(DataTemplateKey other) => this == other;
        public override bool Equals(object obj) => obj is DataTemplateKey that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected DataTemplateKey(global::WinRT.DerivedComposed _)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(DataTemplateKey);
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public object DataType
        {
            get => global::ABI.Microsoft.UI.Xaml.IDataTemplateKeyMethods.get_DataType(_objRef_global__Microsoft_UI_Xaml_IDataTemplateKey);
            set => global::ABI.Microsoft.UI.Xaml.IDataTemplateKeyMethods.set_DataType(_objRef_global__Microsoft_UI_Xaml_IDataTemplateKey, value);
        }

        protected virtual bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.DebugSettings))]
    [global::ABI.Microsoft.UI.Xaml.DebugSettingsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDebugSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class DebugSettings : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DebugSettings>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IDebugSettings => _inner;
        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IDebugSettings2;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IDebugSettings2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IDebugSettings2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IDebugSettings2Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IDebugSettings2;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IDebugSettings2 => ___objRef_global__Microsoft_UI_Xaml_IDebugSettings2 ?? Make___objRef_global__Microsoft_UI_Xaml_IDebugSettings2();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IDebugSettings3;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IDebugSettings3()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IDebugSettings3, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IDebugSettings3Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IDebugSettings3;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IDebugSettings3 => ___objRef_global__Microsoft_UI_Xaml_IDebugSettings3 ?? Make___objRef_global__Microsoft_UI_Xaml_IDebugSettings3();



        public static DebugSettings FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DebugSettings>.FromAbi(thisPtr);
        }

        internal DebugSettings(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IDebugSettingsMethods.IID);

        }


        public static bool operator ==(DebugSettings x, DebugSettings y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DebugSettings x, DebugSettings y) => !(x == y);
        public bool Equals(DebugSettings other) => this == other;
        public override bool Equals(object obj) => obj is DebugSettings that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public event BindingFailedEventHandler BindingFailed
        {
            add => global::ABI.Microsoft.UI.Xaml.IDebugSettingsMethods.Get_BindingFailed2(_objRef_global__Microsoft_UI_Xaml_IDebugSettings, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IDebugSettingsMethods.Get_BindingFailed2(_objRef_global__Microsoft_UI_Xaml_IDebugSettings, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<DebugSettings, XamlResourceReferenceFailedEventArgs> XamlResourceReferenceFailed
        {
            add => global::ABI.Microsoft.UI.Xaml.IDebugSettings2Methods.Get_XamlResourceReferenceFailed2(_objRef_global__Microsoft_UI_Xaml_IDebugSettings2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IDebugSettings2Methods.Get_XamlResourceReferenceFailed2(_objRef_global__Microsoft_UI_Xaml_IDebugSettings2, (IWinRTObject)this).Unsubscribe(value);
        }

        public bool EnableFrameRateCounter
        {
            get => global::ABI.Microsoft.UI.Xaml.IDebugSettingsMethods.get_EnableFrameRateCounter(_objRef_global__Microsoft_UI_Xaml_IDebugSettings);
            set => global::ABI.Microsoft.UI.Xaml.IDebugSettingsMethods.set_EnableFrameRateCounter(_objRef_global__Microsoft_UI_Xaml_IDebugSettings, value);
        }

        public bool FailFastOnErrors
        {
            get => global::ABI.Microsoft.UI.Xaml.IDebugSettingsMethods.get_FailFastOnErrors(_objRef_global__Microsoft_UI_Xaml_IDebugSettings);
            set => global::ABI.Microsoft.UI.Xaml.IDebugSettingsMethods.set_FailFastOnErrors(_objRef_global__Microsoft_UI_Xaml_IDebugSettings, value);
        }

        public bool IsBindingTracingEnabled
        {
            get => global::ABI.Microsoft.UI.Xaml.IDebugSettingsMethods.get_IsBindingTracingEnabled(_objRef_global__Microsoft_UI_Xaml_IDebugSettings);
            set => global::ABI.Microsoft.UI.Xaml.IDebugSettingsMethods.set_IsBindingTracingEnabled(_objRef_global__Microsoft_UI_Xaml_IDebugSettings, value);
        }

        public bool IsTextPerformanceVisualizationEnabled
        {
            get => global::ABI.Microsoft.UI.Xaml.IDebugSettingsMethods.get_IsTextPerformanceVisualizationEnabled(_objRef_global__Microsoft_UI_Xaml_IDebugSettings);
            set => global::ABI.Microsoft.UI.Xaml.IDebugSettingsMethods.set_IsTextPerformanceVisualizationEnabled(_objRef_global__Microsoft_UI_Xaml_IDebugSettings, value);
        }

        public bool IsXamlResourceReferenceTracingEnabled
        {
            get => global::ABI.Microsoft.UI.Xaml.IDebugSettings2Methods.get_IsXamlResourceReferenceTracingEnabled(_objRef_global__Microsoft_UI_Xaml_IDebugSettings2);
            set => global::ABI.Microsoft.UI.Xaml.IDebugSettings2Methods.set_IsXamlResourceReferenceTracingEnabled(_objRef_global__Microsoft_UI_Xaml_IDebugSettings2, value);
        }

        public LayoutCycleDebugBreakLevel LayoutCycleDebugBreakLevel
        {
            get => global::ABI.Microsoft.UI.Xaml.IDebugSettings3Methods.get_LayoutCycleDebugBreakLevel(_objRef_global__Microsoft_UI_Xaml_IDebugSettings3);
            set => global::ABI.Microsoft.UI.Xaml.IDebugSettings3Methods.set_LayoutCycleDebugBreakLevel(_objRef_global__Microsoft_UI_Xaml_IDebugSettings3, value);
        }

        public LayoutCycleTracingLevel LayoutCycleTracingLevel
        {
            get => global::ABI.Microsoft.UI.Xaml.IDebugSettings3Methods.get_LayoutCycleTracingLevel(_objRef_global__Microsoft_UI_Xaml_IDebugSettings3);
            set => global::ABI.Microsoft.UI.Xaml.IDebugSettings3Methods.set_LayoutCycleTracingLevel(_objRef_global__Microsoft_UI_Xaml_IDebugSettings3, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.DependencyObject))]
    [global::ABI.Microsoft.UI.Xaml.DependencyObjectRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDependencyObject))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public class DependencyObject : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DependencyObject>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IDependencyObject;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IDependencyObject()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IDependencyObject, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IDependencyObjectMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IDependencyObject;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IDependencyObject => ___objRef_global__Microsoft_UI_Xaml_IDependencyObject ?? Make___objRef_global__Microsoft_UI_Xaml_IDependencyObject();



        private static class _IDependencyObjectFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IDependencyObjectFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IDependencyObjectFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IDependencyObjectFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IDependencyObjectFactory = ActivationFactory.Get("Microsoft.UI.Xaml.DependencyObject", global::ABI.Microsoft.UI.Xaml.IDependencyObjectFactoryMethods.IID);
                }
            }
        }

        protected DependencyObject()
        {
            bool isAggregation = this.GetType() != typeof(DependencyObject);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IDependencyObjectFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_IDependencyObjectFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.IDependencyObjectMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static DependencyObject FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DependencyObject>.FromAbi(thisPtr);
        }

        protected internal DependencyObject(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IDependencyObjectMethods.IID);

        }


        public static bool operator ==(DependencyObject x, DependencyObject y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DependencyObject x, DependencyObject y) => !(x == y);
        public bool Equals(DependencyObject other) => this == other;
        public override bool Equals(object obj) => obj is DependencyObject that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected DependencyObject(global::WinRT.DerivedComposed _)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(DependencyObject);
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public object GetValue(DependencyProperty dp) => global::ABI.Microsoft.UI.Xaml.IDependencyObjectMethods.GetValue(_objRef_global__Microsoft_UI_Xaml_IDependencyObject, dp);

        public void SetValue(DependencyProperty dp, object value) => global::ABI.Microsoft.UI.Xaml.IDependencyObjectMethods.SetValue(_objRef_global__Microsoft_UI_Xaml_IDependencyObject, dp, value);

        public void ClearValue(DependencyProperty dp) => global::ABI.Microsoft.UI.Xaml.IDependencyObjectMethods.ClearValue(_objRef_global__Microsoft_UI_Xaml_IDependencyObject, dp);

        public object ReadLocalValue(DependencyProperty dp) => global::ABI.Microsoft.UI.Xaml.IDependencyObjectMethods.ReadLocalValue(_objRef_global__Microsoft_UI_Xaml_IDependencyObject, dp);

        public object GetAnimationBaseValue(DependencyProperty dp) => global::ABI.Microsoft.UI.Xaml.IDependencyObjectMethods.GetAnimationBaseValue(_objRef_global__Microsoft_UI_Xaml_IDependencyObject, dp);

        public long RegisterPropertyChangedCallback(DependencyProperty dp, DependencyPropertyChangedCallback callback) => global::ABI.Microsoft.UI.Xaml.IDependencyObjectMethods.RegisterPropertyChangedCallback(_objRef_global__Microsoft_UI_Xaml_IDependencyObject, dp, callback);

        public void UnregisterPropertyChangedCallback(DependencyProperty dp, long token) => global::ABI.Microsoft.UI.Xaml.IDependencyObjectMethods.UnregisterPropertyChangedCallback(_objRef_global__Microsoft_UI_Xaml_IDependencyObject, dp, token);

        public global::Windows.UI.Core.CoreDispatcher Dispatcher => global::ABI.Microsoft.UI.Xaml.IDependencyObjectMethods.get_Dispatcher(_objRef_global__Microsoft_UI_Xaml_IDependencyObject);

        public global::Microsoft.UI.Dispatching.DispatcherQueue DispatcherQueue => global::ABI.Microsoft.UI.Xaml.IDependencyObjectMethods.get_DispatcherQueue(_objRef_global__Microsoft_UI_Xaml_IDependencyObject);

        protected virtual bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.DependencyObjectCollection))]
    [global::ABI.Microsoft.UI.Xaml.DependencyObjectCollectionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(global::Windows.Foundation.Collections.IObservableVector<DependencyObject>))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public class DependencyObjectCollection : DependencyObject, global::Windows.Foundation.Collections.IObservableVector<DependencyObject>, global::System.Collections.Generic.IList<DependencyObject>, global::System.Collections.Generic.IEnumerable<DependencyObject>, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DependencyObjectCollection>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Windows_Foundation_Collections_IObservableVector_DependencyObject_;
        private IObjectReference Make___objRef_global__Windows_Foundation_Collections_IObservableVector_DependencyObject_()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IObservableVector_1_Microsoft_UI_Xaml_DependencyObject.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Windows_Foundation_Collections_IObservableVector_DependencyObject_, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Windows.Foundation.Collections.IObservableVectorMethods<DependencyObject>.IID), null);
            return ___objRef_global__Windows_Foundation_Collections_IObservableVector_DependencyObject_;
        }
        private IObjectReference _objRef_global__Windows_Foundation_Collections_IObservableVector_DependencyObject_ => ___objRef_global__Windows_Foundation_Collections_IObservableVector_DependencyObject_ ?? Make___objRef_global__Windows_Foundation_Collections_IObservableVector_DependencyObject_();

        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IList_DependencyObject_;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IList_DependencyObject_()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Xaml_DependencyObject.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IList_DependencyObject_, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IListMethods<DependencyObject>.IID), null);
            return ___objRef_global__System_Collections_Generic_IList_DependencyObject_;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IList_DependencyObject_ => ___objRef_global__System_Collections_Generic_IList_DependencyObject_ ?? Make___objRef_global__System_Collections_Generic_IList_DependencyObject_();

        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IEnumerable_DependencyObject_;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IEnumerable_DependencyObject_()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Xaml_DependencyObject.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IEnumerable_DependencyObject_, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IEnumerableMethods<DependencyObject>.IID), null);
            return ___objRef_global__System_Collections_Generic_IEnumerable_DependencyObject_;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IEnumerable_DependencyObject_ => ___objRef_global__System_Collections_Generic_IEnumerable_DependencyObject_ ?? Make___objRef_global__System_Collections_Generic_IEnumerable_DependencyObject_();



        private static class _IDependencyObjectCollectionFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IDependencyObjectCollectionFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IDependencyObjectCollectionFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IDependencyObjectCollectionFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IDependencyObjectCollectionFactory = ActivationFactory.Get("Microsoft.UI.Xaml.DependencyObjectCollection", global::ABI.Microsoft.UI.Xaml.IDependencyObjectCollectionFactoryMethods.IID);
                }
            }
        }

        public DependencyObjectCollection():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(DependencyObjectCollection);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IDependencyObjectCollectionFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_IDependencyObjectCollectionFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Windows.Foundation.Collections.IObservableVectorMethods<DependencyObject>.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new DependencyObjectCollection FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DependencyObjectCollection>.FromAbi(thisPtr);
        }

        protected internal DependencyObjectCollection(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Windows.Foundation.Collections.IObservableVectorMethods<DependencyObject>.IID);

        }


        public static bool operator ==(DependencyObjectCollection x, DependencyObjectCollection y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DependencyObjectCollection x, DependencyObjectCollection y) => !(x == y);
        public bool Equals(DependencyObjectCollection other) => this == other;
        public override bool Equals(object obj) => obj is DependencyObjectCollection that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected DependencyObjectCollection(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(DependencyObjectCollection);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
        public event global::Windows.Foundation.Collections.VectorChangedEventHandler<DependencyObject> VectorChanged
        {
            add => global::ABI.Windows.Foundation.Collections.IObservableVectorMethods<DependencyObject>.Get_VectorChanged2(_objRef_global__Windows_Foundation_Collections_IObservableVector_DependencyObject_, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Windows.Foundation.Collections.IObservableVectorMethods<DependencyObject>.Get_VectorChanged2(_objRef_global__Windows_Foundation_Collections_IObservableVector_DependencyObject_, (IWinRTObject)this).Unsubscribe(value);
        }

        public int Count => global::ABI.System.Collections.Generic.IListMethods<DependencyObject>.get_Count(_objRef_global__System_Collections_Generic_IList_DependencyObject_);
        public bool IsReadOnly => global::ABI.System.Collections.Generic.IListMethods<DependencyObject>.get_IsReadOnly(_objRef_global__System_Collections_Generic_IList_DependencyObject_);
        [global::System.Runtime.CompilerServices.IndexerName("ListItem")]
        public DependencyObject this[int index] 
        {
            get => global::ABI.System.Collections.Generic.IListMethods<DependencyObject>.Indexer_Get(_objRef_global__System_Collections_Generic_IList_DependencyObject_, index);
            set => global::ABI.System.Collections.Generic.IListMethods<DependencyObject>.Indexer_Set(_objRef_global__System_Collections_Generic_IList_DependencyObject_, index, value);
        }
        public int IndexOf(DependencyObject item) => global::ABI.System.Collections.Generic.IListMethods<DependencyObject>.IndexOf(_objRef_global__System_Collections_Generic_IList_DependencyObject_, item);
        public void Insert(int index, DependencyObject item) => global::ABI.System.Collections.Generic.IListMethods<DependencyObject>.Insert(_objRef_global__System_Collections_Generic_IList_DependencyObject_, index, item);
        public void RemoveAt(int index) => global::ABI.System.Collections.Generic.IListMethods<DependencyObject>.RemoveAt(_objRef_global__System_Collections_Generic_IList_DependencyObject_, index);
        public void Add(DependencyObject item) => global::ABI.System.Collections.Generic.IListMethods<DependencyObject>.Add(_objRef_global__System_Collections_Generic_IList_DependencyObject_, item);
        public void Clear() => global::ABI.System.Collections.Generic.IListMethods<DependencyObject>.Clear(_objRef_global__System_Collections_Generic_IList_DependencyObject_);
        public bool Contains(DependencyObject item) => global::ABI.System.Collections.Generic.IListMethods<DependencyObject>.Contains(_objRef_global__System_Collections_Generic_IList_DependencyObject_, item);
        public void CopyTo(DependencyObject[] array, int arrayIndex) => global::ABI.System.Collections.Generic.IListMethods<DependencyObject>.CopyTo(_objRef_global__System_Collections_Generic_IList_DependencyObject_, array, arrayIndex);
        public bool Remove(DependencyObject item) => global::ABI.System.Collections.Generic.IListMethods<DependencyObject>.Remove(_objRef_global__System_Collections_Generic_IList_DependencyObject_, item);

        public IEnumerator<DependencyObject> GetEnumerator() => global::ABI.System.Collections.Generic.IEnumerableMethods<DependencyObject>.GetEnumerator(_objRef_global__System_Collections_Generic_IEnumerable_DependencyObject_);

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.DependencyProperty))]
    [global::ABI.Microsoft.UI.Xaml.DependencyPropertyRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDependencyProperty))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class DependencyProperty : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DependencyProperty>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IDependencyProperty => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.DependencyProperty").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IDependencyPropertyStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IDependencyPropertyStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IDependencyPropertyStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IDependencyPropertyStatics = ActivationFactory.Get("Microsoft.UI.Xaml.DependencyProperty", global::ABI.Microsoft.UI.Xaml.IDependencyPropertyStaticsMethods.IID);
                }
            }
        }

        public static DependencyProperty Register(string name, global::System.Type propertyType, global::System.Type ownerType, PropertyMetadata typeMetadata) => global::ABI.Microsoft.UI.Xaml.IDependencyPropertyStaticsMethods.Register(_objRef_global__Microsoft_UI_Xaml_IDependencyPropertyStatics, name, propertyType, ownerType, typeMetadata);

        public static DependencyProperty RegisterAttached(string name, global::System.Type propertyType, global::System.Type ownerType, PropertyMetadata defaultMetadata) => global::ABI.Microsoft.UI.Xaml.IDependencyPropertyStaticsMethods.RegisterAttached(_objRef_global__Microsoft_UI_Xaml_IDependencyPropertyStatics, name, propertyType, ownerType, defaultMetadata);

        public static object UnsetValue => global::ABI.Microsoft.UI.Xaml.IDependencyPropertyStaticsMethods.get_UnsetValue(_objRef_global__Microsoft_UI_Xaml_IDependencyPropertyStatics);

        public static DependencyProperty FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DependencyProperty>.FromAbi(thisPtr);
        }

        internal DependencyProperty(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IDependencyPropertyMethods.IID);

        }


        public static bool operator ==(DependencyProperty x, DependencyProperty y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DependencyProperty x, DependencyProperty y) => !(x == y);
        public bool Equals(DependencyProperty other) => this == other;
        public override bool Equals(object obj) => obj is DependencyProperty that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public PropertyMetadata GetMetadata(global::System.Type forType) => global::ABI.Microsoft.UI.Xaml.IDependencyPropertyMethods.GetMetadata(_objRef_global__Microsoft_UI_Xaml_IDependencyProperty, forType);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.DependencyPropertyChangedCallback))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.DependencyPropertyChangedCallbackWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public delegate void DependencyPropertyChangedCallback(DependencyObject sender, DependencyProperty dp);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.DependencyPropertyChangedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDependencyPropertyChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class DependencyPropertyChangedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DependencyPropertyChangedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IDependencyPropertyChangedEventArgs => _inner;


        public static DependencyPropertyChangedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DependencyPropertyChangedEventArgs>.FromAbi(thisPtr);
        }

        internal DependencyPropertyChangedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IDependencyPropertyChangedEventArgsMethods.IID);

        }


        public static bool operator ==(DependencyPropertyChangedEventArgs x, DependencyPropertyChangedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DependencyPropertyChangedEventArgs x, DependencyPropertyChangedEventArgs y) => !(x == y);
        public bool Equals(DependencyPropertyChangedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is DependencyPropertyChangedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public object NewValue => global::ABI.Microsoft.UI.Xaml.IDependencyPropertyChangedEventArgsMethods.get_NewValue(_objRef_global__Microsoft_UI_Xaml_IDependencyPropertyChangedEventArgs);

        public object OldValue => global::ABI.Microsoft.UI.Xaml.IDependencyPropertyChangedEventArgsMethods.get_OldValue(_objRef_global__Microsoft_UI_Xaml_IDependencyPropertyChangedEventArgs);

        public DependencyProperty Property => global::ABI.Microsoft.UI.Xaml.IDependencyPropertyChangedEventArgsMethods.get_Property(_objRef_global__Microsoft_UI_Xaml_IDependencyPropertyChangedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.DependencyPropertyChangedEventHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public delegate void DependencyPropertyChangedEventHandler(object sender, DependencyPropertyChangedEventArgs e);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<DispatcherShutdownMode>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 393216u)]
    public enum DispatcherShutdownMode : int
    {
        OnLastWindowClose = unchecked((int)0),
        OnExplicitShutdown = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.DispatcherTimer))]
    [global::ABI.Microsoft.UI.Xaml.DispatcherTimerRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDispatcherTimer))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public class DispatcherTimer : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DispatcherTimer>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IDispatcherTimer;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IDispatcherTimer()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IDispatcherTimer, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IDispatcherTimerMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IDispatcherTimer;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IDispatcherTimer => ___objRef_global__Microsoft_UI_Xaml_IDispatcherTimer ?? Make___objRef_global__Microsoft_UI_Xaml_IDispatcherTimer();



        private static class _IDispatcherTimerFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IDispatcherTimerFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IDispatcherTimerFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IDispatcherTimerFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IDispatcherTimerFactory = ActivationFactory.Get("Microsoft.UI.Xaml.DispatcherTimer", global::ABI.Microsoft.UI.Xaml.IDispatcherTimerFactoryMethods.IID);
                }
            }
        }

        public DispatcherTimer()
        {
            bool isAggregation = this.GetType() != typeof(DispatcherTimer);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IDispatcherTimerFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_IDispatcherTimerFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.IDispatcherTimerMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static DispatcherTimer FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DispatcherTimer>.FromAbi(thisPtr);
        }

        protected internal DispatcherTimer(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IDispatcherTimerMethods.IID);

        }


        public static bool operator ==(DispatcherTimer x, DispatcherTimer y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DispatcherTimer x, DispatcherTimer y) => !(x == y);
        public bool Equals(DispatcherTimer other) => this == other;
        public override bool Equals(object obj) => obj is DispatcherTimer that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected DispatcherTimer(global::WinRT.DerivedComposed _)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(DispatcherTimer);
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void Start() => global::ABI.Microsoft.UI.Xaml.IDispatcherTimerMethods.Start(_objRef_global__Microsoft_UI_Xaml_IDispatcherTimer);

        public void Stop() => global::ABI.Microsoft.UI.Xaml.IDispatcherTimerMethods.Stop(_objRef_global__Microsoft_UI_Xaml_IDispatcherTimer);

        public event global::System.EventHandler<object> Tick
        {
            add => global::ABI.Microsoft.UI.Xaml.IDispatcherTimerMethods.Get_Tick2(_objRef_global__Microsoft_UI_Xaml_IDispatcherTimer, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IDispatcherTimerMethods.Get_Tick2(_objRef_global__Microsoft_UI_Xaml_IDispatcherTimer, (IWinRTObject)this).Unsubscribe(value);
        }

        public global::System.TimeSpan Interval
        {
            get => global::ABI.Microsoft.UI.Xaml.IDispatcherTimerMethods.get_Interval(_objRef_global__Microsoft_UI_Xaml_IDispatcherTimer);
            set => global::ABI.Microsoft.UI.Xaml.IDispatcherTimerMethods.set_Interval(_objRef_global__Microsoft_UI_Xaml_IDispatcherTimer, value);
        }

        public bool IsEnabled => global::ABI.Microsoft.UI.Xaml.IDispatcherTimerMethods.get_IsEnabled(_objRef_global__Microsoft_UI_Xaml_IDispatcherTimer);

        protected virtual bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.DragEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.DragEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDragEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class DragEventArgs : RoutedEventArgs, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DragEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IDragEventArgs => _inner;


        public static new DragEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DragEventArgs>.FromAbi(thisPtr);
        }

        internal DragEventArgs(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IDragEventArgsMethods.IID);

        }


        public static bool operator ==(DragEventArgs x, DragEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DragEventArgs x, DragEventArgs y) => !(x == y);
        public bool Equals(DragEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is DragEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public DragOperationDeferral GetDeferral() => global::ABI.Microsoft.UI.Xaml.IDragEventArgsMethods.GetDeferral(_objRef_global__Microsoft_UI_Xaml_IDragEventArgs);

        public global::Windows.Foundation.Point GetPosition(UIElement relativeTo) => global::ABI.Microsoft.UI.Xaml.IDragEventArgsMethods.GetPosition(_objRef_global__Microsoft_UI_Xaml_IDragEventArgs, relativeTo);

        public global::Windows.ApplicationModel.DataTransfer.DataPackageOperation AcceptedOperation
        {
            get => global::ABI.Microsoft.UI.Xaml.IDragEventArgsMethods.get_AcceptedOperation(_objRef_global__Microsoft_UI_Xaml_IDragEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.IDragEventArgsMethods.set_AcceptedOperation(_objRef_global__Microsoft_UI_Xaml_IDragEventArgs, value);
        }

        public global::Windows.ApplicationModel.DataTransfer.DataPackageOperation AllowedOperations => global::ABI.Microsoft.UI.Xaml.IDragEventArgsMethods.get_AllowedOperations(_objRef_global__Microsoft_UI_Xaml_IDragEventArgs);

        public global::Windows.ApplicationModel.DataTransfer.DataPackage Data
        {
            get => global::ABI.Microsoft.UI.Xaml.IDragEventArgsMethods.get_Data(_objRef_global__Microsoft_UI_Xaml_IDragEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.IDragEventArgsMethods.set_Data(_objRef_global__Microsoft_UI_Xaml_IDragEventArgs, value);
        }

        public global::Windows.ApplicationModel.DataTransfer.DataPackageView DataView => global::ABI.Microsoft.UI.Xaml.IDragEventArgsMethods.get_DataView(_objRef_global__Microsoft_UI_Xaml_IDragEventArgs);

        public DragUIOverride DragUIOverride => global::ABI.Microsoft.UI.Xaml.IDragEventArgsMethods.get_DragUIOverride(_objRef_global__Microsoft_UI_Xaml_IDragEventArgs);

        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Xaml.IDragEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Xaml_IDragEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.IDragEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Xaml_IDragEventArgs, value);
        }

        public global::Windows.ApplicationModel.DataTransfer.DragDrop.DragDropModifiers Modifiers => global::ABI.Microsoft.UI.Xaml.IDragEventArgsMethods.get_Modifiers(_objRef_global__Microsoft_UI_Xaml_IDragEventArgs);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.DragEventHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.DragEventHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public delegate void DragEventHandler(object sender, DragEventArgs e);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.DragOperationDeferral))]
    [global::ABI.Microsoft.UI.Xaml.DragOperationDeferralRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDragOperationDeferral))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class DragOperationDeferral : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DragOperationDeferral>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IDragOperationDeferral => _inner;


        public static DragOperationDeferral FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DragOperationDeferral>.FromAbi(thisPtr);
        }

        internal DragOperationDeferral(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IDragOperationDeferralMethods.IID);

        }


        public static bool operator ==(DragOperationDeferral x, DragOperationDeferral y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DragOperationDeferral x, DragOperationDeferral y) => !(x == y);
        public bool Equals(DragOperationDeferral other) => this == other;
        public override bool Equals(object obj) => obj is DragOperationDeferral that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void Complete() => global::ABI.Microsoft.UI.Xaml.IDragOperationDeferralMethods.Complete(_objRef_global__Microsoft_UI_Xaml_IDragOperationDeferral);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.DragStartingEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.DragStartingEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDragStartingEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class DragStartingEventArgs : RoutedEventArgs, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DragStartingEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IDragStartingEventArgs => _inner;


        public static new DragStartingEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DragStartingEventArgs>.FromAbi(thisPtr);
        }

        internal DragStartingEventArgs(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IDragStartingEventArgsMethods.IID);

        }


        public static bool operator ==(DragStartingEventArgs x, DragStartingEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DragStartingEventArgs x, DragStartingEventArgs y) => !(x == y);
        public bool Equals(DragStartingEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is DragStartingEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public DragOperationDeferral GetDeferral() => global::ABI.Microsoft.UI.Xaml.IDragStartingEventArgsMethods.GetDeferral(_objRef_global__Microsoft_UI_Xaml_IDragStartingEventArgs);

        public global::Windows.Foundation.Point GetPosition(UIElement relativeTo) => global::ABI.Microsoft.UI.Xaml.IDragStartingEventArgsMethods.GetPosition(_objRef_global__Microsoft_UI_Xaml_IDragStartingEventArgs, relativeTo);

        public global::Windows.ApplicationModel.DataTransfer.DataPackageOperation AllowedOperations
        {
            get => global::ABI.Microsoft.UI.Xaml.IDragStartingEventArgsMethods.get_AllowedOperations(_objRef_global__Microsoft_UI_Xaml_IDragStartingEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.IDragStartingEventArgsMethods.set_AllowedOperations(_objRef_global__Microsoft_UI_Xaml_IDragStartingEventArgs, value);
        }

        public bool Cancel
        {
            get => global::ABI.Microsoft.UI.Xaml.IDragStartingEventArgsMethods.get_Cancel(_objRef_global__Microsoft_UI_Xaml_IDragStartingEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.IDragStartingEventArgsMethods.set_Cancel(_objRef_global__Microsoft_UI_Xaml_IDragStartingEventArgs, value);
        }

        public global::Windows.ApplicationModel.DataTransfer.DataPackage Data => global::ABI.Microsoft.UI.Xaml.IDragStartingEventArgsMethods.get_Data(_objRef_global__Microsoft_UI_Xaml_IDragStartingEventArgs);

        public DragUI DragUI => global::ABI.Microsoft.UI.Xaml.IDragStartingEventArgsMethods.get_DragUI(_objRef_global__Microsoft_UI_Xaml_IDragStartingEventArgs);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.DragUI))]
    [global::ABI.Microsoft.UI.Xaml.DragUIRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDragUI))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class DragUI : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DragUI>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IDragUI => _inner;


        public static DragUI FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DragUI>.FromAbi(thisPtr);
        }

        internal DragUI(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IDragUIMethods.IID);

        }


        public static bool operator ==(DragUI x, DragUI y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DragUI x, DragUI y) => !(x == y);
        public bool Equals(DragUI other) => this == other;
        public override bool Equals(object obj) => obj is DragUI that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void SetContentFromBitmapImage(global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage bitmapImage) => global::ABI.Microsoft.UI.Xaml.IDragUIMethods.SetContentFromBitmapImage(_objRef_global__Microsoft_UI_Xaml_IDragUI, bitmapImage);

        public void SetContentFromBitmapImage(global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage bitmapImage, global::Windows.Foundation.Point anchorPoint) => global::ABI.Microsoft.UI.Xaml.IDragUIMethods.SetContentFromBitmapImage(_objRef_global__Microsoft_UI_Xaml_IDragUI, bitmapImage, anchorPoint);

        public void SetContentFromSoftwareBitmap(global::Windows.Graphics.Imaging.SoftwareBitmap softwareBitmap) => global::ABI.Microsoft.UI.Xaml.IDragUIMethods.SetContentFromSoftwareBitmap(_objRef_global__Microsoft_UI_Xaml_IDragUI, softwareBitmap);

        public void SetContentFromSoftwareBitmap(global::Windows.Graphics.Imaging.SoftwareBitmap softwareBitmap, global::Windows.Foundation.Point anchorPoint) => global::ABI.Microsoft.UI.Xaml.IDragUIMethods.SetContentFromSoftwareBitmap(_objRef_global__Microsoft_UI_Xaml_IDragUI, softwareBitmap, anchorPoint);

        public void SetContentFromDataPackage() => global::ABI.Microsoft.UI.Xaml.IDragUIMethods.SetContentFromDataPackage(_objRef_global__Microsoft_UI_Xaml_IDragUI);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.DragUIOverride))]
    [global::ABI.Microsoft.UI.Xaml.DragUIOverrideRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDragUIOverride))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class DragUIOverride : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DragUIOverride>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IDragUIOverride => _inner;


        public static DragUIOverride FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DragUIOverride>.FromAbi(thisPtr);
        }

        internal DragUIOverride(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IDragUIOverrideMethods.IID);

        }


        public static bool operator ==(DragUIOverride x, DragUIOverride y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DragUIOverride x, DragUIOverride y) => !(x == y);
        public bool Equals(DragUIOverride other) => this == other;
        public override bool Equals(object obj) => obj is DragUIOverride that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void Clear() => global::ABI.Microsoft.UI.Xaml.IDragUIOverrideMethods.Clear(_objRef_global__Microsoft_UI_Xaml_IDragUIOverride);

        public void SetContentFromBitmapImage(global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage bitmapImage) => global::ABI.Microsoft.UI.Xaml.IDragUIOverrideMethods.SetContentFromBitmapImage(_objRef_global__Microsoft_UI_Xaml_IDragUIOverride, bitmapImage);

        public void SetContentFromBitmapImage(global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage bitmapImage, global::Windows.Foundation.Point anchorPoint) => global::ABI.Microsoft.UI.Xaml.IDragUIOverrideMethods.SetContentFromBitmapImage(_objRef_global__Microsoft_UI_Xaml_IDragUIOverride, bitmapImage, anchorPoint);

        public void SetContentFromSoftwareBitmap(global::Windows.Graphics.Imaging.SoftwareBitmap softwareBitmap) => global::ABI.Microsoft.UI.Xaml.IDragUIOverrideMethods.SetContentFromSoftwareBitmap(_objRef_global__Microsoft_UI_Xaml_IDragUIOverride, softwareBitmap);

        public void SetContentFromSoftwareBitmap(global::Windows.Graphics.Imaging.SoftwareBitmap softwareBitmap, global::Windows.Foundation.Point anchorPoint) => global::ABI.Microsoft.UI.Xaml.IDragUIOverrideMethods.SetContentFromSoftwareBitmap(_objRef_global__Microsoft_UI_Xaml_IDragUIOverride, softwareBitmap, anchorPoint);

        public string Caption
        {
            get => global::ABI.Microsoft.UI.Xaml.IDragUIOverrideMethods.get_Caption(_objRef_global__Microsoft_UI_Xaml_IDragUIOverride);
            set => global::ABI.Microsoft.UI.Xaml.IDragUIOverrideMethods.set_Caption(_objRef_global__Microsoft_UI_Xaml_IDragUIOverride, value);
        }

        public bool IsCaptionVisible
        {
            get => global::ABI.Microsoft.UI.Xaml.IDragUIOverrideMethods.get_IsCaptionVisible(_objRef_global__Microsoft_UI_Xaml_IDragUIOverride);
            set => global::ABI.Microsoft.UI.Xaml.IDragUIOverrideMethods.set_IsCaptionVisible(_objRef_global__Microsoft_UI_Xaml_IDragUIOverride, value);
        }

        public bool IsContentVisible
        {
            get => global::ABI.Microsoft.UI.Xaml.IDragUIOverrideMethods.get_IsContentVisible(_objRef_global__Microsoft_UI_Xaml_IDragUIOverride);
            set => global::ABI.Microsoft.UI.Xaml.IDragUIOverrideMethods.set_IsContentVisible(_objRef_global__Microsoft_UI_Xaml_IDragUIOverride, value);
        }

        public bool IsGlyphVisible
        {
            get => global::ABI.Microsoft.UI.Xaml.IDragUIOverrideMethods.get_IsGlyphVisible(_objRef_global__Microsoft_UI_Xaml_IDragUIOverride);
            set => global::ABI.Microsoft.UI.Xaml.IDragUIOverrideMethods.set_IsGlyphVisible(_objRef_global__Microsoft_UI_Xaml_IDragUIOverride, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.DropCompletedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.DropCompletedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDropCompletedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class DropCompletedEventArgs : RoutedEventArgs, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DropCompletedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IDropCompletedEventArgs => _inner;


        public static new DropCompletedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DropCompletedEventArgs>.FromAbi(thisPtr);
        }

        internal DropCompletedEventArgs(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IDropCompletedEventArgsMethods.IID);

        }


        public static bool operator ==(DropCompletedEventArgs x, DropCompletedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DropCompletedEventArgs x, DropCompletedEventArgs y) => !(x == y);
        public bool Equals(DropCompletedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is DropCompletedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::Windows.ApplicationModel.DataTransfer.DataPackageOperation DropResult => global::ABI.Microsoft.UI.Xaml.IDropCompletedEventArgsMethods.get_DropResult(_objRef_global__Microsoft_UI_Xaml_IDropCompletedEventArgs);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.EffectiveViewportChangedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IEffectiveViewportChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class EffectiveViewportChangedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<EffectiveViewportChangedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IEffectiveViewportChangedEventArgs => _inner;


        public static EffectiveViewportChangedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<EffectiveViewportChangedEventArgs>.FromAbi(thisPtr);
        }

        internal EffectiveViewportChangedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IEffectiveViewportChangedEventArgsMethods.IID);

        }


        public static bool operator ==(EffectiveViewportChangedEventArgs x, EffectiveViewportChangedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(EffectiveViewportChangedEventArgs x, EffectiveViewportChangedEventArgs y) => !(x == y);
        public bool Equals(EffectiveViewportChangedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is EffectiveViewportChangedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public double BringIntoViewDistanceX => global::ABI.Microsoft.UI.Xaml.IEffectiveViewportChangedEventArgsMethods.get_BringIntoViewDistanceX(_objRef_global__Microsoft_UI_Xaml_IEffectiveViewportChangedEventArgs);

        public double BringIntoViewDistanceY => global::ABI.Microsoft.UI.Xaml.IEffectiveViewportChangedEventArgsMethods.get_BringIntoViewDistanceY(_objRef_global__Microsoft_UI_Xaml_IEffectiveViewportChangedEventArgs);

        public global::Windows.Foundation.Rect EffectiveViewport => global::ABI.Microsoft.UI.Xaml.IEffectiveViewportChangedEventArgsMethods.get_EffectiveViewport(_objRef_global__Microsoft_UI_Xaml_IEffectiveViewportChangedEventArgs);

        public global::Windows.Foundation.Rect MaxViewport => global::ABI.Microsoft.UI.Xaml.IEffectiveViewportChangedEventArgsMethods.get_MaxViewport(_objRef_global__Microsoft_UI_Xaml_IEffectiveViewportChangedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.ElementFactoryGetArgs))]
    [global::ABI.Microsoft.UI.Xaml.ElementFactoryGetArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IElementFactoryGetArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public class ElementFactoryGetArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ElementFactoryGetArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IElementFactoryGetArgs;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IElementFactoryGetArgs()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IElementFactoryGetArgs, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IElementFactoryGetArgsMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IElementFactoryGetArgs;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IElementFactoryGetArgs => ___objRef_global__Microsoft_UI_Xaml_IElementFactoryGetArgs ?? Make___objRef_global__Microsoft_UI_Xaml_IElementFactoryGetArgs();



        private static class _IElementFactoryGetArgsFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IElementFactoryGetArgsFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IElementFactoryGetArgsFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IElementFactoryGetArgsFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IElementFactoryGetArgsFactory = ActivationFactory.Get("Microsoft.UI.Xaml.ElementFactoryGetArgs", global::ABI.Microsoft.UI.Xaml.IElementFactoryGetArgsFactoryMethods.IID);
                }
            }
        }

        public ElementFactoryGetArgs()
        {
            bool isAggregation = this.GetType() != typeof(ElementFactoryGetArgs);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IElementFactoryGetArgsFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_IElementFactoryGetArgsFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.IElementFactoryGetArgsMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static ElementFactoryGetArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ElementFactoryGetArgs>.FromAbi(thisPtr);
        }

        protected internal ElementFactoryGetArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IElementFactoryGetArgsMethods.IID);

        }


        public static bool operator ==(ElementFactoryGetArgs x, ElementFactoryGetArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ElementFactoryGetArgs x, ElementFactoryGetArgs y) => !(x == y);
        public bool Equals(ElementFactoryGetArgs other) => this == other;
        public override bool Equals(object obj) => obj is ElementFactoryGetArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected ElementFactoryGetArgs(global::WinRT.DerivedComposed _)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(ElementFactoryGetArgs);
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public object Data
        {
            get => global::ABI.Microsoft.UI.Xaml.IElementFactoryGetArgsMethods.get_Data(_objRef_global__Microsoft_UI_Xaml_IElementFactoryGetArgs);
            set => global::ABI.Microsoft.UI.Xaml.IElementFactoryGetArgsMethods.set_Data(_objRef_global__Microsoft_UI_Xaml_IElementFactoryGetArgs, value);
        }

        public UIElement Parent
        {
            get => global::ABI.Microsoft.UI.Xaml.IElementFactoryGetArgsMethods.get_Parent(_objRef_global__Microsoft_UI_Xaml_IElementFactoryGetArgs);
            set => global::ABI.Microsoft.UI.Xaml.IElementFactoryGetArgsMethods.set_Parent(_objRef_global__Microsoft_UI_Xaml_IElementFactoryGetArgs, value);
        }

        protected virtual bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.ElementFactoryRecycleArgs))]
    [global::ABI.Microsoft.UI.Xaml.ElementFactoryRecycleArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IElementFactoryRecycleArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public class ElementFactoryRecycleArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ElementFactoryRecycleArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IElementFactoryRecycleArgs;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IElementFactoryRecycleArgs()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IElementFactoryRecycleArgs, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IElementFactoryRecycleArgsMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IElementFactoryRecycleArgs;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IElementFactoryRecycleArgs => ___objRef_global__Microsoft_UI_Xaml_IElementFactoryRecycleArgs ?? Make___objRef_global__Microsoft_UI_Xaml_IElementFactoryRecycleArgs();



        private static class _IElementFactoryRecycleArgsFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IElementFactoryRecycleArgsFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IElementFactoryRecycleArgsFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IElementFactoryRecycleArgsFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IElementFactoryRecycleArgsFactory = ActivationFactory.Get("Microsoft.UI.Xaml.ElementFactoryRecycleArgs", global::ABI.Microsoft.UI.Xaml.IElementFactoryRecycleArgsFactoryMethods.IID);
                }
            }
        }

        public ElementFactoryRecycleArgs()
        {
            bool isAggregation = this.GetType() != typeof(ElementFactoryRecycleArgs);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IElementFactoryRecycleArgsFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_IElementFactoryRecycleArgsFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.IElementFactoryRecycleArgsMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static ElementFactoryRecycleArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ElementFactoryRecycleArgs>.FromAbi(thisPtr);
        }

        protected internal ElementFactoryRecycleArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IElementFactoryRecycleArgsMethods.IID);

        }


        public static bool operator ==(ElementFactoryRecycleArgs x, ElementFactoryRecycleArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ElementFactoryRecycleArgs x, ElementFactoryRecycleArgs y) => !(x == y);
        public bool Equals(ElementFactoryRecycleArgs other) => this == other;
        public override bool Equals(object obj) => obj is ElementFactoryRecycleArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected ElementFactoryRecycleArgs(global::WinRT.DerivedComposed _)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(ElementFactoryRecycleArgs);
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public UIElement Element
        {
            get => global::ABI.Microsoft.UI.Xaml.IElementFactoryRecycleArgsMethods.get_Element(_objRef_global__Microsoft_UI_Xaml_IElementFactoryRecycleArgs);
            set => global::ABI.Microsoft.UI.Xaml.IElementFactoryRecycleArgsMethods.set_Element(_objRef_global__Microsoft_UI_Xaml_IElementFactoryRecycleArgs, value);
        }

        public UIElement Parent
        {
            get => global::ABI.Microsoft.UI.Xaml.IElementFactoryRecycleArgsMethods.get_Parent(_objRef_global__Microsoft_UI_Xaml_IElementFactoryRecycleArgs);
            set => global::ABI.Microsoft.UI.Xaml.IElementFactoryRecycleArgsMethods.set_Parent(_objRef_global__Microsoft_UI_Xaml_IElementFactoryRecycleArgs, value);
        }

        protected virtual bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [FlagsAttribute]
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<ElementHighContrastAdjustment>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public enum ElementHighContrastAdjustment : uint
    {
        None = unchecked((uint)0),
        Application = unchecked((uint)0x80000000),
        Auto = unchecked((uint)0xffffffff),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<ElementSoundKind>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public enum ElementSoundKind : int
    {
        Focus = unchecked((int)0),
        Invoke = unchecked((int)0x1),
        Show = unchecked((int)0x2),
        Hide = unchecked((int)0x3),
        MovePrevious = unchecked((int)0x4),
        MoveNext = unchecked((int)0x5),
        GoBack = unchecked((int)0x6),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<ElementSoundMode>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public enum ElementSoundMode : int
    {
        Default = unchecked((int)0),
        FocusOnly = unchecked((int)0x1),
        Off = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.ElementSoundPlayer))]
    [global::ABI.Microsoft.UI.Xaml.ElementSoundPlayerRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IElementSoundPlayer))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class ElementSoundPlayer : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ElementSoundPlayer>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IElementSoundPlayer => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.ElementSoundPlayer").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IElementSoundPlayerStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IElementSoundPlayerStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IElementSoundPlayerStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IElementSoundPlayerStatics = ActivationFactory.Get("Microsoft.UI.Xaml.ElementSoundPlayer", global::ABI.Microsoft.UI.Xaml.IElementSoundPlayerStaticsMethods.IID);
                }
            }
        }

        public static void Play(ElementSoundKind sound) => global::ABI.Microsoft.UI.Xaml.IElementSoundPlayerStaticsMethods.Play(_objRef_global__Microsoft_UI_Xaml_IElementSoundPlayerStatics, sound);

        public static ElementSpatialAudioMode SpatialAudioMode
        {
            get => global::ABI.Microsoft.UI.Xaml.IElementSoundPlayerStaticsMethods.get_SpatialAudioMode(_objRef_global__Microsoft_UI_Xaml_IElementSoundPlayerStatics);
            set => global::ABI.Microsoft.UI.Xaml.IElementSoundPlayerStaticsMethods.set_SpatialAudioMode(_objRef_global__Microsoft_UI_Xaml_IElementSoundPlayerStatics, value);
        }

        public static ElementSoundPlayerState State
        {
            get => global::ABI.Microsoft.UI.Xaml.IElementSoundPlayerStaticsMethods.get_State(_objRef_global__Microsoft_UI_Xaml_IElementSoundPlayerStatics);
            set => global::ABI.Microsoft.UI.Xaml.IElementSoundPlayerStaticsMethods.set_State(_objRef_global__Microsoft_UI_Xaml_IElementSoundPlayerStatics, value);
        }

        public static double Volume
        {
            get => global::ABI.Microsoft.UI.Xaml.IElementSoundPlayerStaticsMethods.get_Volume(_objRef_global__Microsoft_UI_Xaml_IElementSoundPlayerStatics);
            set => global::ABI.Microsoft.UI.Xaml.IElementSoundPlayerStaticsMethods.set_Volume(_objRef_global__Microsoft_UI_Xaml_IElementSoundPlayerStatics, value);
        }

        public static ElementSoundPlayer FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ElementSoundPlayer>.FromAbi(thisPtr);
        }

        internal ElementSoundPlayer(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IElementSoundPlayerMethods.IID);

        }


        public static bool operator ==(ElementSoundPlayer x, ElementSoundPlayer y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ElementSoundPlayer x, ElementSoundPlayer y) => !(x == y);
        public bool Equals(ElementSoundPlayer other) => this == other;
        public override bool Equals(object obj) => obj is ElementSoundPlayer that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<ElementSoundPlayerState>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public enum ElementSoundPlayerState : int
    {
        Auto = unchecked((int)0),
        Off = unchecked((int)0x1),
        On = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<ElementSpatialAudioMode>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public enum ElementSpatialAudioMode : int
    {
        Auto = unchecked((int)0),
        Off = unchecked((int)0x1),
        On = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<ElementTheme>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public enum ElementTheme : int
    {
        Default = unchecked((int)0),
        Light = unchecked((int)0x1),
        Dark = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.EnteredBackgroundEventHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.EnteredBackgroundEventHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public delegate void EnteredBackgroundEventHandler(object sender, global::Windows.ApplicationModel.EnteredBackgroundEventArgs e);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.EventTrigger))]
    [global::ABI.Microsoft.UI.Xaml.EventTriggerRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IEventTrigger))]
    [global::Microsoft.UI.Xaml.Markup.ContentProperty(Name = @"Actions")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class EventTrigger : TriggerBase, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<EventTrigger>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IEventTrigger => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_EventTrigger;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_EventTrigger
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_EventTrigger;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_EventTrigger = ActivationFactory.Get("Microsoft.UI.Xaml.EventTrigger");
                }
            }
        }

        public EventTrigger() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_EventTrigger, global::ABI.Microsoft.UI.Xaml.IEventTriggerMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new EventTrigger FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<EventTrigger>.FromAbi(thisPtr);
        }

        internal EventTrigger(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IEventTriggerMethods.IID);

        }


        public static bool operator ==(EventTrigger x, EventTrigger y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(EventTrigger x, EventTrigger y) => !(x == y);
        public bool Equals(EventTrigger other) => this == other;
        public override bool Equals(object obj) => obj is EventTrigger that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public TriggerActionCollection Actions => global::ABI.Microsoft.UI.Xaml.IEventTriggerMethods.get_Actions(_objRef_global__Microsoft_UI_Xaml_IEventTrigger);

        public RoutedEvent RoutedEvent
        {
            get => global::ABI.Microsoft.UI.Xaml.IEventTriggerMethods.get_RoutedEvent(_objRef_global__Microsoft_UI_Xaml_IEventTrigger);
            set => global::ABI.Microsoft.UI.Xaml.IEventTriggerMethods.set_RoutedEvent(_objRef_global__Microsoft_UI_Xaml_IEventTrigger, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.ExceptionRoutedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.ExceptionRoutedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IExceptionRoutedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public class ExceptionRoutedEventArgs : RoutedEventArgs, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ExceptionRoutedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IExceptionRoutedEventArgs;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IExceptionRoutedEventArgs()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IExceptionRoutedEventArgs, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IExceptionRoutedEventArgsMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IExceptionRoutedEventArgs;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IExceptionRoutedEventArgs => ___objRef_global__Microsoft_UI_Xaml_IExceptionRoutedEventArgs ?? Make___objRef_global__Microsoft_UI_Xaml_IExceptionRoutedEventArgs();



        private static class _IExceptionRoutedEventArgsFactoryMethods
        {}

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IExceptionRoutedEventArgsFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IExceptionRoutedEventArgsFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IExceptionRoutedEventArgsFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IExceptionRoutedEventArgsFactory = ActivationFactory.Get("Microsoft.UI.Xaml.ExceptionRoutedEventArgs", global::ABI.Microsoft.UI.Xaml.IExceptionRoutedEventArgsFactoryMethods.IID);
                }
            }
        }

        public static new ExceptionRoutedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ExceptionRoutedEventArgs>.FromAbi(thisPtr);
        }

        protected internal ExceptionRoutedEventArgs(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IExceptionRoutedEventArgsMethods.IID);

        }


        public static bool operator ==(ExceptionRoutedEventArgs x, ExceptionRoutedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ExceptionRoutedEventArgs x, ExceptionRoutedEventArgs y) => !(x == y);
        public bool Equals(ExceptionRoutedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is ExceptionRoutedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected ExceptionRoutedEventArgs(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(ExceptionRoutedEventArgs);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public string ErrorMessage => global::ABI.Microsoft.UI.Xaml.IExceptionRoutedEventArgsMethods.get_ErrorMessage(_objRef_global__Microsoft_UI_Xaml_IExceptionRoutedEventArgs);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.ExceptionRoutedEventHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.ExceptionRoutedEventHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public delegate void ExceptionRoutedEventHandler(object sender, ExceptionRoutedEventArgs e);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<FlowDirection>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public enum FlowDirection : int
    {
        LeftToRight = unchecked((int)0),
        RightToLeft = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<FocusState>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public enum FocusState : int
    {
        Unfocused = unchecked((int)0),
        Pointer = unchecked((int)0x1),
        Keyboard = unchecked((int)0x2),
        Programmatic = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<FocusVisualKind>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public enum FocusVisualKind : int
    {
        DottedLine = unchecked((int)0),
        HighVisibility = unchecked((int)0x1),
        Reveal = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<FontCapitals>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public enum FontCapitals : int
    {
        Normal = unchecked((int)0),
        AllSmallCaps = unchecked((int)0x1),
        SmallCaps = unchecked((int)0x2),
        AllPetiteCaps = unchecked((int)0x3),
        PetiteCaps = unchecked((int)0x4),
        Unicase = unchecked((int)0x5),
        Titling = unchecked((int)0x6),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<FontEastAsianLanguage>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public enum FontEastAsianLanguage : int
    {
        Normal = unchecked((int)0),
        HojoKanji = unchecked((int)0x1),
        Jis04 = unchecked((int)0x2),
        Jis78 = unchecked((int)0x3),
        Jis83 = unchecked((int)0x4),
        Jis90 = unchecked((int)0x5),
        NlcKanji = unchecked((int)0x6),
        Simplified = unchecked((int)0x7),
        Traditional = unchecked((int)0x8),
        TraditionalNames = unchecked((int)0x9),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<FontEastAsianWidths>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public enum FontEastAsianWidths : int
    {
        Normal = unchecked((int)0),
        Full = unchecked((int)0x1),
        Half = unchecked((int)0x2),
        Proportional = unchecked((int)0x3),
        Quarter = unchecked((int)0x4),
        Third = unchecked((int)0x5),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<FontFraction>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public enum FontFraction : int
    {
        Normal = unchecked((int)0),
        Stacked = unchecked((int)0x1),
        Slashed = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<FontNumeralAlignment>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public enum FontNumeralAlignment : int
    {
        Normal = unchecked((int)0),
        Proportional = unchecked((int)0x1),
        Tabular = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<FontNumeralStyle>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public enum FontNumeralStyle : int
    {
        Normal = unchecked((int)0),
        Lining = unchecked((int)0x1),
        OldStyle = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<FontVariants>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public enum FontVariants : int
    {
        Normal = unchecked((int)0),
        Superscript = unchecked((int)0x1),
        Subscript = unchecked((int)0x2),
        Ordinal = unchecked((int)0x3),
        Inferior = unchecked((int)0x4),
        Ruby = unchecked((int)0x5),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.FrameworkElement))]
    [global::ABI.Microsoft.UI.Xaml.FrameworkElementRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IFrameworkElement))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public class FrameworkElement : UIElement, IFrameworkElementOverrides, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<FrameworkElement>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IFrameworkElement;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IFrameworkElement()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IFrameworkElement, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IFrameworkElement;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IFrameworkElement => ___objRef_global__Microsoft_UI_Xaml_IFrameworkElement ?? Make___objRef_global__Microsoft_UI_Xaml_IFrameworkElement();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IFrameworkElementProtected;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IFrameworkElementProtected()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IFrameworkElementProtected, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IFrameworkElementProtectedMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IFrameworkElementProtected;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IFrameworkElementProtected => ___objRef_global__Microsoft_UI_Xaml_IFrameworkElementProtected ?? Make___objRef_global__Microsoft_UI_Xaml_IFrameworkElementProtected();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IFrameworkElementOverrides;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IFrameworkElementOverrides()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IFrameworkElementOverrides, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IFrameworkElementOverridesMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IFrameworkElementOverrides;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IFrameworkElementOverrides => ___objRef_global__Microsoft_UI_Xaml_IFrameworkElementOverrides ?? Make___objRef_global__Microsoft_UI_Xaml_IFrameworkElementOverrides();



        private static class _IFrameworkElementFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IFrameworkElementFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IFrameworkElementFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IFrameworkElementFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IFrameworkElementFactory = ActivationFactory.Get("Microsoft.UI.Xaml.FrameworkElement", global::ABI.Microsoft.UI.Xaml.IFrameworkElementFactoryMethods.IID);
                }
            }
        }

        protected FrameworkElement():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(FrameworkElement);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IFrameworkElementFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.FrameworkElement").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IFrameworkElementStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IFrameworkElementStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IFrameworkElementStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IFrameworkElementStatics = ActivationFactory.Get("Microsoft.UI.Xaml.FrameworkElement", global::ABI.Microsoft.UI.Xaml.IFrameworkElementStaticsMethods.IID);
                }
            }
        }

        public static void DeferTree(DependencyObject element) => global::ABI.Microsoft.UI.Xaml.IFrameworkElementStaticsMethods.DeferTree(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementStatics, element);

        public static DependencyProperty ActualHeightProperty => global::ABI.Microsoft.UI.Xaml.IFrameworkElementStaticsMethods.get_ActualHeightProperty(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementStatics);

        public static DependencyProperty ActualThemeProperty => global::ABI.Microsoft.UI.Xaml.IFrameworkElementStaticsMethods.get_ActualThemeProperty(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementStatics);

        public static DependencyProperty ActualWidthProperty => global::ABI.Microsoft.UI.Xaml.IFrameworkElementStaticsMethods.get_ActualWidthProperty(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementStatics);

        public static DependencyProperty AllowFocusOnInteractionProperty => global::ABI.Microsoft.UI.Xaml.IFrameworkElementStaticsMethods.get_AllowFocusOnInteractionProperty(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementStatics);

        public static DependencyProperty AllowFocusWhenDisabledProperty => global::ABI.Microsoft.UI.Xaml.IFrameworkElementStaticsMethods.get_AllowFocusWhenDisabledProperty(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementStatics);

        public static DependencyProperty DataContextProperty => global::ABI.Microsoft.UI.Xaml.IFrameworkElementStaticsMethods.get_DataContextProperty(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementStatics);

        public static DependencyProperty FlowDirectionProperty => global::ABI.Microsoft.UI.Xaml.IFrameworkElementStaticsMethods.get_FlowDirectionProperty(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementStatics);

        public static DependencyProperty FocusVisualMarginProperty => global::ABI.Microsoft.UI.Xaml.IFrameworkElementStaticsMethods.get_FocusVisualMarginProperty(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementStatics);

        public static DependencyProperty FocusVisualPrimaryBrushProperty => global::ABI.Microsoft.UI.Xaml.IFrameworkElementStaticsMethods.get_FocusVisualPrimaryBrushProperty(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementStatics);

        public static DependencyProperty FocusVisualPrimaryThicknessProperty => global::ABI.Microsoft.UI.Xaml.IFrameworkElementStaticsMethods.get_FocusVisualPrimaryThicknessProperty(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementStatics);

        public static DependencyProperty FocusVisualSecondaryBrushProperty => global::ABI.Microsoft.UI.Xaml.IFrameworkElementStaticsMethods.get_FocusVisualSecondaryBrushProperty(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementStatics);

        public static DependencyProperty FocusVisualSecondaryThicknessProperty => global::ABI.Microsoft.UI.Xaml.IFrameworkElementStaticsMethods.get_FocusVisualSecondaryThicknessProperty(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementStatics);

        public static DependencyProperty HeightProperty => global::ABI.Microsoft.UI.Xaml.IFrameworkElementStaticsMethods.get_HeightProperty(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementStatics);

        public static DependencyProperty HorizontalAlignmentProperty => global::ABI.Microsoft.UI.Xaml.IFrameworkElementStaticsMethods.get_HorizontalAlignmentProperty(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementStatics);

        public static DependencyProperty LanguageProperty => global::ABI.Microsoft.UI.Xaml.IFrameworkElementStaticsMethods.get_LanguageProperty(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementStatics);

        public static DependencyProperty MarginProperty => global::ABI.Microsoft.UI.Xaml.IFrameworkElementStaticsMethods.get_MarginProperty(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementStatics);

        public static DependencyProperty MaxHeightProperty => global::ABI.Microsoft.UI.Xaml.IFrameworkElementStaticsMethods.get_MaxHeightProperty(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementStatics);

        public static DependencyProperty MaxWidthProperty => global::ABI.Microsoft.UI.Xaml.IFrameworkElementStaticsMethods.get_MaxWidthProperty(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementStatics);

        public static DependencyProperty MinHeightProperty => global::ABI.Microsoft.UI.Xaml.IFrameworkElementStaticsMethods.get_MinHeightProperty(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementStatics);

        public static DependencyProperty MinWidthProperty => global::ABI.Microsoft.UI.Xaml.IFrameworkElementStaticsMethods.get_MinWidthProperty(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementStatics);

        public static DependencyProperty NameProperty => global::ABI.Microsoft.UI.Xaml.IFrameworkElementStaticsMethods.get_NameProperty(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementStatics);

        public static DependencyProperty RequestedThemeProperty => global::ABI.Microsoft.UI.Xaml.IFrameworkElementStaticsMethods.get_RequestedThemeProperty(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementStatics);

        public static DependencyProperty StyleProperty => global::ABI.Microsoft.UI.Xaml.IFrameworkElementStaticsMethods.get_StyleProperty(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementStatics);

        public static DependencyProperty TagProperty => global::ABI.Microsoft.UI.Xaml.IFrameworkElementStaticsMethods.get_TagProperty(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementStatics);

        public static DependencyProperty VerticalAlignmentProperty => global::ABI.Microsoft.UI.Xaml.IFrameworkElementStaticsMethods.get_VerticalAlignmentProperty(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementStatics);

        public static DependencyProperty WidthProperty => global::ABI.Microsoft.UI.Xaml.IFrameworkElementStaticsMethods.get_WidthProperty(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementStatics);

        public static new FrameworkElement FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<FrameworkElement>.FromAbi(thisPtr);
        }

        protected internal FrameworkElement(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.IID);

        }


        public static bool operator ==(FrameworkElement x, FrameworkElement y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(FrameworkElement x, FrameworkElement y) => !(x == y);
        public bool Equals(FrameworkElement other) => this == other;
        public override bool Equals(object obj) => obj is FrameworkElement that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected FrameworkElement(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(FrameworkElement);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public object FindName(string name) => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.FindName(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, name);

        public void SetBinding(DependencyProperty dp, global::Microsoft.UI.Xaml.Data.BindingBase binding) => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.SetBinding(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, dp, binding);

        public global::Microsoft.UI.Xaml.Data.BindingExpression GetBindingExpression(DependencyProperty dp) => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.GetBindingExpression(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, dp);

        public event global::Windows.Foundation.TypedEventHandler<FrameworkElement, object> ActualThemeChanged
        {
            add => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.Get_ActualThemeChanged2(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.Get_ActualThemeChanged2(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<FrameworkElement, DataContextChangedEventArgs> DataContextChanged
        {
            add => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.Get_DataContextChanged2(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.Get_DataContextChanged2(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<FrameworkElement, EffectiveViewportChangedEventArgs> EffectiveViewportChanged
        {
            add => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.Get_EffectiveViewportChanged2(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.Get_EffectiveViewportChanged2(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::System.EventHandler<object> LayoutUpdated
        {
            add => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.Get_LayoutUpdated2(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.Get_LayoutUpdated2(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event RoutedEventHandler Loaded
        {
            add => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.Get_Loaded2(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.Get_Loaded2(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<FrameworkElement, object> Loading
        {
            add => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.Get_Loading2(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.Get_Loading2(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event SizeChangedEventHandler SizeChanged
        {
            add => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.Get_SizeChanged2(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.Get_SizeChanged2(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event RoutedEventHandler Unloaded
        {
            add => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.Get_Unloaded2(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.Get_Unloaded2(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, (IWinRTObject)this).Unsubscribe(value);
        }

        protected void InvalidateViewport() => global::ABI.Microsoft.UI.Xaml.IFrameworkElementProtectedMethods.InvalidateViewport(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementProtected);

        protected virtual global::Windows.Foundation.Size MeasureOverride(global::Windows.Foundation.Size availableSize) => global::ABI.Microsoft.UI.Xaml.IFrameworkElementOverridesMethods.MeasureOverride(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementOverrides, availableSize);

        global::Windows.Foundation.Size IFrameworkElementOverrides.MeasureOverride(global::Windows.Foundation.Size availableSize) => MeasureOverride(availableSize);
        protected virtual global::Windows.Foundation.Size ArrangeOverride(global::Windows.Foundation.Size finalSize) => global::ABI.Microsoft.UI.Xaml.IFrameworkElementOverridesMethods.ArrangeOverride(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementOverrides, finalSize);

        global::Windows.Foundation.Size IFrameworkElementOverrides.ArrangeOverride(global::Windows.Foundation.Size finalSize) => ArrangeOverride(finalSize);
        protected virtual void OnApplyTemplate() => global::ABI.Microsoft.UI.Xaml.IFrameworkElementOverridesMethods.OnApplyTemplate(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementOverrides);

        void IFrameworkElementOverrides.OnApplyTemplate() => OnApplyTemplate();
        protected virtual bool GoToElementStateCore(string stateName, bool useTransitions) => global::ABI.Microsoft.UI.Xaml.IFrameworkElementOverridesMethods.GoToElementStateCore(_objRef_global__Microsoft_UI_Xaml_IFrameworkElementOverrides, stateName, useTransitions);

        bool IFrameworkElementOverrides.GoToElementStateCore(string stateName, bool useTransitions) => GoToElementStateCore(stateName, useTransitions);
        public double ActualHeight => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.get_ActualHeight(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement);

        public ElementTheme ActualTheme => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.get_ActualTheme(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement);

        public double ActualWidth => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.get_ActualWidth(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement);

        public bool AllowFocusOnInteraction
        {
            get => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.get_AllowFocusOnInteraction(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement);
            set => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.set_AllowFocusOnInteraction(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, value);
        }

        public bool AllowFocusWhenDisabled
        {
            get => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.get_AllowFocusWhenDisabled(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement);
            set => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.set_AllowFocusWhenDisabled(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, value);
        }

        public global::System.Uri BaseUri => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.get_BaseUri(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement);

        public object DataContext
        {
            get => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.get_DataContext(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement);
            set => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.set_DataContext(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, value);
        }

        public FlowDirection FlowDirection
        {
            get => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.get_FlowDirection(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement);
            set => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.set_FlowDirection(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, value);
        }

        public Thickness FocusVisualMargin
        {
            get => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.get_FocusVisualMargin(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement);
            set => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.set_FocusVisualMargin(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush FocusVisualPrimaryBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.get_FocusVisualPrimaryBrush(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement);
            set => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.set_FocusVisualPrimaryBrush(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, value);
        }

        public Thickness FocusVisualPrimaryThickness
        {
            get => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.get_FocusVisualPrimaryThickness(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement);
            set => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.set_FocusVisualPrimaryThickness(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush FocusVisualSecondaryBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.get_FocusVisualSecondaryBrush(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement);
            set => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.set_FocusVisualSecondaryBrush(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, value);
        }

        public Thickness FocusVisualSecondaryThickness
        {
            get => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.get_FocusVisualSecondaryThickness(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement);
            set => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.set_FocusVisualSecondaryThickness(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, value);
        }

        public double Height
        {
            get => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.get_Height(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement);
            set => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.set_Height(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, value);
        }

        public HorizontalAlignment HorizontalAlignment
        {
            get => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.get_HorizontalAlignment(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement);
            set => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.set_HorizontalAlignment(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, value);
        }

        public bool IsLoaded => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.get_IsLoaded(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement);

        public string Language
        {
            get => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.get_Language(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement);
            set => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.set_Language(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, value);
        }

        public Thickness Margin
        {
            get => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.get_Margin(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement);
            set => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.set_Margin(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, value);
        }

        public double MaxHeight
        {
            get => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.get_MaxHeight(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement);
            set => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.set_MaxHeight(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, value);
        }

        public double MaxWidth
        {
            get => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.get_MaxWidth(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement);
            set => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.set_MaxWidth(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, value);
        }

        public double MinHeight
        {
            get => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.get_MinHeight(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement);
            set => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.set_MinHeight(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, value);
        }

        public double MinWidth
        {
            get => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.get_MinWidth(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement);
            set => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.set_MinWidth(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, value);
        }

        public string Name
        {
            get => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.get_Name(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement);
            set => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.set_Name(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, value);
        }

        public DependencyObject Parent => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.get_Parent(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement);

        public ElementTheme RequestedTheme
        {
            get => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.get_RequestedTheme(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement);
            set => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.set_RequestedTheme(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, value);
        }

        public ResourceDictionary Resources
        {
            get => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.get_Resources(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement);
            set => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.set_Resources(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, value);
        }

        public Style Style
        {
            get => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.get_Style(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement);
            set => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.set_Style(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, value);
        }

        public object Tag
        {
            get => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.get_Tag(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement);
            set => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.set_Tag(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, value);
        }

        public TriggerCollection Triggers => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.get_Triggers(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement);

        public VerticalAlignment VerticalAlignment
        {
            get => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.get_VerticalAlignment(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement);
            set => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.set_VerticalAlignment(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, value);
        }

        public double Width
        {
            get => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.get_Width(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement);
            set => global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.set_Width(_objRef_global__Microsoft_UI_Xaml_IFrameworkElement, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => global::ABI.Microsoft.UI.Xaml.IFrameworkElementOverridesMethods.IID == iid || base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.FrameworkTemplate))]
    [global::ABI.Microsoft.UI.Xaml.FrameworkTemplateRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IFrameworkTemplate))]
    [global::Microsoft.UI.Xaml.Markup.ContentProperty(Name = @"Template")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public class FrameworkTemplate : DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<FrameworkTemplate>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IFrameworkTemplate;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IFrameworkTemplate()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IFrameworkTemplate, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IFrameworkTemplateMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IFrameworkTemplate;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IFrameworkTemplate => ___objRef_global__Microsoft_UI_Xaml_IFrameworkTemplate ?? Make___objRef_global__Microsoft_UI_Xaml_IFrameworkTemplate();



        private static class _IFrameworkTemplateFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IFrameworkTemplateFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IFrameworkTemplateFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IFrameworkTemplateFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IFrameworkTemplateFactory = ActivationFactory.Get("Microsoft.UI.Xaml.FrameworkTemplate", global::ABI.Microsoft.UI.Xaml.IFrameworkTemplateFactoryMethods.IID);
                }
            }
        }

        protected FrameworkTemplate():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(FrameworkTemplate);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IFrameworkTemplateFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_IFrameworkTemplateFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.IFrameworkTemplateMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new FrameworkTemplate FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<FrameworkTemplate>.FromAbi(thisPtr);
        }

        protected internal FrameworkTemplate(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IFrameworkTemplateMethods.IID);

        }


        public static bool operator ==(FrameworkTemplate x, FrameworkTemplate y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(FrameworkTemplate x, FrameworkTemplate y) => !(x == y);
        public bool Equals(FrameworkTemplate other) => this == other;
        public override bool Equals(object obj) => obj is FrameworkTemplate that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected FrameworkTemplate(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(FrameworkTemplate);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.FrameworkView))]
    [global::ABI.Microsoft.UI.Xaml.FrameworkViewRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IFrameworkView))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class FrameworkView : global::Windows.ApplicationModel.Core.IFrameworkView, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<FrameworkView>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IFrameworkView => _inner;
        private volatile IObjectReference ___objRef_global__Windows_ApplicationModel_Core_IFrameworkView;
        private IObjectReference Make___objRef_global__Windows_ApplicationModel_Core_IFrameworkView()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Windows_ApplicationModel_Core_IFrameworkView, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Windows.ApplicationModel.Core.IFrameworkViewMethods.IID), null);
            return ___objRef_global__Windows_ApplicationModel_Core_IFrameworkView;
        }
        private IObjectReference _objRef_global__Windows_ApplicationModel_Core_IFrameworkView => ___objRef_global__Windows_ApplicationModel_Core_IFrameworkView ?? Make___objRef_global__Windows_ApplicationModel_Core_IFrameworkView();



        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_FrameworkView;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_FrameworkView
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_FrameworkView;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_FrameworkView = ActivationFactory.Get("Microsoft.UI.Xaml.FrameworkView");
                }
            }
        }

        public FrameworkView() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_FrameworkView, global::ABI.Microsoft.UI.Xaml.IFrameworkViewMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static FrameworkView FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<FrameworkView>.FromAbi(thisPtr);
        }

        internal FrameworkView(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IFrameworkViewMethods.IID);

        }


        public static bool operator ==(FrameworkView x, FrameworkView y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(FrameworkView x, FrameworkView y) => !(x == y);
        public bool Equals(FrameworkView other) => this == other;
        public override bool Equals(object obj) => obj is FrameworkView that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
        public void Initialize(global::Windows.ApplicationModel.Core.CoreApplicationView applicationView) => global::ABI.Windows.ApplicationModel.Core.IFrameworkViewMethods.Initialize(_objRef_global__Windows_ApplicationModel_Core_IFrameworkView, applicationView);

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
        public void SetWindow(global::Windows.UI.Core.CoreWindow window) => global::ABI.Windows.ApplicationModel.Core.IFrameworkViewMethods.SetWindow(_objRef_global__Windows_ApplicationModel_Core_IFrameworkView, window);

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
        public void Load(string entryPoint) => global::ABI.Windows.ApplicationModel.Core.IFrameworkViewMethods.Load(_objRef_global__Windows_ApplicationModel_Core_IFrameworkView, entryPoint);

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
        public void Run() => global::ABI.Windows.ApplicationModel.Core.IFrameworkViewMethods.Run(_objRef_global__Windows_ApplicationModel_Core_IFrameworkView);

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
        public void Uninitialize() => global::ABI.Windows.ApplicationModel.Core.IFrameworkViewMethods.Uninitialize(_objRef_global__Windows_ApplicationModel_Core_IFrameworkView);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.FrameworkViewSource))]
    [global::ABI.Microsoft.UI.Xaml.FrameworkViewSourceRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IFrameworkViewSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class FrameworkViewSource : global::Windows.ApplicationModel.Core.IFrameworkViewSource, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<FrameworkViewSource>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IFrameworkViewSource => _inner;
        private volatile IObjectReference ___objRef_global__Windows_ApplicationModel_Core_IFrameworkViewSource;
        private IObjectReference Make___objRef_global__Windows_ApplicationModel_Core_IFrameworkViewSource()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Windows_ApplicationModel_Core_IFrameworkViewSource, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Windows.ApplicationModel.Core.IFrameworkViewSourceMethods.IID), null);
            return ___objRef_global__Windows_ApplicationModel_Core_IFrameworkViewSource;
        }
        private IObjectReference _objRef_global__Windows_ApplicationModel_Core_IFrameworkViewSource => ___objRef_global__Windows_ApplicationModel_Core_IFrameworkViewSource ?? Make___objRef_global__Windows_ApplicationModel_Core_IFrameworkViewSource();



        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_FrameworkViewSource;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_FrameworkViewSource
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_FrameworkViewSource;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_FrameworkViewSource = ActivationFactory.Get("Microsoft.UI.Xaml.FrameworkViewSource");
                }
            }
        }

        public FrameworkViewSource() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_FrameworkViewSource, global::ABI.Microsoft.UI.Xaml.IFrameworkViewSourceMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static FrameworkViewSource FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<FrameworkViewSource>.FromAbi(thisPtr);
        }

        internal FrameworkViewSource(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IFrameworkViewSourceMethods.IID);

        }


        public static bool operator ==(FrameworkViewSource x, FrameworkViewSource y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(FrameworkViewSource x, FrameworkViewSource y) => !(x == y);
        public bool Equals(FrameworkViewSource other) => this == other;
        public override bool Equals(object obj) => obj is FrameworkViewSource that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
        public global::Windows.ApplicationModel.Core.IFrameworkView CreateView() => global::ABI.Windows.ApplicationModel.Core.IFrameworkViewSourceMethods.CreateView(_objRef_global__Windows_ApplicationModel_Core_IFrameworkViewSource);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<HorizontalAlignment>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public enum HorizontalAlignment : int
    {
        Left = unchecked((int)0),
        Center = unchecked((int)0x1),
        Right = unchecked((int)0x2),
        Stretch = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("B2B18AE8-48D9-5A1D-A555-6685DDD4DA80")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IAdaptiveTrigger))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IAdaptiveTrigger
    {
        double MinWindowHeight { get; set; }
        double MinWindowWidth { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("9C9560BB-4099-5175-9250-45A15E753DA8")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IAdaptiveTriggerFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IAdaptiveTriggerFactory
    {
        AdaptiveTrigger CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("E7A3547F-C077-5F20-AAB1-D16C30D9D37F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IAdaptiveTriggerStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IAdaptiveTriggerStatics
    {
        DependencyProperty MinWindowHeightProperty { get; }
        DependencyProperty MinWindowWidthProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("06A8F4E7-1146-55AF-820D-EBD55643B021")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IApplication))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IApplication
    {
        void Exit();
        DebugSettings DebugSettings { get; }
        FocusVisualKind FocusVisualKind { get; set; }
        ApplicationHighContrastAdjustment HighContrastAdjustment { get; set; }
        ApplicationTheme RequestedTheme { get; set; }
        ResourceDictionary Resources { get; set; }
        event UnhandledExceptionEventHandler UnhandledException;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("469E6D36-2E11-5B06-9E0A-C5EEF0CF8F12")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IApplication2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 327680u)]
    internal interface IApplication2
    {
        event global::Windows.Foundation.TypedEventHandler<object, ResourceManagerRequestedEventArgs> ResourceManagerRequested;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("BE941595-61FE-5B36-A3D3-962A647D7C6F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IApplication3))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 393216u)]
    internal interface IApplication3
    {
        DispatcherShutdownMode DispatcherShutdownMode { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("9FD96657-5294-5A65-A1DB-4FEA143597DA")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IApplicationFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IApplicationFactory
    {
        Application CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("1B1906EA-5B7B-5876-81AB-7C2281AC3D20")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IApplicationInitializationCallbackParams))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IApplicationInitializationCallbackParams
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("A33E81EF-C665-503B-8827-D27EF1720A06")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IApplicationOverrides))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IApplicationOverrides
    {
        void OnLaunched(LaunchActivatedEventArgs args);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("4E0D09F5-4358-512C-A987-503B52848E95")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IApplicationStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IApplicationStatics
    {
        void Start(ApplicationInitializationCallback callback);
        [global::Windows.Foundation.Metadata.Overload(@"LoadComponent")]
        void LoadComponent(object component, global::System.Uri resourceLocator);
        [global::Windows.Foundation.Metadata.Overload(@"LoadComponentWithResourceLocation")]
        void LoadComponent(object component, global::System.Uri resourceLocator, global::Microsoft.UI.Xaml.Controls.Primitives.ComponentResourceLocation componentResourceLocation);
        Application Current { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("A7BF50F3-DBC0-5B44-BE74-56E8F80FD716")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IBindingFailedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IBindingFailedEventArgs
    {
        string Message { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("EEB4A447-EB9E-5003-A479-B9E3A886B708")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IBringIntoViewOptions))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IBringIntoViewOptions
    {
        bool AnimationDesired { get; set; }
        double HorizontalAlignmentRatio { get; set; }
        double HorizontalOffset { get; set; }
        global::System.Nullable<global::Windows.Foundation.Rect> TargetRect { get; set; }
        double VerticalAlignmentRatio { get; set; }
        double VerticalOffset { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("807DE8F9-B1DC-5A63-8101-5EE966841A27")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IBringIntoViewRequestedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IBringIntoViewRequestedEventArgs
    {
        bool AnimationDesired { get; set; }
        bool Handled { get; set; }
        double HorizontalAlignmentRatio { get; }
        double HorizontalOffset { get; set; }
        UIElement TargetElement { get; set; }
        global::Windows.Foundation.Rect TargetRect { get; set; }
        double VerticalAlignmentRatio { get; }
        double VerticalOffset { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("A996A7BA-4567-5963-A112-76E3C0000204")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IBrushTransition))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IBrushTransition
    {
        global::System.TimeSpan Duration { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("13735998-C3B6-5C24-B40A-7B166A6FFC2C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IBrushTransitionFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IBrushTransitionFactory
    {
        BrushTransition CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("1903A03C-1750-54FE-A434-14B227CBE701")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IColorPaletteResources))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IColorPaletteResources
    {
        global::System.Nullable<global::Windows.UI.Color> Accent { get; set; }
        global::System.Nullable<global::Windows.UI.Color> AltHigh { get; set; }
        global::System.Nullable<global::Windows.UI.Color> AltLow { get; set; }
        global::System.Nullable<global::Windows.UI.Color> AltMedium { get; set; }
        global::System.Nullable<global::Windows.UI.Color> AltMediumHigh { get; set; }
        global::System.Nullable<global::Windows.UI.Color> AltMediumLow { get; set; }
        global::System.Nullable<global::Windows.UI.Color> BaseHigh { get; set; }
        global::System.Nullable<global::Windows.UI.Color> BaseLow { get; set; }
        global::System.Nullable<global::Windows.UI.Color> BaseMedium { get; set; }
        global::System.Nullable<global::Windows.UI.Color> BaseMediumHigh { get; set; }
        global::System.Nullable<global::Windows.UI.Color> BaseMediumLow { get; set; }
        global::System.Nullable<global::Windows.UI.Color> ChromeAltLow { get; set; }
        global::System.Nullable<global::Windows.UI.Color> ChromeBlackHigh { get; set; }
        global::System.Nullable<global::Windows.UI.Color> ChromeBlackLow { get; set; }
        global::System.Nullable<global::Windows.UI.Color> ChromeBlackMedium { get; set; }
        global::System.Nullable<global::Windows.UI.Color> ChromeBlackMediumLow { get; set; }
        global::System.Nullable<global::Windows.UI.Color> ChromeDisabledHigh { get; set; }
        global::System.Nullable<global::Windows.UI.Color> ChromeDisabledLow { get; set; }
        global::System.Nullable<global::Windows.UI.Color> ChromeGray { get; set; }
        global::System.Nullable<global::Windows.UI.Color> ChromeHigh { get; set; }
        global::System.Nullable<global::Windows.UI.Color> ChromeLow { get; set; }
        global::System.Nullable<global::Windows.UI.Color> ChromeMedium { get; set; }
        global::System.Nullable<global::Windows.UI.Color> ChromeMediumLow { get; set; }
        global::System.Nullable<global::Windows.UI.Color> ChromeWhite { get; set; }
        global::System.Nullable<global::Windows.UI.Color> ErrorText { get; set; }
        global::System.Nullable<global::Windows.UI.Color> ListLow { get; set; }
        global::System.Nullable<global::Windows.UI.Color> ListMedium { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("32FDE185-8544-59C0-9E0A-E6E0BAD9EDCF")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IColorPaletteResourcesFactory
    {
        ColorPaletteResources CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("A1BE80F4-CF83-5022-B113-9233F1D4FAFA")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IDataContextChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IDataContextChangedEventArgs
    {
        bool Handled { get; set; }
        object NewValue { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("08FA70FA-EE75-5E92-A101-F52D0E1E9FAB")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IDataTemplate))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IDataTemplate
    {
        DependencyObject LoadContent();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("351E63C4-8FA3-5CC3-B073-7F84BAA6485D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IDataTemplateExtension))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public interface IDataTemplateExtension
    {
        void ResetTemplate();
        bool ProcessBinding(uint phase);
        int ProcessBindings(global::Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs arg);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("D8E8249D-305B-5CA5-ACF8-3E1BEFFD0219")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IDataTemplateFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IDataTemplateFactory
    {
        DataTemplate CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("6E704A95-4B2F-5BA8-ADA5-1261C832BAED")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IDataTemplateKey))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IDataTemplateKey
    {
        object DataType { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("13B2F604-EEBC-5DAA-8A5B-460C4FABDEB7")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IDataTemplateKeyFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IDataTemplateKeyFactory
    {
        DataTemplateKey CreateInstance(object baseInterface, out object innerInterface);
        DataTemplateKey CreateInstanceWithType(object dataType, object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("CF6ADA69-4BF1-5F2D-8BDB-09EA1A26F975")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IDataTemplateStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IDataTemplateStatics
    {
        IDataTemplateExtension GetExtensionInstance(FrameworkElement element);
        void SetExtensionInstance(FrameworkElement element, IDataTemplateExtension value);
        DependencyProperty ExtensionInstanceProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("4004943B-2509-5476-BBA2-3FE05ECF615D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IDebugSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IDebugSettings
    {
        bool EnableFrameRateCounter { get; set; }
        bool FailFastOnErrors { get; set; }
        bool IsBindingTracingEnabled { get; set; }
        bool IsTextPerformanceVisualizationEnabled { get; set; }
        event BindingFailedEventHandler BindingFailed;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("6DFB6F51-D2F8-59C4-8BCA-4410929577D0")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IDebugSettings2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 262144u)]
    internal interface IDebugSettings2
    {
        bool IsXamlResourceReferenceTracingEnabled { get; set; }
        event global::Windows.Foundation.TypedEventHandler<DebugSettings, XamlResourceReferenceFailedEventArgs> XamlResourceReferenceFailed;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("36135BD5-3917-5C8D-A3C6-2FC89A503F26")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IDebugSettings3))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 393216u)]
    internal interface IDebugSettings3
    {
        LayoutCycleDebugBreakLevel LayoutCycleDebugBreakLevel { get; set; }
        LayoutCycleTracingLevel LayoutCycleTracingLevel { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("E7BEAEE7-160E-50F7-8789-D63463F979FA")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IDependencyObject))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IDependencyObject
    {
        object GetValue(DependencyProperty dp);
        void SetValue(DependencyProperty dp, object value);
        void ClearValue(DependencyProperty dp);
        object ReadLocalValue(DependencyProperty dp);
        object GetAnimationBaseValue(DependencyProperty dp);
        long RegisterPropertyChangedCallback(DependencyProperty dp, DependencyPropertyChangedCallback callback);
        void UnregisterPropertyChangedCallback(DependencyProperty dp, long token);
        global::Windows.UI.Core.CoreDispatcher Dispatcher { get; }
        global::Microsoft.UI.Dispatching.DispatcherQueue DispatcherQueue { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("2A74EE43-90FD-5D61-9383-584EA8422B39")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IDependencyObjectCollectionFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IDependencyObjectCollectionFactory
    {
        DependencyObjectCollection CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("936B614C-475F-5D7D-B3F7-BF1FBEA28126")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IDependencyObjectFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IDependencyObjectFactory
    {
        DependencyObject CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("960EAB49-9672-58A0-995B-3A42E5EA6278")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IDependencyProperty))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IDependencyProperty
    {
        PropertyMetadata GetMetadata(global::System.Type forType);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("84EAD020-7849-5E98-8030-488A80D164EC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IDependencyPropertyChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IDependencyPropertyChangedEventArgs
    {
        object NewValue { get; }
        object OldValue { get; }
        DependencyProperty Property { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("61DDC651-0383-5D6F-98CE-5C046AAAAA8F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IDependencyPropertyStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IDependencyPropertyStatics
    {
        DependencyProperty Register(string name, global::System.Type propertyType, global::System.Type ownerType, PropertyMetadata typeMetadata);
        DependencyProperty RegisterAttached(string name, global::System.Type propertyType, global::System.Type ownerType, PropertyMetadata defaultMetadata);
        object UnsetValue { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("58A4ABF1-A4A3-53DD-AE21-08F43231E817")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IDispatcherTimer))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IDispatcherTimer
    {
        void Start();
        void Stop();
        global::System.TimeSpan Interval { get; set; }
        bool IsEnabled { get; }
        event global::System.EventHandler<object> Tick;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("1BCB3166-22E4-50BF-A5A2-B78CA4377BD0")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IDispatcherTimerFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IDispatcherTimerFactory
    {
        DispatcherTimer CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("47AC5757-E4BC-52BA-8AB9-1BF81AAD7900")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IDragEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IDragEventArgs
    {
        DragOperationDeferral GetDeferral();
        global::Windows.Foundation.Point GetPosition(UIElement relativeTo);
        global::Windows.ApplicationModel.DataTransfer.DataPackageOperation AcceptedOperation { get; set; }
        global::Windows.ApplicationModel.DataTransfer.DataPackageOperation AllowedOperations { get; }
        global::Windows.ApplicationModel.DataTransfer.DataPackage Data { get; set; }
        global::Windows.ApplicationModel.DataTransfer.DataPackageView DataView { get; }
        DragUIOverride DragUIOverride { get; }
        bool Handled { get; set; }
        global::Windows.ApplicationModel.DataTransfer.DragDrop.DragDropModifiers Modifiers { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("462C1880-FC6A-5035-8ABF-564BACB78158")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IDragOperationDeferral))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IDragOperationDeferral
    {
        void Complete();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("AD17BACE-9613-5666-A31B-79A73FBA77CF")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IDragStartingEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IDragStartingEventArgs
    {
        DragOperationDeferral GetDeferral();
        global::Windows.Foundation.Point GetPosition(UIElement relativeTo);
        global::Windows.ApplicationModel.DataTransfer.DataPackageOperation AllowedOperations { get; set; }
        bool Cancel { get; set; }
        global::Windows.ApplicationModel.DataTransfer.DataPackage Data { get; }
        DragUI DragUI { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("35F170E0-93BF-58DA-877A-8EC77D8D9F00")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IDragUI))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IDragUI
    {
        [global::Windows.Foundation.Metadata.Overload(@"SetContentFromBitmapImage")]
        void SetContentFromBitmapImage(global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage bitmapImage);
        [global::Windows.Foundation.Metadata.Overload(@"SetContentFromBitmapImageWithAnchorPoint")]
        void SetContentFromBitmapImage(global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage bitmapImage, global::Windows.Foundation.Point anchorPoint);
        [global::Windows.Foundation.Metadata.Overload(@"SetContentFromSoftwareBitmap")]
        void SetContentFromSoftwareBitmap(global::Windows.Graphics.Imaging.SoftwareBitmap softwareBitmap);
        [global::Windows.Foundation.Metadata.Overload(@"SetContentFromSoftwareBitmapWithAnchorPoint")]
        void SetContentFromSoftwareBitmap(global::Windows.Graphics.Imaging.SoftwareBitmap softwareBitmap, global::Windows.Foundation.Point anchorPoint);
        void SetContentFromDataPackage();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("3260B18B-70DF-5DF2-B98A-56BEB0601F79")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IDragUIOverride))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IDragUIOverride
    {
        void Clear();
        [global::Windows.Foundation.Metadata.Overload(@"SetContentFromBitmapImage")]
        void SetContentFromBitmapImage(global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage bitmapImage);
        [global::Windows.Foundation.Metadata.Overload(@"SetContentFromBitmapImageWithAnchorPoint")]
        void SetContentFromBitmapImage(global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage bitmapImage, global::Windows.Foundation.Point anchorPoint);
        [global::Windows.Foundation.Metadata.Overload(@"SetContentFromSoftwareBitmap")]
        void SetContentFromSoftwareBitmap(global::Windows.Graphics.Imaging.SoftwareBitmap softwareBitmap);
        [global::Windows.Foundation.Metadata.Overload(@"SetContentFromSoftwareBitmapWithAnchorPoint")]
        void SetContentFromSoftwareBitmap(global::Windows.Graphics.Imaging.SoftwareBitmap softwareBitmap, global::Windows.Foundation.Point anchorPoint);
        string Caption { get; set; }
        bool IsCaptionVisible { get; set; }
        bool IsContentVisible { get; set; }
        bool IsGlyphVisible { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("E700082D-C640-5D44-B23A-F213DFBEB245")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IDropCompletedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IDropCompletedEventArgs
    {
        global::Windows.ApplicationModel.DataTransfer.DataPackageOperation DropResult { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("636E8159-2D82-538A-8483-CD576E41D0DF")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IEffectiveViewportChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IEffectiveViewportChangedEventArgs
    {
        double BringIntoViewDistanceX { get; }
        double BringIntoViewDistanceY { get; }
        global::Windows.Foundation.Rect EffectiveViewport { get; }
        global::Windows.Foundation.Rect MaxViewport { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("75FABA47-2CF2-54AE-91E6-0581556FDDAA")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IElementFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public interface IElementFactory
    {
        UIElement GetElement(ElementFactoryGetArgs args);
        void RecycleElement(ElementFactoryRecycleArgs args);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("B7017D68-EC9E-5435-B078-BE6F906F0953")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IElementFactoryGetArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IElementFactoryGetArgs
    {
        object Data { get; set; }
        UIElement Parent { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("A88E401B-9FE5-5960-87A3-89A3CFE2531C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IElementFactoryGetArgsFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IElementFactoryGetArgsFactory
    {
        ElementFactoryGetArgs CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("46E444F7-05D3-5C5E-9B7A-5541F63E4EF9")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IElementFactoryRecycleArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IElementFactoryRecycleArgs
    {
        UIElement Element { get; set; }
        UIElement Parent { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("30EE194A-FE4D-53E7-A84A-CD34FAB0D4EF")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IElementFactoryRecycleArgsFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IElementFactoryRecycleArgsFactory
    {
        ElementFactoryRecycleArgs CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("0EA67E68-937C-5C00-B609-53B63D9A5D42")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IElementSoundPlayer))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IElementSoundPlayer
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("5A5A20C3-1C9B-5D61-9D63-487C8BF16ECB")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IElementSoundPlayerStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IElementSoundPlayerStatics
    {
        void Play(ElementSoundKind sound);
        ElementSpatialAudioMode SpatialAudioMode { get; set; }
        ElementSoundPlayerState State { get; set; }
        double Volume { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("8C6F0541-C6AC-5F27-9D45-CF8BDBDFABE6")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IEventTrigger))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IEventTrigger
    {
        TriggerActionCollection Actions { get; }
        RoutedEvent RoutedEvent { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("E8BCB6D2-D3F5-5393-A84F-DFCD44A2DF34")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IExceptionRoutedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IExceptionRoutedEventArgs
    {
        string ErrorMessage { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("E1E71FB6-2AD0-5189-8D96-33BAE488C5FB")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IExceptionRoutedEventArgsFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IExceptionRoutedEventArgsFactory
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("FE08F13D-DC6A-5495-AD44-C2D8D21863B0")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IFrameworkElement))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IFrameworkElement
    {
        object FindName(string name);
        void SetBinding(DependencyProperty dp, global::Microsoft.UI.Xaml.Data.BindingBase binding);
        global::Microsoft.UI.Xaml.Data.BindingExpression GetBindingExpression(DependencyProperty dp);
        double ActualHeight { get; }
        ElementTheme ActualTheme { get; }
        double ActualWidth { get; }
        bool AllowFocusOnInteraction { get; set; }
        bool AllowFocusWhenDisabled { get; set; }
        global::System.Uri BaseUri { get; }
        object DataContext { get; set; }
        FlowDirection FlowDirection { get; set; }
        Thickness FocusVisualMargin { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush FocusVisualPrimaryBrush { get; set; }
        Thickness FocusVisualPrimaryThickness { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush FocusVisualSecondaryBrush { get; set; }
        Thickness FocusVisualSecondaryThickness { get; set; }
        double Height { get; set; }
        HorizontalAlignment HorizontalAlignment { get; set; }
        bool IsLoaded { get; }
        string Language { get; set; }
        Thickness Margin { get; set; }
        double MaxHeight { get; set; }
        double MaxWidth { get; set; }
        double MinHeight { get; set; }
        double MinWidth { get; set; }
        string Name { get; set; }
        DependencyObject Parent { get; }
        ElementTheme RequestedTheme { get; set; }
        ResourceDictionary Resources { get; set; }
        Style Style { get; set; }
        object Tag { get; set; }
        TriggerCollection Triggers { get; }
        VerticalAlignment VerticalAlignment { get; set; }
        double Width { get; set; }
        event global::Windows.Foundation.TypedEventHandler<FrameworkElement, object> ActualThemeChanged;
        event global::Windows.Foundation.TypedEventHandler<FrameworkElement, DataContextChangedEventArgs> DataContextChanged;
        event global::Windows.Foundation.TypedEventHandler<FrameworkElement, EffectiveViewportChangedEventArgs> EffectiveViewportChanged;
        event global::System.EventHandler<object> LayoutUpdated;
        event RoutedEventHandler Loaded;
        event global::Windows.Foundation.TypedEventHandler<FrameworkElement, object> Loading;
        event SizeChangedEventHandler SizeChanged;
        event RoutedEventHandler Unloaded;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("BD3F2272-3EFA-5F92-B759-90B1CC3E784C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IFrameworkElementFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IFrameworkElementFactory
    {
        FrameworkElement CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("FFC6FD98-F38C-5904-9CE4-97A3427CF4BA")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IFrameworkElementOverrides))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IFrameworkElementOverrides
    {
        global::Windows.Foundation.Size MeasureOverride(global::Windows.Foundation.Size availableSize);
        global::Windows.Foundation.Size ArrangeOverride(global::Windows.Foundation.Size finalSize);
        void OnApplyTemplate();
        bool GoToElementStateCore(string stateName, bool useTransitions);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("E59A3DB0-91E5-5903-9CAF-D1BB9F458BF2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IFrameworkElementProtected))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IFrameworkElementProtected
    {
        void InvalidateViewport();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("894E2704-14E7-569A-B21E-AFC7DF7145A1")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IFrameworkElementStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IFrameworkElementStatics
    {
        void DeferTree(DependencyObject element);
        DependencyProperty ActualHeightProperty { get; }
        DependencyProperty ActualThemeProperty { get; }
        DependencyProperty ActualWidthProperty { get; }
        DependencyProperty AllowFocusOnInteractionProperty { get; }
        DependencyProperty AllowFocusWhenDisabledProperty { get; }
        DependencyProperty DataContextProperty { get; }
        DependencyProperty FlowDirectionProperty { get; }
        DependencyProperty FocusVisualMarginProperty { get; }
        DependencyProperty FocusVisualPrimaryBrushProperty { get; }
        DependencyProperty FocusVisualPrimaryThicknessProperty { get; }
        DependencyProperty FocusVisualSecondaryBrushProperty { get; }
        DependencyProperty FocusVisualSecondaryThicknessProperty { get; }
        DependencyProperty HeightProperty { get; }
        DependencyProperty HorizontalAlignmentProperty { get; }
        DependencyProperty LanguageProperty { get; }
        DependencyProperty MarginProperty { get; }
        DependencyProperty MaxHeightProperty { get; }
        DependencyProperty MaxWidthProperty { get; }
        DependencyProperty MinHeightProperty { get; }
        DependencyProperty MinWidthProperty { get; }
        DependencyProperty NameProperty { get; }
        DependencyProperty RequestedThemeProperty { get; }
        DependencyProperty StyleProperty { get; }
        DependencyProperty TagProperty { get; }
        DependencyProperty VerticalAlignmentProperty { get; }
        DependencyProperty WidthProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("0084C7C2-DE48-5B0B-8A5A-E4FB76B7F7D1")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IFrameworkTemplate))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IFrameworkTemplate
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("616DD6DB-B064-561D-B162-46CEB45DC562")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IFrameworkTemplateFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IFrameworkTemplateFactory
    {
        FrameworkTemplate CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("E60094C3-45AF-5A8F-9511-1781D7DF1799")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IFrameworkView))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IFrameworkView
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("52B5D975-6FA6-5B66-A248-D17443B2BCA0")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IFrameworkViewSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IFrameworkViewSource
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("D505CEA9-1BCB-5B29-A8BE-944E00F06F78")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.ILaunchActivatedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface ILaunchActivatedEventArgs
    {
        string Arguments { get; }
        global::Windows.ApplicationModel.Activation.LaunchActivatedEventArgs UWPLaunchActivatedEventArgs { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("A1DCE737-539B-5E54-99AF-75ECE428BF9B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IMediaFailedRoutedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IMediaFailedRoutedEventArgs
    {
        string ErrorTrace { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("06FCC7A4-6099-5F2E-83A5-F3BE0E2C90AA")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IPointHelper))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IPointHelper
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("B0B2BD44-600B-51B3-A42C-3FD36C1AB042")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IPointHelperStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IPointHelperStatics
    {
        global::Windows.Foundation.Point FromCoordinates(float x, float y);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("B3644425-9464-5434-B0AE-AFF8D3159FE1")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IPropertyMetadata))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IPropertyMetadata
    {
        CreateDefaultValueCallback CreateDefaultValueCallback { get; }
        object DefaultValue { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("9F420906-111A-5465-91EE-BED14B3E7FEC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IPropertyMetadataFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IPropertyMetadataFactory
    {
        PropertyMetadata CreateInstanceWithDefaultValue(object defaultValue, object baseInterface, out object innerInterface);
        PropertyMetadata CreateInstanceWithDefaultValueAndCallback(object defaultValue, PropertyChangedCallback propertyChangedCallback, object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("37B8ADD4-7A4A-5CF7-A174-235182CD082E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IPropertyMetadataStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IPropertyMetadataStatics
    {
        [global::Windows.Foundation.Metadata.DefaultOverload]
        [global::Windows.Foundation.Metadata.Overload(@"CreateWithDefaultValue")]
        PropertyMetadata Create(object defaultValue);
        [global::Windows.Foundation.Metadata.DefaultOverload]
        [global::Windows.Foundation.Metadata.Overload(@"CreateWithDefaultValueAndCallback")]
        PropertyMetadata Create(object defaultValue, PropertyChangedCallback propertyChangedCallback);
        [global::Windows.Foundation.Metadata.Overload(@"CreateWithFactory")]
        PropertyMetadata Create(CreateDefaultValueCallback createDefaultValueCallback);
        [global::Windows.Foundation.Metadata.Overload(@"CreateWithFactoryAndCallback")]
        PropertyMetadata Create(CreateDefaultValueCallback createDefaultValueCallback, PropertyChangedCallback propertyChangedCallback);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("8B0712F6-9E57-53B0-80B1-966A79F60B96")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IPropertyPath))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IPropertyPath
    {
        string Path { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("08A8CCAB-7FF8-5CEC-BD3C-72C98804D989")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IPropertyPathFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IPropertyPathFactory
    {
        PropertyPath CreateInstance(string path);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("5FECE92A-A3D2-5BC0-ACA1-E9E1FA86AE9D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IRectHelper))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IRectHelper
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("A9CF37AD-5430-5086-A39F-74F0D1ED1072")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IRectHelperStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IRectHelperStatics
    {
        global::Windows.Foundation.Rect FromCoordinatesAndDimensions(float x, float y, float width, float height);
        global::Windows.Foundation.Rect FromPoints(global::Windows.Foundation.Point point1, global::Windows.Foundation.Point point2);
        global::Windows.Foundation.Rect FromLocationAndSize(global::Windows.Foundation.Point location, global::Windows.Foundation.Size size);
        bool GetIsEmpty(global::Windows.Foundation.Rect target);
        float GetBottom(global::Windows.Foundation.Rect target);
        float GetLeft(global::Windows.Foundation.Rect target);
        float GetRight(global::Windows.Foundation.Rect target);
        float GetTop(global::Windows.Foundation.Rect target);
        bool Contains(global::Windows.Foundation.Rect target, global::Windows.Foundation.Point point);
        bool Equals(global::Windows.Foundation.Rect target, global::Windows.Foundation.Rect value);
        global::Windows.Foundation.Rect Intersect(global::Windows.Foundation.Rect target, global::Windows.Foundation.Rect rect);
        [global::Windows.Foundation.Metadata.DefaultOverload]
        [global::Windows.Foundation.Metadata.Overload(@"UnionWithPoint")]
        global::Windows.Foundation.Rect Union(global::Windows.Foundation.Rect target, global::Windows.Foundation.Point point);
        [global::Windows.Foundation.Metadata.Overload(@"UnionWithRect")]
        global::Windows.Foundation.Rect Union(global::Windows.Foundation.Rect target, global::Windows.Foundation.Rect rect);
        global::Windows.Foundation.Rect Empty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("1B690975-A710-5783-A6E1-15836F6186C2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IResourceDictionary))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IResourceDictionary
    {
        global::System.Collections.Generic.IList<ResourceDictionary> MergedDictionaries { get; }
        global::System.Uri Source { get; set; }
        global::System.Collections.Generic.IDictionary<object, object> ThemeDictionaries { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("EA22A48F-AB71-56F6-A392-D82310C8AA7B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IResourceDictionaryFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IResourceDictionaryFactory
    {
        ResourceDictionary CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("C35F4CF1-FCD6-5C6B-9BE2-4CFAEFB68B2A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IResourceManagerRequestedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 327680u)]
    internal interface IResourceManagerRequestedEventArgs
    {
        global::Microsoft.Windows.ApplicationModel.Resources.IResourceManager CustomResourceManager { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("B2B432BC-EFCA-575E-9D2A-703F8B9C380F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IRoutedEvent))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IRoutedEvent
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("0908C407-1C7D-5DE3-9C50-D971C62EC8EC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IRoutedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IRoutedEventArgs
    {
        object OriginalSource { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("914B02C7-076B-5B89-98E7-6C373379E9AF")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IRoutedEventArgsFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IRoutedEventArgsFactory
    {
        RoutedEventArgs CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("C2DA2AC8-814C-5889-B2F4-4EBE4B001EE3")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IScalarTransition))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IScalarTransition
    {
        global::System.TimeSpan Duration { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("A1650CF8-A15B-54FC-B595-C52491318F58")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IScalarTransitionFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IScalarTransitionFactory
    {
        ScalarTransition CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("BBD6074D-686F-5AE1-B8DE-5F16AA30B80A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.ISetter))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface ISetter
    {
        DependencyProperty Property { get; set; }
        TargetPropertyPath Target { get; set; }
        object Value { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("5A7C1347-CDA3-55BE-BFEF-5C7582213980")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.ISetterBase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface ISetterBase
    {
        bool IsSealed { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("63BF7C0F-B290-5C0C-9185-3338CD350D7F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.ISetterBaseCollection))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface ISetterBaseCollection
    {
        bool IsSealed { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("780A1D2F-C4BE-5707-8A8A-4550DC22583E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.ISetterBaseFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface ISetterBaseFactory
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("13910A06-A327-5407-AE91-B9D2CC3A7AB5")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.ISetterFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface ISetterFactory
    {
        Setter CreateInstance(DependencyProperty targetProperty, object value);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("FE76324E-6DFB-58B1-9DCD-886CA8F9A2EA")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.ISizeChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface ISizeChangedEventArgs
    {
        global::Windows.Foundation.Size NewSize { get; }
        global::Windows.Foundation.Size PreviousSize { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("5DF9EEE1-A2A8-5E55-8668-AFEDC0B36DEB")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.ISizeHelper))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface ISizeHelper
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("CFF1B27F-84F1-5B14-9459-764AF5714FE5")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.ISizeHelperStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface ISizeHelperStatics
    {
        global::Windows.Foundation.Size FromDimensions(float width, float height);
        bool GetIsEmpty(global::Windows.Foundation.Size target);
        bool Equals(global::Windows.Foundation.Size target, global::Windows.Foundation.Size value);
        global::Windows.Foundation.Size Empty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("7B098126-1DAB-5B58-ACA7-F2B7DE2E1033")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IStateTrigger))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IStateTrigger
    {
        bool IsActive { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("F07B0F7B-5B94-58AE-8717-22AB093BC131")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IStateTriggerBase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IStateTriggerBase
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("E7724D65-FC7E-5C67-BB84-B4C7B020ADC3")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IStateTriggerBaseFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IStateTriggerBaseFactory
    {
        StateTriggerBase CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("2F695047-335B-5C00-A0D4-2A8FA54544C6")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IStateTriggerBaseProtected))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IStateTriggerBaseProtected
    {
        void SetActive(bool IsActive);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("BD60C019-833B-5432-A41D-89D72410EB47")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IStateTriggerStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IStateTriggerStatics
    {
        DependencyProperty IsActiveProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("65E1D164-572F-5B0E-A80F-9C02441FAC49")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IStyle))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IStyle
    {
        void Seal();
        Style BasedOn { get; set; }
        bool IsSealed { get; }
        SetterBaseCollection Setters { get; }
        global::System.Type TargetType { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("C2D924A2-3862-517C-B083-9A9120D7302D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IStyleFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IStyleFactory
    {
        Style CreateInstance(global::System.Type targetType);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("B1442F0E-F66B-531C-979B-193FD344E2A8")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.ITargetPropertyPath))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface ITargetPropertyPath
    {
        PropertyPath Path { get; set; }
        object Target { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("894CB11D-5C16-555B-B661-F41B29FD9B21")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.ITargetPropertyPathFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface ITargetPropertyPathFactory
    {
        TargetPropertyPath CreateInstance(DependencyProperty targetProperty);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("1FA35464-A690-586C-AEDF-6C88CAC7D14A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.ITriggerAction))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface ITriggerAction
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("1E1FAF1A-F614-554A-822A-D98FE46575D1")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.ITriggerActionFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface ITriggerActionFactory
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("D37DA89D-0D71-58CF-A901-99A7D3E5E434")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.ITriggerBase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface ITriggerBase
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("23088EAA-17EC-51B2-B181-5BEDFA8B8FA4")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.ITriggerBaseFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface ITriggerBaseFactory
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("C3C01020-320C-5CF6-9D24-D396BBFA4D8B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IUIElement))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IUIElement
    {
        void Measure(global::Windows.Foundation.Size availableSize);
        void Arrange(global::Windows.Foundation.Rect finalRect);
        bool CapturePointer(global::Microsoft.UI.Xaml.Input.Pointer value);
        void ReleasePointerCapture(global::Microsoft.UI.Xaml.Input.Pointer value);
        void ReleasePointerCaptures();
        void AddHandler(RoutedEvent routedEvent, object handler, bool handledEventsToo);
        void RemoveHandler(RoutedEvent routedEvent, object handler);
        global::Microsoft.UI.Xaml.Media.GeneralTransform TransformToVisual(UIElement visual);
        void InvalidateMeasure();
        void InvalidateArrange();
        void UpdateLayout();
        bool CancelDirectManipulations();
        global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.DataTransfer.DataPackageOperation> StartDragAsync(global::Microsoft.UI.Input.PointerPoint pointerPoint);
        [global::Windows.Foundation.Metadata.Overload(@"StartBringIntoView")]
        void StartBringIntoView();
        [global::Windows.Foundation.Metadata.Overload(@"StartBringIntoViewWithOptions")]
        void StartBringIntoView(BringIntoViewOptions options);
        void TryInvokeKeyboardAccelerator(global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs args);
        bool Focus(FocusState value);
        void StartAnimation(global::Microsoft.UI.Composition.ICompositionAnimationBase animation);
        void StopAnimation(global::Microsoft.UI.Composition.ICompositionAnimationBase animation);
        string AccessKey { get; set; }
        DependencyObject AccessKeyScopeOwner { get; set; }
        global::System.Numerics.Vector3 ActualOffset { get; }
        global::System.Numerics.Vector2 ActualSize { get; }
        bool AllowDrop { get; set; }
        global::Microsoft.UI.Xaml.Media.CacheMode CacheMode { get; set; }
        bool CanBeScrollAnchor { get; set; }
        bool CanDrag { get; set; }
        global::System.Numerics.Vector3 CenterPoint { get; set; }
        global::Microsoft.UI.Xaml.Media.RectangleGeometry Clip { get; set; }
        global::Microsoft.UI.Xaml.Media.ElementCompositeMode CompositeMode { get; set; }
        global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase ContextFlyout { get; set; }
        global::Windows.Foundation.Size DesiredSize { get; }
        bool ExitDisplayModeOnAccessKeyInvoked { get; set; }
        FocusState FocusState { get; }
        ElementHighContrastAdjustment HighContrastAdjustment { get; set; }
        bool IsAccessKeyScope { get; set; }
        bool IsDoubleTapEnabled { get; set; }
        bool IsHitTestVisible { get; set; }
        bool IsHoldingEnabled { get; set; }
        bool IsRightTapEnabled { get; set; }
        bool IsTabStop { get; set; }
        bool IsTapEnabled { get; set; }
        double KeyTipHorizontalOffset { get; set; }
        global::Microsoft.UI.Xaml.Input.KeyTipPlacementMode KeyTipPlacementMode { get; set; }
        DependencyObject KeyTipTarget { get; set; }
        double KeyTipVerticalOffset { get; set; }
        global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorPlacementMode KeyboardAcceleratorPlacementMode { get; set; }
        DependencyObject KeyboardAcceleratorPlacementTarget { get; set; }
        global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Input.KeyboardAccelerator> KeyboardAccelerators { get; }
        global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Media.XamlLight> Lights { get; }
        global::Microsoft.UI.Xaml.Input.ManipulationModes ManipulationMode { get; set; }
        double Opacity { get; set; }
        ScalarTransition OpacityTransition { get; set; }
        global::System.Collections.Generic.IReadOnlyList<global::Microsoft.UI.Xaml.Input.Pointer> PointerCaptures { get; }
        global::Microsoft.UI.Xaml.Media.Projection Projection { get; set; }
        double RasterizationScale { get; set; }
        global::Windows.Foundation.Size RenderSize { get; }
        global::Microsoft.UI.Xaml.Media.Transform RenderTransform { get; set; }
        global::Windows.Foundation.Point RenderTransformOrigin { get; set; }
        float Rotation { get; set; }
        global::System.Numerics.Vector3 RotationAxis { get; set; }
        ScalarTransition RotationTransition { get; set; }
        global::System.Numerics.Vector3 Scale { get; set; }
        Vector3Transition ScaleTransition { get; set; }
        global::Microsoft.UI.Xaml.Media.Shadow Shadow { get; set; }
        global::Microsoft.UI.Xaml.Input.KeyboardNavigationMode TabFocusNavigation { get; set; }
        int TabIndex { get; set; }
        global::Microsoft.UI.Xaml.Media.Media3D.Transform3D Transform3D { get; set; }
        global::System.Numerics.Matrix4x4 TransformMatrix { get; set; }
        global::Microsoft.UI.Xaml.Media.Animation.TransitionCollection Transitions { get; set; }
        global::System.Numerics.Vector3 Translation { get; set; }
        Vector3Transition TranslationTransition { get; set; }
        bool UseLayoutRounding { get; set; }
        bool UseSystemFocusVisuals { get; set; }
        Visibility Visibility { get; set; }
        DependencyObject XYFocusDown { get; set; }
        global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy XYFocusDownNavigationStrategy { get; set; }
        global::Microsoft.UI.Xaml.Input.XYFocusKeyboardNavigationMode XYFocusKeyboardNavigation { get; set; }
        DependencyObject XYFocusLeft { get; set; }
        global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy XYFocusLeftNavigationStrategy { get; set; }
        DependencyObject XYFocusRight { get; set; }
        global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy XYFocusRightNavigationStrategy { get; set; }
        DependencyObject XYFocusUp { get; set; }
        global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy XYFocusUpNavigationStrategy { get; set; }
        XamlRoot XamlRoot { get; set; }
        event global::Windows.Foundation.TypedEventHandler<UIElement, global::Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs> AccessKeyDisplayDismissed;
        event global::Windows.Foundation.TypedEventHandler<UIElement, global::Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs> AccessKeyDisplayRequested;
        event global::Windows.Foundation.TypedEventHandler<UIElement, global::Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs> AccessKeyInvoked;
        event global::Windows.Foundation.TypedEventHandler<UIElement, BringIntoViewRequestedEventArgs> BringIntoViewRequested;
        event global::Windows.Foundation.TypedEventHandler<UIElement, global::Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs> CharacterReceived;
        event global::Windows.Foundation.TypedEventHandler<UIElement, RoutedEventArgs> ContextCanceled;
        event global::Windows.Foundation.TypedEventHandler<UIElement, global::Microsoft.UI.Xaml.Input.ContextRequestedEventArgs> ContextRequested;
        event global::Microsoft.UI.Xaml.Input.DoubleTappedEventHandler DoubleTapped;
        event DragEventHandler DragEnter;
        event DragEventHandler DragLeave;
        event DragEventHandler DragOver;
        event global::Windows.Foundation.TypedEventHandler<UIElement, DragStartingEventArgs> DragStarting;
        event DragEventHandler Drop;
        event global::Windows.Foundation.TypedEventHandler<UIElement, DropCompletedEventArgs> DropCompleted;
        event global::Windows.Foundation.TypedEventHandler<UIElement, global::Microsoft.UI.Xaml.Input.GettingFocusEventArgs> GettingFocus;
        event RoutedEventHandler GotFocus;
        event global::Microsoft.UI.Xaml.Input.HoldingEventHandler Holding;
        event global::Microsoft.UI.Xaml.Input.KeyEventHandler KeyDown;
        event global::Microsoft.UI.Xaml.Input.KeyEventHandler KeyUp;
        event global::Windows.Foundation.TypedEventHandler<UIElement, global::Microsoft.UI.Xaml.Input.LosingFocusEventArgs> LosingFocus;
        event RoutedEventHandler LostFocus;
        event global::Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler ManipulationCompleted;
        event global::Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler ManipulationDelta;
        event global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler ManipulationInertiaStarting;
        event global::Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler ManipulationStarted;
        event global::Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler ManipulationStarting;
        event global::Windows.Foundation.TypedEventHandler<UIElement, global::Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs> NoFocusCandidateFound;
        event global::Microsoft.UI.Xaml.Input.PointerEventHandler PointerCanceled;
        event global::Microsoft.UI.Xaml.Input.PointerEventHandler PointerCaptureLost;
        event global::Microsoft.UI.Xaml.Input.PointerEventHandler PointerEntered;
        event global::Microsoft.UI.Xaml.Input.PointerEventHandler PointerExited;
        event global::Microsoft.UI.Xaml.Input.PointerEventHandler PointerMoved;
        event global::Microsoft.UI.Xaml.Input.PointerEventHandler PointerPressed;
        event global::Microsoft.UI.Xaml.Input.PointerEventHandler PointerReleased;
        event global::Microsoft.UI.Xaml.Input.PointerEventHandler PointerWheelChanged;
        event global::Microsoft.UI.Xaml.Input.KeyEventHandler PreviewKeyDown;
        event global::Microsoft.UI.Xaml.Input.KeyEventHandler PreviewKeyUp;
        event global::Windows.Foundation.TypedEventHandler<UIElement, global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs> ProcessKeyboardAccelerators;
        event global::Microsoft.UI.Xaml.Input.RightTappedEventHandler RightTapped;
        event global::Microsoft.UI.Xaml.Input.TappedEventHandler Tapped;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("14D1D309-ADD0-5CCB-B946-77488CD70F87")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IUIElementFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IUIElementFactory
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("9034F41E-AB7B-59E7-8168-50DE6B689DDE")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IUIElementOverrides))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IUIElementOverrides
    {
        global::Microsoft.UI.Xaml.Automation.Peers.AutomationPeer OnCreateAutomationPeer();
        void OnDisconnectVisualChildren();
        global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.IEnumerable<global::Windows.Foundation.Point>> FindSubElementsForTouchTargeting(global::Windows.Foundation.Point point, global::Windows.Foundation.Rect boundingRect);
        global::System.Collections.Generic.IEnumerable<DependencyObject> GetChildrenInTabFocusOrder();
        void OnKeyboardAcceleratorInvoked(global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs args);
        void OnProcessKeyboardAccelerators(global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs args);
        void OnBringIntoViewRequested(BringIntoViewRequestedEventArgs e);
        void PopulatePropertyInfoOverride(string propertyName, global::Microsoft.UI.Composition.AnimationPropertyInfo animationPropertyInfo);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("8F69B9E9-1F00-5834-9BF1-A9257BED39F0")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IUIElementProtected))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IUIElementProtected
    {
        global::Microsoft.UI.Input.InputCursor ProtectedCursor { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("D2921D87-3584-5E22-8A3A-C2C78DAB4F6E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IUIElementStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IUIElementStatics
    {
        bool TryStartDirectManipulation(global::Microsoft.UI.Xaml.Input.Pointer value);
        void RegisterAsScrollPort(UIElement element);
        DependencyProperty AccessKeyProperty { get; }
        DependencyProperty AccessKeyScopeOwnerProperty { get; }
        DependencyProperty AllowDropProperty { get; }
        RoutedEvent BringIntoViewRequestedEvent { get; }
        DependencyProperty CacheModeProperty { get; }
        DependencyProperty CanBeScrollAnchorProperty { get; }
        DependencyProperty CanDragProperty { get; }
        RoutedEvent CharacterReceivedEvent { get; }
        DependencyProperty ClipProperty { get; }
        DependencyProperty CompositeModeProperty { get; }
        DependencyProperty ContextFlyoutProperty { get; }
        RoutedEvent ContextRequestedEvent { get; }
        RoutedEvent DoubleTappedEvent { get; }
        RoutedEvent DragEnterEvent { get; }
        RoutedEvent DragLeaveEvent { get; }
        RoutedEvent DragOverEvent { get; }
        RoutedEvent DropEvent { get; }
        DependencyProperty ExitDisplayModeOnAccessKeyInvokedProperty { get; }
        DependencyProperty FocusStateProperty { get; }
        RoutedEvent GettingFocusEvent { get; }
        DependencyProperty HighContrastAdjustmentProperty { get; }
        RoutedEvent HoldingEvent { get; }
        DependencyProperty IsAccessKeyScopeProperty { get; }
        DependencyProperty IsDoubleTapEnabledProperty { get; }
        DependencyProperty IsHitTestVisibleProperty { get; }
        DependencyProperty IsHoldingEnabledProperty { get; }
        DependencyProperty IsRightTapEnabledProperty { get; }
        DependencyProperty IsTabStopProperty { get; }
        DependencyProperty IsTapEnabledProperty { get; }
        RoutedEvent KeyDownEvent { get; }
        DependencyProperty KeyTipHorizontalOffsetProperty { get; }
        DependencyProperty KeyTipPlacementModeProperty { get; }
        DependencyProperty KeyTipTargetProperty { get; }
        DependencyProperty KeyTipVerticalOffsetProperty { get; }
        RoutedEvent KeyUpEvent { get; }
        DependencyProperty KeyboardAcceleratorPlacementModeProperty { get; }
        DependencyProperty KeyboardAcceleratorPlacementTargetProperty { get; }
        DependencyProperty LightsProperty { get; }
        RoutedEvent LosingFocusEvent { get; }
        RoutedEvent ManipulationCompletedEvent { get; }
        RoutedEvent ManipulationDeltaEvent { get; }
        RoutedEvent ManipulationInertiaStartingEvent { get; }
        DependencyProperty ManipulationModeProperty { get; }
        RoutedEvent ManipulationStartedEvent { get; }
        RoutedEvent ManipulationStartingEvent { get; }
        RoutedEvent NoFocusCandidateFoundEvent { get; }
        DependencyProperty OpacityProperty { get; }
        RoutedEvent PointerCanceledEvent { get; }
        RoutedEvent PointerCaptureLostEvent { get; }
        DependencyProperty PointerCapturesProperty { get; }
        RoutedEvent PointerEnteredEvent { get; }
        RoutedEvent PointerExitedEvent { get; }
        RoutedEvent PointerMovedEvent { get; }
        RoutedEvent PointerPressedEvent { get; }
        RoutedEvent PointerReleasedEvent { get; }
        RoutedEvent PointerWheelChangedEvent { get; }
        RoutedEvent PreviewKeyDownEvent { get; }
        RoutedEvent PreviewKeyUpEvent { get; }
        DependencyProperty ProjectionProperty { get; }
        DependencyProperty RenderTransformOriginProperty { get; }
        DependencyProperty RenderTransformProperty { get; }
        RoutedEvent RightTappedEvent { get; }
        DependencyProperty ShadowProperty { get; }
        DependencyProperty TabFocusNavigationProperty { get; }
        DependencyProperty TabIndexProperty { get; }
        RoutedEvent TappedEvent { get; }
        DependencyProperty Transform3DProperty { get; }
        DependencyProperty TransitionsProperty { get; }
        DependencyProperty UseLayoutRoundingProperty { get; }
        DependencyProperty UseSystemFocusVisualsProperty { get; }
        DependencyProperty VisibilityProperty { get; }
        DependencyProperty XYFocusDownNavigationStrategyProperty { get; }
        DependencyProperty XYFocusDownProperty { get; }
        DependencyProperty XYFocusKeyboardNavigationProperty { get; }
        DependencyProperty XYFocusLeftNavigationStrategyProperty { get; }
        DependencyProperty XYFocusLeftProperty { get; }
        DependencyProperty XYFocusRightNavigationStrategyProperty { get; }
        DependencyProperty XYFocusRightProperty { get; }
        DependencyProperty XYFocusUpNavigationStrategyProperty { get; }
        DependencyProperty XYFocusUpProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("B4D69F09-D494-5BC8-AE68-B6307D845049")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IUIElementWeakCollectionFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IUIElementWeakCollectionFactory
    {
        UIElementWeakCollection CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("59EAEBA9-8F9C-5BE7-9B3B-820960FAA220")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IUnhandledExceptionEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IUnhandledExceptionEventArgs
    {
        global::System.Exception Exception { get; }
        bool Handled { get; set; }
        string Message { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("0C408BB9-F9A2-55D7-8AED-143D36D603F2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IVector3Transition))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IVector3Transition
    {
        Vector3TransitionComponents Components { get; set; }
        global::System.TimeSpan Duration { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("A3A084FC-B965-534B-900F-78E288129232")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IVector3TransitionFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IVector3TransitionFactory
    {
        Vector3Transition CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("4BB32AE8-0E28-5521-A7F5-66B661372994")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IVisualState))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IVisualState
    {
        string Name { get; }
        SetterBaseCollection Setters { get; }
        global::System.Collections.Generic.IList<StateTriggerBase> StateTriggers { get; }
        global::Microsoft.UI.Xaml.Media.Animation.Storyboard Storyboard { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("11DE9510-A195-577B-88C8-06391618868C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IVisualStateChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IVisualStateChangedEventArgs
    {
        global::Microsoft.UI.Xaml.Controls.Control Control { get; set; }
        VisualState NewState { get; set; }
        VisualState OldState { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("8DFD691B-710C-5D6D-B71A-7A7F5ED54AC7")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IVisualStateGroup))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IVisualStateGroup
    {
        VisualState CurrentState { get; }
        string Name { get; }
        global::System.Collections.Generic.IList<VisualState> States { get; }
        global::System.Collections.Generic.IList<VisualTransition> Transitions { get; }
        event VisualStateChangedEventHandler CurrentStateChanged;
        event VisualStateChangedEventHandler CurrentStateChanging;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("342C8D32-AD61-5925-93D1-0C704DF2A7D1")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IVisualStateManager))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IVisualStateManager
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("713DAF82-92B3-58F2-8FC1-B0D9A2CAD03C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IVisualStateManagerFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IVisualStateManagerFactory
    {
        VisualStateManager CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("E3F8E9C9-9432-514C-923E-142CD8C82730")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IVisualStateManagerOverrides))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IVisualStateManagerOverrides
    {
        bool GoToStateCore(global::Microsoft.UI.Xaml.Controls.Control control, FrameworkElement templateRoot, string stateName, VisualStateGroup group, VisualState state, bool useTransitions);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("0F008013-787F-5599-A5AD-0A10B988ED24")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IVisualStateManagerProtected))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IVisualStateManagerProtected
    {
        void RaiseCurrentStateChanging(VisualStateGroup stateGroup, VisualState oldState, VisualState newState, global::Microsoft.UI.Xaml.Controls.Control control);
        void RaiseCurrentStateChanged(VisualStateGroup stateGroup, VisualState oldState, VisualState newState, global::Microsoft.UI.Xaml.Controls.Control control);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("A4D5147D-88C3-57ED-AD83-245DF5F6B50D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IVisualStateManagerStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IVisualStateManagerStatics
    {
        global::System.Collections.Generic.IList<VisualStateGroup> GetVisualStateGroups(FrameworkElement obj);
        VisualStateManager GetCustomVisualStateManager(FrameworkElement obj);
        void SetCustomVisualStateManager(FrameworkElement obj, VisualStateManager value);
        bool GoToState(global::Microsoft.UI.Xaml.Controls.Control control, string stateName, bool useTransitions);
        DependencyProperty CustomVisualStateManagerProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("DD21AF54-2CE1-59DE-9FD1-2B45F6BF6581")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IVisualTransition))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IVisualTransition
    {
        string From { get; set; }
        Duration GeneratedDuration { get; set; }
        global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase GeneratedEasingFunction { get; set; }
        global::Microsoft.UI.Xaml.Media.Animation.Storyboard Storyboard { get; set; }
        string To { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("F3E74C0D-0B5B-5920-A309-08CB6BF2A739")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IVisualTransitionFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IVisualTransitionFactory
    {
        VisualTransition CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("61F0EC79-5D52-56B5-86FB-40FA4AF288B0")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IWindow))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IWindow
    {
        void Activate();
        void Close();
        void SetTitleBar(UIElement titleBar);
        global::Windows.Foundation.Rect Bounds { get; }
        global::Microsoft.UI.Composition.Compositor Compositor { get; }
        UIElement Content { get; set; }
        global::Windows.UI.Core.CoreWindow CoreWindow { get; }
        global::Windows.UI.Core.CoreDispatcher Dispatcher { get; }
        global::Microsoft.UI.Dispatching.DispatcherQueue DispatcherQueue { get; }
        bool ExtendsContentIntoTitleBar { get; set; }
        string Title { get; set; }
        bool Visible { get; }
        event global::Windows.Foundation.TypedEventHandler<object, WindowActivatedEventArgs> Activated;
        event global::Windows.Foundation.TypedEventHandler<object, WindowEventArgs> Closed;
        event global::Windows.Foundation.TypedEventHandler<object, WindowSizeChangedEventArgs> SizeChanged;
        event global::Windows.Foundation.TypedEventHandler<object, WindowVisibilityChangedEventArgs> VisibilityChanged;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("42FEBAA5-1C32-522A-A591-57618C6F665D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IWindow2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 262144u)]
    internal interface IWindow2
    {
        global::Microsoft.UI.Windowing.AppWindow AppWindow { get; }
        global::Microsoft.UI.Xaml.Media.SystemBackdrop SystemBackdrop { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("C723A5EA-82C4-5DD6-861B-70EF573B88D6")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IWindowActivatedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IWindowActivatedEventArgs
    {
        bool Handled { get; set; }
        WindowActivationState WindowActivationState { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("1140827C-FE0A-5268-BC2B-F4492C2CCB49")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IWindowEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IWindowEventArgs
    {
        bool Handled { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("F0441536-AFEF-5222-918F-324A9B2DEC75")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IWindowFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IWindowFactory
    {
        Window CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("542F6F2C-4B64-5C72-A7A5-3A7E0664B8FF")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IWindowSizeChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IWindowSizeChangedEventArgs
    {
        bool Handled { get; set; }
        global::Windows.Foundation.Size Size { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("8CC985E3-A41A-5DF4-B531-D3A1788D86C5")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IWindowStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IWindowStatics
    {
        Window Current { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("7BB24A6D-070C-5CB6-8E9C-547905BE8265")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IWindowVisibilityChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IWindowVisibilityChangedEventArgs
    {
        bool Handled { get; set; }
        bool Visible { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("845A5C62-B0F3-5DB8-B4FF-4142BBD8A044")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IXamlIsland))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 524288u)]
    internal interface IXamlIsland
    {
        UIElement Content { get; set; }
        global::Microsoft.UI.Content.ContentIsland ContentIsland { get; }
        global::Microsoft.UI.Xaml.Media.SystemBackdrop SystemBackdrop { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("267F707C-5E18-57B4-9FF7-D11DA66E4A11")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IXamlIslandFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 524288u)]
    internal interface IXamlIslandFactory
    {
        XamlIsland CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("1B175EE6-D08B-50FF-8F89-A1FF27EDEF66")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IXamlResourceReferenceFailedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 262144u)]
    internal interface IXamlResourceReferenceFailedEventArgs
    {
        string Message { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("60CB215A-AD15-520A-8B01-4416824F0441")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IXamlRoot))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IXamlRoot
    {
        UIElement Content { get; }
        bool IsHostVisible { get; }
        double RasterizationScale { get; }
        global::Windows.Foundation.Size Size { get; }
        event global::Windows.Foundation.TypedEventHandler<XamlRoot, XamlRootChangedEventArgs> Changed;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("BDEE0F42-71CB-50C5-829B-4614D98C5794")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IXamlRoot2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 327680u)]
    internal interface IXamlRoot2
    {
        global::Microsoft.UI.Content.ContentIslandEnvironment ContentIslandEnvironment { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("B71DBF3B-2E0F-5DE0-AC68-F0C1F65114C8")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IXamlRoot3))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 458752u)]
    internal interface IXamlRoot3
    {
        global::Microsoft.UI.Content.ContentCoordinateConverter CoordinateConverter { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("377BEC22-632B-52BE-B26F-5EDF7838E5CA")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IXamlRoot4))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 524288u)]
    internal interface IXamlRoot4
    {
        global::Microsoft.UI.Content.ContentIsland ContentIsland { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("61D2C719-F8A1-515A-902C-CFA498BA7A7F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IXamlRootChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    internal interface IXamlRootChangedEventArgs
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("68B3A2DF-8173-539F-B524-C8A2348F5AFB")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.IXamlServiceProvider))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public interface IXamlServiceProvider
    {
        object GetService(global::System.Type type);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.LaunchActivatedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.LaunchActivatedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ILaunchActivatedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class LaunchActivatedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<LaunchActivatedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_ILaunchActivatedEventArgs => _inner;


        public static LaunchActivatedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<LaunchActivatedEventArgs>.FromAbi(thisPtr);
        }

        internal LaunchActivatedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.ILaunchActivatedEventArgsMethods.IID);

        }


        public static bool operator ==(LaunchActivatedEventArgs x, LaunchActivatedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(LaunchActivatedEventArgs x, LaunchActivatedEventArgs y) => !(x == y);
        public bool Equals(LaunchActivatedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is LaunchActivatedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public string Arguments => global::ABI.Microsoft.UI.Xaml.ILaunchActivatedEventArgsMethods.get_Arguments(_objRef_global__Microsoft_UI_Xaml_ILaunchActivatedEventArgs);

        public global::Windows.ApplicationModel.Activation.LaunchActivatedEventArgs UWPLaunchActivatedEventArgs => global::ABI.Microsoft.UI.Xaml.ILaunchActivatedEventArgsMethods.get_UWPLaunchActivatedEventArgs(_objRef_global__Microsoft_UI_Xaml_ILaunchActivatedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<LayoutCycleDebugBreakLevel>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 393216u)]
    public enum LayoutCycleDebugBreakLevel : int
    {
        None = unchecked((int)0),
        Low = unchecked((int)0x1),
        High = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<LayoutCycleTracingLevel>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 393216u)]
    public enum LayoutCycleTracingLevel : int
    {
        None = unchecked((int)0),
        Low = unchecked((int)0x1),
        High = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.LeavingBackgroundEventHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.LeavingBackgroundEventHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public delegate void LeavingBackgroundEventHandler(object sender, global::Windows.ApplicationModel.LeavingBackgroundEventArgs e);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<LineStackingStrategy>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public enum LineStackingStrategy : int
    {
        MaxHeight = unchecked((int)0),
        BlockLineHeight = unchecked((int)0x1),
        BaselineToBaseline = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.MediaFailedRoutedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.MediaFailedRoutedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IMediaFailedRoutedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class MediaFailedRoutedEventArgs : ExceptionRoutedEventArgs, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<MediaFailedRoutedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IMediaFailedRoutedEventArgs => _inner;


        public static new MediaFailedRoutedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<MediaFailedRoutedEventArgs>.FromAbi(thisPtr);
        }

        internal MediaFailedRoutedEventArgs(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IMediaFailedRoutedEventArgsMethods.IID);

        }


        public static bool operator ==(MediaFailedRoutedEventArgs x, MediaFailedRoutedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(MediaFailedRoutedEventArgs x, MediaFailedRoutedEventArgs y) => !(x == y);
        public bool Equals(MediaFailedRoutedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is MediaFailedRoutedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public string ErrorTrace => global::ABI.Microsoft.UI.Xaml.IMediaFailedRoutedEventArgsMethods.get_ErrorTrace(_objRef_global__Microsoft_UI_Xaml_IMediaFailedRoutedEventArgs);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<OpticalMarginAlignment>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public enum OpticalMarginAlignment : int
    {
        None = unchecked((int)0),
        TrimSideBearings = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.PointHelper))]
    [global::ABI.Microsoft.UI.Xaml.PointHelperRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPointHelper))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class PointHelper : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PointHelper>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IPointHelper => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.PointHelper").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IPointHelperStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IPointHelperStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IPointHelperStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IPointHelperStatics = ActivationFactory.Get("Microsoft.UI.Xaml.PointHelper", global::ABI.Microsoft.UI.Xaml.IPointHelperStaticsMethods.IID);
                }
            }
        }

        public static global::Windows.Foundation.Point FromCoordinates(float x, float y) => global::ABI.Microsoft.UI.Xaml.IPointHelperStaticsMethods.FromCoordinates(_objRef_global__Microsoft_UI_Xaml_IPointHelperStatics, x, y);

        public static PointHelper FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PointHelper>.FromAbi(thisPtr);
        }

        internal PointHelper(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IPointHelperMethods.IID);

        }


        public static bool operator ==(PointHelper x, PointHelper y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PointHelper x, PointHelper y) => !(x == y);
        public bool Equals(PointHelper other) => this == other;
        public override bool Equals(object obj) => obj is PointHelper that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.PropertyChangedCallback))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.PropertyChangedCallbackWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public delegate void PropertyChangedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.PropertyMetadata))]
    [global::ABI.Microsoft.UI.Xaml.PropertyMetadataRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPropertyMetadata))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public class PropertyMetadata : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PropertyMetadata>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IPropertyMetadata;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IPropertyMetadata()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IPropertyMetadata, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IPropertyMetadataMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IPropertyMetadata;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IPropertyMetadata => ___objRef_global__Microsoft_UI_Xaml_IPropertyMetadata ?? Make___objRef_global__Microsoft_UI_Xaml_IPropertyMetadata();



        private static class _IPropertyMetadataFactoryMethods
        {
            public static unsafe IntPtr CreateInstanceWithDefaultValue(IObjectReference _obj, object defaultValue, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __defaultValue = default;
                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __defaultValue = MarshalInspectable<object>.CreateMarshaler2(defaultValue);
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__defaultValue), MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__defaultValue);
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }

            public static unsafe IntPtr CreateInstanceWithDefaultValueAndCallback(IObjectReference _obj, object defaultValue, PropertyChangedCallback propertyChangedCallback, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __defaultValue = default;
                ObjectReferenceValue __propertyChangedCallback = default;
                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __defaultValue = MarshalInspectable<object>.CreateMarshaler2(defaultValue);
                    __propertyChangedCallback = global::ABI.Microsoft.UI.Xaml.PropertyChangedCallback.CreateMarshaler2(propertyChangedCallback);
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__defaultValue), MarshalInspectable<object>.GetAbi(__propertyChangedCallback), MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__defaultValue);
                    MarshalInspectable<object>.DisposeMarshaler(__propertyChangedCallback);
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IPropertyMetadataFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IPropertyMetadataFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IPropertyMetadataFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IPropertyMetadataFactory = ActivationFactory.Get("Microsoft.UI.Xaml.PropertyMetadata", global::ABI.Microsoft.UI.Xaml.IPropertyMetadataFactoryMethods.IID);
                }
            }
        }

        public PropertyMetadata(object defaultValue)
        {
            bool isAggregation = this.GetType() != typeof(PropertyMetadata);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IPropertyMetadataFactoryMethods.CreateInstanceWithDefaultValue(_objRef_global__Microsoft_UI_Xaml_IPropertyMetadataFactory, defaultValue, baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.IPropertyMetadataMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public PropertyMetadata(object defaultValue, PropertyChangedCallback propertyChangedCallback)
        {
            bool isAggregation = this.GetType() != typeof(PropertyMetadata);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IPropertyMetadataFactoryMethods.CreateInstanceWithDefaultValueAndCallback(_objRef_global__Microsoft_UI_Xaml_IPropertyMetadataFactory, defaultValue, propertyChangedCallback, baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.IPropertyMetadataMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.PropertyMetadata").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IPropertyMetadataStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IPropertyMetadataStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IPropertyMetadataStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IPropertyMetadataStatics = ActivationFactory.Get("Microsoft.UI.Xaml.PropertyMetadata", global::ABI.Microsoft.UI.Xaml.IPropertyMetadataStaticsMethods.IID);
                }
            }
        }

        public static PropertyMetadata Create(object defaultValue) => global::ABI.Microsoft.UI.Xaml.IPropertyMetadataStaticsMethods.Create(_objRef_global__Microsoft_UI_Xaml_IPropertyMetadataStatics, defaultValue);

        public static PropertyMetadata Create(object defaultValue, PropertyChangedCallback propertyChangedCallback) => global::ABI.Microsoft.UI.Xaml.IPropertyMetadataStaticsMethods.Create(_objRef_global__Microsoft_UI_Xaml_IPropertyMetadataStatics, defaultValue, propertyChangedCallback);

        public static PropertyMetadata Create(CreateDefaultValueCallback createDefaultValueCallback) => global::ABI.Microsoft.UI.Xaml.IPropertyMetadataStaticsMethods.Create(_objRef_global__Microsoft_UI_Xaml_IPropertyMetadataStatics, createDefaultValueCallback);

        public static PropertyMetadata Create(CreateDefaultValueCallback createDefaultValueCallback, PropertyChangedCallback propertyChangedCallback) => global::ABI.Microsoft.UI.Xaml.IPropertyMetadataStaticsMethods.Create(_objRef_global__Microsoft_UI_Xaml_IPropertyMetadataStatics, createDefaultValueCallback, propertyChangedCallback);

        public static PropertyMetadata FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PropertyMetadata>.FromAbi(thisPtr);
        }

        protected internal PropertyMetadata(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IPropertyMetadataMethods.IID);

        }


        public static bool operator ==(PropertyMetadata x, PropertyMetadata y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PropertyMetadata x, PropertyMetadata y) => !(x == y);
        public bool Equals(PropertyMetadata other) => this == other;
        public override bool Equals(object obj) => obj is PropertyMetadata that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected PropertyMetadata(global::WinRT.DerivedComposed _)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(PropertyMetadata);
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public CreateDefaultValueCallback CreateDefaultValueCallback => global::ABI.Microsoft.UI.Xaml.IPropertyMetadataMethods.get_CreateDefaultValueCallback(_objRef_global__Microsoft_UI_Xaml_IPropertyMetadata);

        public object DefaultValue => global::ABI.Microsoft.UI.Xaml.IPropertyMetadataMethods.get_DefaultValue(_objRef_global__Microsoft_UI_Xaml_IPropertyMetadata);

        protected virtual bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.PropertyPath))]
    [global::ABI.Microsoft.UI.Xaml.PropertyPathRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPropertyPath))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class PropertyPath : DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PropertyPath>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IPropertyPath => _inner;


        private static class _IPropertyPathFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, string path)
            {
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                MarshalString.Pinnable __path = new(path);
                fixed(void* ___path = __path)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __path), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return __retval;
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IPropertyPathFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IPropertyPathFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IPropertyPathFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IPropertyPathFactory = ActivationFactory.Get("Microsoft.UI.Xaml.PropertyPath", global::ABI.Microsoft.UI.Xaml.IPropertyPathFactoryMethods.IID);
                }
            }
        }

        public PropertyPath(string path) :base(global::WinRT.DerivedComposed.Instance)
        { 
        IntPtr ptr = (_IPropertyPathFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_IPropertyPathFactory, path)); 
        try 
        { 
        _inner = ComWrappersSupport.GetObjectReferenceForInterface(ptr, global::ABI.Microsoft.UI.Xaml.IPropertyPathMethods.IID, false); 

        } 
        finally 
        { 
        MarshalInspectable<object>.DisposeAbi(ptr); 
        }

        ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
        ComWrappersHelper.Init(_inner, false);
        }

        public static new PropertyPath FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PropertyPath>.FromAbi(thisPtr);
        }

        internal PropertyPath(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IPropertyPathMethods.IID);

        }


        public static bool operator ==(PropertyPath x, PropertyPath y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PropertyPath x, PropertyPath y) => !(x == y);
        public bool Equals(PropertyPath other) => this == other;
        public override bool Equals(object obj) => obj is PropertyPath that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public string Path => global::ABI.Microsoft.UI.Xaml.IPropertyPathMethods.get_Path(_objRef_global__Microsoft_UI_Xaml_IPropertyPath);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.RectHelper))]
    [global::ABI.Microsoft.UI.Xaml.RectHelperRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IRectHelper))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class RectHelper : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<RectHelper>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IRectHelper => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.RectHelper").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IRectHelperStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IRectHelperStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IRectHelperStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IRectHelperStatics = ActivationFactory.Get("Microsoft.UI.Xaml.RectHelper", global::ABI.Microsoft.UI.Xaml.IRectHelperStaticsMethods.IID);
                }
            }
        }

        public static global::Windows.Foundation.Rect FromCoordinatesAndDimensions(float x, float y, float width, float height) => global::ABI.Microsoft.UI.Xaml.IRectHelperStaticsMethods.FromCoordinatesAndDimensions(_objRef_global__Microsoft_UI_Xaml_IRectHelperStatics, x, y, width, height);

        public static global::Windows.Foundation.Rect FromPoints(global::Windows.Foundation.Point point1, global::Windows.Foundation.Point point2) => global::ABI.Microsoft.UI.Xaml.IRectHelperStaticsMethods.FromPoints(_objRef_global__Microsoft_UI_Xaml_IRectHelperStatics, point1, point2);

        public static global::Windows.Foundation.Rect FromLocationAndSize(global::Windows.Foundation.Point location, global::Windows.Foundation.Size size) => global::ABI.Microsoft.UI.Xaml.IRectHelperStaticsMethods.FromLocationAndSize(_objRef_global__Microsoft_UI_Xaml_IRectHelperStatics, location, size);

        public static bool GetIsEmpty(global::Windows.Foundation.Rect target) => global::ABI.Microsoft.UI.Xaml.IRectHelperStaticsMethods.GetIsEmpty(_objRef_global__Microsoft_UI_Xaml_IRectHelperStatics, target);

        public static float GetBottom(global::Windows.Foundation.Rect target) => global::ABI.Microsoft.UI.Xaml.IRectHelperStaticsMethods.GetBottom(_objRef_global__Microsoft_UI_Xaml_IRectHelperStatics, target);

        public static float GetLeft(global::Windows.Foundation.Rect target) => global::ABI.Microsoft.UI.Xaml.IRectHelperStaticsMethods.GetLeft(_objRef_global__Microsoft_UI_Xaml_IRectHelperStatics, target);

        public static float GetRight(global::Windows.Foundation.Rect target) => global::ABI.Microsoft.UI.Xaml.IRectHelperStaticsMethods.GetRight(_objRef_global__Microsoft_UI_Xaml_IRectHelperStatics, target);

        public static float GetTop(global::Windows.Foundation.Rect target) => global::ABI.Microsoft.UI.Xaml.IRectHelperStaticsMethods.GetTop(_objRef_global__Microsoft_UI_Xaml_IRectHelperStatics, target);

        public static bool Contains(global::Windows.Foundation.Rect target, global::Windows.Foundation.Point point) => global::ABI.Microsoft.UI.Xaml.IRectHelperStaticsMethods.Contains(_objRef_global__Microsoft_UI_Xaml_IRectHelperStatics, target, point);

        public static bool Equals(global::Windows.Foundation.Rect target, global::Windows.Foundation.Rect value) => global::ABI.Microsoft.UI.Xaml.IRectHelperStaticsMethods.Equals(_objRef_global__Microsoft_UI_Xaml_IRectHelperStatics, target, value);

        public static global::Windows.Foundation.Rect Intersect(global::Windows.Foundation.Rect target, global::Windows.Foundation.Rect rect) => global::ABI.Microsoft.UI.Xaml.IRectHelperStaticsMethods.Intersect(_objRef_global__Microsoft_UI_Xaml_IRectHelperStatics, target, rect);

        public static global::Windows.Foundation.Rect Union(global::Windows.Foundation.Rect target, global::Windows.Foundation.Point point) => global::ABI.Microsoft.UI.Xaml.IRectHelperStaticsMethods.Union(_objRef_global__Microsoft_UI_Xaml_IRectHelperStatics, target, point);

        public static global::Windows.Foundation.Rect Union(global::Windows.Foundation.Rect target, global::Windows.Foundation.Rect rect) => global::ABI.Microsoft.UI.Xaml.IRectHelperStaticsMethods.Union(_objRef_global__Microsoft_UI_Xaml_IRectHelperStatics, target, rect);

        public static global::Windows.Foundation.Rect Empty => global::ABI.Microsoft.UI.Xaml.IRectHelperStaticsMethods.get_Empty(_objRef_global__Microsoft_UI_Xaml_IRectHelperStatics);

        public static RectHelper FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<RectHelper>.FromAbi(thisPtr);
        }

        internal RectHelper(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IRectHelperMethods.IID);

        }


        public static bool operator ==(RectHelper x, RectHelper y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(RectHelper x, RectHelper y) => !(x == y);
        public bool Equals(RectHelper other) => this == other;
        public override bool Equals(object obj) => obj is RectHelper that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.ResourceDictionary))]
    [global::ABI.Microsoft.UI.Xaml.ResourceDictionaryRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IResourceDictionary))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public class ResourceDictionary : DependencyObject, global::System.Collections.Generic.IDictionary<object, object>, global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<object, object>>, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ResourceDictionary>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IResourceDictionary;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IResourceDictionary()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IResourceDictionary, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IResourceDictionaryMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IResourceDictionary;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IResourceDictionary => ___objRef_global__Microsoft_UI_Xaml_IResourceDictionary ?? Make___objRef_global__Microsoft_UI_Xaml_IResourceDictionary();

        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IDictionary_object__object_;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IDictionary_object__object_()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMap_2_object__object.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IDictionary_object__object_, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IDictionaryMethods<object, object>.IID), null);
            return ___objRef_global__System_Collections_Generic_IDictionary_object__object_;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IDictionary_object__object_ => ___objRef_global__System_Collections_Generic_IDictionary_object__object_ ?? Make___objRef_global__System_Collections_Generic_IDictionary_object__object_();

        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_object__object__;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_object__object__()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Collections_IKeyValuePair_2_object__object_.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_object__object__, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IEnumerableMethods<global::System.Collections.Generic.KeyValuePair<object, object>>.IID), null);
            return ___objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_object__object__;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_object__object__ => ___objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_object__object__ ?? Make___objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_object__object__();



        private static class _IResourceDictionaryFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IResourceDictionaryFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IResourceDictionaryFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IResourceDictionaryFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IResourceDictionaryFactory = ActivationFactory.Get("Microsoft.UI.Xaml.ResourceDictionary", global::ABI.Microsoft.UI.Xaml.IResourceDictionaryFactoryMethods.IID);
                }
            }
        }

        public ResourceDictionary():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(ResourceDictionary);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IResourceDictionaryFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_IResourceDictionaryFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.IResourceDictionaryMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new ResourceDictionary FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ResourceDictionary>.FromAbi(thisPtr);
        }

        protected internal ResourceDictionary(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IResourceDictionaryMethods.IID);

        }


        public static bool operator ==(ResourceDictionary x, ResourceDictionary y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ResourceDictionary x, ResourceDictionary y) => !(x == y);
        public bool Equals(ResourceDictionary other) => this == other;
        public override bool Equals(object obj) => obj is ResourceDictionary that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected ResourceDictionary(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(ResourceDictionary);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public ICollection<object> Keys => global::ABI.System.Collections.Generic.IDictionaryMethods<object, object>.get_Keys(_objRef_global__System_Collections_Generic_IDictionary_object__object_);
        public ICollection<object> Values => global::ABI.System.Collections.Generic.IDictionaryMethods<object, object>.get_Values(_objRef_global__System_Collections_Generic_IDictionary_object__object_);
        public int Count => global::ABI.System.Collections.Generic.IDictionaryMethods<object, object>.get_Count(_objRef_global__System_Collections_Generic_IDictionary_object__object_);
        public bool IsReadOnly => global::ABI.System.Collections.Generic.IDictionaryMethods<object, object>.get_IsReadOnly(_objRef_global__System_Collections_Generic_IDictionary_object__object_);
        public object this[object key] 
        {
            get => global::ABI.System.Collections.Generic.IDictionaryMethods<object, object>.Indexer_Get(_objRef_global__System_Collections_Generic_IDictionary_object__object_, null, key);
            set => global::ABI.System.Collections.Generic.IDictionaryMethods<object, object>.Indexer_Set(_objRef_global__System_Collections_Generic_IDictionary_object__object_, key, value);
        }
        public void Add(object key, object value) => global::ABI.System.Collections.Generic.IDictionaryMethods<object, object>.Add(_objRef_global__System_Collections_Generic_IDictionary_object__object_, key, value);
        public bool ContainsKey(object key) => global::ABI.System.Collections.Generic.IDictionaryMethods<object, object>.ContainsKey(_objRef_global__System_Collections_Generic_IDictionary_object__object_, key);
        public bool Remove(object key) => global::ABI.System.Collections.Generic.IDictionaryMethods<object, object>.Remove(_objRef_global__System_Collections_Generic_IDictionary_object__object_, key);
        public bool TryGetValue(object key, out object value) => global::ABI.System.Collections.Generic.IDictionaryMethods<object, object>.TryGetValue(_objRef_global__System_Collections_Generic_IDictionary_object__object_, null, key, out value);
        public void Add(KeyValuePair<object, object> item) => global::ABI.System.Collections.Generic.IDictionaryMethods<object, object>.Add(_objRef_global__System_Collections_Generic_IDictionary_object__object_, item);
        public void Clear() => global::ABI.System.Collections.Generic.IDictionaryMethods<object, object>.Clear(_objRef_global__System_Collections_Generic_IDictionary_object__object_);
        public bool Contains(KeyValuePair<object, object> item) => global::ABI.System.Collections.Generic.IDictionaryMethods<object, object>.Contains(_objRef_global__System_Collections_Generic_IDictionary_object__object_, null, item);
        public void CopyTo(KeyValuePair<object, object>[] array, int arrayIndex) => global::ABI.System.Collections.Generic.IDictionaryMethods<object, object>.CopyTo(_objRef_global__System_Collections_Generic_IDictionary_object__object_, _objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_object__object__, array, arrayIndex);
        bool ICollection<KeyValuePair<object, object>>.Remove(KeyValuePair<object, object> item) => global::ABI.System.Collections.Generic.IDictionaryMethods<object, object>.Remove(_objRef_global__System_Collections_Generic_IDictionary_object__object_, item);

        public IEnumerator<global::System.Collections.Generic.KeyValuePair<object, object>> GetEnumerator() => global::ABI.System.Collections.Generic.IEnumerableMethods<global::System.Collections.Generic.KeyValuePair<object, object>>.GetEnumerator(_objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_object__object__);

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public global::System.Collections.Generic.IList<ResourceDictionary> MergedDictionaries => global::ABI.Microsoft.UI.Xaml.IResourceDictionaryMethods.get_MergedDictionaries(_objRef_global__Microsoft_UI_Xaml_IResourceDictionary);

        public global::System.Uri Source
        {
            get => global::ABI.Microsoft.UI.Xaml.IResourceDictionaryMethods.get_Source(_objRef_global__Microsoft_UI_Xaml_IResourceDictionary);
            set => global::ABI.Microsoft.UI.Xaml.IResourceDictionaryMethods.set_Source(_objRef_global__Microsoft_UI_Xaml_IResourceDictionary, value);
        }

        public global::System.Collections.Generic.IDictionary<object, object> ThemeDictionaries => global::ABI.Microsoft.UI.Xaml.IResourceDictionaryMethods.get_ThemeDictionaries(_objRef_global__Microsoft_UI_Xaml_IResourceDictionary);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.ResourceManagerRequestedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IResourceManagerRequestedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 327680u)]
    public sealed class ResourceManagerRequestedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ResourceManagerRequestedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IResourceManagerRequestedEventArgs => _inner;


        public static ResourceManagerRequestedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ResourceManagerRequestedEventArgs>.FromAbi(thisPtr);
        }

        internal ResourceManagerRequestedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IResourceManagerRequestedEventArgsMethods.IID);

        }


        public static bool operator ==(ResourceManagerRequestedEventArgs x, ResourceManagerRequestedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ResourceManagerRequestedEventArgs x, ResourceManagerRequestedEventArgs y) => !(x == y);
        public bool Equals(ResourceManagerRequestedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is ResourceManagerRequestedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Microsoft.Windows.ApplicationModel.Resources.IResourceManager CustomResourceManager
        {
            get => global::ABI.Microsoft.UI.Xaml.IResourceManagerRequestedEventArgsMethods.get_CustomResourceManager(_objRef_global__Microsoft_UI_Xaml_IResourceManagerRequestedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.IResourceManagerRequestedEventArgsMethods.set_CustomResourceManager(_objRef_global__Microsoft_UI_Xaml_IResourceManagerRequestedEventArgs, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.RoutedEvent))]
    [global::ABI.Microsoft.UI.Xaml.RoutedEventRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IRoutedEvent))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class RoutedEvent : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<RoutedEvent>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IRoutedEvent => _inner;


        public static RoutedEvent FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<RoutedEvent>.FromAbi(thisPtr);
        }

        internal RoutedEvent(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IRoutedEventMethods.IID);

        }


        public static bool operator ==(RoutedEvent x, RoutedEvent y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(RoutedEvent x, RoutedEvent y) => !(x == y);
        public bool Equals(RoutedEvent other) => this == other;
        public override bool Equals(object obj) => obj is RoutedEvent that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.RoutedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.RoutedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IRoutedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public class RoutedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<RoutedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IRoutedEventArgs;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IRoutedEventArgs()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IRoutedEventArgs, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IRoutedEventArgsMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IRoutedEventArgs;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IRoutedEventArgs => ___objRef_global__Microsoft_UI_Xaml_IRoutedEventArgs ?? Make___objRef_global__Microsoft_UI_Xaml_IRoutedEventArgs();



        private static class _IRoutedEventArgsFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IRoutedEventArgsFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IRoutedEventArgsFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IRoutedEventArgsFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IRoutedEventArgsFactory = ActivationFactory.Get("Microsoft.UI.Xaml.RoutedEventArgs", global::ABI.Microsoft.UI.Xaml.IRoutedEventArgsFactoryMethods.IID);
                }
            }
        }

        public RoutedEventArgs()
        {
            bool isAggregation = this.GetType() != typeof(RoutedEventArgs);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IRoutedEventArgsFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_IRoutedEventArgsFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.IRoutedEventArgsMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static RoutedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<RoutedEventArgs>.FromAbi(thisPtr);
        }

        protected internal RoutedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IRoutedEventArgsMethods.IID);

        }


        public static bool operator ==(RoutedEventArgs x, RoutedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(RoutedEventArgs x, RoutedEventArgs y) => !(x == y);
        public bool Equals(RoutedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is RoutedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected RoutedEventArgs(global::WinRT.DerivedComposed _)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(RoutedEventArgs);
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public object OriginalSource => global::ABI.Microsoft.UI.Xaml.IRoutedEventArgsMethods.get_OriginalSource(_objRef_global__Microsoft_UI_Xaml_IRoutedEventArgs);

        protected virtual bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.RoutedEventHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.RoutedEventHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public delegate void RoutedEventHandler(object sender, RoutedEventArgs e);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.ScalarTransition))]
    [global::ABI.Microsoft.UI.Xaml.ScalarTransitionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IScalarTransition))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public class ScalarTransition : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ScalarTransition>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IScalarTransition;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IScalarTransition()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IScalarTransition, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IScalarTransitionMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IScalarTransition;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IScalarTransition => ___objRef_global__Microsoft_UI_Xaml_IScalarTransition ?? Make___objRef_global__Microsoft_UI_Xaml_IScalarTransition();



        private static class _IScalarTransitionFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IScalarTransitionFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IScalarTransitionFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IScalarTransitionFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IScalarTransitionFactory = ActivationFactory.Get("Microsoft.UI.Xaml.ScalarTransition", global::ABI.Microsoft.UI.Xaml.IScalarTransitionFactoryMethods.IID);
                }
            }
        }

        public ScalarTransition()
        {
            bool isAggregation = this.GetType() != typeof(ScalarTransition);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IScalarTransitionFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_IScalarTransitionFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.IScalarTransitionMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static ScalarTransition FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ScalarTransition>.FromAbi(thisPtr);
        }

        protected internal ScalarTransition(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IScalarTransitionMethods.IID);

        }


        public static bool operator ==(ScalarTransition x, ScalarTransition y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ScalarTransition x, ScalarTransition y) => !(x == y);
        public bool Equals(ScalarTransition other) => this == other;
        public override bool Equals(object obj) => obj is ScalarTransition that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected ScalarTransition(global::WinRT.DerivedComposed _)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(ScalarTransition);
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::System.TimeSpan Duration
        {
            get => global::ABI.Microsoft.UI.Xaml.IScalarTransitionMethods.get_Duration(_objRef_global__Microsoft_UI_Xaml_IScalarTransition);
            set => global::ABI.Microsoft.UI.Xaml.IScalarTransitionMethods.set_Duration(_objRef_global__Microsoft_UI_Xaml_IScalarTransition, value);
        }

        protected virtual bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Setter))]
    [global::ABI.Microsoft.UI.Xaml.SetterRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ISetter))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class Setter : SetterBase, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<Setter>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_ISetter => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Setter;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Setter
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Setter;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Setter = ActivationFactory.Get("Microsoft.UI.Xaml.Setter");
                }
            }
        }

        public Setter() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Setter, global::ABI.Microsoft.UI.Xaml.ISetterMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        private static class _ISetterFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, DependencyProperty targetProperty, object value)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __targetProperty = default;
                ObjectReferenceValue __value = default;
                IntPtr __retval = default;
                try
                {
                    __targetProperty = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(targetProperty);
                    __value = MarshalInspectable<object>.CreateMarshaler2(value);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__targetProperty), MarshalInspectable<object>.GetAbi(__value), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__targetProperty);
                    MarshalInspectable<object>.DisposeMarshaler(__value);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_ISetterFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_ISetterFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_ISetterFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_ISetterFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Setter", global::ABI.Microsoft.UI.Xaml.ISetterFactoryMethods.IID);
                }
            }
        }

        public Setter(DependencyProperty targetProperty, object value) :base(global::WinRT.DerivedComposed.Instance)
        { 
        IntPtr ptr = (_ISetterFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_ISetterFactory, targetProperty, value)); 
        try 
        { 
        _inner = ComWrappersSupport.GetObjectReferenceForInterface(ptr, global::ABI.Microsoft.UI.Xaml.ISetterMethods.IID, false); 

        } 
        finally 
        { 
        MarshalInspectable<object>.DisposeAbi(ptr); 
        }

        ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
        ComWrappersHelper.Init(_inner, false);
        }

        public static new Setter FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<Setter>.FromAbi(thisPtr);
        }

        internal Setter(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.ISetterMethods.IID);

        }


        public static bool operator ==(Setter x, Setter y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(Setter x, Setter y) => !(x == y);
        public bool Equals(Setter other) => this == other;
        public override bool Equals(object obj) => obj is Setter that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public DependencyProperty Property
        {
            get => global::ABI.Microsoft.UI.Xaml.ISetterMethods.get_Property(_objRef_global__Microsoft_UI_Xaml_ISetter);
            set => global::ABI.Microsoft.UI.Xaml.ISetterMethods.set_Property(_objRef_global__Microsoft_UI_Xaml_ISetter, value);
        }

        public TargetPropertyPath Target
        {
            get => global::ABI.Microsoft.UI.Xaml.ISetterMethods.get_Target(_objRef_global__Microsoft_UI_Xaml_ISetter);
            set => global::ABI.Microsoft.UI.Xaml.ISetterMethods.set_Target(_objRef_global__Microsoft_UI_Xaml_ISetter, value);
        }

        public object Value
        {
            get => global::ABI.Microsoft.UI.Xaml.ISetterMethods.get_Value(_objRef_global__Microsoft_UI_Xaml_ISetter);
            set => global::ABI.Microsoft.UI.Xaml.ISetterMethods.set_Value(_objRef_global__Microsoft_UI_Xaml_ISetter, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.SetterBase))]
    [global::ABI.Microsoft.UI.Xaml.SetterBaseRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ISetterBase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public class SetterBase : DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<SetterBase>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_ISetterBase;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_ISetterBase()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_ISetterBase, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.ISetterBaseMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_ISetterBase;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_ISetterBase => ___objRef_global__Microsoft_UI_Xaml_ISetterBase ?? Make___objRef_global__Microsoft_UI_Xaml_ISetterBase();



        private static class _ISetterBaseFactoryMethods
        {}

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_ISetterBaseFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_ISetterBaseFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_ISetterBaseFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_ISetterBaseFactory = ActivationFactory.Get("Microsoft.UI.Xaml.SetterBase", global::ABI.Microsoft.UI.Xaml.ISetterBaseFactoryMethods.IID);
                }
            }
        }

        public static new SetterBase FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<SetterBase>.FromAbi(thisPtr);
        }

        protected internal SetterBase(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.ISetterBaseMethods.IID);

        }


        public static bool operator ==(SetterBase x, SetterBase y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(SetterBase x, SetterBase y) => !(x == y);
        public bool Equals(SetterBase other) => this == other;
        public override bool Equals(object obj) => obj is SetterBase that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected SetterBase(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(SetterBase);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public bool IsSealed => global::ABI.Microsoft.UI.Xaml.ISetterBaseMethods.get_IsSealed(_objRef_global__Microsoft_UI_Xaml_ISetterBase);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.SetterBaseCollection))]
    [global::ABI.Microsoft.UI.Xaml.SetterBaseCollectionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ISetterBaseCollection))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class SetterBaseCollection : global::System.Collections.Generic.IList<SetterBase>, global::System.Collections.Generic.IEnumerable<SetterBase>, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<SetterBaseCollection>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_ISetterBaseCollection => _inner;
        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IList_SetterBase_;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IList_SetterBase_()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Xaml_SetterBase.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IList_SetterBase_, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IListMethods<SetterBase>.IID), null);
            return ___objRef_global__System_Collections_Generic_IList_SetterBase_;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IList_SetterBase_ => ___objRef_global__System_Collections_Generic_IList_SetterBase_ ?? Make___objRef_global__System_Collections_Generic_IList_SetterBase_();

        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IEnumerable_SetterBase_;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IEnumerable_SetterBase_()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Xaml_SetterBase.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IEnumerable_SetterBase_, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IEnumerableMethods<SetterBase>.IID), null);
            return ___objRef_global__System_Collections_Generic_IEnumerable_SetterBase_;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IEnumerable_SetterBase_ => ___objRef_global__System_Collections_Generic_IEnumerable_SetterBase_ ?? Make___objRef_global__System_Collections_Generic_IEnumerable_SetterBase_();



        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_SetterBaseCollection;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_SetterBaseCollection
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_SetterBaseCollection;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_SetterBaseCollection = ActivationFactory.Get("Microsoft.UI.Xaml.SetterBaseCollection");
                }
            }
        }

        public SetterBaseCollection() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_SetterBaseCollection, global::ABI.Microsoft.UI.Xaml.ISetterBaseCollectionMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static SetterBaseCollection FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<SetterBaseCollection>.FromAbi(thisPtr);
        }

        internal SetterBaseCollection(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.ISetterBaseCollectionMethods.IID);

        }


        public static bool operator ==(SetterBaseCollection x, SetterBaseCollection y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(SetterBaseCollection x, SetterBaseCollection y) => !(x == y);
        public bool Equals(SetterBaseCollection other) => this == other;
        public override bool Equals(object obj) => obj is SetterBaseCollection that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public int Count => global::ABI.System.Collections.Generic.IListMethods<SetterBase>.get_Count(_objRef_global__System_Collections_Generic_IList_SetterBase_);
        public bool IsReadOnly => global::ABI.System.Collections.Generic.IListMethods<SetterBase>.get_IsReadOnly(_objRef_global__System_Collections_Generic_IList_SetterBase_);
        [global::System.Runtime.CompilerServices.IndexerName("ListItem")]
        public SetterBase this[int index] 
        {
            get => global::ABI.System.Collections.Generic.IListMethods<SetterBase>.Indexer_Get(_objRef_global__System_Collections_Generic_IList_SetterBase_, index);
            set => global::ABI.System.Collections.Generic.IListMethods<SetterBase>.Indexer_Set(_objRef_global__System_Collections_Generic_IList_SetterBase_, index, value);
        }
        public int IndexOf(SetterBase item) => global::ABI.System.Collections.Generic.IListMethods<SetterBase>.IndexOf(_objRef_global__System_Collections_Generic_IList_SetterBase_, item);
        public void Insert(int index, SetterBase item) => global::ABI.System.Collections.Generic.IListMethods<SetterBase>.Insert(_objRef_global__System_Collections_Generic_IList_SetterBase_, index, item);
        public void RemoveAt(int index) => global::ABI.System.Collections.Generic.IListMethods<SetterBase>.RemoveAt(_objRef_global__System_Collections_Generic_IList_SetterBase_, index);
        public void Add(SetterBase item) => global::ABI.System.Collections.Generic.IListMethods<SetterBase>.Add(_objRef_global__System_Collections_Generic_IList_SetterBase_, item);
        public void Clear() => global::ABI.System.Collections.Generic.IListMethods<SetterBase>.Clear(_objRef_global__System_Collections_Generic_IList_SetterBase_);
        public bool Contains(SetterBase item) => global::ABI.System.Collections.Generic.IListMethods<SetterBase>.Contains(_objRef_global__System_Collections_Generic_IList_SetterBase_, item);
        public void CopyTo(SetterBase[] array, int arrayIndex) => global::ABI.System.Collections.Generic.IListMethods<SetterBase>.CopyTo(_objRef_global__System_Collections_Generic_IList_SetterBase_, array, arrayIndex);
        public bool Remove(SetterBase item) => global::ABI.System.Collections.Generic.IListMethods<SetterBase>.Remove(_objRef_global__System_Collections_Generic_IList_SetterBase_, item);

        public IEnumerator<SetterBase> GetEnumerator() => global::ABI.System.Collections.Generic.IEnumerableMethods<SetterBase>.GetEnumerator(_objRef_global__System_Collections_Generic_IEnumerable_SetterBase_);

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public bool IsSealed => global::ABI.Microsoft.UI.Xaml.ISetterBaseCollectionMethods.get_IsSealed(_objRef_global__Microsoft_UI_Xaml_ISetterBaseCollection);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.SizeChangedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.SizeChangedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ISizeChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class SizeChangedEventArgs : RoutedEventArgs, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<SizeChangedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_ISizeChangedEventArgs => _inner;


        public static new SizeChangedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<SizeChangedEventArgs>.FromAbi(thisPtr);
        }

        internal SizeChangedEventArgs(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.ISizeChangedEventArgsMethods.IID);

        }


        public static bool operator ==(SizeChangedEventArgs x, SizeChangedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(SizeChangedEventArgs x, SizeChangedEventArgs y) => !(x == y);
        public bool Equals(SizeChangedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is SizeChangedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.Size NewSize => global::ABI.Microsoft.UI.Xaml.ISizeChangedEventArgsMethods.get_NewSize(_objRef_global__Microsoft_UI_Xaml_ISizeChangedEventArgs);

        public global::Windows.Foundation.Size PreviousSize => global::ABI.Microsoft.UI.Xaml.ISizeChangedEventArgsMethods.get_PreviousSize(_objRef_global__Microsoft_UI_Xaml_ISizeChangedEventArgs);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.SizeChangedEventHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.SizeChangedEventHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public delegate void SizeChangedEventHandler(object sender, SizeChangedEventArgs e);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.SizeHelper))]
    [global::ABI.Microsoft.UI.Xaml.SizeHelperRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ISizeHelper))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class SizeHelper : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<SizeHelper>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_ISizeHelper => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.SizeHelper").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_ISizeHelperStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_ISizeHelperStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_ISizeHelperStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_ISizeHelperStatics = ActivationFactory.Get("Microsoft.UI.Xaml.SizeHelper", global::ABI.Microsoft.UI.Xaml.ISizeHelperStaticsMethods.IID);
                }
            }
        }

        public static global::Windows.Foundation.Size FromDimensions(float width, float height) => global::ABI.Microsoft.UI.Xaml.ISizeHelperStaticsMethods.FromDimensions(_objRef_global__Microsoft_UI_Xaml_ISizeHelperStatics, width, height);

        public static bool GetIsEmpty(global::Windows.Foundation.Size target) => global::ABI.Microsoft.UI.Xaml.ISizeHelperStaticsMethods.GetIsEmpty(_objRef_global__Microsoft_UI_Xaml_ISizeHelperStatics, target);

        public static bool Equals(global::Windows.Foundation.Size target, global::Windows.Foundation.Size value) => global::ABI.Microsoft.UI.Xaml.ISizeHelperStaticsMethods.Equals(_objRef_global__Microsoft_UI_Xaml_ISizeHelperStatics, target, value);

        public static global::Windows.Foundation.Size Empty => global::ABI.Microsoft.UI.Xaml.ISizeHelperStaticsMethods.get_Empty(_objRef_global__Microsoft_UI_Xaml_ISizeHelperStatics);

        public static SizeHelper FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<SizeHelper>.FromAbi(thisPtr);
        }

        internal SizeHelper(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.ISizeHelperMethods.IID);

        }


        public static bool operator ==(SizeHelper x, SizeHelper y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(SizeHelper x, SizeHelper y) => !(x == y);
        public bool Equals(SizeHelper other) => this == other;
        public override bool Equals(object obj) => obj is SizeHelper that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.StateTrigger))]
    [global::ABI.Microsoft.UI.Xaml.StateTriggerRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IStateTrigger))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class StateTrigger : StateTriggerBase, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<StateTrigger>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IStateTrigger => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_StateTrigger;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_StateTrigger
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_StateTrigger;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_StateTrigger = ActivationFactory.Get("Microsoft.UI.Xaml.StateTrigger");
                }
            }
        }

        public StateTrigger() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_StateTrigger, global::ABI.Microsoft.UI.Xaml.IStateTriggerMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.StateTrigger").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IStateTriggerStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IStateTriggerStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IStateTriggerStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IStateTriggerStatics = ActivationFactory.Get("Microsoft.UI.Xaml.StateTrigger", global::ABI.Microsoft.UI.Xaml.IStateTriggerStaticsMethods.IID);
                }
            }
        }

        public static DependencyProperty IsActiveProperty => global::ABI.Microsoft.UI.Xaml.IStateTriggerStaticsMethods.get_IsActiveProperty(_objRef_global__Microsoft_UI_Xaml_IStateTriggerStatics);

        public static new StateTrigger FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<StateTrigger>.FromAbi(thisPtr);
        }

        internal StateTrigger(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IStateTriggerMethods.IID);

        }


        public static bool operator ==(StateTrigger x, StateTrigger y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(StateTrigger x, StateTrigger y) => !(x == y);
        public bool Equals(StateTrigger other) => this == other;
        public override bool Equals(object obj) => obj is StateTrigger that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public bool IsActive
        {
            get => global::ABI.Microsoft.UI.Xaml.IStateTriggerMethods.get_IsActive(_objRef_global__Microsoft_UI_Xaml_IStateTrigger);
            set => global::ABI.Microsoft.UI.Xaml.IStateTriggerMethods.set_IsActive(_objRef_global__Microsoft_UI_Xaml_IStateTrigger, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.StateTriggerBase))]
    [global::ABI.Microsoft.UI.Xaml.StateTriggerBaseRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IStateTriggerBase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public class StateTriggerBase : DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<StateTriggerBase>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IStateTriggerBase;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IStateTriggerBase()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IStateTriggerBase, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IStateTriggerBaseMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IStateTriggerBase;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IStateTriggerBase => ___objRef_global__Microsoft_UI_Xaml_IStateTriggerBase ?? Make___objRef_global__Microsoft_UI_Xaml_IStateTriggerBase();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IStateTriggerBaseProtected;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IStateTriggerBaseProtected()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IStateTriggerBaseProtected, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IStateTriggerBaseProtectedMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IStateTriggerBaseProtected;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IStateTriggerBaseProtected => ___objRef_global__Microsoft_UI_Xaml_IStateTriggerBaseProtected ?? Make___objRef_global__Microsoft_UI_Xaml_IStateTriggerBaseProtected();



        private static class _IStateTriggerBaseFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IStateTriggerBaseFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IStateTriggerBaseFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IStateTriggerBaseFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IStateTriggerBaseFactory = ActivationFactory.Get("Microsoft.UI.Xaml.StateTriggerBase", global::ABI.Microsoft.UI.Xaml.IStateTriggerBaseFactoryMethods.IID);
                }
            }
        }

        protected StateTriggerBase():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(StateTriggerBase);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IStateTriggerBaseFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_IStateTriggerBaseFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.IStateTriggerBaseMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new StateTriggerBase FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<StateTriggerBase>.FromAbi(thisPtr);
        }

        protected internal StateTriggerBase(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IStateTriggerBaseMethods.IID);

        }


        public static bool operator ==(StateTriggerBase x, StateTriggerBase y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(StateTriggerBase x, StateTriggerBase y) => !(x == y);
        public bool Equals(StateTriggerBase other) => this == other;
        public override bool Equals(object obj) => obj is StateTriggerBase that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected StateTriggerBase(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(StateTriggerBase);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected void SetActive(bool IsActive) => global::ABI.Microsoft.UI.Xaml.IStateTriggerBaseProtectedMethods.SetActive(_objRef_global__Microsoft_UI_Xaml_IStateTriggerBaseProtected, IsActive);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Style))]
    [global::ABI.Microsoft.UI.Xaml.StyleRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IStyle))]
    [global::Microsoft.UI.Xaml.Markup.ContentProperty(Name = @"Setters")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class Style : DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<Style>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IStyle => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Style;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Style
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Style;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Style = ActivationFactory.Get("Microsoft.UI.Xaml.Style");
                }
            }
        }

        public Style() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Style, global::ABI.Microsoft.UI.Xaml.IStyleMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        private static class _IStyleFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, global::System.Type targetType)
            {
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                global::ABI.System.Type.Pinnable __targetType = new(targetType);
                fixed(void* ___targetType = __targetType)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.Type, IntPtr*, int>**)ThisPtr)[6](ThisPtr, global::ABI.System.Type.GetAbi(ref __targetType), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return __retval;
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IStyleFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IStyleFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IStyleFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IStyleFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Style", global::ABI.Microsoft.UI.Xaml.IStyleFactoryMethods.IID);
                }
            }
        }

        public Style(global::System.Type targetType) :base(global::WinRT.DerivedComposed.Instance)
        { 
        IntPtr ptr = (_IStyleFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_IStyleFactory, targetType)); 
        try 
        { 
        _inner = ComWrappersSupport.GetObjectReferenceForInterface(ptr, global::ABI.Microsoft.UI.Xaml.IStyleMethods.IID, false); 

        } 
        finally 
        { 
        MarshalInspectable<object>.DisposeAbi(ptr); 
        }

        ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
        ComWrappersHelper.Init(_inner, false);
        }

        public static new Style FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<Style>.FromAbi(thisPtr);
        }

        internal Style(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IStyleMethods.IID);

        }


        public static bool operator ==(Style x, Style y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(Style x, Style y) => !(x == y);
        public bool Equals(Style other) => this == other;
        public override bool Equals(object obj) => obj is Style that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public void Seal() => global::ABI.Microsoft.UI.Xaml.IStyleMethods.Seal(_objRef_global__Microsoft_UI_Xaml_IStyle);

        public Style BasedOn
        {
            get => global::ABI.Microsoft.UI.Xaml.IStyleMethods.get_BasedOn(_objRef_global__Microsoft_UI_Xaml_IStyle);
            set => global::ABI.Microsoft.UI.Xaml.IStyleMethods.set_BasedOn(_objRef_global__Microsoft_UI_Xaml_IStyle, value);
        }

        public bool IsSealed => global::ABI.Microsoft.UI.Xaml.IStyleMethods.get_IsSealed(_objRef_global__Microsoft_UI_Xaml_IStyle);

        public SetterBaseCollection Setters => global::ABI.Microsoft.UI.Xaml.IStyleMethods.get_Setters(_objRef_global__Microsoft_UI_Xaml_IStyle);

        public global::System.Type TargetType
        {
            get => global::ABI.Microsoft.UI.Xaml.IStyleMethods.get_TargetType(_objRef_global__Microsoft_UI_Xaml_IStyle);
            set => global::ABI.Microsoft.UI.Xaml.IStyleMethods.set_TargetType(_objRef_global__Microsoft_UI_Xaml_IStyle, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::System.AttributeUsage(global::System.AttributeTargets.Class, AllowMultiple = true)]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class StyleTypedPropertyAttribute: Attribute
    {
        public StyleTypedPropertyAttribute(){}
        public string Property;
        public Type StyleTargetType;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.SuspendingEventHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.SuspendingEventHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public delegate void SuspendingEventHandler(object sender, global::Windows.ApplicationModel.SuspendingEventArgs e);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.TargetPropertyPath))]
    [global::ABI.Microsoft.UI.Xaml.TargetPropertyPathRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ITargetPropertyPath))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class TargetPropertyPath : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<TargetPropertyPath>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_ITargetPropertyPath => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_TargetPropertyPath;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_TargetPropertyPath
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_TargetPropertyPath;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_TargetPropertyPath = ActivationFactory.Get("Microsoft.UI.Xaml.TargetPropertyPath");
                }
            }
        }

        public TargetPropertyPath() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_TargetPropertyPath, global::ABI.Microsoft.UI.Xaml.ITargetPropertyPathMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        private static class _ITargetPropertyPathFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, DependencyProperty targetProperty)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __targetProperty = default;
                IntPtr __retval = default;
                try
                {
                    __targetProperty = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(targetProperty);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__targetProperty), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__targetProperty);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_ITargetPropertyPathFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_ITargetPropertyPathFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_ITargetPropertyPathFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_ITargetPropertyPathFactory = ActivationFactory.Get("Microsoft.UI.Xaml.TargetPropertyPath", global::ABI.Microsoft.UI.Xaml.ITargetPropertyPathFactoryMethods.IID);
                }
            }
        }

        public TargetPropertyPath(DependencyProperty targetProperty) 
        { 
        IntPtr ptr = (_ITargetPropertyPathFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_ITargetPropertyPathFactory, targetProperty)); 
        try 
        { 
        _inner = ComWrappersSupport.GetObjectReferenceForInterface(ptr, global::ABI.Microsoft.UI.Xaml.ITargetPropertyPathMethods.IID, false); 

        } 
        finally 
        { 
        MarshalInspectable<object>.DisposeAbi(ptr); 
        }

        ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
        ComWrappersHelper.Init(_inner, false);
        }

        public static TargetPropertyPath FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<TargetPropertyPath>.FromAbi(thisPtr);
        }

        internal TargetPropertyPath(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.ITargetPropertyPathMethods.IID);

        }


        public static bool operator ==(TargetPropertyPath x, TargetPropertyPath y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(TargetPropertyPath x, TargetPropertyPath y) => !(x == y);
        public bool Equals(TargetPropertyPath other) => this == other;
        public override bool Equals(object obj) => obj is TargetPropertyPath that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public PropertyPath Path
        {
            get => global::ABI.Microsoft.UI.Xaml.ITargetPropertyPathMethods.get_Path(_objRef_global__Microsoft_UI_Xaml_ITargetPropertyPath);
            set => global::ABI.Microsoft.UI.Xaml.ITargetPropertyPathMethods.set_Path(_objRef_global__Microsoft_UI_Xaml_ITargetPropertyPath, value);
        }

        public object Target
        {
            get => global::ABI.Microsoft.UI.Xaml.ITargetPropertyPathMethods.get_Target(_objRef_global__Microsoft_UI_Xaml_ITargetPropertyPath);
            set => global::ABI.Microsoft.UI.Xaml.ITargetPropertyPathMethods.set_Target(_objRef_global__Microsoft_UI_Xaml_ITargetPropertyPath, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::System.AttributeUsage(global::System.AttributeTargets.Class, AllowMultiple = true)]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class TemplatePartAttribute: Attribute
    {
        public TemplatePartAttribute(){}
        public string Name;
        public Type Type;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::System.AttributeUsage(global::System.AttributeTargets.Class, AllowMultiple = true)]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class TemplateVisualStateAttribute: Attribute
    {
        public TemplateVisualStateAttribute(){}
        public string Name;
        public string GroupName;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<TextAlignment>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public enum TextAlignment : int
    {
        Center = unchecked((int)0),
        Left = unchecked((int)0x1),
        Start = unchecked((int)0x1),
        Right = unchecked((int)0x2),
        End = unchecked((int)0x2),
        Justify = unchecked((int)0x3),
        DetectFromContent = unchecked((int)0x4),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<TextLineBounds>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public enum TextLineBounds : int
    {
        Full = unchecked((int)0),
        TrimToCapHeight = unchecked((int)0x1),
        TrimToBaseline = unchecked((int)0x2),
        Tight = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<TextReadingOrder>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public enum TextReadingOrder : int
    {
        Default = unchecked((int)0),
        UseFlowDirection = unchecked((int)0),
        DetectFromContent = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<TextTrimming>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public enum TextTrimming : int
    {
        None = unchecked((int)0),
        CharacterEllipsis = unchecked((int)0x1),
        WordEllipsis = unchecked((int)0x2),
        Clip = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<TextWrapping>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public enum TextWrapping : int
    {
        NoWrap = unchecked((int)0x1),
        Wrap = unchecked((int)0x2),
        WrapWholeWords = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.TriggerAction))]
    [global::ABI.Microsoft.UI.Xaml.TriggerActionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ITriggerAction))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public class TriggerAction : DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<TriggerAction>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_ITriggerAction;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_ITriggerAction()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_ITriggerAction, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.ITriggerActionMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_ITriggerAction;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_ITriggerAction => ___objRef_global__Microsoft_UI_Xaml_ITriggerAction ?? Make___objRef_global__Microsoft_UI_Xaml_ITriggerAction();



        private static class _ITriggerActionFactoryMethods
        {}

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_ITriggerActionFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_ITriggerActionFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_ITriggerActionFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_ITriggerActionFactory = ActivationFactory.Get("Microsoft.UI.Xaml.TriggerAction", global::ABI.Microsoft.UI.Xaml.ITriggerActionFactoryMethods.IID);
                }
            }
        }

        public static new TriggerAction FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<TriggerAction>.FromAbi(thisPtr);
        }

        protected internal TriggerAction(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.ITriggerActionMethods.IID);

        }


        public static bool operator ==(TriggerAction x, TriggerAction y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(TriggerAction x, TriggerAction y) => !(x == y);
        public bool Equals(TriggerAction other) => this == other;
        public override bool Equals(object obj) => obj is TriggerAction that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected TriggerAction(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(TriggerAction);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.TriggerActionCollection))]
    [global::ABI.Microsoft.UI.Xaml.TriggerActionCollectionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(global::System.Collections.Generic.IList<TriggerAction>))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class TriggerActionCollection : global::System.Collections.Generic.IList<TriggerAction>, global::System.Collections.Generic.IEnumerable<TriggerAction>, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<TriggerActionCollection>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IList_TriggerAction_;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IList_TriggerAction_()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Xaml_TriggerAction.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IList_TriggerAction_, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IListMethods<TriggerAction>.IID), null);
            return ___objRef_global__System_Collections_Generic_IList_TriggerAction_;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IList_TriggerAction_ => ___objRef_global__System_Collections_Generic_IList_TriggerAction_ ?? Make___objRef_global__System_Collections_Generic_IList_TriggerAction_();

        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IEnumerable_TriggerAction_;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IEnumerable_TriggerAction_()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Xaml_TriggerAction.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IEnumerable_TriggerAction_, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IEnumerableMethods<TriggerAction>.IID), null);
            return ___objRef_global__System_Collections_Generic_IEnumerable_TriggerAction_;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IEnumerable_TriggerAction_ => ___objRef_global__System_Collections_Generic_IEnumerable_TriggerAction_ ?? Make___objRef_global__System_Collections_Generic_IEnumerable_TriggerAction_();



        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_TriggerActionCollection;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_TriggerActionCollection
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_TriggerActionCollection;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_TriggerActionCollection = ActivationFactory.Get("Microsoft.UI.Xaml.TriggerActionCollection");
                }
            }
        }

        public TriggerActionCollection() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_TriggerActionCollection, global::ABI.System.Collections.Generic.IListMethods<TriggerAction>.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static TriggerActionCollection FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<TriggerActionCollection>.FromAbi(thisPtr);
        }

        internal TriggerActionCollection(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.System.Collections.Generic.IListMethods<TriggerAction>.IID);

        }


        public static bool operator ==(TriggerActionCollection x, TriggerActionCollection y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(TriggerActionCollection x, TriggerActionCollection y) => !(x == y);
        public bool Equals(TriggerActionCollection other) => this == other;
        public override bool Equals(object obj) => obj is TriggerActionCollection that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public int Count => global::ABI.System.Collections.Generic.IListMethods<TriggerAction>.get_Count(_objRef_global__System_Collections_Generic_IList_TriggerAction_);
        public bool IsReadOnly => global::ABI.System.Collections.Generic.IListMethods<TriggerAction>.get_IsReadOnly(_objRef_global__System_Collections_Generic_IList_TriggerAction_);
        [global::System.Runtime.CompilerServices.IndexerName("ListItem")]
        public TriggerAction this[int index] 
        {
            get => global::ABI.System.Collections.Generic.IListMethods<TriggerAction>.Indexer_Get(_objRef_global__System_Collections_Generic_IList_TriggerAction_, index);
            set => global::ABI.System.Collections.Generic.IListMethods<TriggerAction>.Indexer_Set(_objRef_global__System_Collections_Generic_IList_TriggerAction_, index, value);
        }
        public int IndexOf(TriggerAction item) => global::ABI.System.Collections.Generic.IListMethods<TriggerAction>.IndexOf(_objRef_global__System_Collections_Generic_IList_TriggerAction_, item);
        public void Insert(int index, TriggerAction item) => global::ABI.System.Collections.Generic.IListMethods<TriggerAction>.Insert(_objRef_global__System_Collections_Generic_IList_TriggerAction_, index, item);
        public void RemoveAt(int index) => global::ABI.System.Collections.Generic.IListMethods<TriggerAction>.RemoveAt(_objRef_global__System_Collections_Generic_IList_TriggerAction_, index);
        public void Add(TriggerAction item) => global::ABI.System.Collections.Generic.IListMethods<TriggerAction>.Add(_objRef_global__System_Collections_Generic_IList_TriggerAction_, item);
        public void Clear() => global::ABI.System.Collections.Generic.IListMethods<TriggerAction>.Clear(_objRef_global__System_Collections_Generic_IList_TriggerAction_);
        public bool Contains(TriggerAction item) => global::ABI.System.Collections.Generic.IListMethods<TriggerAction>.Contains(_objRef_global__System_Collections_Generic_IList_TriggerAction_, item);
        public void CopyTo(TriggerAction[] array, int arrayIndex) => global::ABI.System.Collections.Generic.IListMethods<TriggerAction>.CopyTo(_objRef_global__System_Collections_Generic_IList_TriggerAction_, array, arrayIndex);
        public bool Remove(TriggerAction item) => global::ABI.System.Collections.Generic.IListMethods<TriggerAction>.Remove(_objRef_global__System_Collections_Generic_IList_TriggerAction_, item);

        public IEnumerator<TriggerAction> GetEnumerator() => global::ABI.System.Collections.Generic.IEnumerableMethods<TriggerAction>.GetEnumerator(_objRef_global__System_Collections_Generic_IEnumerable_TriggerAction_);

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.TriggerBase))]
    [global::ABI.Microsoft.UI.Xaml.TriggerBaseRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ITriggerBase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public class TriggerBase : DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<TriggerBase>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_ITriggerBase;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_ITriggerBase()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_ITriggerBase, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.ITriggerBaseMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_ITriggerBase;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_ITriggerBase => ___objRef_global__Microsoft_UI_Xaml_ITriggerBase ?? Make___objRef_global__Microsoft_UI_Xaml_ITriggerBase();



        private static class _ITriggerBaseFactoryMethods
        {}

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_ITriggerBaseFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_ITriggerBaseFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_ITriggerBaseFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_ITriggerBaseFactory = ActivationFactory.Get("Microsoft.UI.Xaml.TriggerBase", global::ABI.Microsoft.UI.Xaml.ITriggerBaseFactoryMethods.IID);
                }
            }
        }

        public static new TriggerBase FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<TriggerBase>.FromAbi(thisPtr);
        }

        protected internal TriggerBase(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.ITriggerBaseMethods.IID);

        }


        public static bool operator ==(TriggerBase x, TriggerBase y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(TriggerBase x, TriggerBase y) => !(x == y);
        public bool Equals(TriggerBase other) => this == other;
        public override bool Equals(object obj) => obj is TriggerBase that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected TriggerBase(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(TriggerBase);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.TriggerCollection))]
    [global::ABI.Microsoft.UI.Xaml.TriggerCollectionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(global::System.Collections.Generic.IList<TriggerBase>))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class TriggerCollection : global::System.Collections.Generic.IList<TriggerBase>, global::System.Collections.Generic.IEnumerable<TriggerBase>, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<TriggerCollection>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IList_TriggerBase_;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IList_TriggerBase_()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Xaml_TriggerBase.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IList_TriggerBase_, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IListMethods<TriggerBase>.IID), null);
            return ___objRef_global__System_Collections_Generic_IList_TriggerBase_;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IList_TriggerBase_ => ___objRef_global__System_Collections_Generic_IList_TriggerBase_ ?? Make___objRef_global__System_Collections_Generic_IList_TriggerBase_();

        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IEnumerable_TriggerBase_;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IEnumerable_TriggerBase_()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Xaml_TriggerBase.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IEnumerable_TriggerBase_, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IEnumerableMethods<TriggerBase>.IID), null);
            return ___objRef_global__System_Collections_Generic_IEnumerable_TriggerBase_;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IEnumerable_TriggerBase_ => ___objRef_global__System_Collections_Generic_IEnumerable_TriggerBase_ ?? Make___objRef_global__System_Collections_Generic_IEnumerable_TriggerBase_();



        public static TriggerCollection FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<TriggerCollection>.FromAbi(thisPtr);
        }

        internal TriggerCollection(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.System.Collections.Generic.IListMethods<TriggerBase>.IID);

        }


        public static bool operator ==(TriggerCollection x, TriggerCollection y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(TriggerCollection x, TriggerCollection y) => !(x == y);
        public bool Equals(TriggerCollection other) => this == other;
        public override bool Equals(object obj) => obj is TriggerCollection that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public int Count => global::ABI.System.Collections.Generic.IListMethods<TriggerBase>.get_Count(_objRef_global__System_Collections_Generic_IList_TriggerBase_);
        public bool IsReadOnly => global::ABI.System.Collections.Generic.IListMethods<TriggerBase>.get_IsReadOnly(_objRef_global__System_Collections_Generic_IList_TriggerBase_);
        [global::System.Runtime.CompilerServices.IndexerName("ListItem")]
        public TriggerBase this[int index] 
        {
            get => global::ABI.System.Collections.Generic.IListMethods<TriggerBase>.Indexer_Get(_objRef_global__System_Collections_Generic_IList_TriggerBase_, index);
            set => global::ABI.System.Collections.Generic.IListMethods<TriggerBase>.Indexer_Set(_objRef_global__System_Collections_Generic_IList_TriggerBase_, index, value);
        }
        public int IndexOf(TriggerBase item) => global::ABI.System.Collections.Generic.IListMethods<TriggerBase>.IndexOf(_objRef_global__System_Collections_Generic_IList_TriggerBase_, item);
        public void Insert(int index, TriggerBase item) => global::ABI.System.Collections.Generic.IListMethods<TriggerBase>.Insert(_objRef_global__System_Collections_Generic_IList_TriggerBase_, index, item);
        public void RemoveAt(int index) => global::ABI.System.Collections.Generic.IListMethods<TriggerBase>.RemoveAt(_objRef_global__System_Collections_Generic_IList_TriggerBase_, index);
        public void Add(TriggerBase item) => global::ABI.System.Collections.Generic.IListMethods<TriggerBase>.Add(_objRef_global__System_Collections_Generic_IList_TriggerBase_, item);
        public void Clear() => global::ABI.System.Collections.Generic.IListMethods<TriggerBase>.Clear(_objRef_global__System_Collections_Generic_IList_TriggerBase_);
        public bool Contains(TriggerBase item) => global::ABI.System.Collections.Generic.IListMethods<TriggerBase>.Contains(_objRef_global__System_Collections_Generic_IList_TriggerBase_, item);
        public void CopyTo(TriggerBase[] array, int arrayIndex) => global::ABI.System.Collections.Generic.IListMethods<TriggerBase>.CopyTo(_objRef_global__System_Collections_Generic_IList_TriggerBase_, array, arrayIndex);
        public bool Remove(TriggerBase item) => global::ABI.System.Collections.Generic.IListMethods<TriggerBase>.Remove(_objRef_global__System_Collections_Generic_IList_TriggerBase_, item);

        public IEnumerator<TriggerBase> GetEnumerator() => global::ABI.System.Collections.Generic.IEnumerableMethods<TriggerBase>.GetEnumerator(_objRef_global__System_Collections_Generic_IEnumerable_TriggerBase_);

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.UIElement))]
    [global::ABI.Microsoft.UI.Xaml.UIElementRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IUIElement))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public class UIElement : DependencyObject, IUIElementOverrides, global::Microsoft.UI.Composition.IAnimationObject, global::Microsoft.UI.Composition.IVisualElement, global::Microsoft.UI.Composition.IVisualElement2, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<UIElement>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IUIElement;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IUIElement()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IUIElement, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IUIElementMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IUIElement;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IUIElement => ___objRef_global__Microsoft_UI_Xaml_IUIElement ?? Make___objRef_global__Microsoft_UI_Xaml_IUIElement();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IUIElementProtected;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IUIElementProtected()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IUIElementProtected, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IUIElementProtectedMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IUIElementProtected;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IUIElementProtected => ___objRef_global__Microsoft_UI_Xaml_IUIElementProtected ?? Make___objRef_global__Microsoft_UI_Xaml_IUIElementProtected();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IUIElementOverrides;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IUIElementOverrides()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IUIElementOverrides, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IUIElementOverridesMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IUIElementOverrides;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IUIElementOverrides => ___objRef_global__Microsoft_UI_Xaml_IUIElementOverrides ?? Make___objRef_global__Microsoft_UI_Xaml_IUIElementOverrides();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Composition_IAnimationObject;
        private IObjectReference Make___objRef_global__Microsoft_UI_Composition_IAnimationObject()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Composition_IAnimationObject, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Composition.IAnimationObjectMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Composition_IAnimationObject;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Composition_IAnimationObject => ___objRef_global__Microsoft_UI_Composition_IAnimationObject ?? Make___objRef_global__Microsoft_UI_Composition_IAnimationObject();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Composition_IVisualElement;
        private IObjectReference Make___objRef_global__Microsoft_UI_Composition_IVisualElement()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Composition_IVisualElement, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Composition.IVisualElementMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Composition_IVisualElement;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Composition_IVisualElement => ___objRef_global__Microsoft_UI_Composition_IVisualElement ?? Make___objRef_global__Microsoft_UI_Composition_IVisualElement();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Composition_IVisualElement2;
        private IObjectReference Make___objRef_global__Microsoft_UI_Composition_IVisualElement2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Composition_IVisualElement2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Composition.IVisualElement2Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Composition_IVisualElement2;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Composition_IVisualElement2 => ___objRef_global__Microsoft_UI_Composition_IVisualElement2 ?? Make___objRef_global__Microsoft_UI_Composition_IVisualElement2();



        private static class _IUIElementFactoryMethods
        {}

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IUIElementFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IUIElementFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IUIElementFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IUIElementFactory = ActivationFactory.Get("Microsoft.UI.Xaml.UIElement", global::ABI.Microsoft.UI.Xaml.IUIElementFactoryMethods.IID);
                }
            }
        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.UIElement").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IUIElementStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IUIElementStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IUIElementStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IUIElementStatics = ActivationFactory.Get("Microsoft.UI.Xaml.UIElement", global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.IID);
                }
            }
        }

        public static bool TryStartDirectManipulation(global::Microsoft.UI.Xaml.Input.Pointer value) => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.TryStartDirectManipulation(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics, value);

        public static void RegisterAsScrollPort(UIElement element) => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.RegisterAsScrollPort(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics, element);

        public static DependencyProperty AccessKeyProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_AccessKeyProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty AccessKeyScopeOwnerProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_AccessKeyScopeOwnerProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty AllowDropProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_AllowDropProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static RoutedEvent BringIntoViewRequestedEvent => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_BringIntoViewRequestedEvent(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty CacheModeProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_CacheModeProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty CanBeScrollAnchorProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_CanBeScrollAnchorProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty CanDragProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_CanDragProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static RoutedEvent CharacterReceivedEvent => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_CharacterReceivedEvent(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty ClipProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_ClipProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty CompositeModeProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_CompositeModeProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty ContextFlyoutProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_ContextFlyoutProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static RoutedEvent ContextRequestedEvent => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_ContextRequestedEvent(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static RoutedEvent DoubleTappedEvent => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_DoubleTappedEvent(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static RoutedEvent DragEnterEvent => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_DragEnterEvent(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static RoutedEvent DragLeaveEvent => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_DragLeaveEvent(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static RoutedEvent DragOverEvent => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_DragOverEvent(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static RoutedEvent DropEvent => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_DropEvent(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty ExitDisplayModeOnAccessKeyInvokedProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_ExitDisplayModeOnAccessKeyInvokedProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty FocusStateProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_FocusStateProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static RoutedEvent GettingFocusEvent => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_GettingFocusEvent(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty HighContrastAdjustmentProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_HighContrastAdjustmentProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static RoutedEvent HoldingEvent => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_HoldingEvent(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty IsAccessKeyScopeProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_IsAccessKeyScopeProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty IsDoubleTapEnabledProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_IsDoubleTapEnabledProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty IsHitTestVisibleProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_IsHitTestVisibleProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty IsHoldingEnabledProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_IsHoldingEnabledProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty IsRightTapEnabledProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_IsRightTapEnabledProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty IsTabStopProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_IsTabStopProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty IsTapEnabledProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_IsTapEnabledProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static RoutedEvent KeyDownEvent => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_KeyDownEvent(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty KeyTipHorizontalOffsetProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_KeyTipHorizontalOffsetProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty KeyTipPlacementModeProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_KeyTipPlacementModeProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty KeyTipTargetProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_KeyTipTargetProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty KeyTipVerticalOffsetProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_KeyTipVerticalOffsetProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static RoutedEvent KeyUpEvent => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_KeyUpEvent(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty KeyboardAcceleratorPlacementModeProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_KeyboardAcceleratorPlacementModeProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty KeyboardAcceleratorPlacementTargetProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_KeyboardAcceleratorPlacementTargetProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty LightsProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_LightsProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static RoutedEvent LosingFocusEvent => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_LosingFocusEvent(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static RoutedEvent ManipulationCompletedEvent => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_ManipulationCompletedEvent(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static RoutedEvent ManipulationDeltaEvent => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_ManipulationDeltaEvent(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static RoutedEvent ManipulationInertiaStartingEvent => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_ManipulationInertiaStartingEvent(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty ManipulationModeProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_ManipulationModeProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static RoutedEvent ManipulationStartedEvent => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_ManipulationStartedEvent(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static RoutedEvent ManipulationStartingEvent => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_ManipulationStartingEvent(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static RoutedEvent NoFocusCandidateFoundEvent => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_NoFocusCandidateFoundEvent(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty OpacityProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_OpacityProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static RoutedEvent PointerCanceledEvent => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_PointerCanceledEvent(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static RoutedEvent PointerCaptureLostEvent => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_PointerCaptureLostEvent(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty PointerCapturesProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_PointerCapturesProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static RoutedEvent PointerEnteredEvent => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_PointerEnteredEvent(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static RoutedEvent PointerExitedEvent => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_PointerExitedEvent(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static RoutedEvent PointerMovedEvent => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_PointerMovedEvent(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static RoutedEvent PointerPressedEvent => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_PointerPressedEvent(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static RoutedEvent PointerReleasedEvent => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_PointerReleasedEvent(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static RoutedEvent PointerWheelChangedEvent => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_PointerWheelChangedEvent(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static RoutedEvent PreviewKeyDownEvent => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_PreviewKeyDownEvent(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static RoutedEvent PreviewKeyUpEvent => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_PreviewKeyUpEvent(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty ProjectionProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_ProjectionProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty RenderTransformOriginProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_RenderTransformOriginProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty RenderTransformProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_RenderTransformProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static RoutedEvent RightTappedEvent => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_RightTappedEvent(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty ShadowProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_ShadowProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty TabFocusNavigationProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_TabFocusNavigationProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty TabIndexProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_TabIndexProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static RoutedEvent TappedEvent => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_TappedEvent(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty Transform3DProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_Transform3DProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty TransitionsProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_TransitionsProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty UseLayoutRoundingProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_UseLayoutRoundingProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty UseSystemFocusVisualsProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_UseSystemFocusVisualsProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty VisibilityProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_VisibilityProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty XYFocusDownNavigationStrategyProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_XYFocusDownNavigationStrategyProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty XYFocusDownProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_XYFocusDownProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty XYFocusKeyboardNavigationProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_XYFocusKeyboardNavigationProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty XYFocusLeftNavigationStrategyProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_XYFocusLeftNavigationStrategyProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty XYFocusLeftProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_XYFocusLeftProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty XYFocusRightNavigationStrategyProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_XYFocusRightNavigationStrategyProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty XYFocusRightProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_XYFocusRightProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty XYFocusUpNavigationStrategyProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_XYFocusUpNavigationStrategyProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static DependencyProperty XYFocusUpProperty => global::ABI.Microsoft.UI.Xaml.IUIElementStaticsMethods.get_XYFocusUpProperty(_objRef_global__Microsoft_UI_Xaml_IUIElementStatics);

        public static new UIElement FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<UIElement>.FromAbi(thisPtr);
        }

        protected internal UIElement(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IUIElementMethods.IID);

        }


        public static bool operator ==(UIElement x, UIElement y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(UIElement x, UIElement y) => !(x == y);
        public bool Equals(UIElement other) => this == other;
        public override bool Equals(object obj) => obj is UIElement that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected UIElement(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(UIElement);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public void Measure(global::Windows.Foundation.Size availableSize) => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Measure(_objRef_global__Microsoft_UI_Xaml_IUIElement, availableSize);

        public void Arrange(global::Windows.Foundation.Rect finalRect) => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Arrange(_objRef_global__Microsoft_UI_Xaml_IUIElement, finalRect);

        public bool CapturePointer(global::Microsoft.UI.Xaml.Input.Pointer value) => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.CapturePointer(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);

        public void ReleasePointerCapture(global::Microsoft.UI.Xaml.Input.Pointer value) => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.ReleasePointerCapture(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);

        public void ReleasePointerCaptures() => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.ReleasePointerCaptures(_objRef_global__Microsoft_UI_Xaml_IUIElement);

        public void AddHandler(RoutedEvent routedEvent, object handler, bool handledEventsToo) => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.AddHandler(_objRef_global__Microsoft_UI_Xaml_IUIElement, routedEvent, handler, handledEventsToo);

        public void RemoveHandler(RoutedEvent routedEvent, object handler) => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.RemoveHandler(_objRef_global__Microsoft_UI_Xaml_IUIElement, routedEvent, handler);

        public global::Microsoft.UI.Xaml.Media.GeneralTransform TransformToVisual(UIElement visual) => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.TransformToVisual(_objRef_global__Microsoft_UI_Xaml_IUIElement, visual);

        public void InvalidateMeasure() => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.InvalidateMeasure(_objRef_global__Microsoft_UI_Xaml_IUIElement);

        public void InvalidateArrange() => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.InvalidateArrange(_objRef_global__Microsoft_UI_Xaml_IUIElement);

        public void UpdateLayout() => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.UpdateLayout(_objRef_global__Microsoft_UI_Xaml_IUIElement);

        public bool CancelDirectManipulations() => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.CancelDirectManipulations(_objRef_global__Microsoft_UI_Xaml_IUIElement);

        public global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.DataTransfer.DataPackageOperation> StartDragAsync(global::Microsoft.UI.Input.PointerPoint pointerPoint) => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.StartDragAsync(_objRef_global__Microsoft_UI_Xaml_IUIElement, pointerPoint);

        public void StartBringIntoView() => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.StartBringIntoView(_objRef_global__Microsoft_UI_Xaml_IUIElement);

        public void StartBringIntoView(BringIntoViewOptions options) => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.StartBringIntoView(_objRef_global__Microsoft_UI_Xaml_IUIElement, options);

        public void TryInvokeKeyboardAccelerator(global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs args) => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.TryInvokeKeyboardAccelerator(_objRef_global__Microsoft_UI_Xaml_IUIElement, args);

        public bool Focus(FocusState value) => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Focus(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);

        public void StartAnimation(global::Microsoft.UI.Composition.ICompositionAnimationBase animation) => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.StartAnimation(_objRef_global__Microsoft_UI_Xaml_IUIElement, animation);

        public void StopAnimation(global::Microsoft.UI.Composition.ICompositionAnimationBase animation) => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.StopAnimation(_objRef_global__Microsoft_UI_Xaml_IUIElement, animation);

        public event global::Windows.Foundation.TypedEventHandler<UIElement, global::Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs> AccessKeyDisplayDismissed
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_AccessKeyDisplayDismissed2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_AccessKeyDisplayDismissed2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<UIElement, global::Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs> AccessKeyDisplayRequested
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_AccessKeyDisplayRequested2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_AccessKeyDisplayRequested2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<UIElement, global::Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs> AccessKeyInvoked
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_AccessKeyInvoked2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_AccessKeyInvoked2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<UIElement, BringIntoViewRequestedEventArgs> BringIntoViewRequested
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_BringIntoViewRequested2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_BringIntoViewRequested2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<UIElement, global::Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs> CharacterReceived
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_CharacterReceived2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_CharacterReceived2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<UIElement, RoutedEventArgs> ContextCanceled
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_ContextCanceled2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_ContextCanceled2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<UIElement, global::Microsoft.UI.Xaml.Input.ContextRequestedEventArgs> ContextRequested
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_ContextRequested2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_ContextRequested2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Microsoft.UI.Xaml.Input.DoubleTappedEventHandler DoubleTapped
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_DoubleTapped2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_DoubleTapped2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event DragEventHandler DragEnter
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_DragEnter2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_DragEnter2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event DragEventHandler DragLeave
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_DragLeave2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_DragLeave2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event DragEventHandler DragOver
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_DragOver2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_DragOver2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<UIElement, DragStartingEventArgs> DragStarting
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_DragStarting2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_DragStarting2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event DragEventHandler Drop
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_Drop2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_Drop2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<UIElement, DropCompletedEventArgs> DropCompleted
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_DropCompleted2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_DropCompleted2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<UIElement, global::Microsoft.UI.Xaml.Input.GettingFocusEventArgs> GettingFocus
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_GettingFocus2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_GettingFocus2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event RoutedEventHandler GotFocus
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_GotFocus2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_GotFocus2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Microsoft.UI.Xaml.Input.HoldingEventHandler Holding
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_Holding2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_Holding2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Microsoft.UI.Xaml.Input.KeyEventHandler KeyDown
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_KeyDown2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_KeyDown2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Microsoft.UI.Xaml.Input.KeyEventHandler KeyUp
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_KeyUp2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_KeyUp2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<UIElement, global::Microsoft.UI.Xaml.Input.LosingFocusEventArgs> LosingFocus
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_LosingFocus2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_LosingFocus2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event RoutedEventHandler LostFocus
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_LostFocus2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_LostFocus2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler ManipulationCompleted
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_ManipulationCompleted2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_ManipulationCompleted2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler ManipulationDelta
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_ManipulationDelta2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_ManipulationDelta2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler ManipulationInertiaStarting
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_ManipulationInertiaStarting2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_ManipulationInertiaStarting2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler ManipulationStarted
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_ManipulationStarted2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_ManipulationStarted2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler ManipulationStarting
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_ManipulationStarting2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_ManipulationStarting2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<UIElement, global::Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs> NoFocusCandidateFound
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_NoFocusCandidateFound2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_NoFocusCandidateFound2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Microsoft.UI.Xaml.Input.PointerEventHandler PointerCanceled
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_PointerCanceled2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_PointerCanceled2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Microsoft.UI.Xaml.Input.PointerEventHandler PointerCaptureLost
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_PointerCaptureLost2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_PointerCaptureLost2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Microsoft.UI.Xaml.Input.PointerEventHandler PointerEntered
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_PointerEntered2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_PointerEntered2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Microsoft.UI.Xaml.Input.PointerEventHandler PointerExited
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_PointerExited2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_PointerExited2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Microsoft.UI.Xaml.Input.PointerEventHandler PointerMoved
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_PointerMoved2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_PointerMoved2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Microsoft.UI.Xaml.Input.PointerEventHandler PointerPressed
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_PointerPressed2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_PointerPressed2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Microsoft.UI.Xaml.Input.PointerEventHandler PointerReleased
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_PointerReleased2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_PointerReleased2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Microsoft.UI.Xaml.Input.PointerEventHandler PointerWheelChanged
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_PointerWheelChanged2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_PointerWheelChanged2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Microsoft.UI.Xaml.Input.KeyEventHandler PreviewKeyDown
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_PreviewKeyDown2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_PreviewKeyDown2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Microsoft.UI.Xaml.Input.KeyEventHandler PreviewKeyUp
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_PreviewKeyUp2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_PreviewKeyUp2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<UIElement, global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs> ProcessKeyboardAccelerators
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_ProcessKeyboardAccelerators2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_ProcessKeyboardAccelerators2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Microsoft.UI.Xaml.Input.RightTappedEventHandler RightTapped
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_RightTapped2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_RightTapped2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Microsoft.UI.Xaml.Input.TappedEventHandler Tapped
        {
            add => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_Tapped2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.Get_Tapped2(_objRef_global__Microsoft_UI_Xaml_IUIElement, (IWinRTObject)this).Unsubscribe(value);
        }

        protected virtual global::Microsoft.UI.Xaml.Automation.Peers.AutomationPeer OnCreateAutomationPeer() => global::ABI.Microsoft.UI.Xaml.IUIElementOverridesMethods.OnCreateAutomationPeer(_objRef_global__Microsoft_UI_Xaml_IUIElementOverrides);

        global::Microsoft.UI.Xaml.Automation.Peers.AutomationPeer IUIElementOverrides.OnCreateAutomationPeer() => OnCreateAutomationPeer();
        protected virtual void OnDisconnectVisualChildren() => global::ABI.Microsoft.UI.Xaml.IUIElementOverridesMethods.OnDisconnectVisualChildren(_objRef_global__Microsoft_UI_Xaml_IUIElementOverrides);

        void IUIElementOverrides.OnDisconnectVisualChildren() => OnDisconnectVisualChildren();
        protected virtual global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.IEnumerable<global::Windows.Foundation.Point>> FindSubElementsForTouchTargeting(global::Windows.Foundation.Point point, global::Windows.Foundation.Rect boundingRect) => global::ABI.Microsoft.UI.Xaml.IUIElementOverridesMethods.FindSubElementsForTouchTargeting(_objRef_global__Microsoft_UI_Xaml_IUIElementOverrides, point, boundingRect);

        global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.IEnumerable<global::Windows.Foundation.Point>> IUIElementOverrides.FindSubElementsForTouchTargeting(global::Windows.Foundation.Point point, global::Windows.Foundation.Rect boundingRect) => FindSubElementsForTouchTargeting(point, boundingRect);
        protected virtual global::System.Collections.Generic.IEnumerable<DependencyObject> GetChildrenInTabFocusOrder() => global::ABI.Microsoft.UI.Xaml.IUIElementOverridesMethods.GetChildrenInTabFocusOrder(_objRef_global__Microsoft_UI_Xaml_IUIElementOverrides);

        global::System.Collections.Generic.IEnumerable<DependencyObject> IUIElementOverrides.GetChildrenInTabFocusOrder() => GetChildrenInTabFocusOrder();
        protected virtual void OnKeyboardAcceleratorInvoked(global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs args) => global::ABI.Microsoft.UI.Xaml.IUIElementOverridesMethods.OnKeyboardAcceleratorInvoked(_objRef_global__Microsoft_UI_Xaml_IUIElementOverrides, args);

        void IUIElementOverrides.OnKeyboardAcceleratorInvoked(global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs args) => OnKeyboardAcceleratorInvoked(args);
        protected virtual void OnProcessKeyboardAccelerators(global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs args) => global::ABI.Microsoft.UI.Xaml.IUIElementOverridesMethods.OnProcessKeyboardAccelerators(_objRef_global__Microsoft_UI_Xaml_IUIElementOverrides, args);

        void IUIElementOverrides.OnProcessKeyboardAccelerators(global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs args) => OnProcessKeyboardAccelerators(args);
        protected virtual void OnBringIntoViewRequested(BringIntoViewRequestedEventArgs e) => global::ABI.Microsoft.UI.Xaml.IUIElementOverridesMethods.OnBringIntoViewRequested(_objRef_global__Microsoft_UI_Xaml_IUIElementOverrides, e);

        void IUIElementOverrides.OnBringIntoViewRequested(BringIntoViewRequestedEventArgs e) => OnBringIntoViewRequested(e);
        protected virtual void PopulatePropertyInfoOverride(string propertyName, global::Microsoft.UI.Composition.AnimationPropertyInfo animationPropertyInfo) => global::ABI.Microsoft.UI.Xaml.IUIElementOverridesMethods.PopulatePropertyInfoOverride(_objRef_global__Microsoft_UI_Xaml_IUIElementOverrides, propertyName, animationPropertyInfo);

        void IUIElementOverrides.PopulatePropertyInfoOverride(string propertyName, global::Microsoft.UI.Composition.AnimationPropertyInfo animationPropertyInfo) => PopulatePropertyInfoOverride(propertyName, animationPropertyInfo);
        public void PopulatePropertyInfo(string propertyName, global::Microsoft.UI.Composition.AnimationPropertyInfo propertyInfo) => global::ABI.Microsoft.UI.Composition.IAnimationObjectMethods.PopulatePropertyInfo(_objRef_global__Microsoft_UI_Composition_IAnimationObject, propertyName, propertyInfo);

        public global::Microsoft.UI.Composition.Visual GetVisualInternal() => global::ABI.Microsoft.UI.Composition.IVisualElement2Methods.GetVisualInternal(_objRef_global__Microsoft_UI_Composition_IVisualElement2);

        public string AccessKey
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_AccessKey(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_AccessKey(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public DependencyObject AccessKeyScopeOwner
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_AccessKeyScopeOwner(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_AccessKeyScopeOwner(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public global::System.Numerics.Vector3 ActualOffset => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_ActualOffset(_objRef_global__Microsoft_UI_Xaml_IUIElement);

        public global::System.Numerics.Vector2 ActualSize => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_ActualSize(_objRef_global__Microsoft_UI_Xaml_IUIElement);

        public bool AllowDrop
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_AllowDrop(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_AllowDrop(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public global::Microsoft.UI.Xaml.Media.CacheMode CacheMode
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_CacheMode(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_CacheMode(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public bool CanBeScrollAnchor
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_CanBeScrollAnchor(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_CanBeScrollAnchor(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public bool CanDrag
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_CanDrag(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_CanDrag(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public global::System.Numerics.Vector3 CenterPoint
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_CenterPoint(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_CenterPoint(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public global::Microsoft.UI.Xaml.Media.RectangleGeometry Clip
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_Clip(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_Clip(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public global::Microsoft.UI.Xaml.Media.ElementCompositeMode CompositeMode
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_CompositeMode(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_CompositeMode(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase ContextFlyout
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_ContextFlyout(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_ContextFlyout(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public global::Windows.Foundation.Size DesiredSize => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_DesiredSize(_objRef_global__Microsoft_UI_Xaml_IUIElement);

        public bool ExitDisplayModeOnAccessKeyInvoked
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_ExitDisplayModeOnAccessKeyInvoked(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_ExitDisplayModeOnAccessKeyInvoked(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public FocusState FocusState => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_FocusState(_objRef_global__Microsoft_UI_Xaml_IUIElement);

        public ElementHighContrastAdjustment HighContrastAdjustment
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_HighContrastAdjustment(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_HighContrastAdjustment(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public bool IsAccessKeyScope
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_IsAccessKeyScope(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_IsAccessKeyScope(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public bool IsDoubleTapEnabled
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_IsDoubleTapEnabled(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_IsDoubleTapEnabled(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public bool IsHitTestVisible
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_IsHitTestVisible(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_IsHitTestVisible(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public bool IsHoldingEnabled
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_IsHoldingEnabled(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_IsHoldingEnabled(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public bool IsRightTapEnabled
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_IsRightTapEnabled(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_IsRightTapEnabled(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public bool IsTabStop
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_IsTabStop(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_IsTabStop(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public bool IsTapEnabled
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_IsTapEnabled(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_IsTapEnabled(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public double KeyTipHorizontalOffset
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_KeyTipHorizontalOffset(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_KeyTipHorizontalOffset(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public global::Microsoft.UI.Xaml.Input.KeyTipPlacementMode KeyTipPlacementMode
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_KeyTipPlacementMode(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_KeyTipPlacementMode(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public DependencyObject KeyTipTarget
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_KeyTipTarget(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_KeyTipTarget(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public double KeyTipVerticalOffset
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_KeyTipVerticalOffset(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_KeyTipVerticalOffset(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorPlacementMode KeyboardAcceleratorPlacementMode
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_KeyboardAcceleratorPlacementMode(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_KeyboardAcceleratorPlacementMode(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public DependencyObject KeyboardAcceleratorPlacementTarget
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_KeyboardAcceleratorPlacementTarget(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_KeyboardAcceleratorPlacementTarget(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Input.KeyboardAccelerator> KeyboardAccelerators => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_KeyboardAccelerators(_objRef_global__Microsoft_UI_Xaml_IUIElement);

        public global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Media.XamlLight> Lights => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_Lights(_objRef_global__Microsoft_UI_Xaml_IUIElement);

        public global::Microsoft.UI.Xaml.Input.ManipulationModes ManipulationMode
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_ManipulationMode(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_ManipulationMode(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public double Opacity
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_Opacity(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_Opacity(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public ScalarTransition OpacityTransition
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_OpacityTransition(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_OpacityTransition(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Microsoft.UI.Xaml.Input.Pointer> PointerCaptures => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_PointerCaptures(_objRef_global__Microsoft_UI_Xaml_IUIElement);

        public global::Microsoft.UI.Xaml.Media.Projection Projection
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_Projection(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_Projection(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        protected global::Microsoft.UI.Input.InputCursor ProtectedCursor
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementProtectedMethods.get_ProtectedCursor(_objRef_global__Microsoft_UI_Xaml_IUIElementProtected);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementProtectedMethods.set_ProtectedCursor(_objRef_global__Microsoft_UI_Xaml_IUIElementProtected, value);
        }

        public double RasterizationScale
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_RasterizationScale(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_RasterizationScale(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public global::Windows.Foundation.Size RenderSize => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_RenderSize(_objRef_global__Microsoft_UI_Xaml_IUIElement);

        public global::Microsoft.UI.Xaml.Media.Transform RenderTransform
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_RenderTransform(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_RenderTransform(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public global::Windows.Foundation.Point RenderTransformOrigin
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_RenderTransformOrigin(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_RenderTransformOrigin(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public float Rotation
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_Rotation(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_Rotation(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public global::System.Numerics.Vector3 RotationAxis
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_RotationAxis(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_RotationAxis(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public ScalarTransition RotationTransition
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_RotationTransition(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_RotationTransition(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public global::System.Numerics.Vector3 Scale
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_Scale(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_Scale(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public Vector3Transition ScaleTransition
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_ScaleTransition(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_ScaleTransition(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public global::Microsoft.UI.Xaml.Media.Shadow Shadow
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_Shadow(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_Shadow(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public global::Microsoft.UI.Xaml.Input.KeyboardNavigationMode TabFocusNavigation
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_TabFocusNavigation(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_TabFocusNavigation(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public int TabIndex
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_TabIndex(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_TabIndex(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public global::Microsoft.UI.Xaml.Media.Media3D.Transform3D Transform3D
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_Transform3D(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_Transform3D(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public global::System.Numerics.Matrix4x4 TransformMatrix
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_TransformMatrix(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_TransformMatrix(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public global::Microsoft.UI.Xaml.Media.Animation.TransitionCollection Transitions
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_Transitions(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_Transitions(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public global::System.Numerics.Vector3 Translation
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_Translation(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_Translation(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public Vector3Transition TranslationTransition
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_TranslationTransition(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_TranslationTransition(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public bool UseLayoutRounding
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_UseLayoutRounding(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_UseLayoutRounding(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public bool UseSystemFocusVisuals
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_UseSystemFocusVisuals(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_UseSystemFocusVisuals(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public Visibility Visibility
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_Visibility(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_Visibility(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public DependencyObject XYFocusDown
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_XYFocusDown(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_XYFocusDown(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy XYFocusDownNavigationStrategy
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_XYFocusDownNavigationStrategy(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_XYFocusDownNavigationStrategy(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public global::Microsoft.UI.Xaml.Input.XYFocusKeyboardNavigationMode XYFocusKeyboardNavigation
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_XYFocusKeyboardNavigation(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_XYFocusKeyboardNavigation(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public DependencyObject XYFocusLeft
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_XYFocusLeft(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_XYFocusLeft(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy XYFocusLeftNavigationStrategy
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_XYFocusLeftNavigationStrategy(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_XYFocusLeftNavigationStrategy(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public DependencyObject XYFocusRight
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_XYFocusRight(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_XYFocusRight(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy XYFocusRightNavigationStrategy
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_XYFocusRightNavigationStrategy(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_XYFocusRightNavigationStrategy(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public DependencyObject XYFocusUp
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_XYFocusUp(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_XYFocusUp(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy XYFocusUpNavigationStrategy
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_XYFocusUpNavigationStrategy(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_XYFocusUpNavigationStrategy(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        public XamlRoot XamlRoot
        {
            get => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.get_XamlRoot(_objRef_global__Microsoft_UI_Xaml_IUIElement);
            set => global::ABI.Microsoft.UI.Xaml.IUIElementMethods.set_XamlRoot(_objRef_global__Microsoft_UI_Xaml_IUIElement, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => global::ABI.Microsoft.UI.Xaml.IUIElementOverridesMethods.IID == iid || base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.UIElementWeakCollection))]
    [global::ABI.Microsoft.UI.Xaml.UIElementWeakCollectionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(global::System.Collections.Generic.IList<UIElement>))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public class UIElementWeakCollection : global::System.Collections.Generic.IList<UIElement>, global::System.Collections.Generic.IEnumerable<UIElement>, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<UIElementWeakCollection>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IList_UIElement_;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IList_UIElement_()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Xaml_UIElement.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IList_UIElement_, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IListMethods<UIElement>.IID), null);
            return ___objRef_global__System_Collections_Generic_IList_UIElement_;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IList_UIElement_ => ___objRef_global__System_Collections_Generic_IList_UIElement_ ?? Make___objRef_global__System_Collections_Generic_IList_UIElement_();

        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IEnumerable_UIElement_;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IEnumerable_UIElement_()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Xaml_UIElement.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IEnumerable_UIElement_, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IEnumerableMethods<UIElement>.IID), null);
            return ___objRef_global__System_Collections_Generic_IEnumerable_UIElement_;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IEnumerable_UIElement_ => ___objRef_global__System_Collections_Generic_IEnumerable_UIElement_ ?? Make___objRef_global__System_Collections_Generic_IEnumerable_UIElement_();



        private static class _IUIElementWeakCollectionFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IUIElementWeakCollectionFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IUIElementWeakCollectionFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IUIElementWeakCollectionFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IUIElementWeakCollectionFactory = ActivationFactory.Get("Microsoft.UI.Xaml.UIElementWeakCollection", global::ABI.Microsoft.UI.Xaml.IUIElementWeakCollectionFactoryMethods.IID);
                }
            }
        }

        public UIElementWeakCollection()
        {
            bool isAggregation = this.GetType() != typeof(UIElementWeakCollection);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IUIElementWeakCollectionFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_IUIElementWeakCollectionFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.System.Collections.Generic.IListMethods<UIElement>.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static UIElementWeakCollection FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<UIElementWeakCollection>.FromAbi(thisPtr);
        }

        protected internal UIElementWeakCollection(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.System.Collections.Generic.IListMethods<UIElement>.IID);

        }


        public static bool operator ==(UIElementWeakCollection x, UIElementWeakCollection y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(UIElementWeakCollection x, UIElementWeakCollection y) => !(x == y);
        public bool Equals(UIElementWeakCollection other) => this == other;
        public override bool Equals(object obj) => obj is UIElementWeakCollection that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected UIElementWeakCollection(global::WinRT.DerivedComposed _)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(UIElementWeakCollection);
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public int Count => global::ABI.System.Collections.Generic.IListMethods<UIElement>.get_Count(_objRef_global__System_Collections_Generic_IList_UIElement_);
        public bool IsReadOnly => global::ABI.System.Collections.Generic.IListMethods<UIElement>.get_IsReadOnly(_objRef_global__System_Collections_Generic_IList_UIElement_);
        [global::System.Runtime.CompilerServices.IndexerName("ListItem")]
        public UIElement this[int index] 
        {
            get => global::ABI.System.Collections.Generic.IListMethods<UIElement>.Indexer_Get(_objRef_global__System_Collections_Generic_IList_UIElement_, index);
            set => global::ABI.System.Collections.Generic.IListMethods<UIElement>.Indexer_Set(_objRef_global__System_Collections_Generic_IList_UIElement_, index, value);
        }
        public int IndexOf(UIElement item) => global::ABI.System.Collections.Generic.IListMethods<UIElement>.IndexOf(_objRef_global__System_Collections_Generic_IList_UIElement_, item);
        public void Insert(int index, UIElement item) => global::ABI.System.Collections.Generic.IListMethods<UIElement>.Insert(_objRef_global__System_Collections_Generic_IList_UIElement_, index, item);
        public void RemoveAt(int index) => global::ABI.System.Collections.Generic.IListMethods<UIElement>.RemoveAt(_objRef_global__System_Collections_Generic_IList_UIElement_, index);
        public void Add(UIElement item) => global::ABI.System.Collections.Generic.IListMethods<UIElement>.Add(_objRef_global__System_Collections_Generic_IList_UIElement_, item);
        public void Clear() => global::ABI.System.Collections.Generic.IListMethods<UIElement>.Clear(_objRef_global__System_Collections_Generic_IList_UIElement_);
        public bool Contains(UIElement item) => global::ABI.System.Collections.Generic.IListMethods<UIElement>.Contains(_objRef_global__System_Collections_Generic_IList_UIElement_, item);
        public void CopyTo(UIElement[] array, int arrayIndex) => global::ABI.System.Collections.Generic.IListMethods<UIElement>.CopyTo(_objRef_global__System_Collections_Generic_IList_UIElement_, array, arrayIndex);
        public bool Remove(UIElement item) => global::ABI.System.Collections.Generic.IListMethods<UIElement>.Remove(_objRef_global__System_Collections_Generic_IList_UIElement_, item);

        public IEnumerator<UIElement> GetEnumerator() => global::ABI.System.Collections.Generic.IEnumerableMethods<UIElement>.GetEnumerator(_objRef_global__System_Collections_Generic_IEnumerable_UIElement_);

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        protected virtual bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.UnhandledExceptionEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.UnhandledExceptionEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IUnhandledExceptionEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class UnhandledExceptionEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<UnhandledExceptionEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IUnhandledExceptionEventArgs => _inner;


        public static UnhandledExceptionEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<UnhandledExceptionEventArgs>.FromAbi(thisPtr);
        }

        internal UnhandledExceptionEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IUnhandledExceptionEventArgsMethods.IID);

        }


        public static bool operator ==(UnhandledExceptionEventArgs x, UnhandledExceptionEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(UnhandledExceptionEventArgs x, UnhandledExceptionEventArgs y) => !(x == y);
        public bool Equals(UnhandledExceptionEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is UnhandledExceptionEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::System.Exception Exception => global::ABI.Microsoft.UI.Xaml.IUnhandledExceptionEventArgsMethods.get_Exception(_objRef_global__Microsoft_UI_Xaml_IUnhandledExceptionEventArgs);

        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Xaml.IUnhandledExceptionEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Xaml_IUnhandledExceptionEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.IUnhandledExceptionEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Xaml_IUnhandledExceptionEventArgs, value);
        }

        public string Message => global::ABI.Microsoft.UI.Xaml.IUnhandledExceptionEventArgsMethods.get_Message(_objRef_global__Microsoft_UI_Xaml_IUnhandledExceptionEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.UnhandledExceptionEventHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.UnhandledExceptionEventHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public delegate void UnhandledExceptionEventHandler(object sender, UnhandledExceptionEventArgs e);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Vector3Transition))]
    [global::ABI.Microsoft.UI.Xaml.Vector3TransitionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IVector3Transition))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public class Vector3Transition : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<Vector3Transition>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IVector3Transition;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IVector3Transition()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IVector3Transition, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IVector3TransitionMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IVector3Transition;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IVector3Transition => ___objRef_global__Microsoft_UI_Xaml_IVector3Transition ?? Make___objRef_global__Microsoft_UI_Xaml_IVector3Transition();



        private static class _IVector3TransitionFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IVector3TransitionFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IVector3TransitionFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IVector3TransitionFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IVector3TransitionFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Vector3Transition", global::ABI.Microsoft.UI.Xaml.IVector3TransitionFactoryMethods.IID);
                }
            }
        }

        public Vector3Transition()
        {
            bool isAggregation = this.GetType() != typeof(Vector3Transition);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IVector3TransitionFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_IVector3TransitionFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.IVector3TransitionMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static Vector3Transition FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<Vector3Transition>.FromAbi(thisPtr);
        }

        protected internal Vector3Transition(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IVector3TransitionMethods.IID);

        }


        public static bool operator ==(Vector3Transition x, Vector3Transition y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(Vector3Transition x, Vector3Transition y) => !(x == y);
        public bool Equals(Vector3Transition other) => this == other;
        public override bool Equals(object obj) => obj is Vector3Transition that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected Vector3Transition(global::WinRT.DerivedComposed _)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(Vector3Transition);
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public Vector3TransitionComponents Components
        {
            get => global::ABI.Microsoft.UI.Xaml.IVector3TransitionMethods.get_Components(_objRef_global__Microsoft_UI_Xaml_IVector3Transition);
            set => global::ABI.Microsoft.UI.Xaml.IVector3TransitionMethods.set_Components(_objRef_global__Microsoft_UI_Xaml_IVector3Transition, value);
        }

        public global::System.TimeSpan Duration
        {
            get => global::ABI.Microsoft.UI.Xaml.IVector3TransitionMethods.get_Duration(_objRef_global__Microsoft_UI_Xaml_IVector3Transition);
            set => global::ABI.Microsoft.UI.Xaml.IVector3TransitionMethods.set_Duration(_objRef_global__Microsoft_UI_Xaml_IVector3Transition, value);
        }

        protected virtual bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [FlagsAttribute]
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<Vector3TransitionComponents>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public enum Vector3TransitionComponents : uint
    {
        X = unchecked((uint)0x1),
        Y = unchecked((uint)0x2),
        Z = unchecked((uint)0x4),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<VerticalAlignment>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public enum VerticalAlignment : int
    {
        Top = unchecked((int)0),
        Center = unchecked((int)0x1),
        Bottom = unchecked((int)0x2),
        Stretch = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<Visibility>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public enum Visibility : int
    {
        Visible = unchecked((int)0),
        Collapsed = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.VisualState))]
    [global::ABI.Microsoft.UI.Xaml.VisualStateRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IVisualState))]
    [global::Microsoft.UI.Xaml.Markup.ContentProperty(Name = @"Storyboard")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class VisualState : DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<VisualState>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IVisualState => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_VisualState;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_VisualState
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_VisualState;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_VisualState = ActivationFactory.Get("Microsoft.UI.Xaml.VisualState");
                }
            }
        }

        public VisualState() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_VisualState, global::ABI.Microsoft.UI.Xaml.IVisualStateMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new VisualState FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<VisualState>.FromAbi(thisPtr);
        }

        internal VisualState(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IVisualStateMethods.IID);

        }


        public static bool operator ==(VisualState x, VisualState y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(VisualState x, VisualState y) => !(x == y);
        public bool Equals(VisualState other) => this == other;
        public override bool Equals(object obj) => obj is VisualState that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public string Name => global::ABI.Microsoft.UI.Xaml.IVisualStateMethods.get_Name(_objRef_global__Microsoft_UI_Xaml_IVisualState);

        public SetterBaseCollection Setters => global::ABI.Microsoft.UI.Xaml.IVisualStateMethods.get_Setters(_objRef_global__Microsoft_UI_Xaml_IVisualState);

        public global::System.Collections.Generic.IList<StateTriggerBase> StateTriggers => global::ABI.Microsoft.UI.Xaml.IVisualStateMethods.get_StateTriggers(_objRef_global__Microsoft_UI_Xaml_IVisualState);

        public global::Microsoft.UI.Xaml.Media.Animation.Storyboard Storyboard
        {
            get => global::ABI.Microsoft.UI.Xaml.IVisualStateMethods.get_Storyboard(_objRef_global__Microsoft_UI_Xaml_IVisualState);
            set => global::ABI.Microsoft.UI.Xaml.IVisualStateMethods.set_Storyboard(_objRef_global__Microsoft_UI_Xaml_IVisualState, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.VisualStateChangedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.VisualStateChangedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IVisualStateChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class VisualStateChangedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<VisualStateChangedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IVisualStateChangedEventArgs => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_VisualStateChangedEventArgs;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_VisualStateChangedEventArgs
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_VisualStateChangedEventArgs;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_VisualStateChangedEventArgs = ActivationFactory.Get("Microsoft.UI.Xaml.VisualStateChangedEventArgs");
                }
            }
        }

        public VisualStateChangedEventArgs() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_VisualStateChangedEventArgs, global::ABI.Microsoft.UI.Xaml.IVisualStateChangedEventArgsMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static VisualStateChangedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<VisualStateChangedEventArgs>.FromAbi(thisPtr);
        }

        internal VisualStateChangedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IVisualStateChangedEventArgsMethods.IID);

        }


        public static bool operator ==(VisualStateChangedEventArgs x, VisualStateChangedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(VisualStateChangedEventArgs x, VisualStateChangedEventArgs y) => !(x == y);
        public bool Equals(VisualStateChangedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is VisualStateChangedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Microsoft.UI.Xaml.Controls.Control Control
        {
            get => global::ABI.Microsoft.UI.Xaml.IVisualStateChangedEventArgsMethods.get_Control(_objRef_global__Microsoft_UI_Xaml_IVisualStateChangedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.IVisualStateChangedEventArgsMethods.set_Control(_objRef_global__Microsoft_UI_Xaml_IVisualStateChangedEventArgs, value);
        }

        public VisualState NewState
        {
            get => global::ABI.Microsoft.UI.Xaml.IVisualStateChangedEventArgsMethods.get_NewState(_objRef_global__Microsoft_UI_Xaml_IVisualStateChangedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.IVisualStateChangedEventArgsMethods.set_NewState(_objRef_global__Microsoft_UI_Xaml_IVisualStateChangedEventArgs, value);
        }

        public VisualState OldState
        {
            get => global::ABI.Microsoft.UI.Xaml.IVisualStateChangedEventArgsMethods.get_OldState(_objRef_global__Microsoft_UI_Xaml_IVisualStateChangedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.IVisualStateChangedEventArgsMethods.set_OldState(_objRef_global__Microsoft_UI_Xaml_IVisualStateChangedEventArgs, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.VisualStateChangedEventHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.VisualStateChangedEventHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public delegate void VisualStateChangedEventHandler(object sender, VisualStateChangedEventArgs e);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.VisualStateGroup))]
    [global::ABI.Microsoft.UI.Xaml.VisualStateGroupRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IVisualStateGroup))]
    [global::Microsoft.UI.Xaml.Markup.ContentProperty(Name = @"States")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class VisualStateGroup : DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<VisualStateGroup>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IVisualStateGroup => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_VisualStateGroup;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_VisualStateGroup
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_VisualStateGroup;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_VisualStateGroup = ActivationFactory.Get("Microsoft.UI.Xaml.VisualStateGroup");
                }
            }
        }

        public VisualStateGroup() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_VisualStateGroup, global::ABI.Microsoft.UI.Xaml.IVisualStateGroupMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new VisualStateGroup FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<VisualStateGroup>.FromAbi(thisPtr);
        }

        internal VisualStateGroup(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IVisualStateGroupMethods.IID);

        }


        public static bool operator ==(VisualStateGroup x, VisualStateGroup y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(VisualStateGroup x, VisualStateGroup y) => !(x == y);
        public bool Equals(VisualStateGroup other) => this == other;
        public override bool Equals(object obj) => obj is VisualStateGroup that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public event VisualStateChangedEventHandler CurrentStateChanged
        {
            add => global::ABI.Microsoft.UI.Xaml.IVisualStateGroupMethods.Get_CurrentStateChanged2(_objRef_global__Microsoft_UI_Xaml_IVisualStateGroup, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IVisualStateGroupMethods.Get_CurrentStateChanged2(_objRef_global__Microsoft_UI_Xaml_IVisualStateGroup, (IWinRTObject)this).Unsubscribe(value);
        }

        public event VisualStateChangedEventHandler CurrentStateChanging
        {
            add => global::ABI.Microsoft.UI.Xaml.IVisualStateGroupMethods.Get_CurrentStateChanging2(_objRef_global__Microsoft_UI_Xaml_IVisualStateGroup, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IVisualStateGroupMethods.Get_CurrentStateChanging2(_objRef_global__Microsoft_UI_Xaml_IVisualStateGroup, (IWinRTObject)this).Unsubscribe(value);
        }

        public VisualState CurrentState => global::ABI.Microsoft.UI.Xaml.IVisualStateGroupMethods.get_CurrentState(_objRef_global__Microsoft_UI_Xaml_IVisualStateGroup);

        public string Name => global::ABI.Microsoft.UI.Xaml.IVisualStateGroupMethods.get_Name(_objRef_global__Microsoft_UI_Xaml_IVisualStateGroup);

        public global::System.Collections.Generic.IList<VisualState> States => global::ABI.Microsoft.UI.Xaml.IVisualStateGroupMethods.get_States(_objRef_global__Microsoft_UI_Xaml_IVisualStateGroup);

        public global::System.Collections.Generic.IList<VisualTransition> Transitions => global::ABI.Microsoft.UI.Xaml.IVisualStateGroupMethods.get_Transitions(_objRef_global__Microsoft_UI_Xaml_IVisualStateGroup);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.VisualStateManager))]
    [global::ABI.Microsoft.UI.Xaml.VisualStateManagerRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IVisualStateManager))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public class VisualStateManager : DependencyObject, IVisualStateManagerOverrides, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<VisualStateManager>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IVisualStateManager;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IVisualStateManager()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IVisualStateManager, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IVisualStateManagerMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IVisualStateManager;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IVisualStateManager => ___objRef_global__Microsoft_UI_Xaml_IVisualStateManager ?? Make___objRef_global__Microsoft_UI_Xaml_IVisualStateManager();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IVisualStateManagerProtected;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IVisualStateManagerProtected()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IVisualStateManagerProtected, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IVisualStateManagerProtectedMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IVisualStateManagerProtected;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IVisualStateManagerProtected => ___objRef_global__Microsoft_UI_Xaml_IVisualStateManagerProtected ?? Make___objRef_global__Microsoft_UI_Xaml_IVisualStateManagerProtected();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IVisualStateManagerOverrides;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IVisualStateManagerOverrides()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IVisualStateManagerOverrides, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IVisualStateManagerOverridesMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IVisualStateManagerOverrides;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IVisualStateManagerOverrides => ___objRef_global__Microsoft_UI_Xaml_IVisualStateManagerOverrides ?? Make___objRef_global__Microsoft_UI_Xaml_IVisualStateManagerOverrides();



        private static class _IVisualStateManagerFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IVisualStateManagerFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IVisualStateManagerFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IVisualStateManagerFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IVisualStateManagerFactory = ActivationFactory.Get("Microsoft.UI.Xaml.VisualStateManager", global::ABI.Microsoft.UI.Xaml.IVisualStateManagerFactoryMethods.IID);
                }
            }
        }

        public VisualStateManager():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(VisualStateManager);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IVisualStateManagerFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_IVisualStateManagerFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.IVisualStateManagerMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.VisualStateManager").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IVisualStateManagerStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IVisualStateManagerStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IVisualStateManagerStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IVisualStateManagerStatics = ActivationFactory.Get("Microsoft.UI.Xaml.VisualStateManager", global::ABI.Microsoft.UI.Xaml.IVisualStateManagerStaticsMethods.IID);
                }
            }
        }

        public static global::System.Collections.Generic.IList<VisualStateGroup> GetVisualStateGroups(FrameworkElement obj) => global::ABI.Microsoft.UI.Xaml.IVisualStateManagerStaticsMethods.GetVisualStateGroups(_objRef_global__Microsoft_UI_Xaml_IVisualStateManagerStatics, obj);

        public static VisualStateManager GetCustomVisualStateManager(FrameworkElement obj) => global::ABI.Microsoft.UI.Xaml.IVisualStateManagerStaticsMethods.GetCustomVisualStateManager(_objRef_global__Microsoft_UI_Xaml_IVisualStateManagerStatics, obj);

        public static void SetCustomVisualStateManager(FrameworkElement obj, VisualStateManager value) => global::ABI.Microsoft.UI.Xaml.IVisualStateManagerStaticsMethods.SetCustomVisualStateManager(_objRef_global__Microsoft_UI_Xaml_IVisualStateManagerStatics, obj, value);

        public static bool GoToState(global::Microsoft.UI.Xaml.Controls.Control control, string stateName, bool useTransitions) => global::ABI.Microsoft.UI.Xaml.IVisualStateManagerStaticsMethods.GoToState(_objRef_global__Microsoft_UI_Xaml_IVisualStateManagerStatics, control, stateName, useTransitions);

        public static DependencyProperty CustomVisualStateManagerProperty => global::ABI.Microsoft.UI.Xaml.IVisualStateManagerStaticsMethods.get_CustomVisualStateManagerProperty(_objRef_global__Microsoft_UI_Xaml_IVisualStateManagerStatics);

        public static new VisualStateManager FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<VisualStateManager>.FromAbi(thisPtr);
        }

        protected internal VisualStateManager(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IVisualStateManagerMethods.IID);

        }


        public static bool operator ==(VisualStateManager x, VisualStateManager y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(VisualStateManager x, VisualStateManager y) => !(x == y);
        public bool Equals(VisualStateManager other) => this == other;
        public override bool Equals(object obj) => obj is VisualStateManager that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected VisualStateManager(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(VisualStateManager);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected void RaiseCurrentStateChanging(VisualStateGroup stateGroup, VisualState oldState, VisualState newState, global::Microsoft.UI.Xaml.Controls.Control control) => global::ABI.Microsoft.UI.Xaml.IVisualStateManagerProtectedMethods.RaiseCurrentStateChanging(_objRef_global__Microsoft_UI_Xaml_IVisualStateManagerProtected, stateGroup, oldState, newState, control);

        protected void RaiseCurrentStateChanged(VisualStateGroup stateGroup, VisualState oldState, VisualState newState, global::Microsoft.UI.Xaml.Controls.Control control) => global::ABI.Microsoft.UI.Xaml.IVisualStateManagerProtectedMethods.RaiseCurrentStateChanged(_objRef_global__Microsoft_UI_Xaml_IVisualStateManagerProtected, stateGroup, oldState, newState, control);

        protected virtual bool GoToStateCore(global::Microsoft.UI.Xaml.Controls.Control control, FrameworkElement templateRoot, string stateName, VisualStateGroup group, VisualState state, bool useTransitions) => global::ABI.Microsoft.UI.Xaml.IVisualStateManagerOverridesMethods.GoToStateCore(_objRef_global__Microsoft_UI_Xaml_IVisualStateManagerOverrides, control, templateRoot, stateName, group, state, useTransitions);

        bool IVisualStateManagerOverrides.GoToStateCore(global::Microsoft.UI.Xaml.Controls.Control control, FrameworkElement templateRoot, string stateName, VisualStateGroup group, VisualState state, bool useTransitions) => GoToStateCore(control, templateRoot, stateName, group, state, useTransitions);
        protected override bool IsOverridableInterface(Guid iid) => global::ABI.Microsoft.UI.Xaml.IVisualStateManagerOverridesMethods.IID == iid || base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.VisualTransition))]
    [global::ABI.Microsoft.UI.Xaml.VisualTransitionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IVisualTransition))]
    [global::Microsoft.UI.Xaml.Markup.ContentProperty(Name = @"Storyboard")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public class VisualTransition : DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<VisualTransition>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IVisualTransition;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IVisualTransition()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IVisualTransition, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IVisualTransitionMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IVisualTransition;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IVisualTransition => ___objRef_global__Microsoft_UI_Xaml_IVisualTransition ?? Make___objRef_global__Microsoft_UI_Xaml_IVisualTransition();



        private static class _IVisualTransitionFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IVisualTransitionFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IVisualTransitionFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IVisualTransitionFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IVisualTransitionFactory = ActivationFactory.Get("Microsoft.UI.Xaml.VisualTransition", global::ABI.Microsoft.UI.Xaml.IVisualTransitionFactoryMethods.IID);
                }
            }
        }

        public VisualTransition():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(VisualTransition);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IVisualTransitionFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_IVisualTransitionFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.IVisualTransitionMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new VisualTransition FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<VisualTransition>.FromAbi(thisPtr);
        }

        protected internal VisualTransition(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IVisualTransitionMethods.IID);

        }


        public static bool operator ==(VisualTransition x, VisualTransition y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(VisualTransition x, VisualTransition y) => !(x == y);
        public bool Equals(VisualTransition other) => this == other;
        public override bool Equals(object obj) => obj is VisualTransition that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected VisualTransition(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(VisualTransition);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public string From
        {
            get => global::ABI.Microsoft.UI.Xaml.IVisualTransitionMethods.get_From(_objRef_global__Microsoft_UI_Xaml_IVisualTransition);
            set => global::ABI.Microsoft.UI.Xaml.IVisualTransitionMethods.set_From(_objRef_global__Microsoft_UI_Xaml_IVisualTransition, value);
        }

        public Duration GeneratedDuration
        {
            get => global::ABI.Microsoft.UI.Xaml.IVisualTransitionMethods.get_GeneratedDuration(_objRef_global__Microsoft_UI_Xaml_IVisualTransition);
            set => global::ABI.Microsoft.UI.Xaml.IVisualTransitionMethods.set_GeneratedDuration(_objRef_global__Microsoft_UI_Xaml_IVisualTransition, value);
        }

        public global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase GeneratedEasingFunction
        {
            get => global::ABI.Microsoft.UI.Xaml.IVisualTransitionMethods.get_GeneratedEasingFunction(_objRef_global__Microsoft_UI_Xaml_IVisualTransition);
            set => global::ABI.Microsoft.UI.Xaml.IVisualTransitionMethods.set_GeneratedEasingFunction(_objRef_global__Microsoft_UI_Xaml_IVisualTransition, value);
        }

        public global::Microsoft.UI.Xaml.Media.Animation.Storyboard Storyboard
        {
            get => global::ABI.Microsoft.UI.Xaml.IVisualTransitionMethods.get_Storyboard(_objRef_global__Microsoft_UI_Xaml_IVisualTransition);
            set => global::ABI.Microsoft.UI.Xaml.IVisualTransitionMethods.set_Storyboard(_objRef_global__Microsoft_UI_Xaml_IVisualTransition, value);
        }

        public string To
        {
            get => global::ABI.Microsoft.UI.Xaml.IVisualTransitionMethods.get_To(_objRef_global__Microsoft_UI_Xaml_IVisualTransition);
            set => global::ABI.Microsoft.UI.Xaml.IVisualTransitionMethods.set_To(_objRef_global__Microsoft_UI_Xaml_IVisualTransition, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::Windows.Foundation.Metadata.ContractVersion(524288u)]
    public enum WinUIContract
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Window))]
    [global::ABI.Microsoft.UI.Xaml.WindowRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IWindow))]
    [global::Microsoft.UI.Xaml.Markup.ContentProperty(Name = @"Content")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public class Window : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<Window>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IWindow;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IWindow()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IWindow, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IWindowMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IWindow;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IWindow => ___objRef_global__Microsoft_UI_Xaml_IWindow ?? Make___objRef_global__Microsoft_UI_Xaml_IWindow();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IWindow2;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IWindow2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IWindow2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IWindow2Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IWindow2;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IWindow2 => ___objRef_global__Microsoft_UI_Xaml_IWindow2 ?? Make___objRef_global__Microsoft_UI_Xaml_IWindow2();



        private static class _IWindowFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IWindowFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IWindowFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IWindowFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IWindowFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Window", global::ABI.Microsoft.UI.Xaml.IWindowFactoryMethods.IID);
                }
            }
        }

        public Window()
        {
            bool isAggregation = this.GetType() != typeof(Window);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IWindowFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_IWindowFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.IWindowMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Window").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IWindowStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IWindowStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IWindowStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IWindowStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Window", global::ABI.Microsoft.UI.Xaml.IWindowStaticsMethods.IID);
                }
            }
        }

        public static Window Current => global::ABI.Microsoft.UI.Xaml.IWindowStaticsMethods.get_Current(_objRef_global__Microsoft_UI_Xaml_IWindowStatics);

        public static Window FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<Window>.FromAbi(thisPtr);
        }

        protected internal Window(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IWindowMethods.IID);

        }


        public static bool operator ==(Window x, Window y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(Window x, Window y) => !(x == y);
        public bool Equals(Window other) => this == other;
        public override bool Equals(object obj) => obj is Window that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected Window(global::WinRT.DerivedComposed _)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(Window);
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void Activate() => global::ABI.Microsoft.UI.Xaml.IWindowMethods.Activate(_objRef_global__Microsoft_UI_Xaml_IWindow);

        public void Close() => global::ABI.Microsoft.UI.Xaml.IWindowMethods.Close(_objRef_global__Microsoft_UI_Xaml_IWindow);

        public void SetTitleBar(UIElement titleBar) => global::ABI.Microsoft.UI.Xaml.IWindowMethods.SetTitleBar(_objRef_global__Microsoft_UI_Xaml_IWindow, titleBar);

        public event global::Windows.Foundation.TypedEventHandler<object, WindowActivatedEventArgs> Activated
        {
            add => global::ABI.Microsoft.UI.Xaml.IWindowMethods.Get_Activated2(_objRef_global__Microsoft_UI_Xaml_IWindow, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IWindowMethods.Get_Activated2(_objRef_global__Microsoft_UI_Xaml_IWindow, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<object, WindowEventArgs> Closed
        {
            add => global::ABI.Microsoft.UI.Xaml.IWindowMethods.Get_Closed2(_objRef_global__Microsoft_UI_Xaml_IWindow, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IWindowMethods.Get_Closed2(_objRef_global__Microsoft_UI_Xaml_IWindow, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<object, WindowSizeChangedEventArgs> SizeChanged
        {
            add => global::ABI.Microsoft.UI.Xaml.IWindowMethods.Get_SizeChanged2(_objRef_global__Microsoft_UI_Xaml_IWindow, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IWindowMethods.Get_SizeChanged2(_objRef_global__Microsoft_UI_Xaml_IWindow, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<object, WindowVisibilityChangedEventArgs> VisibilityChanged
        {
            add => global::ABI.Microsoft.UI.Xaml.IWindowMethods.Get_VisibilityChanged2(_objRef_global__Microsoft_UI_Xaml_IWindow, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IWindowMethods.Get_VisibilityChanged2(_objRef_global__Microsoft_UI_Xaml_IWindow, (IWinRTObject)this).Unsubscribe(value);
        }

        public global::Microsoft.UI.Windowing.AppWindow AppWindow => global::ABI.Microsoft.UI.Xaml.IWindow2Methods.get_AppWindow(_objRef_global__Microsoft_UI_Xaml_IWindow2);

        public global::Windows.Foundation.Rect Bounds => global::ABI.Microsoft.UI.Xaml.IWindowMethods.get_Bounds(_objRef_global__Microsoft_UI_Xaml_IWindow);

        public global::Microsoft.UI.Composition.Compositor Compositor => global::ABI.Microsoft.UI.Xaml.IWindowMethods.get_Compositor(_objRef_global__Microsoft_UI_Xaml_IWindow);

        public UIElement Content
        {
            get => global::ABI.Microsoft.UI.Xaml.IWindowMethods.get_Content(_objRef_global__Microsoft_UI_Xaml_IWindow);
            set => global::ABI.Microsoft.UI.Xaml.IWindowMethods.set_Content(_objRef_global__Microsoft_UI_Xaml_IWindow, value);
        }

        public global::Windows.UI.Core.CoreWindow CoreWindow => global::ABI.Microsoft.UI.Xaml.IWindowMethods.get_CoreWindow(_objRef_global__Microsoft_UI_Xaml_IWindow);

        public global::Windows.UI.Core.CoreDispatcher Dispatcher => global::ABI.Microsoft.UI.Xaml.IWindowMethods.get_Dispatcher(_objRef_global__Microsoft_UI_Xaml_IWindow);

        public global::Microsoft.UI.Dispatching.DispatcherQueue DispatcherQueue => global::ABI.Microsoft.UI.Xaml.IWindowMethods.get_DispatcherQueue(_objRef_global__Microsoft_UI_Xaml_IWindow);

        public bool ExtendsContentIntoTitleBar
        {
            get => global::ABI.Microsoft.UI.Xaml.IWindowMethods.get_ExtendsContentIntoTitleBar(_objRef_global__Microsoft_UI_Xaml_IWindow);
            set => global::ABI.Microsoft.UI.Xaml.IWindowMethods.set_ExtendsContentIntoTitleBar(_objRef_global__Microsoft_UI_Xaml_IWindow, value);
        }

        public global::Microsoft.UI.Xaml.Media.SystemBackdrop SystemBackdrop
        {
            get => global::ABI.Microsoft.UI.Xaml.IWindow2Methods.get_SystemBackdrop(_objRef_global__Microsoft_UI_Xaml_IWindow2);
            set => global::ABI.Microsoft.UI.Xaml.IWindow2Methods.set_SystemBackdrop(_objRef_global__Microsoft_UI_Xaml_IWindow2, value);
        }

        public string Title
        {
            get => global::ABI.Microsoft.UI.Xaml.IWindowMethods.get_Title(_objRef_global__Microsoft_UI_Xaml_IWindow);
            set => global::ABI.Microsoft.UI.Xaml.IWindowMethods.set_Title(_objRef_global__Microsoft_UI_Xaml_IWindow, value);
        }

        public bool Visible => global::ABI.Microsoft.UI.Xaml.IWindowMethods.get_Visible(_objRef_global__Microsoft_UI_Xaml_IWindow);

        protected virtual bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.WindowActivatedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.WindowActivatedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IWindowActivatedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class WindowActivatedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<WindowActivatedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IWindowActivatedEventArgs => _inner;


        public static WindowActivatedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<WindowActivatedEventArgs>.FromAbi(thisPtr);
        }

        internal WindowActivatedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IWindowActivatedEventArgsMethods.IID);

        }


        public static bool operator ==(WindowActivatedEventArgs x, WindowActivatedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(WindowActivatedEventArgs x, WindowActivatedEventArgs y) => !(x == y);
        public bool Equals(WindowActivatedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is WindowActivatedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Xaml.IWindowActivatedEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Xaml_IWindowActivatedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.IWindowActivatedEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Xaml_IWindowActivatedEventArgs, value);
        }

        public WindowActivationState WindowActivationState => global::ABI.Microsoft.UI.Xaml.IWindowActivatedEventArgsMethods.get_WindowActivationState(_objRef_global__Microsoft_UI_Xaml_IWindowActivatedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<WindowActivationState>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public enum WindowActivationState : int
    {
        CodeActivated = unchecked((int)0),
        Deactivated = unchecked((int)0x1),
        PointerActivated = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.WindowEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.WindowEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IWindowEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class WindowEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<WindowEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IWindowEventArgs => _inner;


        public static WindowEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<WindowEventArgs>.FromAbi(thisPtr);
        }

        internal WindowEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IWindowEventArgsMethods.IID);

        }


        public static bool operator ==(WindowEventArgs x, WindowEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(WindowEventArgs x, WindowEventArgs y) => !(x == y);
        public bool Equals(WindowEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is WindowEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Xaml.IWindowEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Xaml_IWindowEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.IWindowEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Xaml_IWindowEventArgs, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.WindowSizeChangedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.WindowSizeChangedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IWindowSizeChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class WindowSizeChangedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<WindowSizeChangedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IWindowSizeChangedEventArgs => _inner;


        public static WindowSizeChangedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<WindowSizeChangedEventArgs>.FromAbi(thisPtr);
        }

        internal WindowSizeChangedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IWindowSizeChangedEventArgsMethods.IID);

        }


        public static bool operator ==(WindowSizeChangedEventArgs x, WindowSizeChangedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(WindowSizeChangedEventArgs x, WindowSizeChangedEventArgs y) => !(x == y);
        public bool Equals(WindowSizeChangedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is WindowSizeChangedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Xaml.IWindowSizeChangedEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Xaml_IWindowSizeChangedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.IWindowSizeChangedEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Xaml_IWindowSizeChangedEventArgs, value);
        }

        public global::Windows.Foundation.Size Size => global::ABI.Microsoft.UI.Xaml.IWindowSizeChangedEventArgsMethods.get_Size(_objRef_global__Microsoft_UI_Xaml_IWindowSizeChangedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.WindowVisibilityChangedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IWindowVisibilityChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class WindowVisibilityChangedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<WindowVisibilityChangedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IWindowVisibilityChangedEventArgs => _inner;


        public static WindowVisibilityChangedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<WindowVisibilityChangedEventArgs>.FromAbi(thisPtr);
        }

        internal WindowVisibilityChangedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IWindowVisibilityChangedEventArgsMethods.IID);

        }


        public static bool operator ==(WindowVisibilityChangedEventArgs x, WindowVisibilityChangedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(WindowVisibilityChangedEventArgs x, WindowVisibilityChangedEventArgs y) => !(x == y);
        public bool Equals(WindowVisibilityChangedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is WindowVisibilityChangedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Xaml.IWindowVisibilityChangedEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Xaml_IWindowVisibilityChangedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.IWindowVisibilityChangedEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Xaml_IWindowVisibilityChangedEventArgs, value);
        }

        public bool Visible => global::ABI.Microsoft.UI.Xaml.IWindowVisibilityChangedEventArgsMethods.get_Visible(_objRef_global__Microsoft_UI_Xaml_IWindowVisibilityChangedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::Windows.Foundation.Metadata.ContractVersion(524288u)]
    public enum XamlContract
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.XamlIsland))]
    [global::ABI.Microsoft.UI.Xaml.XamlIslandRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IXamlIsland))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 524288u)]
    public class XamlIsland : global::System.IDisposable, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<XamlIsland>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IXamlIsland;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IXamlIsland()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IXamlIsland, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IXamlIslandMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IXamlIsland;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IXamlIsland => ___objRef_global__Microsoft_UI_Xaml_IXamlIsland ?? Make___objRef_global__Microsoft_UI_Xaml_IXamlIsland();

        private volatile IObjectReference ___objRef_global__System_IDisposable;
        private IObjectReference Make___objRef_global__System_IDisposable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_IDisposable, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.IDisposableMethods.IID), null);
            return ___objRef_global__System_IDisposable;
        }
        private IObjectReference _objRef_global__System_IDisposable => ___objRef_global__System_IDisposable ?? Make___objRef_global__System_IDisposable();



        private static class _IXamlIslandFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IXamlIslandFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_IXamlIslandFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_IXamlIslandFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_IXamlIslandFactory = ActivationFactory.Get("Microsoft.UI.Xaml.XamlIsland", global::ABI.Microsoft.UI.Xaml.IXamlIslandFactoryMethods.IID);
                }
            }
        }

        public XamlIsland()
        {
            bool isAggregation = this.GetType() != typeof(XamlIsland);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IXamlIslandFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_IXamlIslandFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.IXamlIslandMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static XamlIsland FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<XamlIsland>.FromAbi(thisPtr);
        }

        protected internal XamlIsland(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IXamlIslandMethods.IID);

        }


        public static bool operator ==(XamlIsland x, XamlIsland y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(XamlIsland x, XamlIsland y) => !(x == y);
        public bool Equals(XamlIsland other) => this == other;
        public override bool Equals(object obj) => obj is XamlIsland that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected XamlIsland(global::WinRT.DerivedComposed _)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(XamlIsland);
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void Dispose() => global::ABI.System.IDisposableMethods.Dispose(_objRef_global__System_IDisposable);

        public UIElement Content
        {
            get => global::ABI.Microsoft.UI.Xaml.IXamlIslandMethods.get_Content(_objRef_global__Microsoft_UI_Xaml_IXamlIsland);
            set => global::ABI.Microsoft.UI.Xaml.IXamlIslandMethods.set_Content(_objRef_global__Microsoft_UI_Xaml_IXamlIsland, value);
        }

        public global::Microsoft.UI.Content.ContentIsland ContentIsland => global::ABI.Microsoft.UI.Xaml.IXamlIslandMethods.get_ContentIsland(_objRef_global__Microsoft_UI_Xaml_IXamlIsland);

        public global::Microsoft.UI.Xaml.Media.SystemBackdrop SystemBackdrop
        {
            get => global::ABI.Microsoft.UI.Xaml.IXamlIslandMethods.get_SystemBackdrop(_objRef_global__Microsoft_UI_Xaml_IXamlIsland);
            set => global::ABI.Microsoft.UI.Xaml.IXamlIslandMethods.set_SystemBackdrop(_objRef_global__Microsoft_UI_Xaml_IXamlIsland, value);
        }

        protected virtual bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IXamlResourceReferenceFailedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 262144u)]
    public sealed class XamlResourceReferenceFailedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<XamlResourceReferenceFailedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IXamlResourceReferenceFailedEventArgs => _inner;


        public static XamlResourceReferenceFailedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<XamlResourceReferenceFailedEventArgs>.FromAbi(thisPtr);
        }

        internal XamlResourceReferenceFailedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IXamlResourceReferenceFailedEventArgsMethods.IID);

        }


        public static bool operator ==(XamlResourceReferenceFailedEventArgs x, XamlResourceReferenceFailedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(XamlResourceReferenceFailedEventArgs x, XamlResourceReferenceFailedEventArgs y) => !(x == y);
        public bool Equals(XamlResourceReferenceFailedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is XamlResourceReferenceFailedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public string Message => global::ABI.Microsoft.UI.Xaml.IXamlResourceReferenceFailedEventArgsMethods.get_Message(_objRef_global__Microsoft_UI_Xaml_IXamlResourceReferenceFailedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.XamlRoot))]
    [global::ABI.Microsoft.UI.Xaml.XamlRootRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IXamlRoot))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class XamlRoot : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<XamlRoot>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IXamlRoot => _inner;
        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IXamlRoot2;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IXamlRoot2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IXamlRoot2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IXamlRoot2Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IXamlRoot2;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IXamlRoot2 => ___objRef_global__Microsoft_UI_Xaml_IXamlRoot2 ?? Make___objRef_global__Microsoft_UI_Xaml_IXamlRoot2();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IXamlRoot3;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IXamlRoot3()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IXamlRoot3, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IXamlRoot3Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IXamlRoot3;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IXamlRoot3 => ___objRef_global__Microsoft_UI_Xaml_IXamlRoot3 ?? Make___objRef_global__Microsoft_UI_Xaml_IXamlRoot3();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_IXamlRoot4;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_IXamlRoot4()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_IXamlRoot4, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.IXamlRoot4Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_IXamlRoot4;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IXamlRoot4 => ___objRef_global__Microsoft_UI_Xaml_IXamlRoot4 ?? Make___objRef_global__Microsoft_UI_Xaml_IXamlRoot4();



        public static XamlRoot FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<XamlRoot>.FromAbi(thisPtr);
        }

        internal XamlRoot(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IXamlRootMethods.IID);

        }


        public static bool operator ==(XamlRoot x, XamlRoot y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(XamlRoot x, XamlRoot y) => !(x == y);
        public bool Equals(XamlRoot other) => this == other;
        public override bool Equals(object obj) => obj is XamlRoot that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public event global::Windows.Foundation.TypedEventHandler<XamlRoot, XamlRootChangedEventArgs> Changed
        {
            add => global::ABI.Microsoft.UI.Xaml.IXamlRootMethods.Get_Changed2(_objRef_global__Microsoft_UI_Xaml_IXamlRoot, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.IXamlRootMethods.Get_Changed2(_objRef_global__Microsoft_UI_Xaml_IXamlRoot, (IWinRTObject)this).Unsubscribe(value);
        }

        public UIElement Content => global::ABI.Microsoft.UI.Xaml.IXamlRootMethods.get_Content(_objRef_global__Microsoft_UI_Xaml_IXamlRoot);

        public global::Microsoft.UI.Content.ContentIsland ContentIsland => global::ABI.Microsoft.UI.Xaml.IXamlRoot4Methods.get_ContentIsland(_objRef_global__Microsoft_UI_Xaml_IXamlRoot4);

        public global::Microsoft.UI.Content.ContentIslandEnvironment ContentIslandEnvironment => global::ABI.Microsoft.UI.Xaml.IXamlRoot2Methods.get_ContentIslandEnvironment(_objRef_global__Microsoft_UI_Xaml_IXamlRoot2);

        public global::Microsoft.UI.Content.ContentCoordinateConverter CoordinateConverter => global::ABI.Microsoft.UI.Xaml.IXamlRoot3Methods.get_CoordinateConverter(_objRef_global__Microsoft_UI_Xaml_IXamlRoot3);

        public bool IsHostVisible => global::ABI.Microsoft.UI.Xaml.IXamlRootMethods.get_IsHostVisible(_objRef_global__Microsoft_UI_Xaml_IXamlRoot);

        public double RasterizationScale => global::ABI.Microsoft.UI.Xaml.IXamlRootMethods.get_RasterizationScale(_objRef_global__Microsoft_UI_Xaml_IXamlRoot);

        public global::Windows.Foundation.Size Size => global::ABI.Microsoft.UI.Xaml.IXamlRootMethods.get_Size(_objRef_global__Microsoft_UI_Xaml_IXamlRoot);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.XamlRootChangedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.XamlRootChangedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IXamlRootChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(WinUIContract), 65536u)]
    public sealed class XamlRootChangedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<XamlRootChangedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_IXamlRootChangedEventArgs => _inner;


        public static XamlRootChangedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<XamlRootChangedEventArgs>.FromAbi(thisPtr);
        }

        internal XamlRootChangedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.IXamlRootChangedEventArgsMethods.IID);

        }


        public static bool operator ==(XamlRootChangedEventArgs x, XamlRootChangedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(XamlRootChangedEventArgs x, XamlRootChangedEventArgs y) => !(x == y);
        public bool Equals(XamlRootChangedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is XamlRootChangedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.UI.Xaml
{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct AdaptiveTrigger
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.AdaptiveTrigger obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.AdaptiveTrigger>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IAdaptiveTriggerMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.AdaptiveTrigger obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IAdaptiveTriggerMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.AdaptiveTrigger FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.AdaptiveTrigger.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.AdaptiveTrigger obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.AdaptiveTrigger>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.AdaptiveTrigger[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.AdaptiveTrigger>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.AdaptiveTrigger>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.AdaptiveTrigger[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.AdaptiveTrigger>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.AdaptiveTrigger[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.AdaptiveTrigger>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.AdaptiveTrigger[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.AdaptiveTrigger>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.AdaptiveTrigger>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.AdaptiveTrigger>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class AdaptiveTriggerRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.AdaptiveTrigger(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct Application
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Application obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Application>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IApplicationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Application obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IApplicationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Application FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Application.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Application obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Application>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Application[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Application>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Application>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Application[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Application>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Application[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Application>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Application[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Application>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Application>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Application>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ApplicationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Application(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("D8EEF1C9-1234-56F1-9963-45DD9C80A661")]
    public static class ApplicationInitializationCallback
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC9, 0xF1, 0xEE, 0xD8, 0x34, 0x12, 0xF1, 0x56, 0x99, 0x63, 0x45, 0xDD, 0x9C, 0x80, 0xA6, 0x61 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe ApplicationInitializationCallback()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(ApplicationInitializationCallback), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.ApplicationInitializationCallback), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.ApplicationInitializationCallback managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.ApplicationInitializationCallback managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ApplicationInitializationCallback>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.ApplicationInitializationCallback FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.ApplicationInitializationCallback>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.ApplicationInitializationCallback CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.ApplicationInitializationCallback(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(global::Microsoft.UI.Xaml.ApplicationInitializationCallbackParams p)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __p = default;
                try
                {
                    __p = global::ABI.Microsoft.UI.Xaml.ApplicationInitializationCallbackParams.CreateMarshaler2(p);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__p)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__p);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.ApplicationInitializationCallback managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ApplicationInitializationCallback>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ApplicationInitializationCallback>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ApplicationInitializationCallback>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.ApplicationInitializationCallback[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ApplicationInitializationCallback>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ApplicationInitializationCallback>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.ApplicationInitializationCallback[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ApplicationInitializationCallback>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.ApplicationInitializationCallback[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ApplicationInitializationCallback>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.ApplicationInitializationCallback[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ApplicationInitializationCallback>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ApplicationInitializationCallback>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ApplicationInitializationCallback>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr p)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.ApplicationInitializationCallback>(thisPtr).Invoke(global::ABI.Microsoft.UI.Xaml.ApplicationInitializationCallbackParams.FromAbi(p))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class ApplicationInitializationCallbackWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.ApplicationInitializationCallback>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = ApplicationInitializationCallback.IID,
                Vtable = ApplicationInitializationCallback.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ApplicationInitializationCallbackParams
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.ApplicationInitializationCallbackParams obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.ApplicationInitializationCallbackParams>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IApplicationInitializationCallbackParamsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.ApplicationInitializationCallbackParams obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IApplicationInitializationCallbackParamsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.ApplicationInitializationCallbackParams FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.ApplicationInitializationCallbackParams.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.ApplicationInitializationCallbackParams obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ApplicationInitializationCallbackParams>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.ApplicationInitializationCallbackParams[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ApplicationInitializationCallbackParams>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ApplicationInitializationCallbackParams>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.ApplicationInitializationCallbackParams[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ApplicationInitializationCallbackParams>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.ApplicationInitializationCallbackParams[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ApplicationInitializationCallbackParams>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.ApplicationInitializationCallbackParams[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ApplicationInitializationCallbackParams>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ApplicationInitializationCallbackParams>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ApplicationInitializationCallbackParams>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ApplicationInitializationCallbackParamsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.ApplicationInitializationCallbackParams(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct BindingFailedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.BindingFailedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.BindingFailedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IBindingFailedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.BindingFailedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IBindingFailedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.BindingFailedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.BindingFailedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.BindingFailedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BindingFailedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.BindingFailedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BindingFailedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BindingFailedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.BindingFailedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BindingFailedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.BindingFailedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BindingFailedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.BindingFailedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BindingFailedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BindingFailedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BindingFailedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class BindingFailedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.BindingFailedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("A3160AB0-A8A9-5F38-AF17-5CD91A2B33F5")]
    public static class BindingFailedEventHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB0, 0xA, 0x16, 0xA3, 0xA9, 0xA8, 0x38, 0x5F, 0xAF, 0x17, 0x5C, 0xD9, 0x1A, 0x2B, 0x33, 0xF5 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe BindingFailedEventHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(BindingFailedEventHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.BindingFailedEventHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.BindingFailedEventHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.BindingFailedEventHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BindingFailedEventHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.BindingFailedEventHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.BindingFailedEventHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.BindingFailedEventHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.BindingFailedEventHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(object sender, global::Microsoft.UI.Xaml.BindingFailedEventArgs e)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __sender = default;
                ObjectReferenceValue __e = default;
                try
                {
                    __sender = MarshalInspectable<object>.CreateMarshaler2(sender);
                    __e = global::ABI.Microsoft.UI.Xaml.BindingFailedEventArgs.CreateMarshaler2(e);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__sender), MarshalInspectable<object>.GetAbi(__e)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__sender);
                    MarshalInspectable<object>.DisposeMarshaler(__e);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.BindingFailedEventHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BindingFailedEventHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BindingFailedEventHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BindingFailedEventHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.BindingFailedEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BindingFailedEventHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BindingFailedEventHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.BindingFailedEventHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BindingFailedEventHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.BindingFailedEventHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BindingFailedEventHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.BindingFailedEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BindingFailedEventHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BindingFailedEventHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BindingFailedEventHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr e)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.BindingFailedEventHandler>(thisPtr).Invoke(MarshalInspectable<object>.FromAbi(sender), global::ABI.Microsoft.UI.Xaml.BindingFailedEventArgs.FromAbi(e))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class BindingFailedEventHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.BindingFailedEventHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = BindingFailedEventHandler.IID,
                Vtable = BindingFailedEventHandler.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct BringIntoViewOptions
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.BringIntoViewOptions obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.BringIntoViewOptions>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IBringIntoViewOptionsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.BringIntoViewOptions obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IBringIntoViewOptionsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.BringIntoViewOptions FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.BringIntoViewOptions.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.BringIntoViewOptions obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BringIntoViewOptions>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.BringIntoViewOptions[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BringIntoViewOptions>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BringIntoViewOptions>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.BringIntoViewOptions[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BringIntoViewOptions>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.BringIntoViewOptions[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BringIntoViewOptions>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.BringIntoViewOptions[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BringIntoViewOptions>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BringIntoViewOptions>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BringIntoViewOptions>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class BringIntoViewOptionsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.BringIntoViewOptions(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct BringIntoViewRequestedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IBringIntoViewRequestedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IBringIntoViewRequestedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class BringIntoViewRequestedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct BrushTransition
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.BrushTransition obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.BrushTransition>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IBrushTransitionMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.BrushTransition obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IBrushTransitionMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.BrushTransition FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.BrushTransition.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.BrushTransition obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BrushTransition>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.BrushTransition[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BrushTransition>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BrushTransition>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.BrushTransition[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BrushTransition>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.BrushTransition[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BrushTransition>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.BrushTransition[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BrushTransition>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BrushTransition>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.BrushTransition>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class BrushTransitionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.BrushTransition(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ColorPaletteResources
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.ColorPaletteResources obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.ColorPaletteResources>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.ColorPaletteResources obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IColorPaletteResourcesMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.ColorPaletteResources FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.ColorPaletteResources.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.ColorPaletteResources obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ColorPaletteResources>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.ColorPaletteResources[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ColorPaletteResources>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ColorPaletteResources>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.ColorPaletteResources[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ColorPaletteResources>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.ColorPaletteResources[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ColorPaletteResources>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.ColorPaletteResources[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ColorPaletteResources>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ColorPaletteResources>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ColorPaletteResources>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ColorPaletteResourcesRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.ColorPaletteResources(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("7F808C05-2AC4-5AD9-AC8A-26890333D81E")]
    public static class CreateDefaultValueCallback
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x5, 0x8C, 0x80, 0x7F, 0xC4, 0x2A, 0xD9, 0x5A, 0xAC, 0x8A, 0x26, 0x89, 0x3, 0x33, 0xD8, 0x1E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe CreateDefaultValueCallback()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(CreateDefaultValueCallback), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.CreateDefaultValueCallback), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.CreateDefaultValueCallback managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.CreateDefaultValueCallback managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.CreateDefaultValueCallback>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.CreateDefaultValueCallback FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.CreateDefaultValueCallback>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.CreateDefaultValueCallback CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.CreateDefaultValueCallback(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe object Invoke()
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, &__retval));
                    global::System.GC.KeepAlive(_nativeDelegate);
                    return MarshalInspectable<object>.FromAbi(__retval);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeAbi(__retval);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.CreateDefaultValueCallback managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.CreateDefaultValueCallback>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.CreateDefaultValueCallback>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.CreateDefaultValueCallback>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.CreateDefaultValueCallback[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.CreateDefaultValueCallback>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.CreateDefaultValueCallback>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.CreateDefaultValueCallback[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.CreateDefaultValueCallback>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.CreateDefaultValueCallback[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.CreateDefaultValueCallback>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.CreateDefaultValueCallback[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.CreateDefaultValueCallback>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.CreateDefaultValueCallback>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.CreateDefaultValueCallback>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr* result)
        {

            object __result = default;

            *result = default;

            try
            {
                __result = 
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.CreateDefaultValueCallback>(thisPtr).Invoke()
                ;
                *result = MarshalInspectable<object>.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class CreateDefaultValueCallbackWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.CreateDefaultValueCallback>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = CreateDefaultValueCallback.IID,
                Vtable = CreateDefaultValueCallback.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DataContextChangedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.DataContextChangedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.DataContextChangedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IDataContextChangedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.DataContextChangedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IDataContextChangedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.DataContextChangedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.DataContextChangedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.DataContextChangedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DataContextChangedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.DataContextChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DataContextChangedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DataContextChangedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.DataContextChangedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DataContextChangedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.DataContextChangedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DataContextChangedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.DataContextChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DataContextChangedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DataContextChangedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DataContextChangedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DataContextChangedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.DataContextChangedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DataTemplate
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.DataTemplate obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.DataTemplate>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IDataTemplateMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.DataTemplate obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IDataTemplateMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.DataTemplate FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.DataTemplate.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.DataTemplate obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DataTemplate>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.DataTemplate[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DataTemplate>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DataTemplate>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.DataTemplate[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DataTemplate>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.DataTemplate[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DataTemplate>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.DataTemplate[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DataTemplate>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DataTemplate>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DataTemplate>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DataTemplateRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.DataTemplate(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DataTemplateKey
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.DataTemplateKey obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.DataTemplateKey>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IDataTemplateKeyMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.DataTemplateKey obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IDataTemplateKeyMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.DataTemplateKey FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.DataTemplateKey.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.DataTemplateKey obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DataTemplateKey>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.DataTemplateKey[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DataTemplateKey>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DataTemplateKey>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.DataTemplateKey[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DataTemplateKey>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.DataTemplateKey[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DataTemplateKey>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.DataTemplateKey[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DataTemplateKey>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DataTemplateKey>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DataTemplateKey>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DataTemplateKeyRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.DataTemplateKey(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DebugSettings
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.DebugSettings obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.DebugSettings>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IDebugSettingsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.DebugSettings obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IDebugSettingsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.DebugSettings FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.DebugSettings.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.DebugSettings obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DebugSettings>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.DebugSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DebugSettings>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DebugSettings>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.DebugSettings[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DebugSettings>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.DebugSettings[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DebugSettings>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.DebugSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DebugSettings>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DebugSettings>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DebugSettings>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DebugSettingsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.DebugSettings(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DependencyObject
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.DependencyObject obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.DependencyObject>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IDependencyObjectMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.DependencyObject obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IDependencyObjectMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.DependencyObject FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.DependencyObject.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.DependencyObject obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyObject>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.DependencyObject[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyObject>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyObject>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.DependencyObject[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyObject>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.DependencyObject[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyObject>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.DependencyObject[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyObject>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyObject>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyObject>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DependencyObjectRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.DependencyObject(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DependencyObjectCollection
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.DependencyObjectCollection obj) => obj is null ? null : MarshalInterface<global::Windows.Foundation.Collections.IObservableVector<global::Microsoft.UI.Xaml.DependencyObject>>.CreateMarshaler(obj);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.DependencyObjectCollection obj) => MarshalInterface<global::Windows.Foundation.Collections.IObservableVector<global::Microsoft.UI.Xaml.DependencyObject>>.CreateMarshaler2(obj, global::ABI.Windows.Foundation.Collections.IObservableVectorMethods<global::Microsoft.UI.Xaml.DependencyObject>.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.DependencyObjectCollection FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.DependencyObjectCollection.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.DependencyObjectCollection obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyObjectCollection>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.DependencyObjectCollection[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyObjectCollection>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyObjectCollection>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.DependencyObjectCollection[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyObjectCollection>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.DependencyObjectCollection[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyObjectCollection>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.DependencyObjectCollection[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyObjectCollection>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyObjectCollection>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyObjectCollection>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DependencyObjectCollectionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.DependencyObjectCollection(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DependencyProperty
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.DependencyProperty obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.DependencyProperty>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IDependencyPropertyMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.DependencyProperty obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IDependencyPropertyMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.DependencyProperty FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.DependencyProperty.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.DependencyProperty obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyProperty>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.DependencyProperty[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyProperty>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyProperty>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.DependencyProperty[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyProperty>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.DependencyProperty[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyProperty>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.DependencyProperty[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyProperty>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyProperty>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyProperty>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DependencyPropertyRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.DependencyProperty(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("F055BB21-219B-5B0C-805D-BCAEDAE15458")]
    public static class DependencyPropertyChangedCallback
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x21, 0xBB, 0x55, 0xF0, 0x9B, 0x21, 0xC, 0x5B, 0x80, 0x5D, 0xBC, 0xAE, 0xDA, 0xE1, 0x54, 0x58 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe DependencyPropertyChangedCallback()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(DependencyPropertyChangedCallback), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.DependencyPropertyChangedCallback), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.DependencyPropertyChangedCallback managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.DependencyPropertyChangedCallback managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyPropertyChangedCallback>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.DependencyPropertyChangedCallback FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.DependencyPropertyChangedCallback>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.DependencyPropertyChangedCallback CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.DependencyPropertyChangedCallback(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(global::Microsoft.UI.Xaml.DependencyObject sender, global::Microsoft.UI.Xaml.DependencyProperty dp)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __sender = default;
                ObjectReferenceValue __dp = default;
                try
                {
                    __sender = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(sender);
                    __dp = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(dp);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__sender), MarshalInspectable<object>.GetAbi(__dp)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__sender);
                    MarshalInspectable<object>.DisposeMarshaler(__dp);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.DependencyPropertyChangedCallback managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyPropertyChangedCallback>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyPropertyChangedCallback>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyPropertyChangedCallback>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.DependencyPropertyChangedCallback[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyPropertyChangedCallback>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyPropertyChangedCallback>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.DependencyPropertyChangedCallback[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyPropertyChangedCallback>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.DependencyPropertyChangedCallback[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyPropertyChangedCallback>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.DependencyPropertyChangedCallback[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyPropertyChangedCallback>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyPropertyChangedCallback>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyPropertyChangedCallback>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr dp)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.DependencyPropertyChangedCallback>(thisPtr).Invoke(global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(sender), global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(dp))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class DependencyPropertyChangedCallbackWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.DependencyPropertyChangedCallback>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = DependencyPropertyChangedCallback.IID,
                Vtable = DependencyPropertyChangedCallback.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DependencyPropertyChangedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IDependencyPropertyChangedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IDependencyPropertyChangedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DependencyPropertyChangedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("4BE8DC75-373D-5F4E-A0B4-54B9EEAFB4A9")]
    public static class DependencyPropertyChangedEventHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x75, 0xDC, 0xE8, 0x4B, 0x3D, 0x37, 0x4E, 0x5F, 0xA0, 0xB4, 0x54, 0xB9, 0xEE, 0xAF, 0xB4, 0xA9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe DependencyPropertyChangedEventHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(DependencyPropertyChangedEventHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(object sender, global::Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs e)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __sender = default;
                ObjectReferenceValue __e = default;
                try
                {
                    __sender = MarshalInspectable<object>.CreateMarshaler2(sender);
                    __e = global::ABI.Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs.CreateMarshaler2(e);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__sender), MarshalInspectable<object>.GetAbi(__e)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__sender);
                    MarshalInspectable<object>.DisposeMarshaler(__e);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr e)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler>(thisPtr).Invoke(MarshalInspectable<object>.FromAbi(sender), global::ABI.Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs.FromAbi(e))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class DependencyPropertyChangedEventHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = DependencyPropertyChangedEventHandler.IID,
                Vtable = DependencyPropertyChangedEventHandler.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DispatcherTimer
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.DispatcherTimer obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.DispatcherTimer>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IDispatcherTimerMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.DispatcherTimer obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IDispatcherTimerMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.DispatcherTimer FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.DispatcherTimer.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.DispatcherTimer obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DispatcherTimer>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.DispatcherTimer[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DispatcherTimer>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DispatcherTimer>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.DispatcherTimer[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DispatcherTimer>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.DispatcherTimer[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DispatcherTimer>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.DispatcherTimer[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DispatcherTimer>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DispatcherTimer>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DispatcherTimer>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DispatcherTimerRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.DispatcherTimer(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DragEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.DragEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.DragEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IDragEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.DragEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IDragEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.DragEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.DragEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.DragEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.DragEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.DragEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.DragEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.DragEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DragEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.DragEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("277AFC83-CB67-56C8-B601-1B9C0F1C3D32")]
    public static class DragEventHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x83, 0xFC, 0x7A, 0x27, 0x67, 0xCB, 0xC8, 0x56, 0xB6, 0x1, 0x1B, 0x9C, 0xF, 0x1C, 0x3D, 0x32 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe DragEventHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(DragEventHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.DragEventHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.DragEventHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.DragEventHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragEventHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.DragEventHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.DragEventHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.DragEventHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.DragEventHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(object sender, global::Microsoft.UI.Xaml.DragEventArgs e)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __sender = default;
                ObjectReferenceValue __e = default;
                try
                {
                    __sender = MarshalInspectable<object>.CreateMarshaler2(sender);
                    __e = global::ABI.Microsoft.UI.Xaml.DragEventArgs.CreateMarshaler2(e);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__sender), MarshalInspectable<object>.GetAbi(__e)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__sender);
                    MarshalInspectable<object>.DisposeMarshaler(__e);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.DragEventHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragEventHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragEventHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragEventHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.DragEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragEventHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragEventHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.DragEventHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragEventHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.DragEventHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragEventHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.DragEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragEventHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragEventHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragEventHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr e)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.DragEventHandler>(thisPtr).Invoke(MarshalInspectable<object>.FromAbi(sender), global::ABI.Microsoft.UI.Xaml.DragEventArgs.FromAbi(e))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class DragEventHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.DragEventHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = DragEventHandler.IID,
                Vtable = DragEventHandler.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DragOperationDeferral
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.DragOperationDeferral obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.DragOperationDeferral>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IDragOperationDeferralMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.DragOperationDeferral obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IDragOperationDeferralMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.DragOperationDeferral FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.DragOperationDeferral.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.DragOperationDeferral obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragOperationDeferral>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.DragOperationDeferral[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragOperationDeferral>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragOperationDeferral>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.DragOperationDeferral[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragOperationDeferral>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.DragOperationDeferral[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragOperationDeferral>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.DragOperationDeferral[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragOperationDeferral>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragOperationDeferral>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragOperationDeferral>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DragOperationDeferralRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.DragOperationDeferral(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DragStartingEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.DragStartingEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.DragStartingEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IDragStartingEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.DragStartingEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IDragStartingEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.DragStartingEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.DragStartingEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.DragStartingEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragStartingEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.DragStartingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragStartingEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragStartingEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.DragStartingEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragStartingEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.DragStartingEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragStartingEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.DragStartingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragStartingEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragStartingEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragStartingEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DragStartingEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.DragStartingEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DragUI
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.DragUI obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.DragUI>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IDragUIMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.DragUI obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IDragUIMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.DragUI FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.DragUI.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.DragUI obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragUI>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.DragUI[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragUI>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragUI>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.DragUI[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragUI>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.DragUI[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragUI>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.DragUI[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragUI>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragUI>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragUI>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DragUIRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.DragUI(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DragUIOverride
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.DragUIOverride obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.DragUIOverride>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IDragUIOverrideMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.DragUIOverride obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IDragUIOverrideMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.DragUIOverride FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.DragUIOverride.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.DragUIOverride obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragUIOverride>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.DragUIOverride[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragUIOverride>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragUIOverride>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.DragUIOverride[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragUIOverride>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.DragUIOverride[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragUIOverride>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.DragUIOverride[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragUIOverride>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragUIOverride>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DragUIOverride>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DragUIOverrideRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.DragUIOverride(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DropCompletedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.DropCompletedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.DropCompletedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IDropCompletedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.DropCompletedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IDropCompletedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.DropCompletedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.DropCompletedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.DropCompletedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DropCompletedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.DropCompletedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DropCompletedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DropCompletedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.DropCompletedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DropCompletedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.DropCompletedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DropCompletedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.DropCompletedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DropCompletedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DropCompletedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.DropCompletedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DropCompletedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.DropCompletedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct EffectiveViewportChangedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IEffectiveViewportChangedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IEffectiveViewportChangedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class EffectiveViewportChangedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ElementFactoryGetArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.ElementFactoryGetArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.ElementFactoryGetArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IElementFactoryGetArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.ElementFactoryGetArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IElementFactoryGetArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.ElementFactoryGetArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.ElementFactoryGetArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.ElementFactoryGetArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ElementFactoryGetArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.ElementFactoryGetArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ElementFactoryGetArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ElementFactoryGetArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.ElementFactoryGetArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ElementFactoryGetArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.ElementFactoryGetArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ElementFactoryGetArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.ElementFactoryGetArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ElementFactoryGetArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ElementFactoryGetArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ElementFactoryGetArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ElementFactoryGetArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.ElementFactoryGetArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ElementFactoryRecycleArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.ElementFactoryRecycleArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.ElementFactoryRecycleArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IElementFactoryRecycleArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.ElementFactoryRecycleArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IElementFactoryRecycleArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.ElementFactoryRecycleArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.ElementFactoryRecycleArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.ElementFactoryRecycleArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ElementFactoryRecycleArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.ElementFactoryRecycleArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ElementFactoryRecycleArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ElementFactoryRecycleArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.ElementFactoryRecycleArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ElementFactoryRecycleArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.ElementFactoryRecycleArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ElementFactoryRecycleArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.ElementFactoryRecycleArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ElementFactoryRecycleArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ElementFactoryRecycleArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ElementFactoryRecycleArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ElementFactoryRecycleArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.ElementFactoryRecycleArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ElementSoundPlayer
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.ElementSoundPlayer obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.ElementSoundPlayer>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IElementSoundPlayerMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.ElementSoundPlayer obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IElementSoundPlayerMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.ElementSoundPlayer FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.ElementSoundPlayer.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.ElementSoundPlayer obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ElementSoundPlayer>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.ElementSoundPlayer[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ElementSoundPlayer>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ElementSoundPlayer>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.ElementSoundPlayer[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ElementSoundPlayer>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.ElementSoundPlayer[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ElementSoundPlayer>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.ElementSoundPlayer[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ElementSoundPlayer>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ElementSoundPlayer>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ElementSoundPlayer>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ElementSoundPlayerRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.ElementSoundPlayer(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("F9A5148D-8F72-553F-B479-21B68610899D")]
    public static class EnteredBackgroundEventHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x8D, 0x14, 0xA5, 0xF9, 0x72, 0x8F, 0x3F, 0x55, 0xB4, 0x79, 0x21, 0xB6, 0x86, 0x10, 0x89, 0x9D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe EnteredBackgroundEventHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(EnteredBackgroundEventHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.EnteredBackgroundEventHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.EnteredBackgroundEventHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.EnteredBackgroundEventHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.EnteredBackgroundEventHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.EnteredBackgroundEventHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.EnteredBackgroundEventHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.EnteredBackgroundEventHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.EnteredBackgroundEventHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(object sender, global::Windows.ApplicationModel.EnteredBackgroundEventArgs e)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __sender = default;
                ObjectReferenceValue __e = default;
                try
                {
                    __sender = MarshalInspectable<object>.CreateMarshaler2(sender);
                    __e = global::ABI.Windows.ApplicationModel.EnteredBackgroundEventArgs.CreateMarshaler2(e);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__sender), MarshalInspectable<object>.GetAbi(__e)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__sender);
                    MarshalInspectable<object>.DisposeMarshaler(__e);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.EnteredBackgroundEventHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.EnteredBackgroundEventHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.EnteredBackgroundEventHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.EnteredBackgroundEventHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.EnteredBackgroundEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.EnteredBackgroundEventHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.EnteredBackgroundEventHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.EnteredBackgroundEventHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.EnteredBackgroundEventHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.EnteredBackgroundEventHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.EnteredBackgroundEventHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.EnteredBackgroundEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.EnteredBackgroundEventHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.EnteredBackgroundEventHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.EnteredBackgroundEventHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr e)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.EnteredBackgroundEventHandler>(thisPtr).Invoke(MarshalInspectable<object>.FromAbi(sender), global::ABI.Windows.ApplicationModel.EnteredBackgroundEventArgs.FromAbi(e))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class EnteredBackgroundEventHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.EnteredBackgroundEventHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = EnteredBackgroundEventHandler.IID,
                Vtable = EnteredBackgroundEventHandler.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct EventTrigger
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.EventTrigger obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.EventTrigger>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IEventTriggerMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.EventTrigger obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IEventTriggerMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.EventTrigger FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.EventTrigger.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.EventTrigger obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.EventTrigger>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.EventTrigger[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.EventTrigger>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.EventTrigger>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.EventTrigger[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.EventTrigger>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.EventTrigger[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.EventTrigger>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.EventTrigger[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.EventTrigger>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.EventTrigger>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.EventTrigger>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class EventTriggerRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.EventTrigger(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ExceptionRoutedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.ExceptionRoutedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.ExceptionRoutedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IExceptionRoutedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.ExceptionRoutedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IExceptionRoutedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.ExceptionRoutedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.ExceptionRoutedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.ExceptionRoutedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ExceptionRoutedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.ExceptionRoutedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ExceptionRoutedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ExceptionRoutedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.ExceptionRoutedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ExceptionRoutedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.ExceptionRoutedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ExceptionRoutedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.ExceptionRoutedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ExceptionRoutedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ExceptionRoutedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ExceptionRoutedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ExceptionRoutedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.ExceptionRoutedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("45FBB85D-54F9-5A2A-8A38-00A3B7761F96")]
    public static class ExceptionRoutedEventHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x5D, 0xB8, 0xFB, 0x45, 0xF9, 0x54, 0x2A, 0x5A, 0x8A, 0x38, 0x0, 0xA3, 0xB7, 0x76, 0x1F, 0x96 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe ExceptionRoutedEventHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(ExceptionRoutedEventHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.ExceptionRoutedEventHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.ExceptionRoutedEventHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.ExceptionRoutedEventHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ExceptionRoutedEventHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.ExceptionRoutedEventHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.ExceptionRoutedEventHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.ExceptionRoutedEventHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.ExceptionRoutedEventHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(object sender, global::Microsoft.UI.Xaml.ExceptionRoutedEventArgs e)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __sender = default;
                ObjectReferenceValue __e = default;
                try
                {
                    __sender = MarshalInspectable<object>.CreateMarshaler2(sender);
                    __e = global::ABI.Microsoft.UI.Xaml.ExceptionRoutedEventArgs.CreateMarshaler2(e);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__sender), MarshalInspectable<object>.GetAbi(__e)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__sender);
                    MarshalInspectable<object>.DisposeMarshaler(__e);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.ExceptionRoutedEventHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ExceptionRoutedEventHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ExceptionRoutedEventHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ExceptionRoutedEventHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.ExceptionRoutedEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ExceptionRoutedEventHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ExceptionRoutedEventHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.ExceptionRoutedEventHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ExceptionRoutedEventHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.ExceptionRoutedEventHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ExceptionRoutedEventHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.ExceptionRoutedEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ExceptionRoutedEventHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ExceptionRoutedEventHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ExceptionRoutedEventHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr e)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.ExceptionRoutedEventHandler>(thisPtr).Invoke(MarshalInspectable<object>.FromAbi(sender), global::ABI.Microsoft.UI.Xaml.ExceptionRoutedEventArgs.FromAbi(e))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class ExceptionRoutedEventHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.ExceptionRoutedEventHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = ExceptionRoutedEventHandler.IID,
                Vtable = ExceptionRoutedEventHandler.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct FrameworkElement
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.FrameworkElement obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.FrameworkElement>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.FrameworkElement obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IFrameworkElementMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.FrameworkElement FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.FrameworkElement.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.FrameworkElement obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.FrameworkElement>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.FrameworkElement[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.FrameworkElement>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.FrameworkElement>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.FrameworkElement[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.FrameworkElement>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.FrameworkElement[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.FrameworkElement>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.FrameworkElement[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.FrameworkElement>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.FrameworkElement>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.FrameworkElement>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class FrameworkElementRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.FrameworkElement(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct FrameworkTemplate
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.FrameworkTemplate obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.FrameworkTemplate>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IFrameworkTemplateMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.FrameworkTemplate obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IFrameworkTemplateMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.FrameworkTemplate FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.FrameworkTemplate.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.FrameworkTemplate obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.FrameworkTemplate>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.FrameworkTemplate[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.FrameworkTemplate>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.FrameworkTemplate>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.FrameworkTemplate[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.FrameworkTemplate>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.FrameworkTemplate[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.FrameworkTemplate>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.FrameworkTemplate[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.FrameworkTemplate>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.FrameworkTemplate>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.FrameworkTemplate>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class FrameworkTemplateRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.FrameworkTemplate(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct FrameworkView
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.FrameworkView obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.FrameworkView>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IFrameworkViewMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.FrameworkView obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IFrameworkViewMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.FrameworkView FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.FrameworkView.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.FrameworkView obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.FrameworkView>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.FrameworkView[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.FrameworkView>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.FrameworkView>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.FrameworkView[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.FrameworkView>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.FrameworkView[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.FrameworkView>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.FrameworkView[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.FrameworkView>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.FrameworkView>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.FrameworkView>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class FrameworkViewRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.FrameworkView(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct FrameworkViewSource
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.FrameworkViewSource obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.FrameworkViewSource>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IFrameworkViewSourceMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.FrameworkViewSource obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IFrameworkViewSourceMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.FrameworkViewSource FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.FrameworkViewSource.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.FrameworkViewSource obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.FrameworkViewSource>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.FrameworkViewSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.FrameworkViewSource>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.FrameworkViewSource>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.FrameworkViewSource[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.FrameworkViewSource>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.FrameworkViewSource[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.FrameworkViewSource>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.FrameworkViewSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.FrameworkViewSource>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.FrameworkViewSource>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.FrameworkViewSource>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class FrameworkViewSourceRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.FrameworkViewSource(inspectable.ObjRef);
    }
    internal static class IAdaptiveTriggerMethods
    {

        internal static unsafe double get_MinWindowHeight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_MinWindowHeight(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_MinWindowWidth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_MinWindowWidth(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE8, 0x8A, 0xB1, 0xB2, 0xD9, 0x48, 0x1D, 0x5A, 0xA5, 0x55, 0x66, 0x85, 0xDD, 0xD4, 0xDA, 0x80 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B2B18AE8-48D9-5A1D-A555-6685DDD4DA80")]
    internal interface IAdaptiveTrigger : global::Microsoft.UI.Xaml.IAdaptiveTrigger
    {
    }
    internal static class IAdaptiveTriggerFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.AdaptiveTrigger CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.AdaptiveTrigger.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.AdaptiveTrigger.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xBB, 0x60, 0x95, 0x9C, 0x99, 0x40, 0x75, 0x51, 0x92, 0x50, 0x45, 0xA1, 0x5E, 0x75, 0x3D, 0xA8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("9C9560BB-4099-5175-9250-45A15E753DA8")]
    internal interface IAdaptiveTriggerFactory : global::Microsoft.UI.Xaml.IAdaptiveTriggerFactory
    {
    }
    internal static class IAdaptiveTriggerStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_MinWindowHeightProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_MinWindowWidthProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7F, 0x54, 0xA3, 0xE7, 0x77, 0xC0, 0x20, 0x5F, 0xAA, 0xB1, 0xD1, 0x6C, 0x30, 0xD9, 0xD3, 0x7F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E7A3547F-C077-5F20-AAB1-D16C30D9D37F")]
    internal interface IAdaptiveTriggerStatics : global::Microsoft.UI.Xaml.IAdaptiveTriggerStatics
    {
    }
    internal static class IApplicationMethods
    {


        internal static unsafe void Exit(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[17](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }
        internal static unsafe global::Microsoft.UI.Xaml.DebugSettings get_DebugSettings(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DebugSettings.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DebugSettings.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.FocusVisualKind get_FocusVisualKind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.FocusVisualKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.FocusVisualKind*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_FocusVisualKind(IObjectReference _obj, global::Microsoft.UI.Xaml.FocusVisualKind value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.FocusVisualKind, int>**)ThisPtr)[12](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.ApplicationHighContrastAdjustment get_HighContrastAdjustment(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.ApplicationHighContrastAdjustment __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.ApplicationHighContrastAdjustment*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_HighContrastAdjustment(IObjectReference _obj, global::Microsoft.UI.Xaml.ApplicationHighContrastAdjustment value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.ApplicationHighContrastAdjustment, int>**)ThisPtr)[14](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.ApplicationTheme get_RequestedTheme(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.ApplicationTheme __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.ApplicationTheme*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_RequestedTheme(IObjectReference _obj, global::Microsoft.UI.Xaml.ApplicationTheme value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.ApplicationTheme, int>**)ThisPtr)[10](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.ResourceDictionary get_Resources(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.ResourceDictionary.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.ResourceDictionary.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Resources(IObjectReference _obj, global::Microsoft.UI.Xaml.ResourceDictionary value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.ResourceDictionary.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.UnhandledExceptionEventHandler>> _UnhandledException_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.UnhandledExceptionEventHandler>> MakeUnhandledExceptionTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _UnhandledException_, new(), null);
            return _UnhandledException_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.UnhandledExceptionEventHandler>> _UnhandledException => _UnhandledException_ ?? MakeUnhandledExceptionTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.UnhandledExceptionEventHandler> Get_UnhandledException2(IObjectReference _obj, object _thisObj)
        {
            return _UnhandledException.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_UnhandledExceptionEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[15],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[16],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE7, 0xF4, 0xA8, 0x6, 0x46, 0x11, 0xAF, 0x55, 0x82, 0xD, 0xEB, 0xD5, 0x56, 0x43, 0xB0, 0x21 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("06A8F4E7-1146-55AF-820D-EBD55643B021")]
    internal interface IApplication : global::Microsoft.UI.Xaml.IApplication
    {
    }
    internal static class IApplication2Methods
    {


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<object, global::Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs>>> _ResourceManagerRequested_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<object, global::Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs>>> MakeResourceManagerRequestedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ResourceManagerRequested_, new(), null);
            return _ResourceManagerRequested_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<object, global::Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs>>> _ResourceManagerRequested => _ResourceManagerRequested_ ?? MakeResourceManagerRequestedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<object, global::Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs>> Get_ResourceManagerRequested2(IObjectReference _obj, object _thisObj)
        {
            return _ResourceManagerRequested.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_object__global__Microsoft_UI_Xaml_ResourceManagerRequestedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[6],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[7],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x36, 0x6D, 0x9E, 0x46, 0x11, 0x2E, 0x6, 0x5B, 0x9E, 0xA, 0xC5, 0xEE, 0xF0, 0xCF, 0x8F, 0x12 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("469E6D36-2E11-5B06-9E0A-C5EEF0CF8F12")]
    internal interface IApplication2 : global::Microsoft.UI.Xaml.IApplication2
    {
    }
    internal static class IApplication3Methods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DispatcherShutdownMode get_DispatcherShutdownMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.DispatcherShutdownMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.DispatcherShutdownMode*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_DispatcherShutdownMode(IObjectReference _obj, global::Microsoft.UI.Xaml.DispatcherShutdownMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.DispatcherShutdownMode, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x95, 0x15, 0x94, 0xBE, 0xFE, 0x61, 0x36, 0x5B, 0xA3, 0xD3, 0x96, 0x2A, 0x64, 0x7D, 0x7C, 0x6F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("BE941595-61FE-5B36-A3D3-962A647D7C6F")]
    internal interface IApplication3 : global::Microsoft.UI.Xaml.IApplication3
    {
    }
    internal static class IApplicationFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Application CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Application.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Application.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x57, 0x66, 0xD9, 0x9F, 0x94, 0x52, 0x65, 0x5A, 0xA1, 0xDB, 0x4F, 0xEA, 0x14, 0x35, 0x97, 0xDA };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("9FD96657-5294-5A65-A1DB-4FEA143597DA")]
    internal interface IApplicationFactory : global::Microsoft.UI.Xaml.IApplicationFactory
    {
    }
    internal static class IApplicationInitializationCallbackParamsMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xEA, 0x6, 0x19, 0x1B, 0x7B, 0x5B, 0x76, 0x58, 0x81, 0xAB, 0x7C, 0x22, 0x81, 0xAC, 0x3D, 0x20 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("1B1906EA-5B7B-5876-81AB-7C2281AC3D20")]
    internal interface IApplicationInitializationCallbackParams : global::Microsoft.UI.Xaml.IApplicationInitializationCallbackParams
    {
    }
    public static class IApplicationOverridesMethods
    {


        internal static unsafe void OnLaunched(IObjectReference _obj, global::Microsoft.UI.Xaml.LaunchActivatedEventArgs args)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __args = default;
            try
            {
                __args = global::ABI.Microsoft.UI.Xaml.LaunchActivatedEventArgs.CreateMarshaler2(args);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__args)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__args);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xEF, 0x81, 0x3E, 0xA3, 0x65, 0xC6, 0x3B, 0x50, 0x88, 0x27, 0xD2, 0x7E, 0xF1, 0x72, 0xA, 0x6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IApplicationOverrides.AbiToProjectionVftablePtr;

    }

    [Guid("A33E81EF-C665-503B-8827-D27EF1720A06")]
    internal unsafe interface IApplicationOverrides : global::Microsoft.UI.Xaml.IApplicationOverrides
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IApplicationOverrides()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IApplicationOverrides), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_OnLaunched_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_OnLaunched_0(IntPtr thisPtr, IntPtr args)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.IApplicationOverrides>(thisPtr).OnLaunched(global::ABI.Microsoft.UI.Xaml.LaunchActivatedEventArgs.FromAbi(args));

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }

    internal static class IApplicationStaticsMethods
    {


        internal static unsafe void Start(IObjectReference _obj, global::Microsoft.UI.Xaml.ApplicationInitializationCallback callback)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __callback = default;
            try
            {
                __callback = ApplicationInitializationCallback.CreateMarshaler2(callback);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__callback)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__callback);
            }
        }

        internal static unsafe void LoadComponent(IObjectReference _obj, object component, global::System.Uri resourceLocator)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __component = default;
            ObjectReferenceValue __resourceLocator = default;
            try
            {
                __component = MarshalInspectable<object>.CreateMarshaler2(component);
                __resourceLocator = global::ABI.System.Uri.CreateMarshaler2(resourceLocator);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__component), MarshalInspectable<object>.GetAbi(__resourceLocator)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__component);
                MarshalInspectable<object>.DisposeMarshaler(__resourceLocator);
            }
        }

        internal static unsafe void LoadComponent(IObjectReference _obj, object component, global::System.Uri resourceLocator, global::Microsoft.UI.Xaml.Controls.Primitives.ComponentResourceLocation componentResourceLocation)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __component = default;
            ObjectReferenceValue __resourceLocator = default;
            try
            {
                __component = MarshalInspectable<object>.CreateMarshaler2(component);
                __resourceLocator = global::ABI.System.Uri.CreateMarshaler2(resourceLocator);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.ComponentResourceLocation, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__component), MarshalInspectable<object>.GetAbi(__resourceLocator), componentResourceLocation));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__component);
                MarshalInspectable<object>.DisposeMarshaler(__resourceLocator);
            }
        }
        internal static unsafe global::Microsoft.UI.Xaml.Application get_Current(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Application.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Application.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF5, 0x9, 0xD, 0x4E, 0x58, 0x43, 0x2C, 0x51, 0xA9, 0x87, 0x50, 0x3B, 0x52, 0x84, 0x8E, 0x95 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4E0D09F5-4358-512C-A987-503B52848E95")]
    internal interface IApplicationStatics : global::Microsoft.UI.Xaml.IApplicationStatics
    {
    }
    internal static class IBindingFailedEventArgsMethods
    {

        internal static unsafe string get_Message(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF3, 0x50, 0xBF, 0xA7, 0xC0, 0xDB, 0x44, 0x5B, 0xBE, 0x74, 0x56, 0xE8, 0xF8, 0xF, 0xD7, 0x16 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A7BF50F3-DBC0-5B44-BE74-56E8F80FD716")]
    internal interface IBindingFailedEventArgs : global::Microsoft.UI.Xaml.IBindingFailedEventArgs
    {
    }
    internal static class IBringIntoViewOptionsMethods
    {

        internal static unsafe bool get_AnimationDesired(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_AnimationDesired(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_HorizontalAlignmentRatio(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_HorizontalAlignmentRatio(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_HorizontalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_HorizontalOffset(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[15](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::System.Nullable<global::Windows.Foundation.Rect> get_TargetRect(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.Foundation.Rect>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.Foundation.Rect>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_TargetRect(IObjectReference _obj, global::System.Nullable<global::Windows.Foundation.Rect> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.Foundation.Rect>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.Foundation.Rect>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe double get_VerticalAlignmentRatio(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_VerticalAlignmentRatio(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[13](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_VerticalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[16](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_VerticalOffset(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[17](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x47, 0xA4, 0xB4, 0xEE, 0x9E, 0xEB, 0x3, 0x50, 0xA4, 0x79, 0xB9, 0xE3, 0xA8, 0x86, 0xB7, 0x8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("EEB4A447-EB9E-5003-A479-B9E3A886B708")]
    internal interface IBringIntoViewOptions : global::Microsoft.UI.Xaml.IBringIntoViewOptions
    {
    }
    internal static class IBringIntoViewRequestedEventArgsMethods
    {

        internal static unsafe bool get_AnimationDesired(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_AnimationDesired(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[9](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[18](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[19](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_HorizontalAlignmentRatio(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_HorizontalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_HorizontalOffset(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[15](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.UIElement get_TargetElement(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.UIElement.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.UIElement.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_TargetElement(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Windows.Foundation.Rect get_TargetRect(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Rect __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_TargetRect(IObjectReference _obj, global::Windows.Foundation.Rect value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_VerticalAlignmentRatio(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_VerticalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[16](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_VerticalOffset(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[17](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF9, 0xE8, 0x7D, 0x80, 0xDC, 0xB1, 0x63, 0x5A, 0x81, 0x1, 0x5E, 0xE9, 0x66, 0x84, 0x1A, 0x27 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("807DE8F9-B1DC-5A63-8101-5EE966841A27")]
    internal interface IBringIntoViewRequestedEventArgs : global::Microsoft.UI.Xaml.IBringIntoViewRequestedEventArgs
    {
    }
    internal static class IBrushTransitionMethods
    {

        internal static unsafe global::System.TimeSpan get_Duration(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.TimeSpan __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.TimeSpan*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.TimeSpan.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.TimeSpan.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Duration(IObjectReference _obj, global::System.TimeSpan value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.TimeSpan.Marshaler __value = default;
            try
            {
                __value = global::ABI.System.TimeSpan.CreateMarshaler(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.TimeSpan, int>**)ThisPtr)[7](ThisPtr, global::ABI.System.TimeSpan.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                global::ABI.System.TimeSpan.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xBA, 0xA7, 0x96, 0xA9, 0x67, 0x45, 0x63, 0x59, 0xA1, 0x12, 0x76, 0xE3, 0xC0, 0x0, 0x2, 0x4 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A996A7BA-4567-5963-A112-76E3C0000204")]
    internal interface IBrushTransition : global::Microsoft.UI.Xaml.IBrushTransition
    {
    }
    internal static class IBrushTransitionFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.BrushTransition CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.BrushTransition.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.BrushTransition.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x98, 0x59, 0x73, 0x13, 0xB6, 0xC3, 0x24, 0x5C, 0xB4, 0xA, 0x7B, 0x16, 0x6A, 0x6F, 0xFC, 0x2C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("13735998-C3B6-5C24-B40A-7B166A6FFC2C")]
    internal interface IBrushTransitionFactory : global::Microsoft.UI.Xaml.IBrushTransitionFactory
    {
    }
    internal static class IColorPaletteResourcesMethods
    {

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_Accent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[58](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Accent(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[59](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_AltHigh(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_AltHigh(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_AltLow(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_AltLow(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_AltMedium(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_AltMedium(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_AltMediumHigh(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_AltMediumHigh(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[13](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_AltMediumLow(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_AltMediumLow(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[15](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_BaseHigh(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[16](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_BaseHigh(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[17](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_BaseLow(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[18](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_BaseLow(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[19](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_BaseMedium(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[20](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_BaseMedium(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[21](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_BaseMediumHigh(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[22](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_BaseMediumHigh(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[23](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_BaseMediumLow(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[24](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_BaseMediumLow(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[25](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_ChromeAltLow(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[26](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ChromeAltLow(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[27](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_ChromeBlackHigh(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[28](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ChromeBlackHigh(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[29](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_ChromeBlackLow(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[30](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ChromeBlackLow(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[31](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_ChromeBlackMedium(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[34](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ChromeBlackMedium(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[35](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_ChromeBlackMediumLow(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[32](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ChromeBlackMediumLow(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[33](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_ChromeDisabledHigh(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[36](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ChromeDisabledHigh(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[37](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_ChromeDisabledLow(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[38](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ChromeDisabledLow(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[39](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_ChromeGray(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[50](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ChromeGray(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[51](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_ChromeHigh(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[40](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ChromeHigh(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[41](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_ChromeLow(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[42](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ChromeLow(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[43](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_ChromeMedium(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[44](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ChromeMedium(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[45](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_ChromeMediumLow(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[46](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ChromeMediumLow(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[47](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_ChromeWhite(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[48](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ChromeWhite(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[49](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_ErrorText(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[56](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ErrorText(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[57](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_ListLow(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[52](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ListLow(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[53](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_ListMedium(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[54](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ListMedium(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[55](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3C, 0xA0, 0x3, 0x19, 0x50, 0x17, 0xFE, 0x54, 0xA4, 0x34, 0x14, 0xB2, 0x27, 0xCB, 0xE7, 0x1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("1903A03C-1750-54FE-A434-14B227CBE701")]
    internal interface IColorPaletteResources : global::Microsoft.UI.Xaml.IColorPaletteResources
    {
    }
    internal static class IColorPaletteResourcesFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.ColorPaletteResources CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.ColorPaletteResources.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.ColorPaletteResources.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x85, 0xE1, 0xFD, 0x32, 0x44, 0x85, 0xC0, 0x59, 0x9E, 0xA, 0xE6, 0xE0, 0xBA, 0xD9, 0xED, 0xCF };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("32FDE185-8544-59C0-9E0A-E6E0BAD9EDCF")]
    internal interface IColorPaletteResourcesFactory : global::Microsoft.UI.Xaml.IColorPaletteResourcesFactory
    {
    }
    internal static class IDataContextChangedEventArgsMethods
    {

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[8](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe object get_NewValue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF4, 0x80, 0xBE, 0xA1, 0x83, 0xCF, 0x22, 0x50, 0xB1, 0x13, 0x92, 0x33, 0xF1, 0xD4, 0xFA, 0xFA };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A1BE80F4-CF83-5022-B113-9233F1D4FAFA")]
    internal interface IDataContextChangedEventArgs : global::Microsoft.UI.Xaml.IDataContextChangedEventArgs
    {
    }
    internal static class IDataTemplateMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject LoadContent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFA, 0x70, 0xFA, 0x8, 0x75, 0xEE, 0x92, 0x5E, 0xA1, 0x1, 0xF5, 0x2D, 0xE, 0x1E, 0x9F, 0xAB };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("08FA70FA-EE75-5E92-A101-F52D0E1E9FAB")]
    internal interface IDataTemplate : global::Microsoft.UI.Xaml.IDataTemplate
    {
    }
    public static class IDataTemplateExtensionMethods
    {


        public static unsafe void ResetTemplate(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[6](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        public static unsafe bool ProcessBinding(IObjectReference _obj, uint phase)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint, byte*, int>**)ThisPtr)[7](ThisPtr, phase, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        public static unsafe int ProcessBindings(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs arg)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __arg = default;
            int __retval = default;
            try
            {
                __arg = global::ABI.Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs.CreateMarshaler2(arg);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int*, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__arg), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__arg);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC4, 0x63, 0x1E, 0x35, 0xA3, 0x8F, 0xC3, 0x5C, 0xB0, 0x73, 0x7F, 0x84, 0xBA, 0xA6, 0x48, 0x5D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IDataTemplateExtension.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("351E63C4-8FA3-5CC3-B073-7F84BAA6485D")]
    internal unsafe interface IDataTemplateExtension : global::Microsoft.UI.Xaml.IDataTemplateExtension
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IDataTemplateExtension()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IDataTemplateExtension), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 3);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_ResetTemplate_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, uint, byte*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_ProcessBinding_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_ProcessBindings_2;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_ResetTemplate_0(IntPtr thisPtr)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.IDataTemplateExtension>(thisPtr).ResetTemplate();

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_ProcessBinding_1(IntPtr thisPtr, uint phase, byte* result)
        {

            bool __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.IDataTemplateExtension>(thisPtr).ProcessBinding(phase);
                *result = (byte)(__result ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_ProcessBindings_2(IntPtr thisPtr, IntPtr arg, int* result)
        {

            int __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.IDataTemplateExtension>(thisPtr).ProcessBindings(global::ABI.Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs.FromAbi(arg));
                *result = __result;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe void global::Microsoft.UI.Xaml.IDataTemplateExtension.ResetTemplate()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.IDataTemplateExtension).TypeHandle));
            global::ABI.Microsoft.UI.Xaml.IDataTemplateExtensionMethods.ResetTemplate(_obj);
        }

        unsafe bool global::Microsoft.UI.Xaml.IDataTemplateExtension.ProcessBinding(uint phase)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.IDataTemplateExtension).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.IDataTemplateExtensionMethods.ProcessBinding(_obj, phase);
        }

        unsafe int global::Microsoft.UI.Xaml.IDataTemplateExtension.ProcessBindings(global::Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs arg)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.IDataTemplateExtension).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.IDataTemplateExtensionMethods.ProcessBindings(_obj, arg);
        }
    }

    internal static class IDataTemplateFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.DataTemplate CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.DataTemplate.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.DataTemplate.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x9D, 0x24, 0xE8, 0xD8, 0x5B, 0x30, 0xA5, 0x5C, 0xAC, 0xF8, 0x3E, 0x1B, 0xEF, 0xFD, 0x2, 0x19 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D8E8249D-305B-5CA5-ACF8-3E1BEFFD0219")]
    internal interface IDataTemplateFactory : global::Microsoft.UI.Xaml.IDataTemplateFactory
    {
    }
    internal static class IDataTemplateKeyMethods
    {

        internal static unsafe object get_DataType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_DataType(IObjectReference _obj, object value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInspectable<object>.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x95, 0x4A, 0x70, 0x6E, 0x2F, 0x4B, 0xA8, 0x5B, 0xAD, 0xA5, 0x12, 0x61, 0xC8, 0x32, 0xBA, 0xED };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("6E704A95-4B2F-5BA8-ADA5-1261C832BAED")]
    internal interface IDataTemplateKey : global::Microsoft.UI.Xaml.IDataTemplateKey
    {
    }
    internal static class IDataTemplateKeyFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.DataTemplateKey CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.DataTemplateKey.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.DataTemplateKey.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DataTemplateKey CreateInstanceWithType(IObjectReference _obj, object dataType, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dataType = default;
            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __dataType = MarshalInspectable<object>.CreateMarshaler2(dataType);
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__dataType), MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.DataTemplateKey.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dataType);
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.DataTemplateKey.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x4, 0xF6, 0xB2, 0x13, 0xBC, 0xEE, 0xAA, 0x5D, 0x8A, 0x5B, 0x46, 0xC, 0x4F, 0xAB, 0xDE, 0xB7 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("13B2F604-EEBC-5DAA-8A5B-460C4FABDEB7")]
    internal interface IDataTemplateKeyFactory : global::Microsoft.UI.Xaml.IDataTemplateKeyFactory
    {
    }
    internal static class IDataTemplateStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.IDataTemplateExtension GetExtensionInstance(IObjectReference _obj, global::Microsoft.UI.Xaml.FrameworkElement element)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            IntPtr __retval = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.FrameworkElement.CreateMarshaler2(element);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__element), &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Microsoft.UI.Xaml.IDataTemplateExtension>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
                MarshalInterface<global::Microsoft.UI.Xaml.IDataTemplateExtension>.DisposeAbi(__retval);
            }
        }

        internal static unsafe void SetExtensionInstance(IObjectReference _obj, global::Microsoft.UI.Xaml.FrameworkElement element, global::Microsoft.UI.Xaml.IDataTemplateExtension value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            ObjectReferenceValue __value = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.FrameworkElement.CreateMarshaler2(element);
                __value = MarshalInterface<global::Microsoft.UI.Xaml.IDataTemplateExtension>.CreateMarshaler2(value, global::ABI.Microsoft.UI.Xaml.IDataTemplateExtensionMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__element), MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }
        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ExtensionInstanceProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x69, 0xDA, 0x6A, 0xCF, 0xF1, 0x4B, 0x2D, 0x5F, 0x8B, 0xDB, 0x9, 0xEA, 0x1A, 0x26, 0xF9, 0x75 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("CF6ADA69-4BF1-5F2D-8BDB-09EA1A26F975")]
    internal interface IDataTemplateStatics : global::Microsoft.UI.Xaml.IDataTemplateStatics
    {
    }
    internal static class IDebugSettingsMethods
    {

        internal static unsafe bool get_EnableFrameRateCounter(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_EnableFrameRateCounter(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_FailFastOnErrors(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_FailFastOnErrors(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[13](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsBindingTracingEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsBindingTracingEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[9](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsTextPerformanceVisualizationEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsTextPerformanceVisualizationEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[11](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.BindingFailedEventHandler>> _BindingFailed_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.BindingFailedEventHandler>> MakeBindingFailedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _BindingFailed_, new(), null);
            return _BindingFailed_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.BindingFailedEventHandler>> _BindingFailed => _BindingFailed_ ?? MakeBindingFailedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.BindingFailedEventHandler> Get_BindingFailed2(IObjectReference _obj, object _thisObj)
        {
            return _BindingFailed.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_BindingFailedEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[14],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[15],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3B, 0x94, 0x4, 0x40, 0x9, 0x25, 0x76, 0x54, 0xBB, 0xA2, 0x3F, 0xE0, 0x5E, 0xCF, 0x61, 0x5D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4004943B-2509-5476-BBA2-3FE05ECF615D")]
    internal interface IDebugSettings : global::Microsoft.UI.Xaml.IDebugSettings
    {
    }
    internal static class IDebugSettings2Methods
    {

        internal static unsafe bool get_IsXamlResourceReferenceTracingEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsXamlResourceReferenceTracingEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.DebugSettings, global::Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs>>> _XamlResourceReferenceFailed_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.DebugSettings, global::Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs>>> MakeXamlResourceReferenceFailedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _XamlResourceReferenceFailed_, new(), null);
            return _XamlResourceReferenceFailed_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.DebugSettings, global::Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs>>> _XamlResourceReferenceFailed => _XamlResourceReferenceFailed_ ?? MakeXamlResourceReferenceFailedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.DebugSettings, global::Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs>> Get_XamlResourceReferenceFailed2(IObjectReference _obj, object _thisObj)
        {
            return _XamlResourceReferenceFailed.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_DebugSettings__global__Microsoft_UI_Xaml_XamlResourceReferenceFailedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[8],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[9],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x51, 0x6F, 0xFB, 0x6D, 0xF8, 0xD2, 0xC4, 0x59, 0x8B, 0xCA, 0x44, 0x10, 0x92, 0x95, 0x77, 0xD0 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("6DFB6F51-D2F8-59C4-8BCA-4410929577D0")]
    internal interface IDebugSettings2 : global::Microsoft.UI.Xaml.IDebugSettings2
    {
    }
    internal static class IDebugSettings3Methods
    {

        internal static unsafe global::Microsoft.UI.Xaml.LayoutCycleDebugBreakLevel get_LayoutCycleDebugBreakLevel(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.LayoutCycleDebugBreakLevel __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.LayoutCycleDebugBreakLevel*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_LayoutCycleDebugBreakLevel(IObjectReference _obj, global::Microsoft.UI.Xaml.LayoutCycleDebugBreakLevel value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.LayoutCycleDebugBreakLevel, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.LayoutCycleTracingLevel get_LayoutCycleTracingLevel(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.LayoutCycleTracingLevel __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.LayoutCycleTracingLevel*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_LayoutCycleTracingLevel(IObjectReference _obj, global::Microsoft.UI.Xaml.LayoutCycleTracingLevel value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.LayoutCycleTracingLevel, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD5, 0x5B, 0x13, 0x36, 0x17, 0x39, 0x8D, 0x5C, 0xA3, 0xC6, 0x2F, 0xC8, 0x9A, 0x50, 0x3F, 0x26 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("36135BD5-3917-5C8D-A3C6-2FC89A503F26")]
    internal interface IDebugSettings3 : global::Microsoft.UI.Xaml.IDebugSettings3
    {
    }
    internal static class IDependencyObjectMethods
    {


        internal static unsafe object GetValue(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyProperty dp)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dp = default;
            IntPtr __retval = default;
            try
            {
                __dp = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(dp);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__dp), &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dp);
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }

        internal static unsafe void SetValue(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyProperty dp, object value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dp = default;
            ObjectReferenceValue __value = default;
            try
            {
                __dp = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(dp);
                __value = MarshalInspectable<object>.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__dp), MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dp);
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe void ClearValue(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyProperty dp)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dp = default;
            try
            {
                __dp = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(dp);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__dp)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dp);
            }
        }

        internal static unsafe object ReadLocalValue(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyProperty dp)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dp = default;
            IntPtr __retval = default;
            try
            {
                __dp = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(dp);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__dp), &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dp);
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }

        internal static unsafe object GetAnimationBaseValue(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyProperty dp)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dp = default;
            IntPtr __retval = default;
            try
            {
                __dp = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(dp);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, MarshalInspectable<object>.GetAbi(__dp), &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dp);
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }

        internal static unsafe long RegisterPropertyChangedCallback(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyProperty dp, global::Microsoft.UI.Xaml.DependencyPropertyChangedCallback callback)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dp = default;
            ObjectReferenceValue __callback = default;
            long __retval = default;
            try
            {
                __dp = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(dp);
                __callback = DependencyPropertyChangedCallback.CreateMarshaler2(callback);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, long*, int>**)ThisPtr)[11](ThisPtr, MarshalInspectable<object>.GetAbi(__dp), MarshalInspectable<object>.GetAbi(__callback), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dp);
                MarshalInspectable<object>.DisposeMarshaler(__callback);
            }
        }

        internal static unsafe void UnregisterPropertyChangedCallback(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyProperty dp, long token)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dp = default;
            try
            {
                __dp = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(dp);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, long, int>**)ThisPtr)[12](ThisPtr, MarshalInspectable<object>.GetAbi(__dp), token));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dp);
            }
        }
        internal static unsafe global::Windows.UI.Core.CoreDispatcher get_Dispatcher(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.UI.Core.CoreDispatcher.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.UI.Core.CoreDispatcher.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Dispatching.DispatcherQueue get_DispatcherQueue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Dispatching.DispatcherQueue.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Dispatching.DispatcherQueue.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE7, 0xAE, 0xBE, 0xE7, 0xE, 0x16, 0xF7, 0x50, 0x87, 0x89, 0xD6, 0x34, 0x63, 0xF9, 0x79, 0xFA };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E7BEAEE7-160E-50F7-8789-D63463F979FA")]
    internal interface IDependencyObject : global::Microsoft.UI.Xaml.IDependencyObject
    {
    }
    internal static class IDependencyObjectCollectionFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.DependencyObjectCollection CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.DependencyObjectCollection.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.DependencyObjectCollection.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x43, 0xEE, 0x74, 0x2A, 0xFD, 0x90, 0x61, 0x5D, 0x93, 0x83, 0x58, 0x4E, 0xA8, 0x42, 0x2B, 0x39 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2A74EE43-90FD-5D61-9383-584EA8422B39")]
    internal interface IDependencyObjectCollectionFactory : global::Microsoft.UI.Xaml.IDependencyObjectCollectionFactory
    {
    }
    internal static class IDependencyObjectFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x4C, 0x61, 0x6B, 0x93, 0x5F, 0x47, 0x7D, 0x5D, 0xB3, 0xF7, 0xBF, 0x1F, 0xBE, 0xA2, 0x81, 0x26 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("936B614C-475F-5D7D-B3F7-BF1FBEA28126")]
    internal interface IDependencyObjectFactory : global::Microsoft.UI.Xaml.IDependencyObjectFactory
    {
    }
    internal static class IDependencyPropertyMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.PropertyMetadata GetMetadata(IObjectReference _obj, global::System.Type forType)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::ABI.System.Type.Pinnable __forType = new(forType);
                fixed(void* ___forType = __forType)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.Type, IntPtr*, int>**)ThisPtr)[6](ThisPtr, global::ABI.System.Type.GetAbi(ref __forType), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.UI.Xaml.PropertyMetadata.FromAbi(__retval);
                }
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.PropertyMetadata.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x49, 0xAB, 0xE, 0x96, 0x72, 0x96, 0xA0, 0x58, 0x99, 0x5B, 0x3A, 0x42, 0xE5, 0xEA, 0x62, 0x78 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("960EAB49-9672-58A0-995B-3A42E5EA6278")]
    internal interface IDependencyProperty : global::Microsoft.UI.Xaml.IDependencyProperty
    {
    }
    internal static class IDependencyPropertyChangedEventArgsMethods
    {

        internal static unsafe object get_NewValue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }

        internal static unsafe object get_OldValue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_Property(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x20, 0xD0, 0xEA, 0x84, 0x49, 0x78, 0x98, 0x5E, 0x80, 0x30, 0x48, 0x8A, 0x80, 0xD1, 0x64, 0xEC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("84EAD020-7849-5E98-8030-488A80D164EC")]
    internal interface IDependencyPropertyChangedEventArgs : global::Microsoft.UI.Xaml.IDependencyPropertyChangedEventArgs
    {
    }
    internal static class IDependencyPropertyStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty Register(IObjectReference _obj, string name, global::System.Type propertyType, global::System.Type ownerType, global::Microsoft.UI.Xaml.PropertyMetadata typeMetadata)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __typeMetadata = default;
            IntPtr __retval = default;
            try
            {
                __typeMetadata = global::ABI.Microsoft.UI.Xaml.PropertyMetadata.CreateMarshaler2(typeMetadata);
                MarshalString.Pinnable __name = new(name);
                global::ABI.System.Type.Pinnable __propertyType = new(propertyType);
                global::ABI.System.Type.Pinnable __ownerType = new(ownerType);
                fixed(void* ___name = __name, ___propertyType = __propertyType, ___ownerType = __ownerType)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::ABI.System.Type, global::ABI.System.Type, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __name), global::ABI.System.Type.GetAbi(ref __propertyType), global::ABI.System.Type.GetAbi(ref __ownerType), MarshalInspectable<object>.GetAbi(__typeMetadata), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__typeMetadata);
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty RegisterAttached(IObjectReference _obj, string name, global::System.Type propertyType, global::System.Type ownerType, global::Microsoft.UI.Xaml.PropertyMetadata defaultMetadata)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __defaultMetadata = default;
            IntPtr __retval = default;
            try
            {
                __defaultMetadata = global::ABI.Microsoft.UI.Xaml.PropertyMetadata.CreateMarshaler2(defaultMetadata);
                MarshalString.Pinnable __name = new(name);
                global::ABI.System.Type.Pinnable __propertyType = new(propertyType);
                global::ABI.System.Type.Pinnable __ownerType = new(ownerType);
                fixed(void* ___name = __name, ___propertyType = __propertyType, ___ownerType = __ownerType)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::ABI.System.Type, global::ABI.System.Type, IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, MarshalString.GetAbi(ref __name), global::ABI.System.Type.GetAbi(ref __propertyType), global::ABI.System.Type.GetAbi(ref __ownerType), MarshalInspectable<object>.GetAbi(__defaultMetadata), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__defaultMetadata);
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }
        internal static unsafe object get_UnsetValue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x51, 0xC6, 0xDD, 0x61, 0x83, 0x3, 0x6F, 0x5D, 0x98, 0xCE, 0x5C, 0x4, 0x6A, 0xAA, 0xAA, 0x8F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("61DDC651-0383-5D6F-98CE-5C046AAAAA8F")]
    internal interface IDependencyPropertyStatics : global::Microsoft.UI.Xaml.IDependencyPropertyStatics
    {
    }
    internal static class IDispatcherTimerMethods
    {


        internal static unsafe void Start(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[11](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void Stop(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[12](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }
        internal static unsafe global::System.TimeSpan get_Interval(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.TimeSpan __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.TimeSpan*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.TimeSpan.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.TimeSpan.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Interval(IObjectReference _obj, global::System.TimeSpan value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.TimeSpan.Marshaler __value = default;
            try
            {
                __value = global::ABI.System.TimeSpan.CreateMarshaler(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.TimeSpan, int>**)ThisPtr)[7](ThisPtr, global::ABI.System.TimeSpan.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                global::ABI.System.TimeSpan.DisposeMarshaler(__value);
            }
        }

        internal static unsafe bool get_IsEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _Tick_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> MakeTickTable()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_EventHandler_1_object.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref _Tick_, new(), null);
            return _Tick_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _Tick => _Tick_ ?? MakeTickTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>> Get_Tick2(IObjectReference _obj, object _thisObj)
        {
            return _Tick.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return  new global::ABI.WinRT.Interop.EventHandlerEventSource<object>(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[9],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[10],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF1, 0xAB, 0xA4, 0x58, 0xA3, 0xA4, 0xDD, 0x53, 0xAE, 0x21, 0x8, 0xF4, 0x32, 0x31, 0xE8, 0x17 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("58A4ABF1-A4A3-53DD-AE21-08F43231E817")]
    internal interface IDispatcherTimer : global::Microsoft.UI.Xaml.IDispatcherTimer
    {
    }
    internal static class IDispatcherTimerFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.DispatcherTimer CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.DispatcherTimer.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.DispatcherTimer.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x66, 0x31, 0xCB, 0x1B, 0xE4, 0x22, 0xBF, 0x50, 0xA5, 0xA2, 0xB7, 0x8C, 0xA4, 0x37, 0x7B, 0xD0 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("1BCB3166-22E4-50BF-A5A2-B78CA4377BD0")]
    internal interface IDispatcherTimerFactory : global::Microsoft.UI.Xaml.IDispatcherTimerFactory
    {
    }
    internal static class IDragEventArgsMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.DragOperationDeferral GetDeferral(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[16](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DragOperationDeferral.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DragOperationDeferral.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.Point GetPosition(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement relativeTo)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __relativeTo = default;
            global::Windows.Foundation.Point __retval = default;
            try
            {
                __relativeTo = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(relativeTo);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[17](ThisPtr, MarshalInspectable<object>.GetAbi(__relativeTo), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__relativeTo);
            }
        }
        internal static unsafe global::Windows.ApplicationModel.DataTransfer.DataPackageOperation get_AcceptedOperation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.ApplicationModel.DataTransfer.DataPackageOperation __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.ApplicationModel.DataTransfer.DataPackageOperation*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_AcceptedOperation(IObjectReference _obj, global::Windows.ApplicationModel.DataTransfer.DataPackageOperation value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.ApplicationModel.DataTransfer.DataPackageOperation, int>**)ThisPtr)[14](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.ApplicationModel.DataTransfer.DataPackageOperation get_AllowedOperations(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.ApplicationModel.DataTransfer.DataPackageOperation __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.ApplicationModel.DataTransfer.DataPackageOperation*, int>**)ThisPtr)[15](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.ApplicationModel.DataTransfer.DataPackage get_Data(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.ApplicationModel.DataTransfer.DataPackage.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.ApplicationModel.DataTransfer.DataPackage.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Data(IObjectReference _obj, global::Windows.ApplicationModel.DataTransfer.DataPackage value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Windows.ApplicationModel.DataTransfer.DataPackage.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Windows.ApplicationModel.DataTransfer.DataPackageView get_DataView(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.ApplicationModel.DataTransfer.DataPackageView.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.ApplicationModel.DataTransfer.DataPackageView.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DragUIOverride get_DragUIOverride(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DragUIOverride.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DragUIOverride.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.ApplicationModel.DataTransfer.DragDrop.DragDropModifiers get_Modifiers(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.ApplicationModel.DataTransfer.DragDrop.DragDropModifiers __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.ApplicationModel.DataTransfer.DragDrop.DragDropModifiers*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x57, 0x57, 0xAC, 0x47, 0xBC, 0xE4, 0xBA, 0x52, 0x8A, 0xB9, 0x1B, 0xF8, 0x1A, 0xAD, 0x79, 0x0 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("47AC5757-E4BC-52BA-8AB9-1BF81AAD7900")]
    internal interface IDragEventArgs : global::Microsoft.UI.Xaml.IDragEventArgs
    {
    }
    internal static class IDragOperationDeferralMethods
    {


        internal static unsafe void Complete(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[6](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x80, 0x18, 0x2C, 0x46, 0x6A, 0xFC, 0x35, 0x50, 0x8A, 0xBF, 0x56, 0x4B, 0xAC, 0xB7, 0x81, 0x58 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("462C1880-FC6A-5035-8ABF-564BACB78158")]
    internal interface IDragOperationDeferral : global::Microsoft.UI.Xaml.IDragOperationDeferral
    {
    }
    internal static class IDragStartingEventArgsMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.DragOperationDeferral GetDeferral(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DragOperationDeferral.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DragOperationDeferral.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.Point GetPosition(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement relativeTo)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __relativeTo = default;
            global::Windows.Foundation.Point __retval = default;
            try
            {
                __relativeTo = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(relativeTo);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[13](ThisPtr, MarshalInspectable<object>.GetAbi(__relativeTo), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__relativeTo);
            }
        }
        internal static unsafe global::Windows.ApplicationModel.DataTransfer.DataPackageOperation get_AllowedOperations(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.ApplicationModel.DataTransfer.DataPackageOperation __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.ApplicationModel.DataTransfer.DataPackageOperation*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_AllowedOperations(IObjectReference _obj, global::Windows.ApplicationModel.DataTransfer.DataPackageOperation value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.ApplicationModel.DataTransfer.DataPackageOperation, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_Cancel(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Cancel(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.ApplicationModel.DataTransfer.DataPackage get_Data(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.ApplicationModel.DataTransfer.DataPackage.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.ApplicationModel.DataTransfer.DataPackage.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DragUI get_DragUI(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DragUI.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DragUI.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xCE, 0xBA, 0x17, 0xAD, 0x13, 0x96, 0x66, 0x56, 0xA3, 0x1B, 0x79, 0xA7, 0x3F, 0xBA, 0x77, 0xCF };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("AD17BACE-9613-5666-A31B-79A73FBA77CF")]
    internal interface IDragStartingEventArgs : global::Microsoft.UI.Xaml.IDragStartingEventArgs
    {
    }
    internal static class IDragUIMethods
    {


        internal static unsafe void SetContentFromBitmapImage(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage bitmapImage)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __bitmapImage = default;
            try
            {
                __bitmapImage = global::ABI.Microsoft.UI.Xaml.Media.Imaging.BitmapImage.CreateMarshaler2(bitmapImage);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__bitmapImage)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__bitmapImage);
            }
        }

        internal static unsafe void SetContentFromBitmapImage(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage bitmapImage, global::Windows.Foundation.Point anchorPoint)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __bitmapImage = default;
            try
            {
                __bitmapImage = global::ABI.Microsoft.UI.Xaml.Media.Imaging.BitmapImage.CreateMarshaler2(bitmapImage);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Windows.Foundation.Point, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__bitmapImage), anchorPoint));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__bitmapImage);
            }
        }

        internal static unsafe void SetContentFromSoftwareBitmap(IObjectReference _obj, global::Windows.Graphics.Imaging.SoftwareBitmap softwareBitmap)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __softwareBitmap = default;
            try
            {
                __softwareBitmap = global::ABI.Windows.Graphics.Imaging.SoftwareBitmap.CreateMarshaler2(softwareBitmap);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__softwareBitmap)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__softwareBitmap);
            }
        }

        internal static unsafe void SetContentFromSoftwareBitmap(IObjectReference _obj, global::Windows.Graphics.Imaging.SoftwareBitmap softwareBitmap, global::Windows.Foundation.Point anchorPoint)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __softwareBitmap = default;
            try
            {
                __softwareBitmap = global::ABI.Windows.Graphics.Imaging.SoftwareBitmap.CreateMarshaler2(softwareBitmap);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Windows.Foundation.Point, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__softwareBitmap), anchorPoint));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__softwareBitmap);
            }
        }

        internal static unsafe void SetContentFromDataPackage(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[10](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE0, 0x70, 0xF1, 0x35, 0xBF, 0x93, 0xDA, 0x58, 0x87, 0x7A, 0x8E, 0xC7, 0x7D, 0x8D, 0x9F, 0x0 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("35F170E0-93BF-58DA-877A-8EC77D8D9F00")]
    internal interface IDragUI : global::Microsoft.UI.Xaml.IDragUI
    {
    }
    internal static class IDragUIOverrideMethods
    {


        internal static unsafe void Clear(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[14](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void SetContentFromBitmapImage(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage bitmapImage)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __bitmapImage = default;
            try
            {
                __bitmapImage = global::ABI.Microsoft.UI.Xaml.Media.Imaging.BitmapImage.CreateMarshaler2(bitmapImage);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[15](ThisPtr, MarshalInspectable<object>.GetAbi(__bitmapImage)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__bitmapImage);
            }
        }

        internal static unsafe void SetContentFromBitmapImage(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage bitmapImage, global::Windows.Foundation.Point anchorPoint)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __bitmapImage = default;
            try
            {
                __bitmapImage = global::ABI.Microsoft.UI.Xaml.Media.Imaging.BitmapImage.CreateMarshaler2(bitmapImage);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Windows.Foundation.Point, int>**)ThisPtr)[16](ThisPtr, MarshalInspectable<object>.GetAbi(__bitmapImage), anchorPoint));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__bitmapImage);
            }
        }

        internal static unsafe void SetContentFromSoftwareBitmap(IObjectReference _obj, global::Windows.Graphics.Imaging.SoftwareBitmap softwareBitmap)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __softwareBitmap = default;
            try
            {
                __softwareBitmap = global::ABI.Windows.Graphics.Imaging.SoftwareBitmap.CreateMarshaler2(softwareBitmap);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[17](ThisPtr, MarshalInspectable<object>.GetAbi(__softwareBitmap)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__softwareBitmap);
            }
        }

        internal static unsafe void SetContentFromSoftwareBitmap(IObjectReference _obj, global::Windows.Graphics.Imaging.SoftwareBitmap softwareBitmap, global::Windows.Foundation.Point anchorPoint)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __softwareBitmap = default;
            try
            {
                __softwareBitmap = global::ABI.Windows.Graphics.Imaging.SoftwareBitmap.CreateMarshaler2(softwareBitmap);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Windows.Foundation.Point, int>**)ThisPtr)[18](ThisPtr, MarshalInspectable<object>.GetAbi(__softwareBitmap), anchorPoint));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__softwareBitmap);
            }
        }
        internal static unsafe string get_Caption(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Caption(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe bool get_IsCaptionVisible(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsCaptionVisible(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[11](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsContentVisible(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsContentVisible(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[9](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsGlyphVisible(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsGlyphVisible(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[13](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x8B, 0xB1, 0x60, 0x32, 0xDF, 0x70, 0xF2, 0x5D, 0xB9, 0x8A, 0x56, 0xBE, 0xB0, 0x60, 0x1F, 0x79 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("3260B18B-70DF-5DF2-B98A-56BEB0601F79")]
    internal interface IDragUIOverride : global::Microsoft.UI.Xaml.IDragUIOverride
    {
    }
    internal static class IDropCompletedEventArgsMethods
    {

        internal static unsafe global::Windows.ApplicationModel.DataTransfer.DataPackageOperation get_DropResult(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.ApplicationModel.DataTransfer.DataPackageOperation __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.ApplicationModel.DataTransfer.DataPackageOperation*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x2D, 0x8, 0x0, 0xE7, 0x40, 0xC6, 0x44, 0x5D, 0xB2, 0x3A, 0xF2, 0x13, 0xDF, 0xBE, 0xB2, 0x45 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E700082D-C640-5D44-B23A-F213DFBEB245")]
    internal interface IDropCompletedEventArgs : global::Microsoft.UI.Xaml.IDropCompletedEventArgs
    {
    }
    internal static class IEffectiveViewportChangedEventArgsMethods
    {

        internal static unsafe double get_BringIntoViewDistanceX(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_BringIntoViewDistanceY(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.Rect get_EffectiveViewport(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Rect __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.Rect get_MaxViewport(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Rect __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x59, 0x81, 0x6E, 0x63, 0x82, 0x2D, 0x8A, 0x53, 0x84, 0x83, 0xCD, 0x57, 0x6E, 0x41, 0xD0, 0xDF };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("636E8159-2D82-538A-8483-CD576E41D0DF")]
    internal interface IEffectiveViewportChangedEventArgs : global::Microsoft.UI.Xaml.IEffectiveViewportChangedEventArgs
    {
    }
    public static class IElementFactoryMethods
    {


        public static unsafe global::Microsoft.UI.Xaml.UIElement GetElement(IObjectReference _obj, global::Microsoft.UI.Xaml.ElementFactoryGetArgs args)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __args = default;
            IntPtr __retval = default;
            try
            {
                __args = global::ABI.Microsoft.UI.Xaml.ElementFactoryGetArgs.CreateMarshaler2(args);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__args), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.UIElement.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__args);
                global::ABI.Microsoft.UI.Xaml.UIElement.DisposeAbi(__retval);
            }
        }

        public static unsafe void RecycleElement(IObjectReference _obj, global::Microsoft.UI.Xaml.ElementFactoryRecycleArgs args)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __args = default;
            try
            {
                __args = global::ABI.Microsoft.UI.Xaml.ElementFactoryRecycleArgs.CreateMarshaler2(args);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__args)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__args);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x47, 0xBA, 0xFA, 0x75, 0xF2, 0x2C, 0xAE, 0x54, 0x91, 0xE6, 0x5, 0x81, 0x55, 0x6F, 0xDD, 0xAA };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IElementFactory.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("75FABA47-2CF2-54AE-91E6-0581556FDDAA")]
    internal unsafe interface IElementFactory : global::Microsoft.UI.Xaml.IElementFactory
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IElementFactory()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IElementFactory), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 2);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_GetElement_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_RecycleElement_1;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetElement_0(IntPtr thisPtr, IntPtr args, IntPtr* result)
        {

            global::Microsoft.UI.Xaml.UIElement __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.IElementFactory>(thisPtr).GetElement(global::ABI.Microsoft.UI.Xaml.ElementFactoryGetArgs.FromAbi(args));
                *result = global::ABI.Microsoft.UI.Xaml.UIElement.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_RecycleElement_1(IntPtr thisPtr, IntPtr args)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.IElementFactory>(thisPtr).RecycleElement(global::ABI.Microsoft.UI.Xaml.ElementFactoryRecycleArgs.FromAbi(args));

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Microsoft.UI.Xaml.UIElement global::Microsoft.UI.Xaml.IElementFactory.GetElement(global::Microsoft.UI.Xaml.ElementFactoryGetArgs args)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.IElementFactory).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.IElementFactoryMethods.GetElement(_obj, args);
        }

        unsafe void global::Microsoft.UI.Xaml.IElementFactory.RecycleElement(global::Microsoft.UI.Xaml.ElementFactoryRecycleArgs args)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.IElementFactory).TypeHandle));
            global::ABI.Microsoft.UI.Xaml.IElementFactoryMethods.RecycleElement(_obj, args);
        }
    }

    internal static class IElementFactoryGetArgsMethods
    {

        internal static unsafe object get_Data(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Data(IObjectReference _obj, object value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInspectable<object>.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.UIElement get_Parent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.UIElement.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.UIElement.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Parent(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x68, 0x7D, 0x1, 0xB7, 0x9E, 0xEC, 0x35, 0x54, 0xB0, 0x78, 0xBE, 0x6F, 0x90, 0x6F, 0x9, 0x53 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B7017D68-EC9E-5435-B078-BE6F906F0953")]
    internal interface IElementFactoryGetArgs : global::Microsoft.UI.Xaml.IElementFactoryGetArgs
    {
    }
    internal static class IElementFactoryGetArgsFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.ElementFactoryGetArgs CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.ElementFactoryGetArgs.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.ElementFactoryGetArgs.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x1B, 0x40, 0x8E, 0xA8, 0xE5, 0x9F, 0x60, 0x59, 0x87, 0xA3, 0x89, 0xA3, 0xCF, 0xE2, 0x53, 0x1C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A88E401B-9FE5-5960-87A3-89A3CFE2531C")]
    internal interface IElementFactoryGetArgsFactory : global::Microsoft.UI.Xaml.IElementFactoryGetArgsFactory
    {
    }
    internal static class IElementFactoryRecycleArgsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.UIElement get_Element(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.UIElement.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.UIElement.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Element(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.UIElement get_Parent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.UIElement.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.UIElement.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Parent(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF7, 0x44, 0xE4, 0x46, 0xD3, 0x5, 0x5E, 0x5C, 0x9B, 0x7A, 0x55, 0x41, 0xF6, 0x3E, 0x4E, 0xF9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("46E444F7-05D3-5C5E-9B7A-5541F63E4EF9")]
    internal interface IElementFactoryRecycleArgs : global::Microsoft.UI.Xaml.IElementFactoryRecycleArgs
    {
    }
    internal static class IElementFactoryRecycleArgsFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.ElementFactoryRecycleArgs CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.ElementFactoryRecycleArgs.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.ElementFactoryRecycleArgs.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x4A, 0x19, 0xEE, 0x30, 0x4D, 0xFE, 0xE7, 0x53, 0xA8, 0x4A, 0xCD, 0x34, 0xFA, 0xB0, 0xD4, 0xEF };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("30EE194A-FE4D-53E7-A84A-CD34FAB0D4EF")]
    internal interface IElementFactoryRecycleArgsFactory : global::Microsoft.UI.Xaml.IElementFactoryRecycleArgsFactory
    {
    }
    internal static class IElementSoundPlayerMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x68, 0x7E, 0xA6, 0xE, 0x7C, 0x93, 0x0, 0x5C, 0xB6, 0x9, 0x53, 0xB6, 0x3D, 0x9A, 0x5D, 0x42 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("0EA67E68-937C-5C00-B609-53B63D9A5D42")]
    internal interface IElementSoundPlayer : global::Microsoft.UI.Xaml.IElementSoundPlayer
    {
    }
    internal static class IElementSoundPlayerStaticsMethods
    {


        internal static unsafe void Play(IObjectReference _obj, global::Microsoft.UI.Xaml.ElementSoundKind sound)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.ElementSoundKind, int>**)ThisPtr)[12](ThisPtr, sound));
            global::System.GC.KeepAlive(_obj);
        }
        internal static unsafe global::Microsoft.UI.Xaml.ElementSpatialAudioMode get_SpatialAudioMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.ElementSpatialAudioMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.ElementSpatialAudioMode*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_SpatialAudioMode(IObjectReference _obj, global::Microsoft.UI.Xaml.ElementSpatialAudioMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.ElementSpatialAudioMode, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.ElementSoundPlayerState get_State(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.ElementSoundPlayerState __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.ElementSoundPlayerState*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_State(IObjectReference _obj, global::Microsoft.UI.Xaml.ElementSoundPlayerState value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.ElementSoundPlayerState, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_Volume(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Volume(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC3, 0x20, 0x5A, 0x5A, 0x9B, 0x1C, 0x61, 0x5D, 0x9D, 0x63, 0x48, 0x7C, 0x8B, 0xF1, 0x6E, 0xCB };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("5A5A20C3-1C9B-5D61-9D63-487C8BF16ECB")]
    internal interface IElementSoundPlayerStatics : global::Microsoft.UI.Xaml.IElementSoundPlayerStatics
    {
    }
    internal static class IEventTriggerMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.TriggerActionCollection get_Actions(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.TriggerActionCollection.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.TriggerActionCollection.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.RoutedEvent get_RoutedEvent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.RoutedEvent.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.RoutedEvent.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_RoutedEvent(IObjectReference _obj, global::Microsoft.UI.Xaml.RoutedEvent value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.RoutedEvent.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x41, 0x5, 0x6F, 0x8C, 0xAC, 0xC6, 0x27, 0x5F, 0x9D, 0x45, 0xCF, 0x8B, 0xDB, 0xDF, 0xAB, 0xE6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8C6F0541-C6AC-5F27-9D45-CF8BDBDFABE6")]
    internal interface IEventTrigger : global::Microsoft.UI.Xaml.IEventTrigger
    {
    }
    internal static class IExceptionRoutedEventArgsMethods
    {

        internal static unsafe string get_ErrorMessage(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD2, 0xB6, 0xBC, 0xE8, 0xF5, 0xD3, 0x93, 0x53, 0xA8, 0x4F, 0xDF, 0xCD, 0x44, 0xA2, 0xDF, 0x34 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E8BCB6D2-D3F5-5393-A84F-DFCD44A2DF34")]
    internal interface IExceptionRoutedEventArgs : global::Microsoft.UI.Xaml.IExceptionRoutedEventArgs
    {
    }
    internal static class IExceptionRoutedEventArgsFactoryMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB6, 0x1F, 0xE7, 0xE1, 0xD0, 0x2A, 0x89, 0x51, 0x8D, 0x96, 0x33, 0xBA, 0xE4, 0x88, 0xC5, 0xFB };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E1E71FB6-2AD0-5189-8D96-33BAE488C5FB")]
    internal interface IExceptionRoutedEventArgsFactory : global::Microsoft.UI.Xaml.IExceptionRoutedEventArgsFactory
    {
    }
    internal static class IFrameworkElementMethods
    {


        internal static unsafe object FindName(IObjectReference _obj, string name)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __name = new(name);
                fixed(void* ___name = __name)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[77](ThisPtr, MarshalString.GetAbi(ref __name), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return MarshalInspectable<object>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }

        internal static unsafe void SetBinding(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyProperty dp, global::Microsoft.UI.Xaml.Data.BindingBase binding)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dp = default;
            ObjectReferenceValue __binding = default;
            try
            {
                __dp = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(dp);
                __binding = global::ABI.Microsoft.UI.Xaml.Data.BindingBase.CreateMarshaler2(binding);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[78](ThisPtr, MarshalInspectable<object>.GetAbi(__dp), MarshalInspectable<object>.GetAbi(__binding)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dp);
                MarshalInspectable<object>.DisposeMarshaler(__binding);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Data.BindingExpression GetBindingExpression(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyProperty dp)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dp = default;
            IntPtr __retval = default;
            try
            {
                __dp = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(dp);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[79](ThisPtr, MarshalInspectable<object>.GetAbi(__dp), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Data.BindingExpression.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dp);
                global::ABI.Microsoft.UI.Xaml.Data.BindingExpression.DisposeAbi(__retval);
            }
        }
        internal static unsafe double get_ActualHeight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.ElementTheme get_ActualTheme(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.ElementTheme __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.ElementTheme*, int>**)ThisPtr)[60](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_ActualWidth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe bool get_AllowFocusOnInteraction(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[38](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_AllowFocusOnInteraction(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[39](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_AllowFocusWhenDisabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[50](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_AllowFocusWhenDisabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[51](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::System.Uri get_BaseUri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[35](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.Uri.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.Uri.DisposeAbi(__retval);
            }
        }

        internal static unsafe object get_DataContext(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[36](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_DataContext(IObjectReference _obj, object value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInspectable<object>.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[37](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.FlowDirection get_FlowDirection(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.FlowDirection __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.FlowDirection*, int>**)ThisPtr)[55](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_FlowDirection(IObjectReference _obj, global::Microsoft.UI.Xaml.FlowDirection value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.FlowDirection, int>**)ThisPtr)[56](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Thickness get_FocusVisualMargin(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Thickness __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness*, int>**)ThisPtr)[40](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_FocusVisualMargin(IObjectReference _obj, global::Microsoft.UI.Xaml.Thickness value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness, int>**)ThisPtr)[41](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_FocusVisualPrimaryBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[48](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_FocusVisualPrimaryBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[49](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Thickness get_FocusVisualPrimaryThickness(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Thickness __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness*, int>**)ThisPtr)[44](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_FocusVisualPrimaryThickness(IObjectReference _obj, global::Microsoft.UI.Xaml.Thickness value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness, int>**)ThisPtr)[45](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_FocusVisualSecondaryBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[46](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_FocusVisualSecondaryBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[47](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Thickness get_FocusVisualSecondaryThickness(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Thickness __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness*, int>**)ThisPtr)[42](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_FocusVisualSecondaryThickness(IObjectReference _obj, global::Microsoft.UI.Xaml.Thickness value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness, int>**)ThisPtr)[43](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_Height(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[17](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Height(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[18](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.HorizontalAlignment get_HorizontalAlignment(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.HorizontalAlignment __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.HorizontalAlignment*, int>**)ThisPtr)[27](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_HorizontalAlignment(IObjectReference _obj, global::Microsoft.UI.Xaml.HorizontalAlignment value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.HorizontalAlignment, int>**)ThisPtr)[28](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsLoaded(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[59](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe string get_Language(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Language(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[12](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Thickness get_Margin(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Thickness __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness*, int>**)ThisPtr)[31](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Margin(IObjectReference _obj, global::Microsoft.UI.Xaml.Thickness value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness, int>**)ThisPtr)[32](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_MaxHeight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[25](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_MaxHeight(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[26](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_MaxWidth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[21](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_MaxWidth(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[22](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_MinHeight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[23](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_MinHeight(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[24](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_MinWidth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[19](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_MinWidth(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[20](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe string get_Name(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[33](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Name(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[34](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject get_Parent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[54](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.ElementTheme get_RequestedTheme(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.ElementTheme __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.ElementTheme*, int>**)ThisPtr)[57](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_RequestedTheme(IObjectReference _obj, global::Microsoft.UI.Xaml.ElementTheme value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.ElementTheme, int>**)ThisPtr)[58](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.ResourceDictionary get_Resources(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.ResourceDictionary.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.ResourceDictionary.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Resources(IObjectReference _obj, global::Microsoft.UI.Xaml.ResourceDictionary value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.ResourceDictionary.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Style get_Style(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[52](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Style.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Style.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Style(IObjectReference _obj, global::Microsoft.UI.Xaml.Style value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Style.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[53](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe object get_Tag(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Tag(IObjectReference _obj, object value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInspectable<object>.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[10](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.TriggerCollection get_Triggers(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.TriggerCollection.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.TriggerCollection.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.VerticalAlignment get_VerticalAlignment(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.VerticalAlignment __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.VerticalAlignment*, int>**)ThisPtr)[29](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_VerticalAlignment(IObjectReference _obj, global::Microsoft.UI.Xaml.VerticalAlignment value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.VerticalAlignment, int>**)ThisPtr)[30](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_Width(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[15](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Width(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[16](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.FrameworkElement, object>>> _ActualThemeChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.FrameworkElement, object>>> MakeActualThemeChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ActualThemeChanged_, new(), null);
            return _ActualThemeChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.FrameworkElement, object>>> _ActualThemeChanged => _ActualThemeChanged_ ?? MakeActualThemeChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.FrameworkElement, object>> Get_ActualThemeChanged2(IObjectReference _obj, object _thisObj)
        {
            return _ActualThemeChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_FrameworkElement__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[73],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[74],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.FrameworkElement, global::Microsoft.UI.Xaml.DataContextChangedEventArgs>>> _DataContextChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.FrameworkElement, global::Microsoft.UI.Xaml.DataContextChangedEventArgs>>> MakeDataContextChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _DataContextChanged_, new(), null);
            return _DataContextChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.FrameworkElement, global::Microsoft.UI.Xaml.DataContextChangedEventArgs>>> _DataContextChanged => _DataContextChanged_ ?? MakeDataContextChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.FrameworkElement, global::Microsoft.UI.Xaml.DataContextChangedEventArgs>> Get_DataContextChanged2(IObjectReference _obj, object _thisObj)
        {
            return _DataContextChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_FrameworkElement__global__Microsoft_UI_Xaml_DataContextChangedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[65],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[66],
                1);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.FrameworkElement, global::Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs>>> _EffectiveViewportChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.FrameworkElement, global::Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs>>> MakeEffectiveViewportChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _EffectiveViewportChanged_, new(), null);
            return _EffectiveViewportChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.FrameworkElement, global::Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs>>> _EffectiveViewportChanged => _EffectiveViewportChanged_ ?? MakeEffectiveViewportChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.FrameworkElement, global::Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs>> Get_EffectiveViewportChanged2(IObjectReference _obj, object _thisObj)
        {
            return _EffectiveViewportChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_FrameworkElement__global__Microsoft_UI_Xaml_EffectiveViewportChangedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[75],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[76],
                2);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _LayoutUpdated_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> MakeLayoutUpdatedTable()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_EventHandler_1_object.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref _LayoutUpdated_, new(), null);
            return _LayoutUpdated_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _LayoutUpdated => _LayoutUpdated_ ?? MakeLayoutUpdatedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>> Get_LayoutUpdated2(IObjectReference _obj, object _thisObj)
        {
            return _LayoutUpdated.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return  new global::ABI.WinRT.Interop.EventHandlerEventSource<object>(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[69],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[70],
                3);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler>> _Loaded_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler>> MakeLoadedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Loaded_, new(), null);
            return _Loaded_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler>> _Loaded => _Loaded_ ?? MakeLoadedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler> Get_Loaded2(IObjectReference _obj, object _thisObj)
        {
            return _Loaded.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_RoutedEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[61],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[62],
                4);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.FrameworkElement, object>>> _Loading_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.FrameworkElement, object>>> MakeLoadingTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Loading_, new(), null);
            return _Loading_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.FrameworkElement, object>>> _Loading => _Loading_ ?? MakeLoadingTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.FrameworkElement, object>> Get_Loading2(IObjectReference _obj, object _thisObj)
        {
            return _Loading.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_FrameworkElement__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[71],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[72],
                5);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.SizeChangedEventHandler>> _SizeChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.SizeChangedEventHandler>> MakeSizeChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _SizeChanged_, new(), null);
            return _SizeChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.SizeChangedEventHandler>> _SizeChanged => _SizeChanged_ ?? MakeSizeChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.SizeChangedEventHandler> Get_SizeChanged2(IObjectReference _obj, object _thisObj)
        {
            return _SizeChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_SizeChangedEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[67],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[68],
                6);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler>> _Unloaded_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler>> MakeUnloadedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Unloaded_, new(), null);
            return _Unloaded_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler>> _Unloaded => _Unloaded_ ?? MakeUnloadedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler> Get_Unloaded2(IObjectReference _obj, object _thisObj)
        {
            return _Unloaded.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_RoutedEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[63],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[64],
                7);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3D, 0xF1, 0x8, 0xFE, 0x6A, 0xDC, 0x95, 0x54, 0xAD, 0x44, 0xC2, 0xD8, 0xD2, 0x18, 0x63, 0xB0 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("FE08F13D-DC6A-5495-AD44-C2D8D21863B0")]
    internal interface IFrameworkElement : global::Microsoft.UI.Xaml.IFrameworkElement
    {
    }
    internal static class IFrameworkElementFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.FrameworkElement CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.FrameworkElement.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.FrameworkElement.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x72, 0x22, 0x3F, 0xBD, 0xFA, 0x3E, 0x92, 0x5F, 0xB7, 0x59, 0x90, 0xB1, 0xCC, 0x3E, 0x78, 0x4C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("BD3F2272-3EFA-5F92-B759-90B1CC3E784C")]
    internal interface IFrameworkElementFactory : global::Microsoft.UI.Xaml.IFrameworkElementFactory
    {
    }
    public static class IFrameworkElementOverridesMethods
    {


        internal static unsafe global::Windows.Foundation.Size MeasureOverride(IObjectReference _obj, global::Windows.Foundation.Size availableSize)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Size __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Size, global::Windows.Foundation.Size*, int>**)ThisPtr)[6](ThisPtr, availableSize, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.Size ArrangeOverride(IObjectReference _obj, global::Windows.Foundation.Size finalSize)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Size __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Size, global::Windows.Foundation.Size*, int>**)ThisPtr)[7](ThisPtr, finalSize, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe void OnApplyTemplate(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[8](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool GoToElementStateCore(IObjectReference _obj, string stateName, bool useTransitions)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            MarshalString.Pinnable __stateName = new(stateName);
            fixed(void* ___stateName = __stateName)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte, byte*, int>**)ThisPtr)[9](ThisPtr, MarshalString.GetAbi(ref __stateName), (byte)(useTransitions ? 1 : 0), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x98, 0xFD, 0xC6, 0xFF, 0x8C, 0xF3, 0x4, 0x59, 0x9C, 0xE4, 0x97, 0xA3, 0x42, 0x7C, 0xF4, 0xBA };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IFrameworkElementOverrides.AbiToProjectionVftablePtr;

    }

    [Guid("FFC6FD98-F38C-5904-9CE4-97A3427CF4BA")]
    internal unsafe interface IFrameworkElementOverrides : global::Microsoft.UI.Xaml.IFrameworkElementOverrides
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IFrameworkElementOverrides()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IFrameworkElementOverrides), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 4);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Size, global::Windows.Foundation.Size*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_MeasureOverride_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Size, global::Windows.Foundation.Size*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_ArrangeOverride_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_OnApplyTemplate_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte, byte*, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_GoToElementStateCore_3;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_MeasureOverride_0(IntPtr thisPtr, global::Windows.Foundation.Size availableSize, global::Windows.Foundation.Size* result)
        {

            global::Windows.Foundation.Size __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.IFrameworkElementOverrides>(thisPtr).MeasureOverride(availableSize);
                *result = __result;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_ArrangeOverride_1(IntPtr thisPtr, global::Windows.Foundation.Size finalSize, global::Windows.Foundation.Size* result)
        {

            global::Windows.Foundation.Size __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.IFrameworkElementOverrides>(thisPtr).ArrangeOverride(finalSize);
                *result = __result;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_OnApplyTemplate_2(IntPtr thisPtr)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.IFrameworkElementOverrides>(thisPtr).OnApplyTemplate();

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GoToElementStateCore_3(IntPtr thisPtr, IntPtr stateName, byte useTransitions, byte* result)
        {

            bool __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.IFrameworkElementOverrides>(thisPtr).GoToElementStateCore(MarshalString.FromAbi(stateName), useTransitions != 0);
                *result = (byte)(__result ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }

    internal static class IFrameworkElementProtectedMethods
    {


        internal static unsafe void InvalidateViewport(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[6](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB0, 0x3D, 0x9A, 0xE5, 0xE5, 0x91, 0x3, 0x59, 0x9C, 0xAF, 0xD1, 0xBB, 0x9F, 0x45, 0x8B, 0xF2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E59A3DB0-91E5-5903-9CAF-D1BB9F458BF2")]
    internal interface IFrameworkElementProtected : global::Microsoft.UI.Xaml.IFrameworkElementProtected
    {
    }
    internal static class IFrameworkElementStaticsMethods
    {


        internal static unsafe void DeferTree(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject element)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(element);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[32](ThisPtr, MarshalInspectable<object>.GetAbi(__element)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
            }
        }
        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ActualHeightProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ActualThemeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[31](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ActualWidthProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_AllowFocusOnInteractionProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[21](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_AllowFocusWhenDisabledProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[27](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_DataContextProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[20](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_FlowDirectionProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[29](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_FocusVisualMarginProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[22](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_FocusVisualPrimaryBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[26](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_FocusVisualPrimaryThicknessProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[24](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_FocusVisualSecondaryBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[25](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_FocusVisualSecondaryThicknessProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[23](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_HeightProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_HorizontalAlignmentProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[16](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_LanguageProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_MarginProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[18](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_MaxHeightProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[15](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_MaxWidthProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_MinHeightProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_MinWidthProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_NameProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[19](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_RequestedThemeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[30](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_StyleProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[28](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_TagProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_VerticalAlignmentProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[17](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_WidthProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x4, 0x27, 0x4E, 0x89, 0xE7, 0x14, 0x9A, 0x56, 0xB2, 0x1E, 0xAF, 0xC7, 0xDF, 0x71, 0x45, 0xA1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("894E2704-14E7-569A-B21E-AFC7DF7145A1")]
    internal interface IFrameworkElementStatics : global::Microsoft.UI.Xaml.IFrameworkElementStatics
    {
    }
    internal static class IFrameworkTemplateMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC2, 0xC7, 0x84, 0x0, 0x48, 0xDE, 0xB, 0x5B, 0x8A, 0x5A, 0xE4, 0xFB, 0x76, 0xB7, 0xF7, 0xD1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("0084C7C2-DE48-5B0B-8A5A-E4FB76B7F7D1")]
    internal interface IFrameworkTemplate : global::Microsoft.UI.Xaml.IFrameworkTemplate
    {
    }
    internal static class IFrameworkTemplateFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.FrameworkTemplate CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.FrameworkTemplate.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.FrameworkTemplate.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xDB, 0xD6, 0x6D, 0x61, 0x64, 0xB0, 0x1D, 0x56, 0xB1, 0x62, 0x46, 0xCE, 0xB4, 0x5D, 0xC5, 0x62 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("616DD6DB-B064-561D-B162-46CEB45DC562")]
    internal interface IFrameworkTemplateFactory : global::Microsoft.UI.Xaml.IFrameworkTemplateFactory
    {
    }
    internal static class IFrameworkViewMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC3, 0x94, 0x0, 0xE6, 0xAF, 0x45, 0x8F, 0x5A, 0x95, 0x11, 0x17, 0x81, 0xD7, 0xDF, 0x17, 0x99 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E60094C3-45AF-5A8F-9511-1781D7DF1799")]
    internal interface IFrameworkView : global::Microsoft.UI.Xaml.IFrameworkView
    {
    }
    internal static class IFrameworkViewSourceMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x75, 0xD9, 0xB5, 0x52, 0xA6, 0x6F, 0x66, 0x5B, 0xA2, 0x48, 0xD1, 0x74, 0x43, 0xB2, 0xBC, 0xA0 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("52B5D975-6FA6-5B66-A248-D17443B2BCA0")]
    internal interface IFrameworkViewSource : global::Microsoft.UI.Xaml.IFrameworkViewSource
    {
    }
    internal static class ILaunchActivatedEventArgsMethods
    {

        internal static unsafe string get_Arguments(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.ApplicationModel.Activation.LaunchActivatedEventArgs get_UWPLaunchActivatedEventArgs(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA9, 0xCE, 0x5, 0xD5, 0xCB, 0x1B, 0x29, 0x5B, 0xA8, 0xBE, 0x94, 0x4E, 0x0, 0xF0, 0x6F, 0x78 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D505CEA9-1BCB-5B29-A8BE-944E00F06F78")]
    internal interface ILaunchActivatedEventArgs : global::Microsoft.UI.Xaml.ILaunchActivatedEventArgs
    {
    }
    internal static class IMediaFailedRoutedEventArgsMethods
    {

        internal static unsafe string get_ErrorTrace(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x37, 0xE7, 0xDC, 0xA1, 0x9B, 0x53, 0x54, 0x5E, 0x99, 0xAF, 0x75, 0xEC, 0xE4, 0x28, 0xBF, 0x9B };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A1DCE737-539B-5E54-99AF-75ECE428BF9B")]
    internal interface IMediaFailedRoutedEventArgs : global::Microsoft.UI.Xaml.IMediaFailedRoutedEventArgs
    {
    }
    internal static class IPointHelperMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA4, 0xC7, 0xFC, 0x6, 0x99, 0x60, 0x2E, 0x5F, 0x83, 0xA5, 0xF3, 0xBE, 0xE, 0x2C, 0x90, 0xAA };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("06FCC7A4-6099-5F2E-83A5-F3BE0E2C90AA")]
    internal interface IPointHelper : global::Microsoft.UI.Xaml.IPointHelper
    {
    }
    internal static class IPointHelperStaticsMethods
    {


        internal static unsafe global::Windows.Foundation.Point FromCoordinates(IObjectReference _obj, float x, float y)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float, float, global::Windows.Foundation.Point*, int>**)ThisPtr)[6](ThisPtr, x, y, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x44, 0xBD, 0xB2, 0xB0, 0xB, 0x60, 0xB3, 0x51, 0xA4, 0x2C, 0x3F, 0xD3, 0x6C, 0x1A, 0xB0, 0x42 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B0B2BD44-600B-51B3-A42C-3FD36C1AB042")]
    internal interface IPointHelperStatics : global::Microsoft.UI.Xaml.IPointHelperStatics
    {
    }
    internal static class IPropertyMetadataMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.CreateDefaultValueCallback get_CreateDefaultValueCallback(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.CreateDefaultValueCallback.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.CreateDefaultValueCallback.DisposeAbi(__retval);
            }
        }

        internal static unsafe object get_DefaultValue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x25, 0x44, 0x64, 0xB3, 0x64, 0x94, 0x34, 0x54, 0xB0, 0xAE, 0xAF, 0xF8, 0xD3, 0x15, 0x9F, 0xE1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B3644425-9464-5434-B0AE-AFF8D3159FE1")]
    internal interface IPropertyMetadata : global::Microsoft.UI.Xaml.IPropertyMetadata
    {
    }
    internal static class IPropertyMetadataFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.PropertyMetadata CreateInstanceWithDefaultValue(IObjectReference _obj, object defaultValue, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __defaultValue = default;
            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __defaultValue = MarshalInspectable<object>.CreateMarshaler2(defaultValue);
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__defaultValue), MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.PropertyMetadata.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__defaultValue);
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.PropertyMetadata.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.PropertyMetadata CreateInstanceWithDefaultValueAndCallback(IObjectReference _obj, object defaultValue, global::Microsoft.UI.Xaml.PropertyChangedCallback propertyChangedCallback, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __defaultValue = default;
            ObjectReferenceValue __propertyChangedCallback = default;
            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __defaultValue = MarshalInspectable<object>.CreateMarshaler2(defaultValue);
                __propertyChangedCallback = PropertyChangedCallback.CreateMarshaler2(propertyChangedCallback);
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__defaultValue), MarshalInspectable<object>.GetAbi(__propertyChangedCallback), MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.PropertyMetadata.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__defaultValue);
                MarshalInspectable<object>.DisposeMarshaler(__propertyChangedCallback);
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.PropertyMetadata.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x6, 0x9, 0x42, 0x9F, 0x1A, 0x11, 0x65, 0x54, 0x91, 0xEE, 0xBE, 0xD1, 0x4B, 0x3E, 0x7F, 0xEC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("9F420906-111A-5465-91EE-BED14B3E7FEC")]
    internal interface IPropertyMetadataFactory : global::Microsoft.UI.Xaml.IPropertyMetadataFactory
    {
    }
    internal static class IPropertyMetadataStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.PropertyMetadata Create(IObjectReference _obj, object defaultValue)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __defaultValue = default;
            IntPtr __retval = default;
            try
            {
                __defaultValue = MarshalInspectable<object>.CreateMarshaler2(defaultValue);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__defaultValue), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.PropertyMetadata.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__defaultValue);
                global::ABI.Microsoft.UI.Xaml.PropertyMetadata.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.PropertyMetadata Create(IObjectReference _obj, object defaultValue, global::Microsoft.UI.Xaml.PropertyChangedCallback propertyChangedCallback)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __defaultValue = default;
            ObjectReferenceValue __propertyChangedCallback = default;
            IntPtr __retval = default;
            try
            {
                __defaultValue = MarshalInspectable<object>.CreateMarshaler2(defaultValue);
                __propertyChangedCallback = PropertyChangedCallback.CreateMarshaler2(propertyChangedCallback);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__defaultValue), MarshalInspectable<object>.GetAbi(__propertyChangedCallback), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.PropertyMetadata.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__defaultValue);
                MarshalInspectable<object>.DisposeMarshaler(__propertyChangedCallback);
                global::ABI.Microsoft.UI.Xaml.PropertyMetadata.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.PropertyMetadata Create(IObjectReference _obj, global::Microsoft.UI.Xaml.CreateDefaultValueCallback createDefaultValueCallback)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __createDefaultValueCallback = default;
            IntPtr __retval = default;
            try
            {
                __createDefaultValueCallback = CreateDefaultValueCallback.CreateMarshaler2(createDefaultValueCallback);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__createDefaultValueCallback), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.PropertyMetadata.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__createDefaultValueCallback);
                global::ABI.Microsoft.UI.Xaml.PropertyMetadata.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.PropertyMetadata Create(IObjectReference _obj, global::Microsoft.UI.Xaml.CreateDefaultValueCallback createDefaultValueCallback, global::Microsoft.UI.Xaml.PropertyChangedCallback propertyChangedCallback)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __createDefaultValueCallback = default;
            ObjectReferenceValue __propertyChangedCallback = default;
            IntPtr __retval = default;
            try
            {
                __createDefaultValueCallback = CreateDefaultValueCallback.CreateMarshaler2(createDefaultValueCallback);
                __propertyChangedCallback = PropertyChangedCallback.CreateMarshaler2(propertyChangedCallback);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__createDefaultValueCallback), MarshalInspectable<object>.GetAbi(__propertyChangedCallback), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.PropertyMetadata.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__createDefaultValueCallback);
                MarshalInspectable<object>.DisposeMarshaler(__propertyChangedCallback);
                global::ABI.Microsoft.UI.Xaml.PropertyMetadata.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD4, 0xAD, 0xB8, 0x37, 0x4A, 0x7A, 0xF7, 0x5C, 0xA1, 0x74, 0x23, 0x51, 0x82, 0xCD, 0x8, 0x2E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("37B8ADD4-7A4A-5CF7-A174-235182CD082E")]
    internal interface IPropertyMetadataStatics : global::Microsoft.UI.Xaml.IPropertyMetadataStatics
    {
    }
    internal static class IPropertyPathMethods
    {

        internal static unsafe string get_Path(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF6, 0x12, 0x7, 0x8B, 0x57, 0x9E, 0xB0, 0x53, 0x80, 0xB1, 0x96, 0x6A, 0x79, 0xF6, 0xB, 0x96 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8B0712F6-9E57-53B0-80B1-966A79F60B96")]
    internal interface IPropertyPath : global::Microsoft.UI.Xaml.IPropertyPath
    {
    }
    internal static class IPropertyPathFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.PropertyPath CreateInstance(IObjectReference _obj, string path)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __path = new(path);
                fixed(void* ___path = __path)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __path), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.UI.Xaml.PropertyPath.FromAbi(__retval);
                }
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.PropertyPath.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xAB, 0xCC, 0xA8, 0x8, 0xF8, 0x7F, 0xEC, 0x5C, 0xBD, 0x3C, 0x72, 0xC9, 0x88, 0x4, 0xD9, 0x89 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("08A8CCAB-7FF8-5CEC-BD3C-72C98804D989")]
    internal interface IPropertyPathFactory : global::Microsoft.UI.Xaml.IPropertyPathFactory
    {
    }
    internal static class IRectHelperMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x2A, 0xE9, 0xEC, 0x5F, 0xD2, 0xA3, 0xC0, 0x5B, 0xAC, 0xA1, 0xE9, 0xE1, 0xFA, 0x86, 0xAE, 0x9D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("5FECE92A-A3D2-5BC0-ACA1-E9E1FA86AE9D")]
    internal interface IRectHelper : global::Microsoft.UI.Xaml.IRectHelper
    {
    }
    internal static class IRectHelperStaticsMethods
    {


        internal static unsafe global::Windows.Foundation.Rect FromCoordinatesAndDimensions(IObjectReference _obj, float x, float y, float width, float height)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Rect __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float, float, float, float, global::Windows.Foundation.Rect*, int>**)ThisPtr)[7](ThisPtr, x, y, width, height, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.Rect FromPoints(IObjectReference _obj, global::Windows.Foundation.Point point1, global::Windows.Foundation.Point point2)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Rect __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point, global::Windows.Foundation.Point, global::Windows.Foundation.Rect*, int>**)ThisPtr)[8](ThisPtr, point1, point2, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.Rect FromLocationAndSize(IObjectReference _obj, global::Windows.Foundation.Point location, global::Windows.Foundation.Size size)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Rect __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point, global::Windows.Foundation.Size, global::Windows.Foundation.Rect*, int>**)ThisPtr)[9](ThisPtr, location, size, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe bool GetIsEmpty(IObjectReference _obj, global::Windows.Foundation.Rect target)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect, byte*, int>**)ThisPtr)[10](ThisPtr, target, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe float GetBottom(IObjectReference _obj, global::Windows.Foundation.Rect target)
        {
            var ThisPtr = _obj.ThisPtr;

            float __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect, float*, int>**)ThisPtr)[11](ThisPtr, target, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe float GetLeft(IObjectReference _obj, global::Windows.Foundation.Rect target)
        {
            var ThisPtr = _obj.ThisPtr;

            float __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect, float*, int>**)ThisPtr)[12](ThisPtr, target, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe float GetRight(IObjectReference _obj, global::Windows.Foundation.Rect target)
        {
            var ThisPtr = _obj.ThisPtr;

            float __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect, float*, int>**)ThisPtr)[13](ThisPtr, target, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe float GetTop(IObjectReference _obj, global::Windows.Foundation.Rect target)
        {
            var ThisPtr = _obj.ThisPtr;

            float __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect, float*, int>**)ThisPtr)[14](ThisPtr, target, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe bool Contains(IObjectReference _obj, global::Windows.Foundation.Rect target, global::Windows.Foundation.Point point)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect, global::Windows.Foundation.Point, byte*, int>**)ThisPtr)[15](ThisPtr, target, point, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool Equals(IObjectReference _obj, global::Windows.Foundation.Rect target, global::Windows.Foundation.Rect value)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect, global::Windows.Foundation.Rect, byte*, int>**)ThisPtr)[16](ThisPtr, target, value, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe global::Windows.Foundation.Rect Intersect(IObjectReference _obj, global::Windows.Foundation.Rect target, global::Windows.Foundation.Rect rect)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Rect __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect, global::Windows.Foundation.Rect, global::Windows.Foundation.Rect*, int>**)ThisPtr)[17](ThisPtr, target, rect, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.Rect Union(IObjectReference _obj, global::Windows.Foundation.Rect target, global::Windows.Foundation.Point point)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Rect __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect, global::Windows.Foundation.Point, global::Windows.Foundation.Rect*, int>**)ThisPtr)[18](ThisPtr, target, point, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.Rect Union(IObjectReference _obj, global::Windows.Foundation.Rect target, global::Windows.Foundation.Rect rect)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Rect __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect, global::Windows.Foundation.Rect, global::Windows.Foundation.Rect*, int>**)ThisPtr)[19](ThisPtr, target, rect, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe global::Windows.Foundation.Rect get_Empty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Rect __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xAD, 0x37, 0xCF, 0xA9, 0x30, 0x54, 0x86, 0x50, 0xA3, 0x9F, 0x74, 0xF0, 0xD1, 0xED, 0x10, 0x72 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A9CF37AD-5430-5086-A39F-74F0D1ED1072")]
    internal interface IRectHelperStatics : global::Microsoft.UI.Xaml.IRectHelperStatics
    {
    }
    internal static class IResourceDictionaryMethods
    {

        internal static unsafe global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.ResourceDictionary> get_MergedDictionaries(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Xaml_ResourceDictionary.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.ResourceDictionary>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.ResourceDictionary>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Uri get_Source(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.Uri.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.Uri.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Source(IObjectReference _obj, global::System.Uri value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.System.Uri.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Collections.Generic.IDictionary<object, object> get_ThemeDictionaries(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMap_2_object__object.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IDictionary<object, object>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IDictionary<object, object>>.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x75, 0x9, 0x69, 0x1B, 0x10, 0xA7, 0x83, 0x57, 0xA6, 0xE1, 0x15, 0x83, 0x6F, 0x61, 0x86, 0xC2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("1B690975-A710-5783-A6E1-15836F6186C2")]
    internal interface IResourceDictionary : global::Microsoft.UI.Xaml.IResourceDictionary
    {
    }
    internal static class IResourceDictionaryFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.ResourceDictionary CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.ResourceDictionary.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.ResourceDictionary.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x8F, 0xA4, 0x22, 0xEA, 0x71, 0xAB, 0xF6, 0x56, 0xA3, 0x92, 0xD8, 0x23, 0x10, 0xC8, 0xAA, 0x7B };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("EA22A48F-AB71-56F6-A392-D82310C8AA7B")]
    internal interface IResourceDictionaryFactory : global::Microsoft.UI.Xaml.IResourceDictionaryFactory
    {
    }
    internal static class IResourceManagerRequestedEventArgsMethods
    {

        internal static unsafe global::Microsoft.Windows.ApplicationModel.Resources.IResourceManager get_CustomResourceManager(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Microsoft.Windows.ApplicationModel.Resources.IResourceManager>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Microsoft.Windows.ApplicationModel.Resources.IResourceManager>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_CustomResourceManager(IObjectReference _obj, global::Microsoft.Windows.ApplicationModel.Resources.IResourceManager value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::Microsoft.Windows.ApplicationModel.Resources.IResourceManager>.CreateMarshaler2(value, global::ABI.Microsoft.Windows.ApplicationModel.Resources.IResourceManagerMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF1, 0x4C, 0x5F, 0xC3, 0xD6, 0xFC, 0x6B, 0x5C, 0x9B, 0xE2, 0x4C, 0xFA, 0xEF, 0xB6, 0x8B, 0x2A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C35F4CF1-FCD6-5C6B-9BE2-4CFAEFB68B2A")]
    internal interface IResourceManagerRequestedEventArgs : global::Microsoft.UI.Xaml.IResourceManagerRequestedEventArgs
    {
    }
    internal static class IRoutedEventMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xBC, 0x32, 0xB4, 0xB2, 0xCA, 0xEF, 0x5E, 0x57, 0x9D, 0x2A, 0x70, 0x3F, 0x8B, 0x9C, 0x38, 0xF };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B2B432BC-EFCA-575E-9D2A-703F8B9C380F")]
    internal interface IRoutedEvent : global::Microsoft.UI.Xaml.IRoutedEvent
    {
    }
    internal static class IRoutedEventArgsMethods
    {

        internal static unsafe object get_OriginalSource(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7, 0xC4, 0x8, 0x9, 0x7D, 0x1C, 0xE3, 0x5D, 0x9C, 0x50, 0xD9, 0x71, 0xC6, 0x2E, 0xC8, 0xEC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("0908C407-1C7D-5DE3-9C50-D971C62EC8EC")]
    internal interface IRoutedEventArgs : global::Microsoft.UI.Xaml.IRoutedEventArgs
    {
    }
    internal static class IRoutedEventArgsFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.RoutedEventArgs CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.RoutedEventArgs.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.RoutedEventArgs.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC7, 0x2, 0x4B, 0x91, 0x6B, 0x7, 0x89, 0x5B, 0x98, 0xE7, 0x6C, 0x37, 0x33, 0x79, 0xE9, 0xAF };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("914B02C7-076B-5B89-98E7-6C373379E9AF")]
    internal interface IRoutedEventArgsFactory : global::Microsoft.UI.Xaml.IRoutedEventArgsFactory
    {
    }
    internal static class IScalarTransitionMethods
    {

        internal static unsafe global::System.TimeSpan get_Duration(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.TimeSpan __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.TimeSpan*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.TimeSpan.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.TimeSpan.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Duration(IObjectReference _obj, global::System.TimeSpan value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.TimeSpan.Marshaler __value = default;
            try
            {
                __value = global::ABI.System.TimeSpan.CreateMarshaler(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.TimeSpan, int>**)ThisPtr)[7](ThisPtr, global::ABI.System.TimeSpan.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                global::ABI.System.TimeSpan.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC8, 0x2A, 0xDA, 0xC2, 0x4C, 0x81, 0x89, 0x58, 0xB2, 0xF4, 0x4E, 0xBE, 0x4B, 0x0, 0x1E, 0xE3 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C2DA2AC8-814C-5889-B2F4-4EBE4B001EE3")]
    internal interface IScalarTransition : global::Microsoft.UI.Xaml.IScalarTransition
    {
    }
    internal static class IScalarTransitionFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.ScalarTransition CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.ScalarTransition.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.ScalarTransition.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF8, 0xC, 0x65, 0xA1, 0x5B, 0xA1, 0xFC, 0x54, 0xB5, 0x95, 0xC5, 0x24, 0x91, 0x31, 0x8F, 0x58 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A1650CF8-A15B-54FC-B595-C52491318F58")]
    internal interface IScalarTransitionFactory : global::Microsoft.UI.Xaml.IScalarTransitionFactory
    {
    }
    internal static class ISetterMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_Property(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Property(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyProperty value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.TargetPropertyPath get_Target(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.TargetPropertyPath.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.TargetPropertyPath.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Target(IObjectReference _obj, global::Microsoft.UI.Xaml.TargetPropertyPath value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.TargetPropertyPath.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe object get_Value(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Value(IObjectReference _obj, object value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInspectable<object>.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x4D, 0x7, 0xD6, 0xBB, 0x6F, 0x68, 0xE1, 0x5A, 0xB8, 0xDE, 0x5F, 0x16, 0xAA, 0x30, 0xB8, 0xA };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("BBD6074D-686F-5AE1-B8DE-5F16AA30B80A")]
    internal interface ISetter : global::Microsoft.UI.Xaml.ISetter
    {
    }
    internal static class ISetterBaseMethods
    {

        internal static unsafe bool get_IsSealed(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x47, 0x13, 0x7C, 0x5A, 0xA3, 0xCD, 0xBE, 0x55, 0xBF, 0xEF, 0x5C, 0x75, 0x82, 0x21, 0x39, 0x80 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("5A7C1347-CDA3-55BE-BFEF-5C7582213980")]
    internal interface ISetterBase : global::Microsoft.UI.Xaml.ISetterBase
    {
    }
    internal static class ISetterBaseCollectionMethods
    {

        internal static unsafe bool get_IsSealed(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF, 0x7C, 0xBF, 0x63, 0x90, 0xB2, 0xC, 0x5C, 0x91, 0x85, 0x33, 0x38, 0xCD, 0x35, 0xD, 0x7F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("63BF7C0F-B290-5C0C-9185-3338CD350D7F")]
    internal interface ISetterBaseCollection : global::Microsoft.UI.Xaml.ISetterBaseCollection
    {
    }
    internal static class ISetterBaseFactoryMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x2F, 0x1D, 0xA, 0x78, 0xBE, 0xC4, 0x7, 0x57, 0x8A, 0x8A, 0x45, 0x50, 0xDC, 0x22, 0x58, 0x3E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("780A1D2F-C4BE-5707-8A8A-4550DC22583E")]
    internal interface ISetterBaseFactory : global::Microsoft.UI.Xaml.ISetterBaseFactory
    {
    }
    internal static class ISetterFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Setter CreateInstance(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyProperty targetProperty, object value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __targetProperty = default;
            ObjectReferenceValue __value = default;
            IntPtr __retval = default;
            try
            {
                __targetProperty = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(targetProperty);
                __value = MarshalInspectable<object>.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__targetProperty), MarshalInspectable<object>.GetAbi(__value), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Setter.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__targetProperty);
                MarshalInspectable<object>.DisposeMarshaler(__value);
                global::ABI.Microsoft.UI.Xaml.Setter.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x6, 0xA, 0x91, 0x13, 0x27, 0xA3, 0x7, 0x54, 0xAE, 0x91, 0xB9, 0xD2, 0xCC, 0x3A, 0x7A, 0xB5 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("13910A06-A327-5407-AE91-B9D2CC3A7AB5")]
    internal interface ISetterFactory : global::Microsoft.UI.Xaml.ISetterFactory
    {
    }
    internal static class ISizeChangedEventArgsMethods
    {

        internal static unsafe global::Windows.Foundation.Size get_NewSize(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Size __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Size*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.Size get_PreviousSize(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Size __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Size*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x4E, 0x32, 0x76, 0xFE, 0xFB, 0x6D, 0xB1, 0x58, 0x9D, 0xCD, 0x88, 0x6C, 0xA8, 0xF9, 0xA2, 0xEA };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("FE76324E-6DFB-58B1-9DCD-886CA8F9A2EA")]
    internal interface ISizeChangedEventArgs : global::Microsoft.UI.Xaml.ISizeChangedEventArgs
    {
    }
    internal static class ISizeHelperMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE1, 0xEE, 0xF9, 0x5D, 0xA8, 0xA2, 0x55, 0x5E, 0x86, 0x68, 0xAF, 0xED, 0xC0, 0xB3, 0x6D, 0xEB };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("5DF9EEE1-A2A8-5E55-8668-AFEDC0B36DEB")]
    internal interface ISizeHelper : global::Microsoft.UI.Xaml.ISizeHelper
    {
    }
    internal static class ISizeHelperStaticsMethods
    {


        internal static unsafe global::Windows.Foundation.Size FromDimensions(IObjectReference _obj, float width, float height)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Size __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float, float, global::Windows.Foundation.Size*, int>**)ThisPtr)[7](ThisPtr, width, height, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe bool GetIsEmpty(IObjectReference _obj, global::Windows.Foundation.Size target)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Size, byte*, int>**)ThisPtr)[8](ThisPtr, target, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool Equals(IObjectReference _obj, global::Windows.Foundation.Size target, global::Windows.Foundation.Size value)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Size, global::Windows.Foundation.Size, byte*, int>**)ThisPtr)[9](ThisPtr, target, value, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe global::Windows.Foundation.Size get_Empty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Size __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Size*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7F, 0xB2, 0xF1, 0xCF, 0xF1, 0x84, 0x14, 0x5B, 0x94, 0x59, 0x76, 0x4A, 0xF5, 0x71, 0x4F, 0xE5 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("CFF1B27F-84F1-5B14-9459-764AF5714FE5")]
    internal interface ISizeHelperStatics : global::Microsoft.UI.Xaml.ISizeHelperStatics
    {
    }
    internal static class IStateTriggerMethods
    {

        internal static unsafe bool get_IsActive(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsActive(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x26, 0x81, 0x9, 0x7B, 0xAB, 0x1D, 0x58, 0x5B, 0xAC, 0xA7, 0xF2, 0xB7, 0xDE, 0x2E, 0x10, 0x33 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("7B098126-1DAB-5B58-ACA7-F2B7DE2E1033")]
    internal interface IStateTrigger : global::Microsoft.UI.Xaml.IStateTrigger
    {
    }
    internal static class IStateTriggerBaseMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7B, 0xF, 0x7B, 0xF0, 0x94, 0x5B, 0xAE, 0x58, 0x87, 0x17, 0x22, 0xAB, 0x9, 0x3B, 0xC1, 0x31 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F07B0F7B-5B94-58AE-8717-22AB093BC131")]
    internal interface IStateTriggerBase : global::Microsoft.UI.Xaml.IStateTriggerBase
    {
    }
    internal static class IStateTriggerBaseFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.StateTriggerBase CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.StateTriggerBase.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.StateTriggerBase.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x65, 0x4D, 0x72, 0xE7, 0x7E, 0xFC, 0x67, 0x5C, 0xBB, 0x84, 0xB4, 0xC7, 0xB0, 0x20, 0xAD, 0xC3 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E7724D65-FC7E-5C67-BB84-B4C7B020ADC3")]
    internal interface IStateTriggerBaseFactory : global::Microsoft.UI.Xaml.IStateTriggerBaseFactory
    {
    }
    internal static class IStateTriggerBaseProtectedMethods
    {


        internal static unsafe void SetActive(IObjectReference _obj, bool IsActive)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[6](ThisPtr, (byte)(IsActive ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x47, 0x50, 0x69, 0x2F, 0x5B, 0x33, 0x0, 0x5C, 0xA0, 0xD4, 0x2A, 0x8F, 0xA5, 0x45, 0x44, 0xC6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2F695047-335B-5C00-A0D4-2A8FA54544C6")]
    internal interface IStateTriggerBaseProtected : global::Microsoft.UI.Xaml.IStateTriggerBaseProtected
    {
    }
    internal static class IStateTriggerStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IsActiveProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x19, 0xC0, 0x60, 0xBD, 0x3B, 0x83, 0x32, 0x54, 0xA4, 0x1D, 0x89, 0xD7, 0x24, 0x10, 0xEB, 0x47 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("BD60C019-833B-5432-A41D-89D72410EB47")]
    internal interface IStateTriggerStatics : global::Microsoft.UI.Xaml.IStateTriggerStatics
    {
    }
    internal static class IStyleMethods
    {


        internal static unsafe void Seal(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[12](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }
        internal static unsafe global::Microsoft.UI.Xaml.Style get_BasedOn(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Style.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Style.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_BasedOn(IObjectReference _obj, global::Microsoft.UI.Xaml.Style value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Style.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe bool get_IsSealed(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe global::Microsoft.UI.Xaml.SetterBaseCollection get_Setters(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.SetterBaseCollection.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.SetterBaseCollection.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Type get_TargetType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.Type __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.Type*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.Type.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.Type.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_TargetType(IObjectReference _obj, global::System.Type value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.Type.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.Type, int>**)ThisPtr)[9](ThisPtr, global::ABI.System.Type.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x64, 0xD1, 0xE1, 0x65, 0x2F, 0x57, 0xE, 0x5B, 0xA8, 0xF, 0x9C, 0x2, 0x44, 0x1F, 0xAC, 0x49 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("65E1D164-572F-5B0E-A80F-9C02441FAC49")]
    internal interface IStyle : global::Microsoft.UI.Xaml.IStyle
    {
    }
    internal static class IStyleFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Style CreateInstance(IObjectReference _obj, global::System.Type targetType)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::ABI.System.Type.Pinnable __targetType = new(targetType);
                fixed(void* ___targetType = __targetType)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.Type, IntPtr*, int>**)ThisPtr)[6](ThisPtr, global::ABI.System.Type.GetAbi(ref __targetType), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.UI.Xaml.Style.FromAbi(__retval);
                }
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Style.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA2, 0x24, 0xD9, 0xC2, 0x62, 0x38, 0x7C, 0x51, 0xB0, 0x83, 0x9A, 0x91, 0x20, 0xD7, 0x30, 0x2D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C2D924A2-3862-517C-B083-9A9120D7302D")]
    internal interface IStyleFactory : global::Microsoft.UI.Xaml.IStyleFactory
    {
    }
    internal static class ITargetPropertyPathMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.PropertyPath get_Path(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.PropertyPath.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.PropertyPath.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Path(IObjectReference _obj, global::Microsoft.UI.Xaml.PropertyPath value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.PropertyPath.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe object get_Target(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Target(IObjectReference _obj, object value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInspectable<object>.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE, 0x2F, 0x44, 0xB1, 0x6B, 0xF6, 0x1C, 0x53, 0x97, 0x9B, 0x19, 0x3F, 0xD3, 0x44, 0xE2, 0xA8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B1442F0E-F66B-531C-979B-193FD344E2A8")]
    internal interface ITargetPropertyPath : global::Microsoft.UI.Xaml.ITargetPropertyPath
    {
    }
    internal static class ITargetPropertyPathFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.TargetPropertyPath CreateInstance(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyProperty targetProperty)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __targetProperty = default;
            IntPtr __retval = default;
            try
            {
                __targetProperty = global::ABI.Microsoft.UI.Xaml.DependencyProperty.CreateMarshaler2(targetProperty);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__targetProperty), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.TargetPropertyPath.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__targetProperty);
                global::ABI.Microsoft.UI.Xaml.TargetPropertyPath.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x1D, 0xB1, 0x4C, 0x89, 0x16, 0x5C, 0x5B, 0x55, 0xB6, 0x61, 0xF4, 0x1B, 0x29, 0xFD, 0x9B, 0x21 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("894CB11D-5C16-555B-B661-F41B29FD9B21")]
    internal interface ITargetPropertyPathFactory : global::Microsoft.UI.Xaml.ITargetPropertyPathFactory
    {
    }
    internal static class ITriggerActionMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x64, 0x54, 0xA3, 0x1F, 0x90, 0xA6, 0x6C, 0x58, 0xAE, 0xDF, 0x6C, 0x88, 0xCA, 0xC7, 0xD1, 0x4A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("1FA35464-A690-586C-AEDF-6C88CAC7D14A")]
    internal interface ITriggerAction : global::Microsoft.UI.Xaml.ITriggerAction
    {
    }
    internal static class ITriggerActionFactoryMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x1A, 0xAF, 0x1F, 0x1E, 0x14, 0xF6, 0x4A, 0x55, 0x82, 0x2A, 0xD9, 0x8F, 0xE4, 0x65, 0x75, 0xD1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("1E1FAF1A-F614-554A-822A-D98FE46575D1")]
    internal interface ITriggerActionFactory : global::Microsoft.UI.Xaml.ITriggerActionFactory
    {
    }
    internal static class ITriggerBaseMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x9D, 0xA8, 0x7D, 0xD3, 0x71, 0xD, 0xCF, 0x58, 0xA9, 0x1, 0x99, 0xA7, 0xD3, 0xE5, 0xE4, 0x34 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D37DA89D-0D71-58CF-A901-99A7D3E5E434")]
    internal interface ITriggerBase : global::Microsoft.UI.Xaml.ITriggerBase
    {
    }
    internal static class ITriggerBaseFactoryMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xAA, 0x8E, 0x8, 0x23, 0xEC, 0x17, 0xB2, 0x51, 0xB1, 0x81, 0x5B, 0xED, 0xFA, 0x8B, 0x8F, 0xA4 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("23088EAA-17EC-51B2-B181-5BEDFA8B8FA4")]
    internal interface ITriggerBaseFactory : global::Microsoft.UI.Xaml.ITriggerBaseFactory
    {
    }
    internal static class IUIElementMethods
    {


        internal static unsafe void Measure(IObjectReference _obj, global::Windows.Foundation.Size availableSize)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Size, int>**)ThisPtr)[210](ThisPtr, availableSize));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void Arrange(IObjectReference _obj, global::Windows.Foundation.Rect finalRect)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect, int>**)ThisPtr)[211](ThisPtr, finalRect));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool CapturePointer(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.Pointer value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            byte __retval = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Input.Pointer.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte*, int>**)ThisPtr)[212](ThisPtr, MarshalInspectable<object>.GetAbi(__value), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe void ReleasePointerCapture(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.Pointer value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Input.Pointer.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[213](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe void ReleasePointerCaptures(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[214](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void AddHandler(IObjectReference _obj, global::Microsoft.UI.Xaml.RoutedEvent routedEvent, object handler, bool handledEventsToo)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __routedEvent = default;
            ObjectReferenceValue __handler = default;
            try
            {
                __routedEvent = global::ABI.Microsoft.UI.Xaml.RoutedEvent.CreateMarshaler2(routedEvent);
                __handler = MarshalInspectable<object>.CreateMarshaler2(handler);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, byte, int>**)ThisPtr)[215](ThisPtr, MarshalInspectable<object>.GetAbi(__routedEvent), MarshalInspectable<object>.GetAbi(__handler), (byte)(handledEventsToo ? 1 : 0)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__routedEvent);
                MarshalInspectable<object>.DisposeMarshaler(__handler);
            }
        }

        internal static unsafe void RemoveHandler(IObjectReference _obj, global::Microsoft.UI.Xaml.RoutedEvent routedEvent, object handler)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __routedEvent = default;
            ObjectReferenceValue __handler = default;
            try
            {
                __routedEvent = global::ABI.Microsoft.UI.Xaml.RoutedEvent.CreateMarshaler2(routedEvent);
                __handler = MarshalInspectable<object>.CreateMarshaler2(handler);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[216](ThisPtr, MarshalInspectable<object>.GetAbi(__routedEvent), MarshalInspectable<object>.GetAbi(__handler)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__routedEvent);
                MarshalInspectable<object>.DisposeMarshaler(__handler);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.GeneralTransform TransformToVisual(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement visual)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __visual = default;
            IntPtr __retval = default;
            try
            {
                __visual = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(visual);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[217](ThisPtr, MarshalInspectable<object>.GetAbi(__visual), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.GeneralTransform.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__visual);
                global::ABI.Microsoft.UI.Xaml.Media.GeneralTransform.DisposeAbi(__retval);
            }
        }

        internal static unsafe void InvalidateMeasure(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[218](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void InvalidateArrange(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[219](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void UpdateLayout(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[220](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool CancelDirectManipulations(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[221](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.DataTransfer.DataPackageOperation> StartDragAsync(IObjectReference _obj, global::Microsoft.UI.Input.PointerPoint pointerPoint)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __pointerPoint = default;
            IntPtr __retval = default;
            try
            {
                __pointerPoint = global::ABI.Microsoft.UI.Input.PointerPoint.CreateMarshaler2(pointerPoint);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[222](ThisPtr, MarshalInspectable<object>.GetAbi(__pointerPoint), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_ApplicationModel_DataTransfer_DataPackageOperation.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.DataTransfer.DataPackageOperation>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__pointerPoint);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.DataTransfer.DataPackageOperation>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe void StartBringIntoView(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[223](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void StartBringIntoView(IObjectReference _obj, global::Microsoft.UI.Xaml.BringIntoViewOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __options = default;
            try
            {
                __options = global::ABI.Microsoft.UI.Xaml.BringIntoViewOptions.CreateMarshaler2(options);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[224](ThisPtr, MarshalInspectable<object>.GetAbi(__options)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__options);
            }
        }

        internal static unsafe void TryInvokeKeyboardAccelerator(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs args)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __args = default;
            try
            {
                __args = global::ABI.Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs.CreateMarshaler2(args);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[225](ThisPtr, MarshalInspectable<object>.GetAbi(__args)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__args);
            }
        }

        internal static unsafe bool Focus(IObjectReference _obj, global::Microsoft.UI.Xaml.FocusState value)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.FocusState, byte*, int>**)ThisPtr)[226](ThisPtr, value, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe void StartAnimation(IObjectReference _obj, global::Microsoft.UI.Composition.ICompositionAnimationBase animation)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __animation = default;
            try
            {
                __animation = MarshalInterface<global::Microsoft.UI.Composition.ICompositionAnimationBase>.CreateMarshaler2(animation, global::ABI.Microsoft.UI.Composition.ICompositionAnimationBaseMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[227](ThisPtr, MarshalInspectable<object>.GetAbi(__animation)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__animation);
            }
        }

        internal static unsafe void StopAnimation(IObjectReference _obj, global::Microsoft.UI.Composition.ICompositionAnimationBase animation)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __animation = default;
            try
            {
                __animation = MarshalInterface<global::Microsoft.UI.Composition.ICompositionAnimationBase>.CreateMarshaler2(animation, global::ABI.Microsoft.UI.Composition.ICompositionAnimationBaseMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[228](ThisPtr, MarshalInspectable<object>.GetAbi(__animation)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__animation);
            }
        }
        internal static unsafe string get_AccessKey(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[58](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_AccessKey(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[59](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject get_AccessKeyScopeOwner(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[56](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_AccessKeyScopeOwner(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[57](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Numerics.Vector3 get_ActualOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::System.Numerics.Vector3 __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::System.Numerics.Vector3*, int>**)ThisPtr)[107](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::System.Numerics.Vector2 get_ActualSize(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::System.Numerics.Vector2 __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::System.Numerics.Vector2*, int>**)ThisPtr)[108](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe bool get_AllowDrop(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_AllowDrop(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[8](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.CacheMode get_CacheMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[30](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.CacheMode.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.CacheMode.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_CacheMode(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.CacheMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.CacheMode.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[31](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe bool get_CanBeScrollAnchor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[50](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_CanBeScrollAnchor(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[51](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_CanDrag(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[36](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_CanDrag(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[37](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::System.Numerics.Vector3 get_CenterPoint(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::System.Numerics.Vector3 __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::System.Numerics.Vector3*, int>**)ThisPtr)[103](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_CenterPoint(IObjectReference _obj, global::System.Numerics.Vector3 value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::System.Numerics.Vector3, int>**)ThisPtr)[104](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.RectangleGeometry get_Clip(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.RectangleGeometry.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.RectangleGeometry.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Clip(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.RectangleGeometry value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.RectangleGeometry.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[12](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.ElementCompositeMode get_CompositeMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Media.ElementCompositeMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Media.ElementCompositeMode*, int>**)ThisPtr)[47](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_CompositeMode(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.ElementCompositeMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Media.ElementCompositeMode, int>**)ThisPtr)[48](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase get_ContextFlyout(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[45](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ContextFlyout(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[46](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Windows.Foundation.Size get_DesiredSize(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Size __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Size*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe bool get_ExitDisplayModeOnAccessKeyInvoked(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[52](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_ExitDisplayModeOnAccessKeyInvoked(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[53](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.FocusState get_FocusState(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.FocusState __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.FocusState*, int>**)ThisPtr)[115](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.ElementHighContrastAdjustment get_HighContrastAdjustment(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.ElementHighContrastAdjustment __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.ElementHighContrastAdjustment*, int>**)ThisPtr)[83](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_HighContrastAdjustment(IObjectReference _obj, global::Microsoft.UI.Xaml.ElementHighContrastAdjustment value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.ElementHighContrastAdjustment, int>**)ThisPtr)[84](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsAccessKeyScope(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[54](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsAccessKeyScope(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[55](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsDoubleTapEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[34](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsDoubleTapEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[35](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsHitTestVisible(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[21](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsHitTestVisible(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[22](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsHoldingEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[40](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsHoldingEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[41](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsRightTapEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[38](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsRightTapEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[39](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsTabStop(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[126](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsTabStop(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[127](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsTapEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[32](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsTapEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[33](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_KeyTipHorizontalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[62](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_KeyTipHorizontalOffset(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[63](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Input.KeyTipPlacementMode get_KeyTipPlacementMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Input.KeyTipPlacementMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.KeyTipPlacementMode*, int>**)ThisPtr)[60](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_KeyTipPlacementMode(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.KeyTipPlacementMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.KeyTipPlacementMode, int>**)ThisPtr)[61](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject get_KeyTipTarget(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[66](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_KeyTipTarget(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[67](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe double get_KeyTipVerticalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[64](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_KeyTipVerticalOffset(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[65](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorPlacementMode get_KeyboardAcceleratorPlacementMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorPlacementMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorPlacementMode*, int>**)ThisPtr)[81](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_KeyboardAcceleratorPlacementMode(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorPlacementMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorPlacementMode, int>**)ThisPtr)[82](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject get_KeyboardAcceleratorPlacementTarget(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[79](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_KeyboardAcceleratorPlacementTarget(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[80](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Input.KeyboardAccelerator> get_KeyboardAccelerators(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[78](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Xaml_Input_KeyboardAccelerator.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Input.KeyboardAccelerator>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Input.KeyboardAccelerator>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Media.XamlLight> get_Lights(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[49](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Xaml_Media_XamlLight.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Media.XamlLight>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Media.XamlLight>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Input.ManipulationModes get_ManipulationMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Input.ManipulationModes __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.ManipulationModes*, int>**)ThisPtr)[42](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ManipulationMode(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.ManipulationModes value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.ManipulationModes, int>**)ThisPtr)[43](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_Opacity(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Opacity(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[10](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.ScalarTransition get_OpacityTransition(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[87](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.ScalarTransition.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.ScalarTransition.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_OpacityTransition(IObjectReference _obj, global::Microsoft.UI.Xaml.ScalarTransition value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.ScalarTransition.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[88](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Collections.Generic.IReadOnlyList<global::Microsoft.UI.Xaml.Input.Pointer> get_PointerCaptures(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[44](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Microsoft_UI_Xaml_Input_Pointer.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.UI.Xaml.Input.Pointer>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.UI.Xaml.Input.Pointer>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Projection get_Projection(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[15](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Projection.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Projection.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Projection(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Projection value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Projection.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[16](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe double get_RasterizationScale(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[113](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_RasterizationScale(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[114](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.Foundation.Size get_RenderSize(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Size __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Size*, int>**)ThisPtr)[25](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Transform get_RenderTransform(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Transform.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Transform.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_RenderTransform(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Transform value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Transform.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[14](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Windows.Foundation.Point get_RenderTransformOrigin(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[19](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_RenderTransformOrigin(IObjectReference _obj, global::Windows.Foundation.Point value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point, int>**)ThisPtr)[20](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe float get_Rotation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            float __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float*, int>**)ThisPtr)[93](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Rotation(IObjectReference _obj, float value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float, int>**)ThisPtr)[94](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::System.Numerics.Vector3 get_RotationAxis(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::System.Numerics.Vector3 __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::System.Numerics.Vector3*, int>**)ThisPtr)[105](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_RotationAxis(IObjectReference _obj, global::System.Numerics.Vector3 value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::System.Numerics.Vector3, int>**)ThisPtr)[106](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.ScalarTransition get_RotationTransition(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[95](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.ScalarTransition.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.ScalarTransition.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_RotationTransition(IObjectReference _obj, global::Microsoft.UI.Xaml.ScalarTransition value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.ScalarTransition.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[96](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Numerics.Vector3 get_Scale(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::System.Numerics.Vector3 __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::System.Numerics.Vector3*, int>**)ThisPtr)[97](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Scale(IObjectReference _obj, global::System.Numerics.Vector3 value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::System.Numerics.Vector3, int>**)ThisPtr)[98](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Vector3Transition get_ScaleTransition(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[99](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Vector3Transition.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Vector3Transition.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ScaleTransition(IObjectReference _obj, global::Microsoft.UI.Xaml.Vector3Transition value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Vector3Transition.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[100](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Shadow get_Shadow(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[111](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Shadow.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Shadow.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Shadow(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Shadow value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Shadow.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[112](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Input.KeyboardNavigationMode get_TabFocusNavigation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Input.KeyboardNavigationMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.KeyboardNavigationMode*, int>**)ThisPtr)[85](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_TabFocusNavigation(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.KeyboardNavigationMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.KeyboardNavigationMode, int>**)ThisPtr)[86](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe int get_TabIndex(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[128](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_TabIndex(IObjectReference _obj, int value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int>**)ThisPtr)[129](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Media3D.Transform3D get_Transform3D(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[17](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Media3D.Transform3D.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Media3D.Transform3D.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Transform3D(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Media3D.Transform3D value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Media3D.Transform3D.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[18](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Numerics.Matrix4x4 get_TransformMatrix(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::System.Numerics.Matrix4x4 __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::System.Numerics.Matrix4x4*, int>**)ThisPtr)[101](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_TransformMatrix(IObjectReference _obj, global::System.Numerics.Matrix4x4 value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::System.Numerics.Matrix4x4, int>**)ThisPtr)[102](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.TransitionCollection get_Transitions(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[28](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Animation.TransitionCollection.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Animation.TransitionCollection.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Transitions(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Animation.TransitionCollection value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Animation.TransitionCollection.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[29](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Numerics.Vector3 get_Translation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::System.Numerics.Vector3 __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::System.Numerics.Vector3*, int>**)ThisPtr)[89](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Translation(IObjectReference _obj, global::System.Numerics.Vector3 value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::System.Numerics.Vector3, int>**)ThisPtr)[90](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Vector3Transition get_TranslationTransition(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[91](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Vector3Transition.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Vector3Transition.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_TranslationTransition(IObjectReference _obj, global::Microsoft.UI.Xaml.Vector3Transition value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Vector3Transition.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[92](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe bool get_UseLayoutRounding(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[26](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_UseLayoutRounding(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[27](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_UseSystemFocusVisuals(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[116](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_UseSystemFocusVisuals(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[117](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Visibility get_Visibility(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Visibility __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Visibility*, int>**)ThisPtr)[23](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Visibility(IObjectReference _obj, global::Microsoft.UI.Xaml.Visibility value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Visibility, int>**)ThisPtr)[24](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject get_XYFocusDown(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[124](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_XYFocusDown(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[125](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy get_XYFocusDownNavigationStrategy(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy*, int>**)ThisPtr)[72](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_XYFocusDownNavigationStrategy(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy, int>**)ThisPtr)[73](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Input.XYFocusKeyboardNavigationMode get_XYFocusKeyboardNavigation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Input.XYFocusKeyboardNavigationMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.XYFocusKeyboardNavigationMode*, int>**)ThisPtr)[68](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_XYFocusKeyboardNavigation(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.XYFocusKeyboardNavigationMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.XYFocusKeyboardNavigationMode, int>**)ThisPtr)[69](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject get_XYFocusLeft(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[118](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_XYFocusLeft(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[119](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy get_XYFocusLeftNavigationStrategy(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy*, int>**)ThisPtr)[74](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_XYFocusLeftNavigationStrategy(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy, int>**)ThisPtr)[75](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject get_XYFocusRight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[120](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_XYFocusRight(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[121](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy get_XYFocusRightNavigationStrategy(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy*, int>**)ThisPtr)[76](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_XYFocusRightNavigationStrategy(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy, int>**)ThisPtr)[77](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject get_XYFocusUp(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[122](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_XYFocusUp(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[123](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy get_XYFocusUpNavigationStrategy(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy*, int>**)ThisPtr)[70](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_XYFocusUpNavigationStrategy(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy, int>**)ThisPtr)[71](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.XamlRoot get_XamlRoot(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[109](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.XamlRoot.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.XamlRoot.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_XamlRoot(IObjectReference _obj, global::Microsoft.UI.Xaml.XamlRoot value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.XamlRoot.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[110](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs>>> _AccessKeyDisplayDismissed_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs>>> MakeAccessKeyDisplayDismissedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _AccessKeyDisplayDismissed_, new(), null);
            return _AccessKeyDisplayDismissed_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs>>> _AccessKeyDisplayDismissed => _AccessKeyDisplayDismissed_ ?? MakeAccessKeyDisplayDismissedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs>> Get_AccessKeyDisplayDismissed2(IObjectReference _obj, object _thisObj)
        {
            return _AccessKeyDisplayDismissed.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_UIElement__global__Microsoft_UI_Xaml_Input_AccessKeyDisplayDismissedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[192],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[193],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs>>> _AccessKeyDisplayRequested_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs>>> MakeAccessKeyDisplayRequestedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _AccessKeyDisplayRequested_, new(), null);
            return _AccessKeyDisplayRequested_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs>>> _AccessKeyDisplayRequested => _AccessKeyDisplayRequested_ ?? MakeAccessKeyDisplayRequestedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs>> Get_AccessKeyDisplayRequested2(IObjectReference _obj, object _thisObj)
        {
            return _AccessKeyDisplayRequested.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_UIElement__global__Microsoft_UI_Xaml_Input_AccessKeyDisplayRequestedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[190],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[191],
                1);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs>>> _AccessKeyInvoked_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs>>> MakeAccessKeyInvokedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _AccessKeyInvoked_, new(), null);
            return _AccessKeyInvoked_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs>>> _AccessKeyInvoked => _AccessKeyInvoked_ ?? MakeAccessKeyInvokedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs>> Get_AccessKeyInvoked2(IObjectReference _obj, object _thisObj)
        {
            return _AccessKeyInvoked.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_UIElement__global__Microsoft_UI_Xaml_Input_AccessKeyInvokedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[194],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[195],
                2);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs>>> _BringIntoViewRequested_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs>>> MakeBringIntoViewRequestedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _BringIntoViewRequested_, new(), null);
            return _BringIntoViewRequested_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs>>> _BringIntoViewRequested => _BringIntoViewRequested_ ?? MakeBringIntoViewRequestedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs>> Get_BringIntoViewRequested2(IObjectReference _obj, object _thisObj)
        {
            return _BringIntoViewRequested.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_UIElement__global__Microsoft_UI_Xaml_BringIntoViewRequestedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[208],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[209],
                3);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs>>> _CharacterReceived_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs>>> MakeCharacterReceivedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _CharacterReceived_, new(), null);
            return _CharacterReceived_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs>>> _CharacterReceived => _CharacterReceived_ ?? MakeCharacterReceivedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs>> Get_CharacterReceived2(IObjectReference _obj, object _thisObj)
        {
            return _CharacterReceived.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_UIElement__global__Microsoft_UI_Xaml_Input_CharacterReceivedRoutedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[142],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[143],
                4);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.RoutedEventArgs>>> _ContextCanceled_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.RoutedEventArgs>>> MakeContextCanceledTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ContextCanceled_, new(), null);
            return _ContextCanceled_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.RoutedEventArgs>>> _ContextCanceled => _ContextCanceled_ ?? MakeContextCanceledTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.RoutedEventArgs>> Get_ContextCanceled2(IObjectReference _obj, object _thisObj)
        {
            return _ContextCanceled.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_UIElement__global__Microsoft_UI_Xaml_RoutedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[176],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[177],
                5);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.ContextRequestedEventArgs>>> _ContextRequested_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.ContextRequestedEventArgs>>> MakeContextRequestedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ContextRequested_, new(), null);
            return _ContextRequested_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.ContextRequestedEventArgs>>> _ContextRequested => _ContextRequested_ ?? MakeContextRequestedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.ContextRequestedEventArgs>> Get_ContextRequested2(IObjectReference _obj, object _thisObj)
        {
            return _ContextRequested.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_UIElement__global__Microsoft_UI_Xaml_Input_ContextRequestedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[174],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[175],
                6);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.DoubleTappedEventHandler>> _DoubleTapped_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.DoubleTappedEventHandler>> MakeDoubleTappedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _DoubleTapped_, new(), null);
            return _DoubleTapped_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.DoubleTappedEventHandler>> _DoubleTapped => _DoubleTapped_ ?? MakeDoubleTappedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.DoubleTappedEventHandler> Get_DoubleTapped2(IObjectReference _obj, object _thisObj)
        {
            return _DoubleTapped.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_Input_DoubleTappedEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[170],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[171],
                7);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.DragEventHandler>> _DragEnter_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.DragEventHandler>> MakeDragEnterTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _DragEnter_, new(), null);
            return _DragEnter_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.DragEventHandler>> _DragEnter => _DragEnter_ ?? MakeDragEnterTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.DragEventHandler> Get_DragEnter2(IObjectReference _obj, object _thisObj)
        {
            return _DragEnter.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_DragEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[144],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[145],
                8);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.DragEventHandler>> _DragLeave_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.DragEventHandler>> MakeDragLeaveTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _DragLeave_, new(), null);
            return _DragLeave_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.DragEventHandler>> _DragLeave => _DragLeave_ ?? MakeDragLeaveTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.DragEventHandler> Get_DragLeave2(IObjectReference _obj, object _thisObj)
        {
            return _DragLeave.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_DragEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[146],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[147],
                9);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.DragEventHandler>> _DragOver_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.DragEventHandler>> MakeDragOverTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _DragOver_, new(), null);
            return _DragOver_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.DragEventHandler>> _DragOver => _DragOver_ ?? MakeDragOverTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.DragEventHandler> Get_DragOver2(IObjectReference _obj, object _thisObj)
        {
            return _DragOver.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_DragEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[148],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[149],
                10);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.DragStartingEventArgs>>> _DragStarting_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.DragStartingEventArgs>>> MakeDragStartingTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _DragStarting_, new(), null);
            return _DragStarting_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.DragStartingEventArgs>>> _DragStarting => _DragStarting_ ?? MakeDragStartingTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.DragStartingEventArgs>> Get_DragStarting2(IObjectReference _obj, object _thisObj)
        {
            return _DragStarting.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_UIElement__global__Microsoft_UI_Xaml_DragStartingEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[138],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[139],
                11);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.DragEventHandler>> _Drop_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.DragEventHandler>> MakeDropTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Drop_, new(), null);
            return _Drop_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.DragEventHandler>> _Drop => _Drop_ ?? MakeDropTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.DragEventHandler> Get_Drop2(IObjectReference _obj, object _thisObj)
        {
            return _Drop.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_DragEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[150],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[151],
                12);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.DropCompletedEventArgs>>> _DropCompleted_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.DropCompletedEventArgs>>> MakeDropCompletedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _DropCompleted_, new(), null);
            return _DropCompleted_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.DropCompletedEventArgs>>> _DropCompleted => _DropCompleted_ ?? MakeDropCompletedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.DropCompletedEventArgs>> Get_DropCompleted2(IObjectReference _obj, object _thisObj)
        {
            return _DropCompleted.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_UIElement__global__Microsoft_UI_Xaml_DropCompletedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[140],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[141],
                13);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.GettingFocusEventArgs>>> _GettingFocus_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.GettingFocusEventArgs>>> MakeGettingFocusTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _GettingFocus_, new(), null);
            return _GettingFocus_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.GettingFocusEventArgs>>> _GettingFocus => _GettingFocus_ ?? MakeGettingFocusTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.GettingFocusEventArgs>> Get_GettingFocus2(IObjectReference _obj, object _thisObj)
        {
            return _GettingFocus.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_UIElement__global__Microsoft_UI_Xaml_Input_GettingFocusEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[198],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[199],
                14);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler>> _GotFocus_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler>> MakeGotFocusTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _GotFocus_, new(), null);
            return _GotFocus_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler>> _GotFocus => _GotFocus_ ?? MakeGotFocusTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler> Get_GotFocus2(IObjectReference _obj, object _thisObj)
        {
            return _GotFocus.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_RoutedEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[134],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[135],
                15);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.HoldingEventHandler>> _Holding_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.HoldingEventHandler>> MakeHoldingTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Holding_, new(), null);
            return _Holding_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.HoldingEventHandler>> _Holding => _Holding_ ?? MakeHoldingTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.HoldingEventHandler> Get_Holding2(IObjectReference _obj, object _thisObj)
        {
            return _Holding.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_Input_HoldingEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[172],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[173],
                16);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.KeyEventHandler>> _KeyDown_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.KeyEventHandler>> MakeKeyDownTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _KeyDown_, new(), null);
            return _KeyDown_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.KeyEventHandler>> _KeyDown => _KeyDown_ ?? MakeKeyDownTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.KeyEventHandler> Get_KeyDown2(IObjectReference _obj, object _thisObj)
        {
            return _KeyDown.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_Input_KeyEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[132],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[133],
                17);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.KeyEventHandler>> _KeyUp_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.KeyEventHandler>> MakeKeyUpTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _KeyUp_, new(), null);
            return _KeyUp_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.KeyEventHandler>> _KeyUp => _KeyUp_ ?? MakeKeyUpTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.KeyEventHandler> Get_KeyUp2(IObjectReference _obj, object _thisObj)
        {
            return _KeyUp.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_Input_KeyEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[130],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[131],
                18);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.LosingFocusEventArgs>>> _LosingFocus_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.LosingFocusEventArgs>>> MakeLosingFocusTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _LosingFocus_, new(), null);
            return _LosingFocus_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.LosingFocusEventArgs>>> _LosingFocus => _LosingFocus_ ?? MakeLosingFocusTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.LosingFocusEventArgs>> Get_LosingFocus2(IObjectReference _obj, object _thisObj)
        {
            return _LosingFocus.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_UIElement__global__Microsoft_UI_Xaml_Input_LosingFocusEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[200],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[201],
                19);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler>> _LostFocus_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler>> MakeLostFocusTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _LostFocus_, new(), null);
            return _LostFocus_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler>> _LostFocus => _LostFocus_ ?? MakeLostFocusTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler> Get_LostFocus2(IObjectReference _obj, object _thisObj)
        {
            return _LostFocus.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_RoutedEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[136],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[137],
                20);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler>> _ManipulationCompleted_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler>> MakeManipulationCompletedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ManipulationCompleted_, new(), null);
            return _ManipulationCompleted_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler>> _ManipulationCompleted => _ManipulationCompleted_ ?? MakeManipulationCompletedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler> Get_ManipulationCompleted2(IObjectReference _obj, object _thisObj)
        {
            return _ManipulationCompleted.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_Input_ManipulationCompletedEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[188],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[189],
                21);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler>> _ManipulationDelta_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler>> MakeManipulationDeltaTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ManipulationDelta_, new(), null);
            return _ManipulationDelta_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler>> _ManipulationDelta => _ManipulationDelta_ ?? MakeManipulationDeltaTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler> Get_ManipulationDelta2(IObjectReference _obj, object _thisObj)
        {
            return _ManipulationDelta.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_Input_ManipulationDeltaEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[186],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[187],
                22);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler>> _ManipulationInertiaStarting_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler>> MakeManipulationInertiaStartingTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ManipulationInertiaStarting_, new(), null);
            return _ManipulationInertiaStarting_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler>> _ManipulationInertiaStarting => _ManipulationInertiaStarting_ ?? MakeManipulationInertiaStartingTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler> Get_ManipulationInertiaStarting2(IObjectReference _obj, object _thisObj)
        {
            return _ManipulationInertiaStarting.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_Input_ManipulationInertiaStartingEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[182],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[183],
                23);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler>> _ManipulationStarted_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler>> MakeManipulationStartedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ManipulationStarted_, new(), null);
            return _ManipulationStarted_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler>> _ManipulationStarted => _ManipulationStarted_ ?? MakeManipulationStartedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler> Get_ManipulationStarted2(IObjectReference _obj, object _thisObj)
        {
            return _ManipulationStarted.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_Input_ManipulationStartedEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[184],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[185],
                24);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler>> _ManipulationStarting_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler>> MakeManipulationStartingTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ManipulationStarting_, new(), null);
            return _ManipulationStarting_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler>> _ManipulationStarting => _ManipulationStarting_ ?? MakeManipulationStartingTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler> Get_ManipulationStarting2(IObjectReference _obj, object _thisObj)
        {
            return _ManipulationStarting.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_Input_ManipulationStartingEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[180],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[181],
                25);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs>>> _NoFocusCandidateFound_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs>>> MakeNoFocusCandidateFoundTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _NoFocusCandidateFound_, new(), null);
            return _NoFocusCandidateFound_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs>>> _NoFocusCandidateFound => _NoFocusCandidateFound_ ?? MakeNoFocusCandidateFoundTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs>> Get_NoFocusCandidateFound2(IObjectReference _obj, object _thisObj)
        {
            return _NoFocusCandidateFound.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_UIElement__global__Microsoft_UI_Xaml_Input_NoFocusCandidateFoundEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[202],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[203],
                26);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.PointerEventHandler>> _PointerCanceled_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.PointerEventHandler>> MakePointerCanceledTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _PointerCanceled_, new(), null);
            return _PointerCanceled_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.PointerEventHandler>> _PointerCanceled => _PointerCanceled_ ?? MakePointerCanceledTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.PointerEventHandler> Get_PointerCanceled2(IObjectReference _obj, object _thisObj)
        {
            return _PointerCanceled.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_Input_PointerEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[164],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[165],
                27);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.PointerEventHandler>> _PointerCaptureLost_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.PointerEventHandler>> MakePointerCaptureLostTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _PointerCaptureLost_, new(), null);
            return _PointerCaptureLost_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.PointerEventHandler>> _PointerCaptureLost => _PointerCaptureLost_ ?? MakePointerCaptureLostTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.PointerEventHandler> Get_PointerCaptureLost2(IObjectReference _obj, object _thisObj)
        {
            return _PointerCaptureLost.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_Input_PointerEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[162],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[163],
                28);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.PointerEventHandler>> _PointerEntered_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.PointerEventHandler>> MakePointerEnteredTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _PointerEntered_, new(), null);
            return _PointerEntered_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.PointerEventHandler>> _PointerEntered => _PointerEntered_ ?? MakePointerEnteredTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.PointerEventHandler> Get_PointerEntered2(IObjectReference _obj, object _thisObj)
        {
            return _PointerEntered.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_Input_PointerEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[158],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[159],
                29);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.PointerEventHandler>> _PointerExited_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.PointerEventHandler>> MakePointerExitedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _PointerExited_, new(), null);
            return _PointerExited_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.PointerEventHandler>> _PointerExited => _PointerExited_ ?? MakePointerExitedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.PointerEventHandler> Get_PointerExited2(IObjectReference _obj, object _thisObj)
        {
            return _PointerExited.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_Input_PointerEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[160],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[161],
                30);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.PointerEventHandler>> _PointerMoved_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.PointerEventHandler>> MakePointerMovedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _PointerMoved_, new(), null);
            return _PointerMoved_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.PointerEventHandler>> _PointerMoved => _PointerMoved_ ?? MakePointerMovedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.PointerEventHandler> Get_PointerMoved2(IObjectReference _obj, object _thisObj)
        {
            return _PointerMoved.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_Input_PointerEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[154],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[155],
                31);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.PointerEventHandler>> _PointerPressed_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.PointerEventHandler>> MakePointerPressedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _PointerPressed_, new(), null);
            return _PointerPressed_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.PointerEventHandler>> _PointerPressed => _PointerPressed_ ?? MakePointerPressedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.PointerEventHandler> Get_PointerPressed2(IObjectReference _obj, object _thisObj)
        {
            return _PointerPressed.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_Input_PointerEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[152],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[153],
                32);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.PointerEventHandler>> _PointerReleased_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.PointerEventHandler>> MakePointerReleasedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _PointerReleased_, new(), null);
            return _PointerReleased_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.PointerEventHandler>> _PointerReleased => _PointerReleased_ ?? MakePointerReleasedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.PointerEventHandler> Get_PointerReleased2(IObjectReference _obj, object _thisObj)
        {
            return _PointerReleased.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_Input_PointerEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[156],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[157],
                33);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.PointerEventHandler>> _PointerWheelChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.PointerEventHandler>> MakePointerWheelChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _PointerWheelChanged_, new(), null);
            return _PointerWheelChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.PointerEventHandler>> _PointerWheelChanged => _PointerWheelChanged_ ?? MakePointerWheelChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.PointerEventHandler> Get_PointerWheelChanged2(IObjectReference _obj, object _thisObj)
        {
            return _PointerWheelChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_Input_PointerEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[166],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[167],
                34);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.KeyEventHandler>> _PreviewKeyDown_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.KeyEventHandler>> MakePreviewKeyDownTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _PreviewKeyDown_, new(), null);
            return _PreviewKeyDown_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.KeyEventHandler>> _PreviewKeyDown => _PreviewKeyDown_ ?? MakePreviewKeyDownTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.KeyEventHandler> Get_PreviewKeyDown2(IObjectReference _obj, object _thisObj)
        {
            return _PreviewKeyDown.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_Input_KeyEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[204],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[205],
                35);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.KeyEventHandler>> _PreviewKeyUp_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.KeyEventHandler>> MakePreviewKeyUpTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _PreviewKeyUp_, new(), null);
            return _PreviewKeyUp_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.KeyEventHandler>> _PreviewKeyUp => _PreviewKeyUp_ ?? MakePreviewKeyUpTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.KeyEventHandler> Get_PreviewKeyUp2(IObjectReference _obj, object _thisObj)
        {
            return _PreviewKeyUp.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_Input_KeyEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[206],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[207],
                36);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs>>> _ProcessKeyboardAccelerators_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs>>> MakeProcessKeyboardAcceleratorsTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ProcessKeyboardAccelerators_, new(), null);
            return _ProcessKeyboardAccelerators_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs>>> _ProcessKeyboardAccelerators => _ProcessKeyboardAccelerators_ ?? MakeProcessKeyboardAcceleratorsTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.UIElement, global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs>> Get_ProcessKeyboardAccelerators2(IObjectReference _obj, object _thisObj)
        {
            return _ProcessKeyboardAccelerators.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_UIElement__global__Microsoft_UI_Xaml_Input_ProcessKeyboardAcceleratorEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[196],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[197],
                37);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.RightTappedEventHandler>> _RightTapped_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.RightTappedEventHandler>> MakeRightTappedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _RightTapped_, new(), null);
            return _RightTapped_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.RightTappedEventHandler>> _RightTapped => _RightTapped_ ?? MakeRightTappedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.RightTappedEventHandler> Get_RightTapped2(IObjectReference _obj, object _thisObj)
        {
            return _RightTapped.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_Input_RightTappedEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[178],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[179],
                38);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.TappedEventHandler>> _Tapped_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.TappedEventHandler>> MakeTappedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Tapped_, new(), null);
            return _Tapped_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.TappedEventHandler>> _Tapped => _Tapped_ ?? MakeTappedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Input.TappedEventHandler> Get_Tapped2(IObjectReference _obj, object _thisObj)
        {
            return _Tapped.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_Input_TappedEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[168],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[169],
                39);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x20, 0x10, 0xC0, 0xC3, 0xC, 0x32, 0xF6, 0x5C, 0x9D, 0x24, 0xD3, 0x96, 0xBB, 0xFA, 0x4D, 0x8B };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C3C01020-320C-5CF6-9D24-D396BBFA4D8B")]
    internal interface IUIElement : global::Microsoft.UI.Xaml.IUIElement
    {
    }
    internal static class IUIElementFactoryMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x9, 0xD3, 0xD1, 0x14, 0xD0, 0xAD, 0xCB, 0x5C, 0xB9, 0x46, 0x77, 0x48, 0x8C, 0xD7, 0xF, 0x87 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("14D1D309-ADD0-5CCB-B946-77488CD70F87")]
    internal interface IUIElementFactory : global::Microsoft.UI.Xaml.IUIElementFactory
    {
    }
    public static class IUIElementOverridesMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Automation.Peers.AutomationPeer OnCreateAutomationPeer(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Automation.Peers.AutomationPeer.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Automation.Peers.AutomationPeer.DisposeAbi(__retval);
            }
        }

        internal static unsafe void OnDisconnectVisualChildren(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[7](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.IEnumerable<global::Windows.Foundation.Point>> FindSubElementsForTouchTargeting(IObjectReference _obj, global::Windows.Foundation.Point point, global::Windows.Foundation.Rect boundingRect)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point, global::Windows.Foundation.Rect, IntPtr*, int>**)ThisPtr)[8](ThisPtr, point, boundingRect, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Point_.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.IEnumerable<global::Windows.Foundation.Point>>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.IEnumerable<global::Windows.Foundation.Point>>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Collections.Generic.IEnumerable<global::Microsoft.UI.Xaml.DependencyObject> GetChildrenInTabFocusOrder(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Xaml_DependencyObject.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IEnumerable<global::Microsoft.UI.Xaml.DependencyObject>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IEnumerable<global::Microsoft.UI.Xaml.DependencyObject>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe void OnKeyboardAcceleratorInvoked(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs args)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __args = default;
            try
            {
                __args = global::ABI.Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs.CreateMarshaler2(args);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[10](ThisPtr, MarshalInspectable<object>.GetAbi(__args)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__args);
            }
        }

        internal static unsafe void OnProcessKeyboardAccelerators(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs args)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __args = default;
            try
            {
                __args = global::ABI.Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs.CreateMarshaler2(args);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalInspectable<object>.GetAbi(__args)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__args);
            }
        }

        internal static unsafe void OnBringIntoViewRequested(IObjectReference _obj, global::Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs e)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __e = default;
            try
            {
                __e = global::ABI.Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs.CreateMarshaler2(e);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[12](ThisPtr, MarshalInspectable<object>.GetAbi(__e)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__e);
            }
        }

        internal static unsafe void PopulatePropertyInfoOverride(IObjectReference _obj, string propertyName, global::Microsoft.UI.Composition.AnimationPropertyInfo animationPropertyInfo)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __animationPropertyInfo = default;
            try
            {
                __animationPropertyInfo = global::ABI.Microsoft.UI.Composition.AnimationPropertyInfo.CreateMarshaler2(animationPropertyInfo);
                MarshalString.Pinnable __propertyName = new(propertyName);
                fixed(void* ___propertyName = __propertyName)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[13](ThisPtr, MarshalString.GetAbi(ref __propertyName), MarshalInspectable<object>.GetAbi(__animationPropertyInfo)));
                    global::System.GC.KeepAlive(_obj);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__animationPropertyInfo);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x1E, 0xF4, 0x34, 0x90, 0x7B, 0xAB, 0xE7, 0x59, 0x81, 0x68, 0x50, 0xDE, 0x6B, 0x68, 0x9D, 0xDE };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IUIElementOverrides.AbiToProjectionVftablePtr;

    }

    [Guid("9034F41E-AB7B-59E7-8168-50DE6B689DDE")]
    internal unsafe interface IUIElementOverrides : global::Microsoft.UI.Xaml.IUIElementOverrides
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IUIElementOverrides()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IUIElementOverrides), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 8);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_OnCreateAutomationPeer_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_OnDisconnectVisualChildren_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point, global::Windows.Foundation.Rect, IntPtr*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_FindSubElementsForTouchTargeting_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_GetChildrenInTabFocusOrder_3;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[10] = &Do_Abi_OnKeyboardAcceleratorInvoked_4;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[11] = &Do_Abi_OnProcessKeyboardAccelerators_5;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[12] = &Do_Abi_OnBringIntoViewRequested_6;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[13] = &Do_Abi_PopulatePropertyInfoOverride_7;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_OnCreateAutomationPeer_0(IntPtr thisPtr, IntPtr* result)
        {

            global::Microsoft.UI.Xaml.Automation.Peers.AutomationPeer __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.IUIElementOverrides>(thisPtr).OnCreateAutomationPeer();
                *result = global::ABI.Microsoft.UI.Xaml.Automation.Peers.AutomationPeer.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_OnDisconnectVisualChildren_1(IntPtr thisPtr)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.IUIElementOverrides>(thisPtr).OnDisconnectVisualChildren();

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_FindSubElementsForTouchTargeting_2(IntPtr thisPtr, global::Windows.Foundation.Point point, global::Windows.Foundation.Rect boundingRect, IntPtr* result)
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Point_.EnsureInitialized();

            global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.IEnumerable<global::Windows.Foundation.Point>> __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.IUIElementOverrides>(thisPtr).FindSubElementsForTouchTargeting(point, boundingRect);
                *result = MarshalInterface<global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.IEnumerable<global::Windows.Foundation.Point>>>.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetChildrenInTabFocusOrder_3(IntPtr thisPtr, IntPtr* result)
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Xaml_DependencyObject.EnsureInitialized();

            global::System.Collections.Generic.IEnumerable<global::Microsoft.UI.Xaml.DependencyObject> __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.IUIElementOverrides>(thisPtr).GetChildrenInTabFocusOrder();
                *result = MarshalInterface<global::System.Collections.Generic.IEnumerable<global::Microsoft.UI.Xaml.DependencyObject>>.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_OnKeyboardAcceleratorInvoked_4(IntPtr thisPtr, IntPtr args)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.IUIElementOverrides>(thisPtr).OnKeyboardAcceleratorInvoked(global::ABI.Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs.FromAbi(args));

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_OnProcessKeyboardAccelerators_5(IntPtr thisPtr, IntPtr args)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.IUIElementOverrides>(thisPtr).OnProcessKeyboardAccelerators(global::ABI.Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs.FromAbi(args));

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_OnBringIntoViewRequested_6(IntPtr thisPtr, IntPtr e)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.IUIElementOverrides>(thisPtr).OnBringIntoViewRequested(global::ABI.Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs.FromAbi(e));

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_PopulatePropertyInfoOverride_7(IntPtr thisPtr, IntPtr propertyName, IntPtr animationPropertyInfo)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.IUIElementOverrides>(thisPtr).PopulatePropertyInfoOverride(MarshalString.FromAbi(propertyName), global::ABI.Microsoft.UI.Composition.AnimationPropertyInfo.FromAbi(animationPropertyInfo));

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }

    internal static class IUIElementProtectedMethods
    {

        internal static unsafe global::Microsoft.UI.Input.InputCursor get_ProtectedCursor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.InputCursor.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Input.InputCursor.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ProtectedCursor(IObjectReference _obj, global::Microsoft.UI.Input.InputCursor value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Input.InputCursor.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE9, 0xB9, 0x69, 0x8F, 0x0, 0x1F, 0x34, 0x58, 0x9B, 0xF1, 0xA9, 0x25, 0x7B, 0xED, 0x39, 0xF0 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8F69B9E9-1F00-5834-9BF1-A9257BED39F0")]
    internal interface IUIElementProtected : global::Microsoft.UI.Xaml.IUIElementProtected
    {
    }
    internal static class IUIElementStaticsMethods
    {


        internal static unsafe bool TryStartDirectManipulation(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.Pointer value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            byte __retval = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Input.Pointer.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte*, int>**)ThisPtr)[86](ThisPtr, MarshalInspectable<object>.GetAbi(__value), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe void RegisterAsScrollPort(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement element)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(element);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[87](ThisPtr, MarshalInspectable<object>.GetAbi(__element)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
            }
        }
        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_AccessKeyProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[63](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_AccessKeyScopeOwnerProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[62](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_AllowDropProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[37](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.RoutedEvent get_BringIntoViewRequestedEvent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[35](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.RoutedEvent.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.RoutedEvent.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CacheModeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[48](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CanBeScrollAnchorProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[59](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CanDragProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[51](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.RoutedEvent get_CharacterReceivedEvent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[33](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.RoutedEvent.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.RoutedEvent.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ClipProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[39](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CompositeModeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[57](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ContextFlyoutProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[56](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.RoutedEvent get_ContextRequestedEvent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[36](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.RoutedEvent.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.RoutedEvent.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.RoutedEvent get_DoubleTappedEvent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[17](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.RoutedEvent.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.RoutedEvent.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.RoutedEvent get_DragEnterEvent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[25](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.RoutedEvent.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.RoutedEvent.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.RoutedEvent get_DragLeaveEvent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[26](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.RoutedEvent.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.RoutedEvent.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.RoutedEvent get_DragOverEvent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[27](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.RoutedEvent.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.RoutedEvent.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.RoutedEvent get_DropEvent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[28](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.RoutedEvent.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.RoutedEvent.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ExitDisplayModeOnAccessKeyInvokedProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[60](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_FocusStateProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[78](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.RoutedEvent get_GettingFocusEvent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[29](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.RoutedEvent.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.RoutedEvent.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_HighContrastAdjustmentProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[75](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.RoutedEvent get_HoldingEvent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[18](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.RoutedEvent.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.RoutedEvent.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IsAccessKeyScopeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[61](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IsDoubleTapEnabledProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[50](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IsHitTestVisibleProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[44](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IsHoldingEnabledProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[53](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IsRightTapEnabledProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[52](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IsTabStopProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[84](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IsTapEnabledProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[49](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.RoutedEvent get_KeyDownEvent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.RoutedEvent.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.RoutedEvent.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_KeyTipHorizontalOffsetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[65](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_KeyTipPlacementModeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[64](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_KeyTipTargetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[67](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_KeyTipVerticalOffsetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[66](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.RoutedEvent get_KeyUpEvent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.RoutedEvent.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.RoutedEvent.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_KeyboardAcceleratorPlacementModeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[74](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_KeyboardAcceleratorPlacementTargetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[73](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_LightsProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[58](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.RoutedEvent get_LosingFocusEvent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[30](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.RoutedEvent.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.RoutedEvent.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.RoutedEvent get_ManipulationCompletedEvent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[24](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.RoutedEvent.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.RoutedEvent.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.RoutedEvent get_ManipulationDeltaEvent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[23](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.RoutedEvent.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.RoutedEvent.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.RoutedEvent get_ManipulationInertiaStartingEvent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[21](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.RoutedEvent.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.RoutedEvent.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ManipulationModeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[54](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.RoutedEvent get_ManipulationStartedEvent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[22](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.RoutedEvent.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.RoutedEvent.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.RoutedEvent get_ManipulationStartingEvent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[20](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.RoutedEvent.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.RoutedEvent.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.RoutedEvent get_NoFocusCandidateFoundEvent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[31](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.RoutedEvent.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.RoutedEvent.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_OpacityProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[38](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.RoutedEvent get_PointerCanceledEvent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.RoutedEvent.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.RoutedEvent.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.RoutedEvent get_PointerCaptureLostEvent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.RoutedEvent.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.RoutedEvent.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_PointerCapturesProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[55](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.RoutedEvent get_PointerEnteredEvent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.RoutedEvent.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.RoutedEvent.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.RoutedEvent get_PointerExitedEvent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.RoutedEvent.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.RoutedEvent.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.RoutedEvent get_PointerMovedEvent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.RoutedEvent.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.RoutedEvent.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.RoutedEvent get_PointerPressedEvent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.RoutedEvent.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.RoutedEvent.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.RoutedEvent get_PointerReleasedEvent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.RoutedEvent.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.RoutedEvent.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.RoutedEvent get_PointerWheelChangedEvent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[15](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.RoutedEvent.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.RoutedEvent.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.RoutedEvent get_PreviewKeyDownEvent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[32](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.RoutedEvent.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.RoutedEvent.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.RoutedEvent get_PreviewKeyUpEvent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[34](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.RoutedEvent.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.RoutedEvent.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ProjectionProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[41](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_RenderTransformOriginProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[43](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_RenderTransformProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[40](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.RoutedEvent get_RightTappedEvent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[19](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.RoutedEvent.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.RoutedEvent.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ShadowProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[77](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_TabFocusNavigationProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[76](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_TabIndexProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[85](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.RoutedEvent get_TappedEvent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[16](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.RoutedEvent.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.RoutedEvent.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_Transform3DProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[42](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_TransitionsProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[47](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_UseLayoutRoundingProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[46](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_UseSystemFocusVisualsProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[79](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_VisibilityProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[45](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_XYFocusDownNavigationStrategyProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[70](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_XYFocusDownProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[83](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_XYFocusKeyboardNavigationProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[68](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_XYFocusLeftNavigationStrategyProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[71](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_XYFocusLeftProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[80](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_XYFocusRightNavigationStrategyProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[72](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_XYFocusRightProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[81](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_XYFocusUpNavigationStrategyProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[69](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_XYFocusUpProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[82](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x87, 0x1D, 0x92, 0xD2, 0x84, 0x35, 0x22, 0x5E, 0x8A, 0x3A, 0xC2, 0xC7, 0x8D, 0xAB, 0x4F, 0x6E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D2921D87-3584-5E22-8A3A-C2C78DAB4F6E")]
    internal interface IUIElementStatics : global::Microsoft.UI.Xaml.IUIElementStatics
    {
    }
    internal static class IUIElementWeakCollectionFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.UIElementWeakCollection CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.UIElementWeakCollection.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.UIElementWeakCollection.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x9, 0x9F, 0xD6, 0xB4, 0x94, 0xD4, 0xC8, 0x5B, 0xAE, 0x68, 0xB6, 0x30, 0x7D, 0x84, 0x50, 0x49 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B4D69F09-D494-5BC8-AE68-B6307D845049")]
    internal interface IUIElementWeakCollectionFactory : global::Microsoft.UI.Xaml.IUIElementWeakCollectionFactory
    {
    }
    internal static class IUnhandledExceptionEventArgsMethods
    {

        internal static unsafe global::System.Exception get_Exception(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.Exception __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.Exception*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.Exception.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.Exception.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[9](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe string get_Message(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA9, 0xEB, 0xEA, 0x59, 0x9C, 0x8F, 0xE7, 0x5B, 0x9B, 0x3B, 0x82, 0x9, 0x60, 0xFA, 0xA2, 0x20 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("59EAEBA9-8F9C-5BE7-9B3B-820960FAA220")]
    internal interface IUnhandledExceptionEventArgs : global::Microsoft.UI.Xaml.IUnhandledExceptionEventArgs
    {
    }
    internal static class IVector3TransitionMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Vector3TransitionComponents get_Components(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Vector3TransitionComponents __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Vector3TransitionComponents*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Components(IObjectReference _obj, global::Microsoft.UI.Xaml.Vector3TransitionComponents value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Vector3TransitionComponents, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::System.TimeSpan get_Duration(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.TimeSpan __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.TimeSpan*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.TimeSpan.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.TimeSpan.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Duration(IObjectReference _obj, global::System.TimeSpan value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.TimeSpan.Marshaler __value = default;
            try
            {
                __value = global::ABI.System.TimeSpan.CreateMarshaler(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.TimeSpan, int>**)ThisPtr)[7](ThisPtr, global::ABI.System.TimeSpan.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                global::ABI.System.TimeSpan.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB9, 0x8B, 0x40, 0xC, 0xA2, 0xF9, 0xD7, 0x55, 0x8A, 0xED, 0x14, 0x3D, 0x36, 0xD6, 0x3, 0xF2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("0C408BB9-F9A2-55D7-8AED-143D36D603F2")]
    internal interface IVector3Transition : global::Microsoft.UI.Xaml.IVector3Transition
    {
    }
    internal static class IVector3TransitionFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Vector3Transition CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Vector3Transition.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Vector3Transition.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFC, 0x84, 0xA0, 0xA3, 0x65, 0xB9, 0x4B, 0x53, 0x90, 0xF, 0x78, 0xE2, 0x88, 0x12, 0x92, 0x32 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A3A084FC-B965-534B-900F-78E288129232")]
    internal interface IVector3TransitionFactory : global::Microsoft.UI.Xaml.IVector3TransitionFactory
    {
    }
    internal static class IVisualStateMethods
    {

        internal static unsafe string get_Name(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.SetterBaseCollection get_Setters(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.SetterBaseCollection.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.SetterBaseCollection.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.StateTriggerBase> get_StateTriggers(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Xaml_StateTriggerBase.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.StateTriggerBase>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.StateTriggerBase>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.Storyboard get_Storyboard(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Animation.Storyboard.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Animation.Storyboard.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Storyboard(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Animation.Storyboard value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Animation.Storyboard.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE8, 0x2A, 0xB3, 0x4B, 0x28, 0xE, 0x21, 0x55, 0xA7, 0xF5, 0x66, 0xB6, 0x61, 0x37, 0x29, 0x94 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4BB32AE8-0E28-5521-A7F5-66B661372994")]
    internal interface IVisualState : global::Microsoft.UI.Xaml.IVisualState
    {
    }
    internal static class IVisualStateChangedEventArgsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Controls.Control get_Control(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Controls.Control.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Controls.Control.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Control(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.Control value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Controls.Control.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.VisualState get_NewState(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.VisualState.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.VisualState.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_NewState(IObjectReference _obj, global::Microsoft.UI.Xaml.VisualState value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.VisualState.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.VisualState get_OldState(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.VisualState.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.VisualState.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_OldState(IObjectReference _obj, global::Microsoft.UI.Xaml.VisualState value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.VisualState.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x10, 0x95, 0xDE, 0x11, 0x95, 0xA1, 0x7B, 0x57, 0x88, 0xC8, 0x6, 0x39, 0x16, 0x18, 0x86, 0x8C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("11DE9510-A195-577B-88C8-06391618868C")]
    internal interface IVisualStateChangedEventArgs : global::Microsoft.UI.Xaml.IVisualStateChangedEventArgs
    {
    }
    internal static class IVisualStateGroupMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.VisualState get_CurrentState(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.VisualState.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.VisualState.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_Name(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.VisualState> get_States(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Xaml_VisualState.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.VisualState>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.VisualState>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.VisualTransition> get_Transitions(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Xaml_VisualTransition.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.VisualTransition>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.VisualTransition>>.DisposeAbi(__retval);
            }
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.VisualStateChangedEventHandler>> _CurrentStateChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.VisualStateChangedEventHandler>> MakeCurrentStateChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _CurrentStateChanged_, new(), null);
            return _CurrentStateChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.VisualStateChangedEventHandler>> _CurrentStateChanged => _CurrentStateChanged_ ?? MakeCurrentStateChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.VisualStateChangedEventHandler> Get_CurrentStateChanged2(IObjectReference _obj, object _thisObj)
        {
            return _CurrentStateChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_VisualStateChangedEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[10],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[11],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.VisualStateChangedEventHandler>> _CurrentStateChanging_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.VisualStateChangedEventHandler>> MakeCurrentStateChangingTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _CurrentStateChanging_, new(), null);
            return _CurrentStateChanging_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.VisualStateChangedEventHandler>> _CurrentStateChanging => _CurrentStateChanging_ ?? MakeCurrentStateChangingTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.VisualStateChangedEventHandler> Get_CurrentStateChanging2(IObjectReference _obj, object _thisObj)
        {
            return _CurrentStateChanging.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_VisualStateChangedEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[12],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[13],
                1);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x1B, 0x69, 0xFD, 0x8D, 0xC, 0x71, 0x6D, 0x5D, 0xB7, 0x1A, 0x7A, 0x7F, 0x5E, 0xD5, 0x4A, 0xC7 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8DFD691B-710C-5D6D-B71A-7A7F5ED54AC7")]
    internal interface IVisualStateGroup : global::Microsoft.UI.Xaml.IVisualStateGroup
    {
    }
    internal static class IVisualStateManagerMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x32, 0x8D, 0x2C, 0x34, 0x61, 0xAD, 0x25, 0x59, 0x93, 0xD1, 0xC, 0x70, 0x4D, 0xF2, 0xA7, 0xD1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("342C8D32-AD61-5925-93D1-0C704DF2A7D1")]
    internal interface IVisualStateManager : global::Microsoft.UI.Xaml.IVisualStateManager
    {
    }
    internal static class IVisualStateManagerFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.VisualStateManager CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.VisualStateManager.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.VisualStateManager.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x82, 0xAF, 0x3D, 0x71, 0xB3, 0x92, 0xF2, 0x58, 0x8F, 0xC1, 0xB0, 0xD9, 0xA2, 0xCA, 0xD0, 0x3C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("713DAF82-92B3-58F2-8FC1-B0D9A2CAD03C")]
    internal interface IVisualStateManagerFactory : global::Microsoft.UI.Xaml.IVisualStateManagerFactory
    {
    }
    public static class IVisualStateManagerOverridesMethods
    {


        internal static unsafe bool GoToStateCore(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.Control control, global::Microsoft.UI.Xaml.FrameworkElement templateRoot, string stateName, global::Microsoft.UI.Xaml.VisualStateGroup group, global::Microsoft.UI.Xaml.VisualState state, bool useTransitions)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __control = default;
            ObjectReferenceValue __templateRoot = default;
            ObjectReferenceValue __group = default;
            ObjectReferenceValue __state = default;
            byte __retval = default;
            try
            {
                __control = global::ABI.Microsoft.UI.Xaml.Controls.Control.CreateMarshaler2(control);
                __templateRoot = global::ABI.Microsoft.UI.Xaml.FrameworkElement.CreateMarshaler2(templateRoot);
                __group = global::ABI.Microsoft.UI.Xaml.VisualStateGroup.CreateMarshaler2(group);
                __state = global::ABI.Microsoft.UI.Xaml.VisualState.CreateMarshaler2(state);
                MarshalString.Pinnable __stateName = new(stateName);
                fixed(void* ___stateName = __stateName)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, byte, byte*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__control), MarshalInspectable<object>.GetAbi(__templateRoot), MarshalString.GetAbi(ref __stateName), MarshalInspectable<object>.GetAbi(__group), MarshalInspectable<object>.GetAbi(__state), (byte)(useTransitions ? 1 : 0), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return __retval != 0;
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__control);
                MarshalInspectable<object>.DisposeMarshaler(__templateRoot);
                MarshalInspectable<object>.DisposeMarshaler(__group);
                MarshalInspectable<object>.DisposeMarshaler(__state);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC9, 0xE9, 0xF8, 0xE3, 0x32, 0x94, 0x4C, 0x51, 0x92, 0x3E, 0x14, 0x2C, 0xD8, 0xC8, 0x27, 0x30 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IVisualStateManagerOverrides.AbiToProjectionVftablePtr;

    }

    [Guid("E3F8E9C9-9432-514C-923E-142CD8C82730")]
    internal unsafe interface IVisualStateManagerOverrides : global::Microsoft.UI.Xaml.IVisualStateManagerOverrides
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IVisualStateManagerOverrides()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IVisualStateManagerOverrides), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, byte, byte*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_GoToStateCore_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GoToStateCore_0(IntPtr thisPtr, IntPtr control, IntPtr templateRoot, IntPtr stateName, IntPtr group, IntPtr state, byte useTransitions, byte* result)
        {

            bool __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.IVisualStateManagerOverrides>(thisPtr).GoToStateCore(global::ABI.Microsoft.UI.Xaml.Controls.Control.FromAbi(control), global::ABI.Microsoft.UI.Xaml.FrameworkElement.FromAbi(templateRoot), MarshalString.FromAbi(stateName), global::ABI.Microsoft.UI.Xaml.VisualStateGroup.FromAbi(group), global::ABI.Microsoft.UI.Xaml.VisualState.FromAbi(state), useTransitions != 0);
                *result = (byte)(__result ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }

    internal static class IVisualStateManagerProtectedMethods
    {


        internal static unsafe void RaiseCurrentStateChanging(IObjectReference _obj, global::Microsoft.UI.Xaml.VisualStateGroup stateGroup, global::Microsoft.UI.Xaml.VisualState oldState, global::Microsoft.UI.Xaml.VisualState newState, global::Microsoft.UI.Xaml.Controls.Control control)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __stateGroup = default;
            ObjectReferenceValue __oldState = default;
            ObjectReferenceValue __newState = default;
            ObjectReferenceValue __control = default;
            try
            {
                __stateGroup = global::ABI.Microsoft.UI.Xaml.VisualStateGroup.CreateMarshaler2(stateGroup);
                __oldState = global::ABI.Microsoft.UI.Xaml.VisualState.CreateMarshaler2(oldState);
                __newState = global::ABI.Microsoft.UI.Xaml.VisualState.CreateMarshaler2(newState);
                __control = global::ABI.Microsoft.UI.Xaml.Controls.Control.CreateMarshaler2(control);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__stateGroup), MarshalInspectable<object>.GetAbi(__oldState), MarshalInspectable<object>.GetAbi(__newState), MarshalInspectable<object>.GetAbi(__control)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__stateGroup);
                MarshalInspectable<object>.DisposeMarshaler(__oldState);
                MarshalInspectable<object>.DisposeMarshaler(__newState);
                MarshalInspectable<object>.DisposeMarshaler(__control);
            }
        }

        internal static unsafe void RaiseCurrentStateChanged(IObjectReference _obj, global::Microsoft.UI.Xaml.VisualStateGroup stateGroup, global::Microsoft.UI.Xaml.VisualState oldState, global::Microsoft.UI.Xaml.VisualState newState, global::Microsoft.UI.Xaml.Controls.Control control)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __stateGroup = default;
            ObjectReferenceValue __oldState = default;
            ObjectReferenceValue __newState = default;
            ObjectReferenceValue __control = default;
            try
            {
                __stateGroup = global::ABI.Microsoft.UI.Xaml.VisualStateGroup.CreateMarshaler2(stateGroup);
                __oldState = global::ABI.Microsoft.UI.Xaml.VisualState.CreateMarshaler2(oldState);
                __newState = global::ABI.Microsoft.UI.Xaml.VisualState.CreateMarshaler2(newState);
                __control = global::ABI.Microsoft.UI.Xaml.Controls.Control.CreateMarshaler2(control);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__stateGroup), MarshalInspectable<object>.GetAbi(__oldState), MarshalInspectable<object>.GetAbi(__newState), MarshalInspectable<object>.GetAbi(__control)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__stateGroup);
                MarshalInspectable<object>.DisposeMarshaler(__oldState);
                MarshalInspectable<object>.DisposeMarshaler(__newState);
                MarshalInspectable<object>.DisposeMarshaler(__control);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x13, 0x80, 0x0, 0xF, 0x7F, 0x78, 0x99, 0x55, 0xA5, 0xAD, 0xA, 0x10, 0xB9, 0x88, 0xED, 0x24 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("0F008013-787F-5599-A5AD-0A10B988ED24")]
    internal interface IVisualStateManagerProtected : global::Microsoft.UI.Xaml.IVisualStateManagerProtected
    {
    }
    internal static class IVisualStateManagerStaticsMethods
    {


        internal static unsafe global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.VisualStateGroup> GetVisualStateGroups(IObjectReference _obj, global::Microsoft.UI.Xaml.FrameworkElement obj)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __obj = default;
            IntPtr __retval = default;
            try
            {
                __obj = global::ABI.Microsoft.UI.Xaml.FrameworkElement.CreateMarshaler2(obj);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__obj), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Xaml_VisualStateGroup.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.VisualStateGroup>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__obj);
                MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.VisualStateGroup>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.VisualStateManager GetCustomVisualStateManager(IObjectReference _obj, global::Microsoft.UI.Xaml.FrameworkElement obj)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __obj = default;
            IntPtr __retval = default;
            try
            {
                __obj = global::ABI.Microsoft.UI.Xaml.FrameworkElement.CreateMarshaler2(obj);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__obj), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.VisualStateManager.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__obj);
                global::ABI.Microsoft.UI.Xaml.VisualStateManager.DisposeAbi(__retval);
            }
        }

        internal static unsafe void SetCustomVisualStateManager(IObjectReference _obj, global::Microsoft.UI.Xaml.FrameworkElement obj, global::Microsoft.UI.Xaml.VisualStateManager value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __obj = default;
            ObjectReferenceValue __value = default;
            try
            {
                __obj = global::ABI.Microsoft.UI.Xaml.FrameworkElement.CreateMarshaler2(obj);
                __value = global::ABI.Microsoft.UI.Xaml.VisualStateManager.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__obj), MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__obj);
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe bool GoToState(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.Control control, string stateName, bool useTransitions)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __control = default;
            byte __retval = default;
            try
            {
                __control = global::ABI.Microsoft.UI.Xaml.Controls.Control.CreateMarshaler2(control);
                MarshalString.Pinnable __stateName = new(stateName);
                fixed(void* ___stateName = __stateName)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, byte, byte*, int>**)ThisPtr)[10](ThisPtr, MarshalInspectable<object>.GetAbi(__control), MarshalString.GetAbi(ref __stateName), (byte)(useTransitions ? 1 : 0), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return __retval != 0;
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__control);
            }
        }
        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CustomVisualStateManagerProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7D, 0x14, 0xD5, 0xA4, 0xC3, 0x88, 0xED, 0x57, 0xAD, 0x83, 0x24, 0x5D, 0xF5, 0xF6, 0xB5, 0xD };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A4D5147D-88C3-57ED-AD83-245DF5F6B50D")]
    internal interface IVisualStateManagerStatics : global::Microsoft.UI.Xaml.IVisualStateManagerStatics
    {
    }
    internal static class IVisualTransitionMethods
    {

        internal static unsafe string get_From(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_From(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[13](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Duration get_GeneratedDuration(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Duration __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Duration*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_GeneratedDuration(IObjectReference _obj, global::Microsoft.UI.Xaml.Duration value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Duration, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase get_GeneratedEasingFunction(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_GeneratedEasingFunction(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.Storyboard get_Storyboard(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Animation.Storyboard.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Animation.Storyboard.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Storyboard(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Animation.Storyboard value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Animation.Storyboard.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[15](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe string get_To(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_To(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x54, 0xAF, 0x21, 0xDD, 0xE1, 0x2C, 0xDE, 0x59, 0x9F, 0xD1, 0x2B, 0x45, 0xF6, 0xBF, 0x65, 0x81 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("DD21AF54-2CE1-59DE-9FD1-2B45F6BF6581")]
    internal interface IVisualTransition : global::Microsoft.UI.Xaml.IVisualTransition
    {
    }
    internal static class IVisualTransitionFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.VisualTransition CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.VisualTransition.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.VisualTransition.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD, 0x4C, 0xE7, 0xF3, 0x5B, 0xB, 0x20, 0x59, 0xA3, 0x9, 0x8, 0xCB, 0x6B, 0xF2, 0xA7, 0x39 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F3E74C0D-0B5B-5920-A309-08CB6BF2A739")]
    internal interface IVisualTransitionFactory : global::Microsoft.UI.Xaml.IVisualTransitionFactory
    {
    }
    internal static class IWindowMethods
    {


        internal static unsafe void Activate(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[26](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void Close(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[27](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void SetTitleBar(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement titleBar)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __titleBar = default;
            try
            {
                __titleBar = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(titleBar);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[28](ThisPtr, MarshalInspectable<object>.GetAbi(__titleBar)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__titleBar);
            }
        }
        internal static unsafe global::Windows.Foundation.Rect get_Bounds(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Rect __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Composition.Compositor get_Compositor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Composition.Compositor.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Composition.Compositor.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.UIElement get_Content(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.UIElement.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.UIElement.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Content(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Windows.UI.Core.CoreWindow get_CoreWindow(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.UI.Core.CoreWindow.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.UI.Core.CoreWindow.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.UI.Core.CoreDispatcher get_Dispatcher(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.UI.Core.CoreDispatcher.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.UI.Core.CoreDispatcher.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Dispatching.DispatcherQueue get_DispatcherQueue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Dispatching.DispatcherQueue.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Dispatching.DispatcherQueue.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool get_ExtendsContentIntoTitleBar(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[16](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_ExtendsContentIntoTitleBar(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[17](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe string get_Title(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Title(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[15](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe bool get_Visible(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<object, global::Microsoft.UI.Xaml.WindowActivatedEventArgs>>> _Activated_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<object, global::Microsoft.UI.Xaml.WindowActivatedEventArgs>>> MakeActivatedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Activated_, new(), null);
            return _Activated_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<object, global::Microsoft.UI.Xaml.WindowActivatedEventArgs>>> _Activated => _Activated_ ?? MakeActivatedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<object, global::Microsoft.UI.Xaml.WindowActivatedEventArgs>> Get_Activated2(IObjectReference _obj, object _thisObj)
        {
            return _Activated.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_object__global__Microsoft_UI_Xaml_WindowActivatedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[18],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[19],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<object, global::Microsoft.UI.Xaml.WindowEventArgs>>> _Closed_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<object, global::Microsoft.UI.Xaml.WindowEventArgs>>> MakeClosedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Closed_, new(), null);
            return _Closed_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<object, global::Microsoft.UI.Xaml.WindowEventArgs>>> _Closed => _Closed_ ?? MakeClosedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<object, global::Microsoft.UI.Xaml.WindowEventArgs>> Get_Closed2(IObjectReference _obj, object _thisObj)
        {
            return _Closed.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_object__global__Microsoft_UI_Xaml_WindowEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[20],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[21],
                1);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<object, global::Microsoft.UI.Xaml.WindowSizeChangedEventArgs>>> _SizeChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<object, global::Microsoft.UI.Xaml.WindowSizeChangedEventArgs>>> MakeSizeChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _SizeChanged_, new(), null);
            return _SizeChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<object, global::Microsoft.UI.Xaml.WindowSizeChangedEventArgs>>> _SizeChanged => _SizeChanged_ ?? MakeSizeChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<object, global::Microsoft.UI.Xaml.WindowSizeChangedEventArgs>> Get_SizeChanged2(IObjectReference _obj, object _thisObj)
        {
            return _SizeChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_object__global__Microsoft_UI_Xaml_WindowSizeChangedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[22],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[23],
                2);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<object, global::Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs>>> _VisibilityChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<object, global::Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs>>> MakeVisibilityChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _VisibilityChanged_, new(), null);
            return _VisibilityChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<object, global::Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs>>> _VisibilityChanged => _VisibilityChanged_ ?? MakeVisibilityChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<object, global::Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs>> Get_VisibilityChanged2(IObjectReference _obj, object _thisObj)
        {
            return _VisibilityChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_object__global__Microsoft_UI_Xaml_WindowVisibilityChangedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[24],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[25],
                3);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x79, 0xEC, 0xF0, 0x61, 0x52, 0x5D, 0xB5, 0x56, 0x86, 0xFB, 0x40, 0xFA, 0x4A, 0xF2, 0x88, 0xB0 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("61F0EC79-5D52-56B5-86FB-40FA4AF288B0")]
    internal interface IWindow : global::Microsoft.UI.Xaml.IWindow
    {
    }
    internal static class IWindow2Methods
    {

        internal static unsafe global::Microsoft.UI.Windowing.AppWindow get_AppWindow(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Windowing.AppWindow.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Windowing.AppWindow.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.SystemBackdrop get_SystemBackdrop(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.SystemBackdrop.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.SystemBackdrop.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SystemBackdrop(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.SystemBackdrop value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.SystemBackdrop.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA5, 0xBA, 0xFE, 0x42, 0x32, 0x1C, 0x2A, 0x52, 0xA5, 0x91, 0x57, 0x61, 0x8C, 0x6F, 0x66, 0x5D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("42FEBAA5-1C32-522A-A591-57618C6F665D")]
    internal interface IWindow2 : global::Microsoft.UI.Xaml.IWindow2
    {
    }
    internal static class IWindowActivatedEventArgsMethods
    {

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.WindowActivationState get_WindowActivationState(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.WindowActivationState __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.WindowActivationState*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xEA, 0xA5, 0x23, 0xC7, 0xC4, 0x82, 0xD6, 0x5D, 0x86, 0x1B, 0x70, 0xEF, 0x57, 0x3B, 0x88, 0xD6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C723A5EA-82C4-5DD6-861B-70EF573B88D6")]
    internal interface IWindowActivatedEventArgs : global::Microsoft.UI.Xaml.IWindowActivatedEventArgs
    {
    }
    internal static class IWindowEventArgsMethods
    {

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7C, 0x82, 0x40, 0x11, 0xA, 0xFE, 0x68, 0x52, 0xBC, 0x2B, 0xF4, 0x49, 0x2C, 0x2C, 0xCB, 0x49 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("1140827C-FE0A-5268-BC2B-F4492C2CCB49")]
    internal interface IWindowEventArgs : global::Microsoft.UI.Xaml.IWindowEventArgs
    {
    }
    internal static class IWindowFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Window CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Window.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Window.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x36, 0x15, 0x44, 0xF0, 0xEF, 0xAF, 0x22, 0x52, 0x91, 0x8F, 0x32, 0x4A, 0x9B, 0x2D, 0xEC, 0x75 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F0441536-AFEF-5222-918F-324A9B2DEC75")]
    internal interface IWindowFactory : global::Microsoft.UI.Xaml.IWindowFactory
    {
    }
    internal static class IWindowSizeChangedEventArgsMethods
    {

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.Foundation.Size get_Size(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Size __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Size*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x2C, 0x6F, 0x2F, 0x54, 0x64, 0x4B, 0x72, 0x5C, 0xA7, 0xA5, 0x3A, 0x7E, 0x6, 0x64, 0xB8, 0xFF };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("542F6F2C-4B64-5C72-A7A5-3A7E0664B8FF")]
    internal interface IWindowSizeChangedEventArgs : global::Microsoft.UI.Xaml.IWindowSizeChangedEventArgs
    {
    }
    internal static class IWindowStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Window get_Current(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Window.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Window.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE3, 0x85, 0xC9, 0x8C, 0x1A, 0xA4, 0xF4, 0x5D, 0xB5, 0x31, 0xD3, 0xA1, 0x78, 0x8D, 0x86, 0xC5 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8CC985E3-A41A-5DF4-B531-D3A1788D86C5")]
    internal interface IWindowStatics : global::Microsoft.UI.Xaml.IWindowStatics
    {
    }
    internal static class IWindowVisibilityChangedEventArgsMethods
    {

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_Visible(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x6D, 0x4A, 0xB2, 0x7B, 0xC, 0x7, 0xB6, 0x5C, 0x8E, 0x9C, 0x54, 0x79, 0x5, 0xBE, 0x82, 0x65 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("7BB24A6D-070C-5CB6-8E9C-547905BE8265")]
    internal interface IWindowVisibilityChangedEventArgs : global::Microsoft.UI.Xaml.IWindowVisibilityChangedEventArgs
    {
    }
    internal static class IXamlIslandMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.UIElement get_Content(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.UIElement.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.UIElement.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Content(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Content.ContentIsland get_ContentIsland(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Content.ContentIsland.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Content.ContentIsland.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.SystemBackdrop get_SystemBackdrop(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.SystemBackdrop.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.SystemBackdrop.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SystemBackdrop(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.SystemBackdrop value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.SystemBackdrop.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[10](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x62, 0x5C, 0x5A, 0x84, 0xF3, 0xB0, 0xB8, 0x5D, 0xB4, 0xFF, 0x41, 0x42, 0xBB, 0xD8, 0xA0, 0x44 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("845A5C62-B0F3-5DB8-B4FF-4142BBD8A044")]
    internal interface IXamlIsland : global::Microsoft.UI.Xaml.IXamlIsland
    {
    }
    internal static class IXamlIslandFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.XamlIsland CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.XamlIsland.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.XamlIsland.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7C, 0x70, 0x7F, 0x26, 0x18, 0x5E, 0xB4, 0x57, 0x9F, 0xF7, 0xD1, 0x1D, 0xA6, 0x6E, 0x4A, 0x11 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("267F707C-5E18-57B4-9FF7-D11DA66E4A11")]
    internal interface IXamlIslandFactory : global::Microsoft.UI.Xaml.IXamlIslandFactory
    {
    }
    internal static class IXamlResourceReferenceFailedEventArgsMethods
    {

        internal static unsafe string get_Message(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE6, 0x5E, 0x17, 0x1B, 0x8B, 0xD0, 0xFF, 0x50, 0x8F, 0x89, 0xA1, 0xFF, 0x27, 0xED, 0xEF, 0x66 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("1B175EE6-D08B-50FF-8F89-A1FF27EDEF66")]
    internal interface IXamlResourceReferenceFailedEventArgs : global::Microsoft.UI.Xaml.IXamlResourceReferenceFailedEventArgs
    {
    }
    internal static class IXamlRootMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.UIElement get_Content(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.UIElement.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.UIElement.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool get_IsHostVisible(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe double get_RasterizationScale(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.Size get_Size(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Size __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Size*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.XamlRoot, global::Microsoft.UI.Xaml.XamlRootChangedEventArgs>>> _Changed_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.XamlRoot, global::Microsoft.UI.Xaml.XamlRootChangedEventArgs>>> MakeChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Changed_, new(), null);
            return _Changed_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.XamlRoot, global::Microsoft.UI.Xaml.XamlRootChangedEventArgs>>> _Changed => _Changed_ ?? MakeChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.XamlRoot, global::Microsoft.UI.Xaml.XamlRootChangedEventArgs>> Get_Changed2(IObjectReference _obj, object _thisObj)
        {
            return _Changed.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_XamlRoot__global__Microsoft_UI_Xaml_XamlRootChangedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[10],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[11],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x5A, 0x21, 0xCB, 0x60, 0x15, 0xAD, 0xA, 0x52, 0x8B, 0x1, 0x44, 0x16, 0x82, 0x4F, 0x4, 0x41 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("60CB215A-AD15-520A-8B01-4416824F0441")]
    internal interface IXamlRoot : global::Microsoft.UI.Xaml.IXamlRoot
    {
    }
    internal static class IXamlRoot2Methods
    {

        internal static unsafe global::Microsoft.UI.Content.ContentIslandEnvironment get_ContentIslandEnvironment(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Content.ContentIslandEnvironment.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Content.ContentIslandEnvironment.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x42, 0xF, 0xEE, 0xBD, 0xCB, 0x71, 0xC5, 0x50, 0x82, 0x9B, 0x46, 0x14, 0xD9, 0x8C, 0x57, 0x94 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("BDEE0F42-71CB-50C5-829B-4614D98C5794")]
    internal interface IXamlRoot2 : global::Microsoft.UI.Xaml.IXamlRoot2
    {
    }
    internal static class IXamlRoot3Methods
    {

        internal static unsafe global::Microsoft.UI.Content.ContentCoordinateConverter get_CoordinateConverter(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Content.ContentCoordinateConverter.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Content.ContentCoordinateConverter.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3B, 0xBF, 0x1D, 0xB7, 0xF, 0x2E, 0xE0, 0x5D, 0xAC, 0x68, 0xF0, 0xC1, 0xF6, 0x51, 0x14, 0xC8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B71DBF3B-2E0F-5DE0-AC68-F0C1F65114C8")]
    internal interface IXamlRoot3 : global::Microsoft.UI.Xaml.IXamlRoot3
    {
    }
    internal static class IXamlRoot4Methods
    {

        internal static unsafe global::Microsoft.UI.Content.ContentIsland get_ContentIsland(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Content.ContentIsland.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Content.ContentIsland.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x22, 0xEC, 0x7B, 0x37, 0x2B, 0x63, 0xBE, 0x52, 0xB2, 0x6F, 0x5E, 0xDF, 0x78, 0x38, 0xE5, 0xCA };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("377BEC22-632B-52BE-B26F-5EDF7838E5CA")]
    internal interface IXamlRoot4 : global::Microsoft.UI.Xaml.IXamlRoot4
    {
    }
    internal static class IXamlRootChangedEventArgsMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x19, 0xC7, 0xD2, 0x61, 0xA1, 0xF8, 0x5A, 0x51, 0x90, 0x2C, 0xCF, 0xA4, 0x98, 0xBA, 0x7A, 0x7F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("61D2C719-F8A1-515A-902C-CFA498BA7A7F")]
    internal interface IXamlRootChangedEventArgs : global::Microsoft.UI.Xaml.IXamlRootChangedEventArgs
    {
    }
    public static class IXamlServiceProviderMethods
    {


        public static unsafe object GetService(IObjectReference _obj, global::System.Type type)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::ABI.System.Type.Pinnable __type = new(type);
                fixed(void* ___type = __type)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.Type, IntPtr*, int>**)ThisPtr)[6](ThisPtr, global::ABI.System.Type.GetAbi(ref __type), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return MarshalInspectable<object>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xDF, 0xA2, 0xB3, 0x68, 0x73, 0x81, 0x9F, 0x53, 0xB5, 0x24, 0xC8, 0xA2, 0x34, 0x8F, 0x5A, 0xFB };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IXamlServiceProvider.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("68B3A2DF-8173-539F-B524-C8A2348F5AFB")]
    internal unsafe interface IXamlServiceProvider : global::Microsoft.UI.Xaml.IXamlServiceProvider
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IXamlServiceProvider()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IXamlServiceProvider), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.Type, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_GetService_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetService_0(IntPtr thisPtr, global::ABI.System.Type type, IntPtr* result)
        {

            object __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.IXamlServiceProvider>(thisPtr).GetService(global::ABI.System.Type.FromAbi(type));
                *result = MarshalInspectable<object>.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe object global::Microsoft.UI.Xaml.IXamlServiceProvider.GetService(global::System.Type type)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.IXamlServiceProvider).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.IXamlServiceProviderMethods.GetService(_obj, type);
        }
    }

    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct LaunchActivatedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.LaunchActivatedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.LaunchActivatedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.ILaunchActivatedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.LaunchActivatedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.ILaunchActivatedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.LaunchActivatedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.LaunchActivatedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.LaunchActivatedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.LaunchActivatedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.LaunchActivatedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.LaunchActivatedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.LaunchActivatedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.LaunchActivatedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.LaunchActivatedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.LaunchActivatedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.LaunchActivatedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.LaunchActivatedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.LaunchActivatedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.LaunchActivatedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.LaunchActivatedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class LaunchActivatedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.LaunchActivatedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("3D723B94-FBCF-5C0D-B6EF-5062E68BF9F8")]
    public static class LeavingBackgroundEventHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x94, 0x3B, 0x72, 0x3D, 0xCF, 0xFB, 0xD, 0x5C, 0xB6, 0xEF, 0x50, 0x62, 0xE6, 0x8B, 0xF9, 0xF8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe LeavingBackgroundEventHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(LeavingBackgroundEventHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.LeavingBackgroundEventHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.LeavingBackgroundEventHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.LeavingBackgroundEventHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.LeavingBackgroundEventHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.LeavingBackgroundEventHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.LeavingBackgroundEventHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.LeavingBackgroundEventHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.LeavingBackgroundEventHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(object sender, global::Windows.ApplicationModel.LeavingBackgroundEventArgs e)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __sender = default;
                ObjectReferenceValue __e = default;
                try
                {
                    __sender = MarshalInspectable<object>.CreateMarshaler2(sender);
                    __e = global::ABI.Windows.ApplicationModel.LeavingBackgroundEventArgs.CreateMarshaler2(e);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__sender), MarshalInspectable<object>.GetAbi(__e)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__sender);
                    MarshalInspectable<object>.DisposeMarshaler(__e);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.LeavingBackgroundEventHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.LeavingBackgroundEventHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.LeavingBackgroundEventHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.LeavingBackgroundEventHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.LeavingBackgroundEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.LeavingBackgroundEventHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.LeavingBackgroundEventHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.LeavingBackgroundEventHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.LeavingBackgroundEventHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.LeavingBackgroundEventHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.LeavingBackgroundEventHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.LeavingBackgroundEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.LeavingBackgroundEventHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.LeavingBackgroundEventHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.LeavingBackgroundEventHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr e)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.LeavingBackgroundEventHandler>(thisPtr).Invoke(MarshalInspectable<object>.FromAbi(sender), global::ABI.Windows.ApplicationModel.LeavingBackgroundEventArgs.FromAbi(e))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class LeavingBackgroundEventHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.LeavingBackgroundEventHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = LeavingBackgroundEventHandler.IID,
                Vtable = LeavingBackgroundEventHandler.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct MediaFailedRoutedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.MediaFailedRoutedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.MediaFailedRoutedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IMediaFailedRoutedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.MediaFailedRoutedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IMediaFailedRoutedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.MediaFailedRoutedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.MediaFailedRoutedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.MediaFailedRoutedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.MediaFailedRoutedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.MediaFailedRoutedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.MediaFailedRoutedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.MediaFailedRoutedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.MediaFailedRoutedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.MediaFailedRoutedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.MediaFailedRoutedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.MediaFailedRoutedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.MediaFailedRoutedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.MediaFailedRoutedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.MediaFailedRoutedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.MediaFailedRoutedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class MediaFailedRoutedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.MediaFailedRoutedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PointHelper
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.PointHelper obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.PointHelper>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IPointHelperMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.PointHelper obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IPointHelperMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.PointHelper FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.PointHelper.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.PointHelper obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PointHelper>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.PointHelper[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PointHelper>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PointHelper>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.PointHelper[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PointHelper>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.PointHelper[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PointHelper>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.PointHelper[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PointHelper>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PointHelper>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PointHelper>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PointHelperRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.PointHelper(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("5FD9243A-2422-53C9-8D6F-F1BA1A0BBA9A")]
    public static class PropertyChangedCallback
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3A, 0x24, 0xD9, 0x5F, 0x22, 0x24, 0xC9, 0x53, 0x8D, 0x6F, 0xF1, 0xBA, 0x1A, 0xB, 0xBA, 0x9A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe PropertyChangedCallback()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(PropertyChangedCallback), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.PropertyChangedCallback), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.PropertyChangedCallback managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.PropertyChangedCallback managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PropertyChangedCallback>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.PropertyChangedCallback FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.PropertyChangedCallback>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.PropertyChangedCallback CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.PropertyChangedCallback(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(global::Microsoft.UI.Xaml.DependencyObject d, global::Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs e)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __d = default;
                ObjectReferenceValue __e = default;
                try
                {
                    __d = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(d);
                    __e = global::ABI.Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs.CreateMarshaler2(e);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__d), MarshalInspectable<object>.GetAbi(__e)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__d);
                    MarshalInspectable<object>.DisposeMarshaler(__e);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.PropertyChangedCallback managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PropertyChangedCallback>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PropertyChangedCallback>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PropertyChangedCallback>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.PropertyChangedCallback[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PropertyChangedCallback>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PropertyChangedCallback>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.PropertyChangedCallback[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PropertyChangedCallback>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.PropertyChangedCallback[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PropertyChangedCallback>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.PropertyChangedCallback[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PropertyChangedCallback>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PropertyChangedCallback>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PropertyChangedCallback>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr d, IntPtr e)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.PropertyChangedCallback>(thisPtr).Invoke(global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(d), global::ABI.Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs.FromAbi(e))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class PropertyChangedCallbackWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.PropertyChangedCallback>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = PropertyChangedCallback.IID,
                Vtable = PropertyChangedCallback.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PropertyMetadata
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.PropertyMetadata obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.PropertyMetadata>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IPropertyMetadataMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.PropertyMetadata obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IPropertyMetadataMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.PropertyMetadata FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.PropertyMetadata.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.PropertyMetadata obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PropertyMetadata>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.PropertyMetadata[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PropertyMetadata>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PropertyMetadata>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.PropertyMetadata[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PropertyMetadata>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.PropertyMetadata[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PropertyMetadata>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.PropertyMetadata[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PropertyMetadata>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PropertyMetadata>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PropertyMetadata>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PropertyMetadataRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.PropertyMetadata(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PropertyPath
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.PropertyPath obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.PropertyPath>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IPropertyPathMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.PropertyPath obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IPropertyPathMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.PropertyPath FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.PropertyPath.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.PropertyPath obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PropertyPath>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.PropertyPath[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PropertyPath>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PropertyPath>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.PropertyPath[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PropertyPath>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.PropertyPath[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PropertyPath>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.PropertyPath[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PropertyPath>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PropertyPath>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.PropertyPath>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PropertyPathRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.PropertyPath(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct RectHelper
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.RectHelper obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.RectHelper>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IRectHelperMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.RectHelper obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IRectHelperMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.RectHelper FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.RectHelper.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.RectHelper obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RectHelper>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.RectHelper[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RectHelper>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RectHelper>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.RectHelper[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RectHelper>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.RectHelper[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RectHelper>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.RectHelper[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RectHelper>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RectHelper>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RectHelper>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class RectHelperRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.RectHelper(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ResourceDictionary
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.ResourceDictionary obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.ResourceDictionary>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IResourceDictionaryMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.ResourceDictionary obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IResourceDictionaryMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.ResourceDictionary FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.ResourceDictionary.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.ResourceDictionary obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ResourceDictionary>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.ResourceDictionary[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ResourceDictionary>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ResourceDictionary>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.ResourceDictionary[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ResourceDictionary>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.ResourceDictionary[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ResourceDictionary>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.ResourceDictionary[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ResourceDictionary>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ResourceDictionary>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ResourceDictionary>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ResourceDictionaryRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.ResourceDictionary(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ResourceManagerRequestedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IResourceManagerRequestedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IResourceManagerRequestedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ResourceManagerRequestedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct RoutedEvent
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.RoutedEvent obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.RoutedEvent>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IRoutedEventMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.RoutedEvent obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IRoutedEventMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.RoutedEvent FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.RoutedEvent.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.RoutedEvent obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RoutedEvent>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.RoutedEvent[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RoutedEvent>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RoutedEvent>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.RoutedEvent[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RoutedEvent>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.RoutedEvent[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RoutedEvent>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.RoutedEvent[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RoutedEvent>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RoutedEvent>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RoutedEvent>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class RoutedEventRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.RoutedEvent(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct RoutedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.RoutedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.RoutedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IRoutedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.RoutedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IRoutedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.RoutedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.RoutedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.RoutedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RoutedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.RoutedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RoutedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RoutedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.RoutedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RoutedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.RoutedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RoutedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.RoutedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RoutedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RoutedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RoutedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class RoutedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.RoutedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("DAE23D85-69CA-5BDF-805B-6161A3A215CC")]
    public static class RoutedEventHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x85, 0x3D, 0xE2, 0xDA, 0xCA, 0x69, 0xDF, 0x5B, 0x80, 0x5B, 0x61, 0x61, 0xA3, 0xA2, 0x15, 0xCC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe RoutedEventHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(RoutedEventHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.RoutedEventHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.RoutedEventHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.RoutedEventHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RoutedEventHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.RoutedEventHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.RoutedEventHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.RoutedEventHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.RoutedEventHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(object sender, global::Microsoft.UI.Xaml.RoutedEventArgs e)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __sender = default;
                ObjectReferenceValue __e = default;
                try
                {
                    __sender = MarshalInspectable<object>.CreateMarshaler2(sender);
                    __e = global::ABI.Microsoft.UI.Xaml.RoutedEventArgs.CreateMarshaler2(e);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__sender), MarshalInspectable<object>.GetAbi(__e)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__sender);
                    MarshalInspectable<object>.DisposeMarshaler(__e);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.RoutedEventHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RoutedEventHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RoutedEventHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RoutedEventHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.RoutedEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RoutedEventHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RoutedEventHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.RoutedEventHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RoutedEventHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.RoutedEventHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RoutedEventHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.RoutedEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RoutedEventHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RoutedEventHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.RoutedEventHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr e)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.RoutedEventHandler>(thisPtr).Invoke(MarshalInspectable<object>.FromAbi(sender), global::ABI.Microsoft.UI.Xaml.RoutedEventArgs.FromAbi(e))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class RoutedEventHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.RoutedEventHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = RoutedEventHandler.IID,
                Vtable = RoutedEventHandler.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ScalarTransition
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.ScalarTransition obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.ScalarTransition>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IScalarTransitionMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.ScalarTransition obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IScalarTransitionMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.ScalarTransition FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.ScalarTransition.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.ScalarTransition obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ScalarTransition>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.ScalarTransition[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ScalarTransition>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ScalarTransition>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.ScalarTransition[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ScalarTransition>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.ScalarTransition[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ScalarTransition>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.ScalarTransition[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ScalarTransition>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ScalarTransition>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.ScalarTransition>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ScalarTransitionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.ScalarTransition(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct Setter
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Setter obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Setter>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.ISetterMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Setter obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.ISetterMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Setter FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Setter.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Setter obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Setter>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Setter[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Setter>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Setter>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Setter[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Setter>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Setter[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Setter>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Setter[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Setter>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Setter>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Setter>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class SetterRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Setter(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct SetterBase
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.SetterBase obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.SetterBase>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.ISetterBaseMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.SetterBase obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.ISetterBaseMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.SetterBase FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.SetterBase.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.SetterBase obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SetterBase>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.SetterBase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SetterBase>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SetterBase>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.SetterBase[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SetterBase>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.SetterBase[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SetterBase>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.SetterBase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SetterBase>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SetterBase>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SetterBase>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class SetterBaseRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.SetterBase(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct SetterBaseCollection
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.SetterBaseCollection obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.SetterBaseCollection>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.ISetterBaseCollectionMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.SetterBaseCollection obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.ISetterBaseCollectionMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.SetterBaseCollection FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.SetterBaseCollection.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.SetterBaseCollection obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SetterBaseCollection>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.SetterBaseCollection[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SetterBaseCollection>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SetterBaseCollection>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.SetterBaseCollection[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SetterBaseCollection>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.SetterBaseCollection[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SetterBaseCollection>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.SetterBaseCollection[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SetterBaseCollection>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SetterBaseCollection>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SetterBaseCollection>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class SetterBaseCollectionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.SetterBaseCollection(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct SizeChangedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.SizeChangedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.SizeChangedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.ISizeChangedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.SizeChangedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.ISizeChangedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.SizeChangedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.SizeChangedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.SizeChangedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SizeChangedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.SizeChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SizeChangedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SizeChangedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.SizeChangedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SizeChangedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.SizeChangedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SizeChangedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.SizeChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SizeChangedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SizeChangedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SizeChangedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class SizeChangedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.SizeChangedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("8D7B1A58-14C6-51C9-892C-9FCCE368E77D")]
    public static class SizeChangedEventHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x58, 0x1A, 0x7B, 0x8D, 0xC6, 0x14, 0xC9, 0x51, 0x89, 0x2C, 0x9F, 0xCC, 0xE3, 0x68, 0xE7, 0x7D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe SizeChangedEventHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(SizeChangedEventHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.SizeChangedEventHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.SizeChangedEventHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.SizeChangedEventHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SizeChangedEventHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.SizeChangedEventHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.SizeChangedEventHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.SizeChangedEventHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.SizeChangedEventHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(object sender, global::Microsoft.UI.Xaml.SizeChangedEventArgs e)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __sender = default;
                ObjectReferenceValue __e = default;
                try
                {
                    __sender = MarshalInspectable<object>.CreateMarshaler2(sender);
                    __e = global::ABI.Microsoft.UI.Xaml.SizeChangedEventArgs.CreateMarshaler2(e);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__sender), MarshalInspectable<object>.GetAbi(__e)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__sender);
                    MarshalInspectable<object>.DisposeMarshaler(__e);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.SizeChangedEventHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SizeChangedEventHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SizeChangedEventHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SizeChangedEventHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.SizeChangedEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SizeChangedEventHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SizeChangedEventHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.SizeChangedEventHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SizeChangedEventHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.SizeChangedEventHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SizeChangedEventHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.SizeChangedEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SizeChangedEventHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SizeChangedEventHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SizeChangedEventHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr e)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.SizeChangedEventHandler>(thisPtr).Invoke(MarshalInspectable<object>.FromAbi(sender), global::ABI.Microsoft.UI.Xaml.SizeChangedEventArgs.FromAbi(e))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class SizeChangedEventHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.SizeChangedEventHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = SizeChangedEventHandler.IID,
                Vtable = SizeChangedEventHandler.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct SizeHelper
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.SizeHelper obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.SizeHelper>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.ISizeHelperMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.SizeHelper obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.ISizeHelperMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.SizeHelper FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.SizeHelper.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.SizeHelper obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SizeHelper>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.SizeHelper[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SizeHelper>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SizeHelper>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.SizeHelper[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SizeHelper>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.SizeHelper[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SizeHelper>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.SizeHelper[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SizeHelper>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SizeHelper>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SizeHelper>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class SizeHelperRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.SizeHelper(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct StateTrigger
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.StateTrigger obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.StateTrigger>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IStateTriggerMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.StateTrigger obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IStateTriggerMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.StateTrigger FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.StateTrigger.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.StateTrigger obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.StateTrigger>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.StateTrigger[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.StateTrigger>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.StateTrigger>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.StateTrigger[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.StateTrigger>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.StateTrigger[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.StateTrigger>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.StateTrigger[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.StateTrigger>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.StateTrigger>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.StateTrigger>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class StateTriggerRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.StateTrigger(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct StateTriggerBase
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.StateTriggerBase obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.StateTriggerBase>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IStateTriggerBaseMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.StateTriggerBase obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IStateTriggerBaseMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.StateTriggerBase FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.StateTriggerBase.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.StateTriggerBase obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.StateTriggerBase>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.StateTriggerBase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.StateTriggerBase>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.StateTriggerBase>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.StateTriggerBase[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.StateTriggerBase>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.StateTriggerBase[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.StateTriggerBase>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.StateTriggerBase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.StateTriggerBase>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.StateTriggerBase>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.StateTriggerBase>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class StateTriggerBaseRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.StateTriggerBase(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct Style
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Style obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Style>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IStyleMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Style obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IStyleMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Style FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Style.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Style obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Style>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Style[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Style>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Style>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Style[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Style>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Style[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Style>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Style[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Style>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Style>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Style>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class StyleRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Style(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("E4BEEC79-95FD-5841-ACEB-01A8A1FB73D0")]
    public static class SuspendingEventHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x79, 0xEC, 0xBE, 0xE4, 0xFD, 0x95, 0x41, 0x58, 0xAC, 0xEB, 0x1, 0xA8, 0xA1, 0xFB, 0x73, 0xD0 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe SuspendingEventHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(SuspendingEventHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.SuspendingEventHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.SuspendingEventHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.SuspendingEventHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SuspendingEventHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.SuspendingEventHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.SuspendingEventHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.SuspendingEventHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.SuspendingEventHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(object sender, global::Windows.ApplicationModel.SuspendingEventArgs e)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __sender = default;
                ObjectReferenceValue __e = default;
                try
                {
                    __sender = MarshalInspectable<object>.CreateMarshaler2(sender);
                    __e = global::ABI.Windows.ApplicationModel.SuspendingEventArgs.CreateMarshaler2(e);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__sender), MarshalInspectable<object>.GetAbi(__e)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__sender);
                    MarshalInspectable<object>.DisposeMarshaler(__e);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.SuspendingEventHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SuspendingEventHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SuspendingEventHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SuspendingEventHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.SuspendingEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SuspendingEventHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SuspendingEventHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.SuspendingEventHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SuspendingEventHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.SuspendingEventHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SuspendingEventHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.SuspendingEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SuspendingEventHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SuspendingEventHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.SuspendingEventHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr e)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.SuspendingEventHandler>(thisPtr).Invoke(MarshalInspectable<object>.FromAbi(sender), global::ABI.Windows.ApplicationModel.SuspendingEventArgs.FromAbi(e))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class SuspendingEventHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.SuspendingEventHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = SuspendingEventHandler.IID,
                Vtable = SuspendingEventHandler.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct TargetPropertyPath
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.TargetPropertyPath obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.TargetPropertyPath>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.ITargetPropertyPathMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.TargetPropertyPath obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.ITargetPropertyPathMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.TargetPropertyPath FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.TargetPropertyPath.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.TargetPropertyPath obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TargetPropertyPath>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.TargetPropertyPath[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TargetPropertyPath>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TargetPropertyPath>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.TargetPropertyPath[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TargetPropertyPath>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.TargetPropertyPath[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TargetPropertyPath>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.TargetPropertyPath[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TargetPropertyPath>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TargetPropertyPath>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TargetPropertyPath>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class TargetPropertyPathRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.TargetPropertyPath(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct TriggerAction
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.TriggerAction obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.TriggerAction>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.ITriggerActionMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.TriggerAction obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.ITriggerActionMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.TriggerAction FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.TriggerAction.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.TriggerAction obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TriggerAction>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.TriggerAction[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TriggerAction>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TriggerAction>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.TriggerAction[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TriggerAction>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.TriggerAction[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TriggerAction>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.TriggerAction[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TriggerAction>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TriggerAction>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TriggerAction>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class TriggerActionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.TriggerAction(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct TriggerActionCollection
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.TriggerActionCollection obj) => obj is null ? null : MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.TriggerAction>>.CreateMarshaler(obj);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.TriggerActionCollection obj) => MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.TriggerAction>>.CreateMarshaler2(obj, global::ABI.System.Collections.Generic.IListMethods<global::Microsoft.UI.Xaml.TriggerAction>.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.TriggerActionCollection FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.TriggerActionCollection.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.TriggerActionCollection obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TriggerActionCollection>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.TriggerActionCollection[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TriggerActionCollection>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TriggerActionCollection>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.TriggerActionCollection[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TriggerActionCollection>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.TriggerActionCollection[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TriggerActionCollection>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.TriggerActionCollection[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TriggerActionCollection>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TriggerActionCollection>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TriggerActionCollection>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class TriggerActionCollectionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.TriggerActionCollection(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct TriggerBase
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.TriggerBase obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.TriggerBase>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.ITriggerBaseMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.TriggerBase obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.ITriggerBaseMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.TriggerBase FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.TriggerBase.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.TriggerBase obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TriggerBase>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.TriggerBase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TriggerBase>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TriggerBase>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.TriggerBase[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TriggerBase>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.TriggerBase[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TriggerBase>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.TriggerBase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TriggerBase>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TriggerBase>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TriggerBase>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class TriggerBaseRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.TriggerBase(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct TriggerCollection
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.TriggerCollection obj) => obj is null ? null : MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.TriggerBase>>.CreateMarshaler(obj);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.TriggerCollection obj) => MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.TriggerBase>>.CreateMarshaler2(obj, global::ABI.System.Collections.Generic.IListMethods<global::Microsoft.UI.Xaml.TriggerBase>.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.TriggerCollection FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.TriggerCollection.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.TriggerCollection obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TriggerCollection>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.TriggerCollection[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TriggerCollection>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TriggerCollection>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.TriggerCollection[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TriggerCollection>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.TriggerCollection[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TriggerCollection>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.TriggerCollection[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TriggerCollection>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TriggerCollection>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.TriggerCollection>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class TriggerCollectionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.TriggerCollection(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct UIElement
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.UIElement obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.UIElement>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IUIElementMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.UIElement obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IUIElementMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.UIElement FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.UIElement.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.UIElement obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UIElement>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.UIElement[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UIElement>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UIElement>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.UIElement[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UIElement>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.UIElement[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UIElement>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.UIElement[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UIElement>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UIElement>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UIElement>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class UIElementRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.UIElement(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct UIElementWeakCollection
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.UIElementWeakCollection obj) => obj is null ? null : MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.UIElement>>.CreateMarshaler(obj);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.UIElementWeakCollection obj) => MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.UIElement>>.CreateMarshaler2(obj, global::ABI.System.Collections.Generic.IListMethods<global::Microsoft.UI.Xaml.UIElement>.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.UIElementWeakCollection FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.UIElementWeakCollection.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.UIElementWeakCollection obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UIElementWeakCollection>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.UIElementWeakCollection[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UIElementWeakCollection>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UIElementWeakCollection>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.UIElementWeakCollection[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UIElementWeakCollection>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.UIElementWeakCollection[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UIElementWeakCollection>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.UIElementWeakCollection[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UIElementWeakCollection>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UIElementWeakCollection>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UIElementWeakCollection>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class UIElementWeakCollectionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.UIElementWeakCollection(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct UnhandledExceptionEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.UnhandledExceptionEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.UnhandledExceptionEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IUnhandledExceptionEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.UnhandledExceptionEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IUnhandledExceptionEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.UnhandledExceptionEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.UnhandledExceptionEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.UnhandledExceptionEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UnhandledExceptionEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.UnhandledExceptionEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UnhandledExceptionEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UnhandledExceptionEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.UnhandledExceptionEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UnhandledExceptionEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.UnhandledExceptionEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UnhandledExceptionEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.UnhandledExceptionEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UnhandledExceptionEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UnhandledExceptionEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UnhandledExceptionEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class UnhandledExceptionEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.UnhandledExceptionEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("3427C1B6-5ECA-5631-84B8-5BAE732FB67F")]
    public static class UnhandledExceptionEventHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB6, 0xC1, 0x27, 0x34, 0xCA, 0x5E, 0x31, 0x56, 0x84, 0xB8, 0x5B, 0xAE, 0x73, 0x2F, 0xB6, 0x7F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe UnhandledExceptionEventHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(UnhandledExceptionEventHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.UnhandledExceptionEventHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.UnhandledExceptionEventHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.UnhandledExceptionEventHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UnhandledExceptionEventHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.UnhandledExceptionEventHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.UnhandledExceptionEventHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.UnhandledExceptionEventHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.UnhandledExceptionEventHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(object sender, global::Microsoft.UI.Xaml.UnhandledExceptionEventArgs e)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __sender = default;
                ObjectReferenceValue __e = default;
                try
                {
                    __sender = MarshalInspectable<object>.CreateMarshaler2(sender);
                    __e = global::ABI.Microsoft.UI.Xaml.UnhandledExceptionEventArgs.CreateMarshaler2(e);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__sender), MarshalInspectable<object>.GetAbi(__e)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__sender);
                    MarshalInspectable<object>.DisposeMarshaler(__e);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.UnhandledExceptionEventHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UnhandledExceptionEventHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UnhandledExceptionEventHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UnhandledExceptionEventHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.UnhandledExceptionEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UnhandledExceptionEventHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UnhandledExceptionEventHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.UnhandledExceptionEventHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UnhandledExceptionEventHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.UnhandledExceptionEventHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UnhandledExceptionEventHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.UnhandledExceptionEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UnhandledExceptionEventHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UnhandledExceptionEventHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.UnhandledExceptionEventHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr e)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.UnhandledExceptionEventHandler>(thisPtr).Invoke(MarshalInspectable<object>.FromAbi(sender), global::ABI.Microsoft.UI.Xaml.UnhandledExceptionEventArgs.FromAbi(e))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class UnhandledExceptionEventHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.UnhandledExceptionEventHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = UnhandledExceptionEventHandler.IID,
                Vtable = UnhandledExceptionEventHandler.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct Vector3Transition
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Vector3Transition obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Vector3Transition>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IVector3TransitionMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Vector3Transition obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IVector3TransitionMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Vector3Transition FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Vector3Transition.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Vector3Transition obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Vector3Transition>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Vector3Transition[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Vector3Transition>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Vector3Transition>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Vector3Transition[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Vector3Transition>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Vector3Transition[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Vector3Transition>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Vector3Transition[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Vector3Transition>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Vector3Transition>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Vector3Transition>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class Vector3TransitionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Vector3Transition(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct VisualState
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.VisualState obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.VisualState>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IVisualStateMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.VisualState obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IVisualStateMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.VisualState FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.VisualState.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.VisualState obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualState>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.VisualState[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualState>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualState>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.VisualState[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualState>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.VisualState[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualState>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.VisualState[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualState>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualState>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualState>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class VisualStateRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.VisualState(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct VisualStateChangedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.VisualStateChangedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.VisualStateChangedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IVisualStateChangedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.VisualStateChangedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IVisualStateChangedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.VisualStateChangedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.VisualStateChangedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.VisualStateChangedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateChangedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.VisualStateChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateChangedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateChangedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.VisualStateChangedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateChangedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.VisualStateChangedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateChangedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.VisualStateChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateChangedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateChangedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateChangedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class VisualStateChangedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.VisualStateChangedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("CDBBD854-0539-5BFF-B448-33193D2F41B8")]
    public static class VisualStateChangedEventHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x54, 0xD8, 0xBB, 0xCD, 0x39, 0x5, 0xFF, 0x5B, 0xB4, 0x48, 0x33, 0x19, 0x3D, 0x2F, 0x41, 0xB8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe VisualStateChangedEventHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(VisualStateChangedEventHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.VisualStateChangedEventHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.VisualStateChangedEventHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.VisualStateChangedEventHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateChangedEventHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.VisualStateChangedEventHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.VisualStateChangedEventHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.VisualStateChangedEventHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.VisualStateChangedEventHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(object sender, global::Microsoft.UI.Xaml.VisualStateChangedEventArgs e)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __sender = default;
                ObjectReferenceValue __e = default;
                try
                {
                    __sender = MarshalInspectable<object>.CreateMarshaler2(sender);
                    __e = global::ABI.Microsoft.UI.Xaml.VisualStateChangedEventArgs.CreateMarshaler2(e);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__sender), MarshalInspectable<object>.GetAbi(__e)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__sender);
                    MarshalInspectable<object>.DisposeMarshaler(__e);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.VisualStateChangedEventHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateChangedEventHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateChangedEventHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateChangedEventHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.VisualStateChangedEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateChangedEventHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateChangedEventHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.VisualStateChangedEventHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateChangedEventHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.VisualStateChangedEventHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateChangedEventHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.VisualStateChangedEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateChangedEventHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateChangedEventHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateChangedEventHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr e)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.VisualStateChangedEventHandler>(thisPtr).Invoke(MarshalInspectable<object>.FromAbi(sender), global::ABI.Microsoft.UI.Xaml.VisualStateChangedEventArgs.FromAbi(e))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class VisualStateChangedEventHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.VisualStateChangedEventHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = VisualStateChangedEventHandler.IID,
                Vtable = VisualStateChangedEventHandler.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct VisualStateGroup
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.VisualStateGroup obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.VisualStateGroup>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IVisualStateGroupMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.VisualStateGroup obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IVisualStateGroupMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.VisualStateGroup FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.VisualStateGroup.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.VisualStateGroup obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateGroup>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.VisualStateGroup[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateGroup>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateGroup>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.VisualStateGroup[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateGroup>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.VisualStateGroup[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateGroup>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.VisualStateGroup[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateGroup>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateGroup>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateGroup>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class VisualStateGroupRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.VisualStateGroup(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct VisualStateManager
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.VisualStateManager obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.VisualStateManager>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IVisualStateManagerMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.VisualStateManager obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IVisualStateManagerMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.VisualStateManager FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.VisualStateManager.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.VisualStateManager obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateManager>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.VisualStateManager[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateManager>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateManager>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.VisualStateManager[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateManager>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.VisualStateManager[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateManager>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.VisualStateManager[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateManager>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateManager>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualStateManager>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class VisualStateManagerRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.VisualStateManager(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct VisualTransition
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.VisualTransition obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.VisualTransition>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IVisualTransitionMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.VisualTransition obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IVisualTransitionMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.VisualTransition FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.VisualTransition.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.VisualTransition obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualTransition>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.VisualTransition[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualTransition>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualTransition>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.VisualTransition[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualTransition>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.VisualTransition[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualTransition>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.VisualTransition[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualTransition>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualTransition>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.VisualTransition>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class VisualTransitionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.VisualTransition(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct Window
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Window obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Window>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IWindowMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Window obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IWindowMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Window FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Window.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Window obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Window>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Window[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Window>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Window>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Window[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Window>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Window[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Window>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Window[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Window>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Window>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Window>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class WindowRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Window(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct WindowActivatedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.WindowActivatedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.WindowActivatedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IWindowActivatedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.WindowActivatedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IWindowActivatedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.WindowActivatedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.WindowActivatedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.WindowActivatedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.WindowActivatedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.WindowActivatedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.WindowActivatedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.WindowActivatedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.WindowActivatedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.WindowActivatedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.WindowActivatedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.WindowActivatedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.WindowActivatedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.WindowActivatedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.WindowActivatedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.WindowActivatedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class WindowActivatedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.WindowActivatedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct WindowEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.WindowEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.WindowEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IWindowEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.WindowEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IWindowEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.WindowEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.WindowEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.WindowEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.WindowEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.WindowEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.WindowEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.WindowEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.WindowEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.WindowEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.WindowEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.WindowEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.WindowEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.WindowEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.WindowEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.WindowEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class WindowEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.WindowEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct WindowSizeChangedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.WindowSizeChangedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.WindowSizeChangedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IWindowSizeChangedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.WindowSizeChangedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IWindowSizeChangedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.WindowSizeChangedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.WindowSizeChangedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.WindowSizeChangedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.WindowSizeChangedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.WindowSizeChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.WindowSizeChangedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.WindowSizeChangedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.WindowSizeChangedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.WindowSizeChangedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.WindowSizeChangedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.WindowSizeChangedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.WindowSizeChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.WindowSizeChangedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.WindowSizeChangedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.WindowSizeChangedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class WindowSizeChangedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.WindowSizeChangedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct WindowVisibilityChangedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IWindowVisibilityChangedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IWindowVisibilityChangedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class WindowVisibilityChangedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct XamlIsland
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.XamlIsland obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.XamlIsland>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IXamlIslandMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.XamlIsland obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IXamlIslandMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.XamlIsland FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.XamlIsland.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.XamlIsland obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.XamlIsland>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.XamlIsland[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.XamlIsland>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.XamlIsland>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.XamlIsland[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.XamlIsland>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.XamlIsland[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.XamlIsland>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.XamlIsland[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.XamlIsland>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.XamlIsland>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.XamlIsland>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class XamlIslandRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.XamlIsland(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct XamlResourceReferenceFailedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IXamlResourceReferenceFailedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IXamlResourceReferenceFailedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class XamlResourceReferenceFailedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct XamlRoot
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.XamlRoot obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.XamlRoot>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IXamlRootMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.XamlRoot obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IXamlRootMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.XamlRoot FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.XamlRoot.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.XamlRoot obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.XamlRoot>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.XamlRoot[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.XamlRoot>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.XamlRoot>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.XamlRoot[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.XamlRoot>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.XamlRoot[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.XamlRoot>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.XamlRoot[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.XamlRoot>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.XamlRoot>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.XamlRoot>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class XamlRootRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.XamlRoot(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct XamlRootChangedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.XamlRootChangedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.XamlRootChangedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.IXamlRootChangedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.XamlRootChangedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.IXamlRootChangedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.XamlRootChangedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.XamlRootChangedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.XamlRootChangedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.XamlRootChangedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.XamlRootChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.XamlRootChangedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.XamlRootChangedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.XamlRootChangedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.XamlRootChangedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.XamlRootChangedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.XamlRootChangedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.XamlRootChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.XamlRootChangedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.XamlRootChangedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.XamlRootChangedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class XamlRootChangedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.XamlRootChangedEventArgs(inspectable.ObjRef);
    }
}
#pragma warning restore CA1416


namespace Microsoft.UI.Xaml
{
    using global::Windows.Foundation;

    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.CornerRadius))]
#if NET
    [global::WinRT.WinRTExposedType(typeof(global::WinRT.StructTypeDetails<CornerRadius, CornerRadius>))]
#endif
    [StructLayout(LayoutKind.Sequential)]
#if EMBED
    internal
#else
    public
#endif
    struct CornerRadius
    {
        private double _TopLeft;
        private double _TopRight;
        private double _BottomRight;
        private double _BottomLeft;

        public CornerRadius(double uniformRadius)
        {
            Validate(uniformRadius, uniformRadius, uniformRadius, uniformRadius);
            _TopLeft = _TopRight = _BottomRight = _BottomLeft = uniformRadius;
        }

        public CornerRadius(double topLeft, double topRight, double bottomRight, double bottomLeft)
        {
            Validate(topLeft, topRight, bottomRight, bottomLeft);

            _TopLeft = topLeft;
            _TopRight = topRight;
            _BottomRight = bottomRight;
            _BottomLeft = bottomLeft;
        }

        private static void Validate(double topLeft, double topRight, double bottomRight, double bottomLeft)
        {
            if (topLeft < 0.0 || double.IsNaN(topLeft))
                throw new ArgumentException(string.Format(SR.DirectUI_CornerRadius_InvalidMember, "TopLeft"));

            if (topRight < 0.0 || double.IsNaN(topRight))
                throw new ArgumentException(string.Format(SR.DirectUI_CornerRadius_InvalidMember, "TopRight"));

            if (bottomRight < 0.0 || double.IsNaN(bottomRight))
                throw new ArgumentException(string.Format(SR.DirectUI_CornerRadius_InvalidMember, "BottomRight"));

            if (bottomLeft < 0.0 || double.IsNaN(bottomLeft))
                throw new ArgumentException(string.Format(SR.DirectUI_CornerRadius_InvalidMember, "BottomLeft"));
        }

        public override string ToString()
        {
            return ToString(global::System.Globalization.CultureInfo.InvariantCulture);
        }

        internal string ToString(global::System.Globalization.CultureInfo cultureInfo)
        {
            char listSeparator = TokenizerHelper.GetNumericListSeparator(cultureInfo);

            // Initial capacity [64] is an estimate based on a sum of:
            // 48 = 4x double (twelve digits is generous for the range of values likely)
            //  8 = 4x Unit Type string (approx two characters)
            //  4 = 4x separator characters
            global::System.Text.StringBuilder sb = new global::System.Text.StringBuilder(64);

            sb.Append(InternalToString(_TopLeft, cultureInfo));
            sb.Append(listSeparator);
            sb.Append(InternalToString(_TopRight, cultureInfo));
            sb.Append(listSeparator);
            sb.Append(InternalToString(_BottomRight, cultureInfo));
            sb.Append(listSeparator);
            sb.Append(InternalToString(_BottomLeft, cultureInfo));
            return sb.ToString();
        }

        internal string InternalToString(double l, global::System.Globalization.CultureInfo cultureInfo)
        {
            if (double.IsNaN(l)) return "Auto";
            return Convert.ToString(l, cultureInfo);
        }

        public override bool Equals(object obj)
        {
            if (obj is CornerRadius)
            {
                CornerRadius otherObj = (CornerRadius)obj;
                return (this == otherObj);
            }
            return (false);
        }

        public bool Equals(CornerRadius cornerRadius)
        {
            return (this == cornerRadius);
        }

        public override int GetHashCode()
        {
            return _TopLeft.GetHashCode() ^ _TopRight.GetHashCode() ^ _BottomLeft.GetHashCode() ^ _BottomRight.GetHashCode();
        }

        public static bool operator ==(CornerRadius cr1, CornerRadius cr2)
        {
            return cr1._TopLeft == cr2._TopLeft && cr1._TopRight == cr2._TopRight && cr1._BottomRight == cr2._BottomRight && cr1._BottomLeft == cr2._BottomLeft;
        }

        public static bool operator !=(CornerRadius cr1, CornerRadius cr2)
        {
            return (!(cr1 == cr2));
        }

        public double TopLeft
        {
            get { return _TopLeft; }
            set
            {
                Validate(value, 0, 0, 0);
                _TopLeft = value;
            }
        }

        public double TopRight
        {
            get { return _TopRight; }
            set
            {
                Validate(0, value, 0, 0);
                _TopRight = value;
            }
        }

        public double BottomRight
        {
            get { return _BottomRight; }
            set
            {
                Validate(0, 0, value, 0);
                _BottomRight = value;
            }
        }

        public double BottomLeft
        {
            get { return _BottomLeft; }
            set
            {
                Validate(0, 0, 0, value);
                _BottomLeft = value;
            }
        }
    }

    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
#if NET
    [global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<GridUnitType>))]
#endif
#if EMBED
    internal
#else
    public
#endif
    enum GridUnitType
    {
        Auto = 0,
        Pixel,
        Star,
    }

    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.GridLength))]
#if NET
    [global::WinRT.WinRTExposedType(typeof(global::WinRT.StructTypeDetails<GridLength, GridLength>))]
#endif
    [StructLayout(LayoutKind.Sequential)]
#if EMBED
    internal
#else
    public
#endif
    struct GridLength
    {
        private readonly double _unitValue;
        private readonly GridUnitType _unitType;

        private const double Default = 1.0;
        private static readonly GridLength s_auto = new GridLength(Default, GridUnitType.Auto);

        public GridLength(double pixels)
            : this(pixels, GridUnitType.Pixel)
        {
        }

        internal static bool IsFinite(double value)
        {
            return !(double.IsNaN(value) || double.IsInfinity(value));
        }

        public GridLength(double value, GridUnitType type)
        {
            if (!IsFinite(value) || value < 0.0)
            {
                throw new ArgumentException(SR.DirectUI_InvalidArgument, nameof(value));
            }
            if (type != GridUnitType.Auto && type != GridUnitType.Pixel && type != GridUnitType.Star)
            {
                throw new ArgumentException(SR.DirectUI_InvalidArgument, nameof(type));
            }

            _unitValue = (type == GridUnitType.Auto) ? Default : value;
            _unitType = type;
        }


        public double Value { get { return ((_unitType == GridUnitType.Auto) ? s_auto._unitValue : _unitValue); } }
        public GridUnitType GridUnitType { get { return (_unitType); } }


        public bool IsAbsolute { get { return (_unitType == GridUnitType.Pixel); } }
        public bool IsAuto { get { return (_unitType == GridUnitType.Auto); } }
        public bool IsStar { get { return (_unitType == GridUnitType.Star); } }

        public static GridLength Auto
        {
            get { return (s_auto); }
        }


        public static bool operator ==(GridLength gl1, GridLength gl2)
        {
            return (gl1.GridUnitType == gl2.GridUnitType
                    && gl1.Value == gl2.Value);
        }

        public static bool operator !=(GridLength gl1, GridLength gl2)
        {
            return (gl1.GridUnitType != gl2.GridUnitType
                    || gl1.Value != gl2.Value);
        }

        public override bool Equals(object oCompare)
        {
            if (oCompare is GridLength)
            {
                GridLength l = (GridLength)oCompare;
                return (this == l);
            }
            else
                return false;
        }

        public bool Equals(GridLength gridLength)
        {
            return (this == gridLength);
        }

        public override int GetHashCode()
        {
            return ((int)_unitValue + (int)_unitType);
        }

        public override string ToString()
        {
            return this.ToString(global::System.Globalization.CultureInfo.InvariantCulture);
        }

        internal string ToString(global::System.Globalization.CultureInfo cultureInfo)
        {
            char listSeparator = TokenizerHelper.GetNumericListSeparator(cultureInfo);

            // Initial capacity [64] is an estimate based on a sum of:
            // 12 = 1x double (twelve digits is generous for the range of values likely)
            //  8 = 4x Unit Type string (approx two characters)
            //  2 = 2x separator characters

            if (_unitType == GridUnitType.Auto)
            {
                return "Auto";
            }
            else if (_unitType == GridUnitType.Pixel)
            {
                return Convert.ToString(_unitValue, cultureInfo);
            }
            else
            {
                return Convert.ToString(_unitValue, cultureInfo) + "*";
            }
        }
    }

    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Thickness))]
#if NET
    [global::WinRT.WinRTExposedType(typeof(global::WinRT.StructTypeDetails<Thickness, Thickness>))]
#endif
    [StructLayout(LayoutKind.Sequential)]
#if EMBED
    internal
#else
    public
#endif
    struct Thickness
    {
        private double _Left;
        private double _Top;
        private double _Right;
        private double _Bottom;

        public Thickness(double uniformLength)
        {
            _Left = _Top = _Right = _Bottom = uniformLength;
        }

        public Thickness(double left, double top, double right, double bottom)
        {
            _Left = left;
            _Top = top;
            _Right = right;
            _Bottom = bottom;
        }

        public double Left
        {
            get { return _Left; }
            set { _Left = value; }
        }

        public double Top
        {
            get { return _Top; }
            set { _Top = value; }
        }

        public double Right
        {
            get { return _Right; }
            set { _Right = value; }
        }

        public double Bottom
        {
            get { return _Bottom; }
            set { _Bottom = value; }
        }

        public override string ToString()
        {
            return ToString(global::System.Globalization.CultureInfo.InvariantCulture);
        }

        internal string ToString(global::System.Globalization.CultureInfo cultureInfo)
        {
            char listSeparator = TokenizerHelper.GetNumericListSeparator(cultureInfo);

            // Initial capacity [64] is an estimate based on a sum of:
            // 48 = 4x double (twelve digits is generous for the range of values likely)
            //  8 = 4x Unit Type string (approx two characters)
            //  4 = 4x separator characters
            global::System.Text.StringBuilder sb = new global::System.Text.StringBuilder(64);

            sb.Append(InternalToString(_Left, cultureInfo));
            sb.Append(listSeparator);
            sb.Append(InternalToString(_Top, cultureInfo));
            sb.Append(listSeparator);
            sb.Append(InternalToString(_Right, cultureInfo));
            sb.Append(listSeparator);
            sb.Append(InternalToString(_Bottom, cultureInfo));
            return sb.ToString();
        }

        internal string InternalToString(double l, global::System.Globalization.CultureInfo cultureInfo)
        {
            if (double.IsNaN(l)) return "Auto";
            return Convert.ToString(l, cultureInfo);
        }

        public override bool Equals(object obj)
        {
            if (obj is Thickness)
            {
                Thickness otherObj = (Thickness)obj;
                return (this == otherObj);
            }
            return (false);
        }

        public bool Equals(Thickness thickness)
        {
            return (this == thickness);
        }

        public override int GetHashCode()
        {
            return _Left.GetHashCode() ^ _Top.GetHashCode() ^ _Right.GetHashCode() ^ _Bottom.GetHashCode();
        }

        public static bool operator ==(Thickness t1, Thickness t2)
        {
            return t1._Left == t2._Left && t1._Top == t2._Top && t1._Right == t2._Right && t1._Bottom == t2._Bottom;
        }

        public static bool operator !=(Thickness t1, Thickness t2)
        {
            return (!(t1 == t2));
        }
    }

    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
#if NET
    [global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<DurationType>))]
#endif
#if EMBED
    internal
#else
    public
#endif
    enum DurationType
    {
        Automatic,
        TimeSpan,
        Forever
    }

    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Duration))]
#if NET
    [global::WinRT.WinRTExposedType(typeof(global::WinRT.StructTypeDetails<Duration, Duration>))]
#endif
    [StructLayout(LayoutKind.Sequential)]
#if EMBED
    internal
#else
    public
#endif
    struct Duration
    {
        private readonly TimeSpan _timeSpan;
        private DurationType _durationType;

        public Duration(TimeSpan timeSpan)
        {
            _durationType = DurationType.TimeSpan;
            _timeSpan = timeSpan;
        }

        public static implicit operator Duration(TimeSpan timeSpan)
        {
            return new Duration(timeSpan);
        }

        public static Duration operator +(Duration t1, Duration t2)
        {
            if (t1.HasTimeSpan && t2.HasTimeSpan)
            {
                return new Duration(t1._timeSpan + t2._timeSpan);
            }
            else if (t1._durationType != DurationType.Automatic && t2._durationType != DurationType.Automatic)
            {
                return Duration.Forever;
            }
            else
            {
                // Automatic + anything is Automatic
                return Duration.Automatic;
            }
        }

        public static Duration operator -(Duration t1, Duration t2)
        {
            if (t1.HasTimeSpan && t2.HasTimeSpan)
            {
                return new Duration(t1._timeSpan - t2._timeSpan);
            }
            else if (t1._durationType == DurationType.Forever && t2.HasTimeSpan)
            {
                return Duration.Forever;
            }
            else
            {
                return Duration.Automatic;
            }
        }

        public static bool operator ==(Duration t1, Duration t2)
        {
            return t1.Equals(t2);
        }

        public static bool operator !=(Duration t1, Duration t2)
        {
            return !(t1.Equals(t2));
        }

        public static bool operator >(Duration t1, Duration t2)
        {
            if (t1.HasTimeSpan && t2.HasTimeSpan)
            {
                return t1._timeSpan > t2._timeSpan;
            }
            else if (t1.HasTimeSpan && t2._durationType == DurationType.Forever)
            {
                return false;
            }
            else if (t1._durationType == DurationType.Forever && t2.HasTimeSpan)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public static bool operator >=(Duration t1, Duration t2)
        {
            if (t1._durationType == DurationType.Automatic && t2._durationType == DurationType.Automatic)
            {
                return true;
            }
            else if (t1._durationType == DurationType.Automatic || t2._durationType == DurationType.Automatic)
            {
                return false;
            }
            else
            {
                return !(t1 < t2);
            }
        }

        public static bool operator <(Duration t1, Duration t2)
        {
            if (t1.HasTimeSpan && t2.HasTimeSpan)
            {
                return t1._timeSpan < t2._timeSpan;
            }
            else if (t1.HasTimeSpan && t2._durationType == DurationType.Forever)
            {
                return true;
            }
            else if (t1._durationType == DurationType.Forever && t2.HasTimeSpan)
            {
                return false;
            }
            else
            {
                return false;
            }
        }

        public static bool operator <=(Duration t1, Duration t2)
        {
            if (t1._durationType == DurationType.Automatic && t2._durationType == DurationType.Automatic)
            {
                return true;
            }
            else if (t1._durationType == DurationType.Automatic || t2._durationType == DurationType.Automatic)
            {
                return false;
            }
            else
            {
                return !(t1 > t2);
            }
        }

        public static int Compare(Duration t1, Duration t2)
        {
            if (t1._durationType == DurationType.Automatic)
            {
                if (t2._durationType == DurationType.Automatic)
                {
                    return 0;
                }
                else
                {
                    return -1;
                }
            }
            else if (t2._durationType == DurationType.Automatic)
            {
                return 1;
            }
            else
            {
                if (t1 < t2)
                {
                    return -1;
                }
                else if (t1 > t2)
                {
                    return 1;
                }
                else
                {
                    return 0;
                }
            }
        }

        public static Duration operator +(Duration duration)
        {
            return duration;
        }

        public bool HasTimeSpan
        {
            get
            {
                return _durationType == DurationType.TimeSpan;
            }
        }

        public static Duration Automatic
        {
            get
            {
                Duration duration = default;
                duration._durationType = DurationType.Automatic;

                return duration;
            }
        }

        public static Duration Forever
        {
            get
            {
                Duration duration = default;
                duration._durationType = DurationType.Forever;

                return duration;
            }
        }

        public TimeSpan TimeSpan
        {
            get
            {
                if (HasTimeSpan)
                {
                    return _timeSpan;
                }
                else
                {
                    throw new InvalidOperationException();
                }
            }
        }

        public Duration Add(Duration duration)
        {
            return this + duration;
        }

        public override bool Equals(object value)
        {
            return value is Duration && Equals((Duration)value);
        }

        public bool Equals(Duration duration)
        {
            if (HasTimeSpan)
            {
                if (duration.HasTimeSpan)
                {
                    return _timeSpan == duration._timeSpan;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return _durationType == duration._durationType;
            }
        }

        public static bool Equals(Duration t1, Duration t2)
        {
            return t1.Equals(t2);
        }

        public override int GetHashCode()
        {
            if (HasTimeSpan)
            {
                return _timeSpan.GetHashCode();
            }
            else
            {
                return _durationType.GetHashCode() + 17;
            }
        }

        public Duration Subtract(Duration duration)
        {
            return this - duration;
        }

        public override string ToString()
        {
            if (HasTimeSpan)
            {
                return _timeSpan.ToString(); // "00"; //TypeDescriptor.GetConverter(_timeSpan).ConvertToString(_timeSpan);
            }
            else if (_durationType == DurationType.Forever)
            {
                return "Forever";
            }
            else // IsAutomatic
            {
                return "Automatic";
            }
        }
    }
}

namespace ABI.Microsoft.UI.Xaml
{
    #if EMBED
        internal
    #else
        public
    #endif
        static class CornerRadius
        {
            public static string GetGuidSignature() => $"struct(Microsoft.UI.Xaml.CornerRadius;f8;f8;f8;f8)";
        }

    #if EMBED
        internal
    #else
        public
    #endif
        static class Duration
        {
            public static string GetGuidSignature()
            {
                string timeSpanSignature = global::WinRT.GuidGenerator.GetSignature(typeof(global::System.TimeSpan));
                string durationTypeSignature = global::WinRT.GuidGenerator.GetSignature(typeof(global::Microsoft.UI.Xaml.DurationType));
                return $"struct(Microsoft.UI.Xaml.Duration;{timeSpanSignature};{durationTypeSignature})";
            }
        }

    #if EMBED
        internal
    #else
        public
    #endif
        static class DurationType
        {
            public static string GetGuidSignature() => "enum(Microsoft.UI.Xaml.DurationType;i4)";
        }

    #if EMBED
        internal
    #else
        public
    #endif
        static class GridLength
        {
            public static string GetGuidSignature()
            {
                string unitTypeSignature = global::WinRT.GuidGenerator.GetSignature(typeof(global::Microsoft.UI.Xaml.GridUnitType));
                return $"struct(Microsoft.UI.Xaml.GridLength;f8;{unitTypeSignature})";
            }
        }

    #if EMBED
        internal
    #else
        public
    #endif
        static class GridUnitType
        {
            public static string GetGuidSignature() => "enum(Microsoft.UI.Xaml.GridUnitType;i4)";
        }

    #if EMBED
        internal
    #else
        public
    #endif
        static class Thickness
        {
            public static string GetGuidSignature() => $"struct(Microsoft.UI.Xaml.Thickness;f8;f8;f8;f8)";
        }
}

// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

namespace Microsoft.UI.Xaml
{
    static class SR
    {
        public static string DirectUI_CornerRadius_InvalidMember = "Invalid value for {0} property on CornerRadius.";
        public static string DirectUI_InvalidArgument = "Invalid argument.";
        public static string ElementNotAvailable_Default = "The element is not available.";
        public static string ElementNotEnabled_Default = "The element is not enabled.";
        public static string XamlParse_Default = "XAML parsing failed.";
        public static string LayoutCycle_Default = "A cycle occurred while laying out the GUI.";
        public static string PlatformNotSupported_WindowsRuntime = "Windows Runtime (WinRT) is not supported on this platform.";
    }
}
