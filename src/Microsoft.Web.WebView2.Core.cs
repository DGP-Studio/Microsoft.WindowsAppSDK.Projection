//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.Web.WebView2.Core
{
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2RcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2))]
    public sealed class CoreWebView2 : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrivatePartial;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrivatePartial()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrivatePartial, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrivatePartialMethods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrivatePartial;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrivatePartial => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrivatePartial ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrivatePartial();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_10;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_10()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_10, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_10Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_10;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_10 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_10 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_10();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_11;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_11()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_11, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_11Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_11;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_11 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_11 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_11();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_12;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_12()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_12, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_12Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_12;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_12 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_12 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_12();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_13;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_13()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_13, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_13Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_13;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_13 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_13 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_13();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_14;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_14()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_14, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_14Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_14;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_14 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_14 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_14();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_15;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_15()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_15, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_15Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_15;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_15 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_15 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_15();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_16;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_16()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_16, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_16Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_16;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_16 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_16 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_16();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_17;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_17()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_17, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_17Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_17;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_17 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_17 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_17();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_18;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_18()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_18, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_18Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_18;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_18 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_18 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_18();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_19;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_19()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_19, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_19Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_19;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_19 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_19 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_19();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_2;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_2Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_2;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_2 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_2 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_2();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_20;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_20()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_20, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_20Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_20;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_20 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_20 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_20();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_21;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_21()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_21, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_21Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_21;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_21 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_21 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_21();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_22;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_22()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_22, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_22Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_22;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_22 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_22 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_22();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_23;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_23()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_23, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_23Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_23;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_23 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_23 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_23();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_24;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_24()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_24, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_24Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_24;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_24 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_24 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_24();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_25;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_25()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_25, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_25Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_25;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_25 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_25 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_25();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_26;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_26()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_26, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_26Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_26;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_26 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_26 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_26();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_27;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_27()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_27, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_27Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_27;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_27 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_27 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_27();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_3;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_3()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_3, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_3Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_3;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_3 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_3 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_3();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_4;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_4()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_4, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_4Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_4;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_4 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_4 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_4();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_5;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_5()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_5, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_5Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_5;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_5 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_5 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_5();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_6;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_6()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_6, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_6Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_6;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_6 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_6 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_6();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_7;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_7()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_7, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_7Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_7;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_7 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_7 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_7();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_8;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_8()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_8, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_8Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_8;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_8 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_8 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_8();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_9;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_9()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_9, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_9Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_9;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_9 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_9 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_9();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_Manual;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_Manual()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_Manual, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_ManualMethods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_Manual;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_Manual => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_Manual ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_Manual();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_Manual2;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_Manual2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_Manual2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_Manual2Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_Manual2;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_Manual2 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_Manual2 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_Manual2();
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2 => _inner;


        public static CoreWebView2 FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2>.FromAbi(thisPtr);
        }

        internal CoreWebView2(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.IID);

        }


        public static bool operator ==(CoreWebView2 x, CoreWebView2 y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2 x, CoreWebView2 y) => !(x == y);
        public bool Equals(CoreWebView2 other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2 that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2BasicAuthenticationRequestedEventArgs> BasicAuthenticationRequested
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_10Methods.Get_BasicAuthenticationRequested2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_10, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_10Methods.Get_BasicAuthenticationRequested2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_10, (IWinRTObject)this).Unsubscribe(value);
        }

        public global::Windows.Foundation.IAsyncOperation<string> CallDevToolsProtocolMethodForSessionAsync(string sessionId, string methodName, string parametersAsJson) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_11Methods.CallDevToolsProtocolMethodForSessionAsync(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_11, sessionId, methodName, parametersAsJson);

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2ContextMenuRequestedEventArgs> ContextMenuRequested
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_11Methods.Get_ContextMenuRequested2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_11, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_11Methods.Get_ContextMenuRequested2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_11, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, object> StatusBarTextChanged
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_12Methods.Get_StatusBarTextChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_12, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_12Methods.Get_StatusBarTextChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_12, (IWinRTObject)this).Unsubscribe(value);
        }

        public global::Windows.Foundation.IAsyncAction ClearServerCertificateErrorActionsAsync() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_14Methods.ClearServerCertificateErrorActionsAsync(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_14);

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2ServerCertificateErrorDetectedEventArgs> ServerCertificateErrorDetected
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_14Methods.Get_ServerCertificateErrorDetected2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_14, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_14Methods.Get_ServerCertificateErrorDetected2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_14, (IWinRTObject)this).Unsubscribe(value);
        }

        public global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.Streams.IRandomAccessStream> GetFaviconAsync(CoreWebView2FaviconImageFormat format) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_15Methods.GetFaviconAsync(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_15, format);

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, object> FaviconChanged
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_15Methods.Get_FaviconChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_15, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_15Methods.Get_FaviconChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_15, (IWinRTObject)this).Unsubscribe(value);
        }

        public global::Windows.Foundation.IAsyncOperation<CoreWebView2PrintStatus> PrintAsync(CoreWebView2PrintSettings printSettings) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_16Methods.PrintAsync(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_16, printSettings);

        public void ShowPrintUI(CoreWebView2PrintDialogKind printDialogKind) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_16Methods.ShowPrintUI(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_16, printDialogKind);

        public global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.Streams.IRandomAccessStream> PrintToPdfStreamAsync(CoreWebView2PrintSettings printSettings) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_16Methods.PrintToPdfStreamAsync(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_16, printSettings);

        public void PostSharedBufferToScript(CoreWebView2SharedBuffer sharedBuffer, CoreWebView2SharedBufferAccess access, string additionalDataAsJson) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_17Methods.PostSharedBufferToScript(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_17, sharedBuffer, access, additionalDataAsJson);

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2LaunchingExternalUriSchemeEventArgs> LaunchingExternalUriScheme
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_18Methods.Get_LaunchingExternalUriScheme2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_18, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_18Methods.Get_LaunchingExternalUriScheme2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_18, (IWinRTObject)this).Unsubscribe(value);
        }

        public void NavigateWithWebResourceRequest(CoreWebView2WebResourceRequest Request) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_2Methods.NavigateWithWebResourceRequest(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_2, Request);

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2DOMContentLoadedEventArgs> DOMContentLoaded
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_2Methods.Get_DOMContentLoaded2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_2Methods.Get_DOMContentLoaded2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2WebResourceResponseReceivedEventArgs> WebResourceResponseReceived
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_2Methods.Get_WebResourceResponseReceived2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_2Methods.Get_WebResourceResponseReceived2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_2, (IWinRTObject)this).Unsubscribe(value);
        }

        public global::Windows.Foundation.IAsyncOperation<CoreWebView2ExecuteScriptResult> ExecuteScriptWithResultAsync(string javaScript) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_21Methods.ExecuteScriptWithResultAsync(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_21, javaScript);

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2NotificationReceivedEventArgs> NotificationReceived
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_24Methods.Get_NotificationReceived2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_24, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_24Methods.Get_NotificationReceived2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_24, (IWinRTObject)this).Unsubscribe(value);
        }

        public global::Windows.Foundation.IAsyncOperation<CoreWebView2SaveAsUIResult> ShowSaveAsUIAsync() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_25Methods.ShowSaveAsUIAsync(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_25);

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2SaveAsUIShowingEventArgs> SaveAsUIShowing
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_25Methods.Get_SaveAsUIShowing2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_25, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_25Methods.Get_SaveAsUIShowing2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_25, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2SaveFileSecurityCheckStartingEventArgs> SaveFileSecurityCheckStarting
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_26Methods.Get_SaveFileSecurityCheckStarting2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_26, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_26Methods.Get_SaveFileSecurityCheckStarting2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_26, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2ScreenCaptureStartingEventArgs> ScreenCaptureStarting
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_27Methods.Get_ScreenCaptureStarting2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_27, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_27Methods.Get_ScreenCaptureStarting2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_27, (IWinRTObject)this).Unsubscribe(value);
        }

        public global::Windows.Foundation.IAsyncOperation<bool> TrySuspendAsync() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_3Methods.TrySuspendAsync(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_3);

        public void Resume() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_3Methods.Resume(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_3);

        public void SetVirtualHostNameToFolderMapping(string hostName, string folderPath, CoreWebView2HostResourceAccessKind accessKind) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_3Methods.SetVirtualHostNameToFolderMapping(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_3, hostName, folderPath, accessKind);

        public void ClearVirtualHostNameToFolderMapping(string hostName) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_3Methods.ClearVirtualHostNameToFolderMapping(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_3, hostName);

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2DownloadStartingEventArgs> DownloadStarting
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_4Methods.Get_DownloadStarting2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_4, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_4Methods.Get_DownloadStarting2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_4, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2FrameCreatedEventArgs> FrameCreated
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_4Methods.Get_FrameCreated2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_4, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_4Methods.Get_FrameCreated2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_4, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2ClientCertificateRequestedEventArgs> ClientCertificateRequested
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_5Methods.Get_ClientCertificateRequested2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_5, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_5Methods.Get_ClientCertificateRequested2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_5, (IWinRTObject)this).Unsubscribe(value);
        }

        public void OpenTaskManagerWindow() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_6Methods.OpenTaskManagerWindow(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_6);

        public global::Windows.Foundation.IAsyncOperation<bool> PrintToPdfAsync(string ResultFilePath, CoreWebView2PrintSettings printSettings) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_7Methods.PrintToPdfAsync(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_7, ResultFilePath, printSettings);

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, object> IsDocumentPlayingAudioChanged
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_8Methods.Get_IsDocumentPlayingAudioChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_8, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_8Methods.Get_IsDocumentPlayingAudioChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_8, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, object> IsMutedChanged
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_8Methods.Get_IsMutedChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_8, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_8Methods.Get_IsMutedChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_8, (IWinRTObject)this).Unsubscribe(value);
        }

        public void OpenDefaultDownloadDialog() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_9Methods.OpenDefaultDownloadDialog(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_9);

        public void CloseDefaultDownloadDialog() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_9Methods.CloseDefaultDownloadDialog(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_9);

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, object> IsDefaultDownloadDialogOpenChanged
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_9Methods.Get_IsDefaultDownloadDialogOpenChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_9, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_9Methods.Get_IsDefaultDownloadDialogOpenChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_9, (IWinRTObject)this).Unsubscribe(value);
        }

        public void AddWebResourceRequestedFilter(string uri, CoreWebView2WebResourceContext resourceContext, CoreWebView2WebResourceRequestSourceKinds requestSourceKinds) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_ManualMethods.AddWebResourceRequestedFilter(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_Manual, uri, resourceContext, requestSourceKinds);

        public void RemoveWebResourceRequestedFilter(string uri, CoreWebView2WebResourceContext resourceContext, CoreWebView2WebResourceRequestSourceKinds requestSourceKinds) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_ManualMethods.RemoveWebResourceRequestedFilter(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_Manual, uri, resourceContext, requestSourceKinds);

        public void PostWebMessageAsJson(string webMessageAsJson, global::System.Collections.Generic.IReadOnlyList<object> additionalObjects) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_Manual2Methods.PostWebMessageAsJson(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_Manual2, webMessageAsJson, additionalObjects);

        public void Navigate(string uri) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Navigate(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, uri);

        public void NavigateToString(string htmlContent) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.NavigateToString(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, htmlContent);

        public global::Windows.Foundation.IAsyncOperation<string> AddScriptToExecuteOnDocumentCreatedAsync(string javaScript) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.AddScriptToExecuteOnDocumentCreatedAsync(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, javaScript);

        public void RemoveScriptToExecuteOnDocumentCreated(string id) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.RemoveScriptToExecuteOnDocumentCreated(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, id);

        public global::Windows.Foundation.IAsyncOperation<string> ExecuteScriptAsync(string javaScript) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.ExecuteScriptAsync(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, javaScript);

        public global::Windows.Foundation.IAsyncAction CapturePreviewAsync(CoreWebView2CapturePreviewImageFormat imageFormat, global::Windows.Storage.Streams.IRandomAccessStream imageStream) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.CapturePreviewAsync(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, imageFormat, imageStream);

        public void Reload() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Reload(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2);

        public void PostWebMessageAsJson(string webMessageAsJson) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.PostWebMessageAsJson(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, webMessageAsJson);

        public void PostWebMessageAsString(string webMessageAsString) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.PostWebMessageAsString(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, webMessageAsString);

        public global::Windows.Foundation.IAsyncOperation<string> CallDevToolsProtocolMethodAsync(string methodName, string parametersAsJson) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.CallDevToolsProtocolMethodAsync(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, methodName, parametersAsJson);

        public void GoBack() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.GoBack(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2);

        public void GoForward() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.GoForward(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2);

        public CoreWebView2DevToolsProtocolEventReceiver GetDevToolsProtocolEventReceiver(string eventName) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.GetDevToolsProtocolEventReceiver(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, eventName);

        public void Stop() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Stop(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2);

        public void AddHostObjectToScript(string name, object rawObject) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.AddHostObjectToScript(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, name, rawObject);

        public void RemoveHostObjectFromScript(string name) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.RemoveHostObjectFromScript(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, name);

        public void OpenDevToolsWindow() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.OpenDevToolsWindow(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2);

        public void AddWebResourceRequestedFilter(string uri, CoreWebView2WebResourceContext ResourceContext) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.AddWebResourceRequestedFilter(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, uri, ResourceContext);

        public void RemoveWebResourceRequestedFilter(string uri, CoreWebView2WebResourceContext ResourceContext) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.RemoveWebResourceRequestedFilter(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, uri, ResourceContext);

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, object> ContainsFullScreenElementChanged
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Get_ContainsFullScreenElementChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Get_ContainsFullScreenElementChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2ContentLoadingEventArgs> ContentLoading
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Get_ContentLoading2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Get_ContentLoading2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, object> DocumentTitleChanged
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Get_DocumentTitleChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Get_DocumentTitleChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2NavigationCompletedEventArgs> FrameNavigationCompleted
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Get_FrameNavigationCompleted2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Get_FrameNavigationCompleted2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2NavigationStartingEventArgs> FrameNavigationStarting
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Get_FrameNavigationStarting2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Get_FrameNavigationStarting2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, object> HistoryChanged
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Get_HistoryChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Get_HistoryChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2NavigationCompletedEventArgs> NavigationCompleted
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Get_NavigationCompleted2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Get_NavigationCompleted2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2NavigationStartingEventArgs> NavigationStarting
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Get_NavigationStarting2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Get_NavigationStarting2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2NewWindowRequestedEventArgs> NewWindowRequested
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Get_NewWindowRequested2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Get_NewWindowRequested2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2PermissionRequestedEventArgs> PermissionRequested
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Get_PermissionRequested2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Get_PermissionRequested2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2ProcessFailedEventArgs> ProcessFailed
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Get_ProcessFailed2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Get_ProcessFailed2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2ScriptDialogOpeningEventArgs> ScriptDialogOpening
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Get_ScriptDialogOpening2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Get_ScriptDialogOpening2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2SourceChangedEventArgs> SourceChanged
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Get_SourceChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Get_SourceChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2WebMessageReceivedEventArgs> WebMessageReceived
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Get_WebMessageReceived2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Get_WebMessageReceived2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2WebResourceRequestedEventArgs> WebResourceRequested
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Get_WebResourceRequested2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Get_WebResourceRequested2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, object> WindowCloseRequested
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Get_WindowCloseRequested2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.Get_WindowCloseRequested2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2, (IWinRTObject)this).Unsubscribe(value);
        }

        public uint BrowserProcessId => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.get_BrowserProcessId(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2);

        public bool CanGoBack => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.get_CanGoBack(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2);

        public bool CanGoForward => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.get_CanGoForward(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2);

        public bool ContainsFullScreenElement => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.get_ContainsFullScreenElement(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2);

        public CoreWebView2CookieManager CookieManager => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_2Methods.get_CookieManager(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_2);

        public CoreWebView2DefaultDownloadDialogCornerAlignment DefaultDownloadDialogCornerAlignment
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_9Methods.get_DefaultDownloadDialogCornerAlignment(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_9);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_9Methods.set_DefaultDownloadDialogCornerAlignment(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_9, value);
        }

        public global::Windows.Foundation.Point DefaultDownloadDialogMargin
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_9Methods.get_DefaultDownloadDialogMargin(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_9);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_9Methods.set_DefaultDownloadDialogMargin(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_9, value);
        }

        public string DocumentTitle => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.get_DocumentTitle(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2);

        public CoreWebView2Environment Environment => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_2Methods.get_Environment(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_2);

        public string FaviconUri => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_15Methods.get_FaviconUri(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_15);

        public uint FrameId => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_20Methods.get_FrameId(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_20);

        public bool IsDefaultDownloadDialogOpen => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_9Methods.get_IsDefaultDownloadDialogOpen(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_9);

        public bool IsDocumentPlayingAudio => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_8Methods.get_IsDocumentPlayingAudio(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_8);

        public bool IsMuted
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_8Methods.get_IsMuted(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_8);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_8Methods.set_IsMuted(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_8, value);
        }

        public bool IsSuspended => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_3Methods.get_IsSuspended(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_3);

        public CoreWebView2MemoryUsageTargetLevel MemoryUsageTargetLevel
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_19Methods.get_MemoryUsageTargetLevel(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_19);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_19Methods.set_MemoryUsageTargetLevel(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_19, value);
        }

        public CoreWebView2Profile Profile => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_13Methods.get_Profile(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_13);

        public CoreWebView2Settings Settings => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.get_Settings(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2);

        public string Source => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.get_Source(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2);

        public string StatusBarText => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_12Methods.get_StatusBarText(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2_12);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2AcceleratorKeyPressedEventArgs))]
    public sealed class CoreWebView2AcceleratorKeyPressedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2AcceleratorKeyPressedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2AcceleratorKeyPressedEventArgs2;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2AcceleratorKeyPressedEventArgs2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2AcceleratorKeyPressedEventArgs2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2AcceleratorKeyPressedEventArgs2Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2AcceleratorKeyPressedEventArgs2;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2AcceleratorKeyPressedEventArgs2 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2AcceleratorKeyPressedEventArgs2 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2AcceleratorKeyPressedEventArgs2();
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2AcceleratorKeyPressedEventArgs => _inner;


        public static CoreWebView2AcceleratorKeyPressedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2AcceleratorKeyPressedEventArgs>.FromAbi(thisPtr);
        }

        internal CoreWebView2AcceleratorKeyPressedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2AcceleratorKeyPressedEventArgsMethods.IID);

        }


        public static bool operator ==(CoreWebView2AcceleratorKeyPressedEventArgs x, CoreWebView2AcceleratorKeyPressedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2AcceleratorKeyPressedEventArgs x, CoreWebView2AcceleratorKeyPressedEventArgs y) => !(x == y);
        public bool Equals(CoreWebView2AcceleratorKeyPressedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2AcceleratorKeyPressedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool Handled
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2AcceleratorKeyPressedEventArgsMethods.get_Handled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2AcceleratorKeyPressedEventArgs);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2AcceleratorKeyPressedEventArgsMethods.set_Handled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2AcceleratorKeyPressedEventArgs, value);
        }

        public bool IsBrowserAcceleratorKeyEnabled
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2AcceleratorKeyPressedEventArgs2Methods.get_IsBrowserAcceleratorKeyEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2AcceleratorKeyPressedEventArgs2);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2AcceleratorKeyPressedEventArgs2Methods.set_IsBrowserAcceleratorKeyEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2AcceleratorKeyPressedEventArgs2, value);
        }

        public CoreWebView2KeyEventKind KeyEventKind => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2AcceleratorKeyPressedEventArgsMethods.get_KeyEventKind(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2AcceleratorKeyPressedEventArgs);

        public int KeyEventLParam => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2AcceleratorKeyPressedEventArgsMethods.get_KeyEventLParam(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2AcceleratorKeyPressedEventArgs);

        public CoreWebView2PhysicalKeyStatus PhysicalKeyStatus => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2AcceleratorKeyPressedEventArgsMethods.get_PhysicalKeyStatus(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2AcceleratorKeyPressedEventArgs);

        public uint VirtualKey => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2AcceleratorKeyPressedEventArgsMethods.get_VirtualKey(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2AcceleratorKeyPressedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgs))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2BasicAuthenticationRequestedEventArgs))]
    public sealed class CoreWebView2BasicAuthenticationRequestedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2BasicAuthenticationRequestedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2BasicAuthenticationRequestedEventArgs => _inner;


        public static CoreWebView2BasicAuthenticationRequestedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2BasicAuthenticationRequestedEventArgs>.FromAbi(thisPtr);
        }

        internal CoreWebView2BasicAuthenticationRequestedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BasicAuthenticationRequestedEventArgsMethods.IID);

        }


        public static bool operator ==(CoreWebView2BasicAuthenticationRequestedEventArgs x, CoreWebView2BasicAuthenticationRequestedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2BasicAuthenticationRequestedEventArgs x, CoreWebView2BasicAuthenticationRequestedEventArgs y) => !(x == y);
        public bool Equals(CoreWebView2BasicAuthenticationRequestedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2BasicAuthenticationRequestedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.Deferral GetDeferral() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BasicAuthenticationRequestedEventArgsMethods.GetDeferral(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2BasicAuthenticationRequestedEventArgs);

        public bool Cancel
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BasicAuthenticationRequestedEventArgsMethods.get_Cancel(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2BasicAuthenticationRequestedEventArgs);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BasicAuthenticationRequestedEventArgsMethods.set_Cancel(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2BasicAuthenticationRequestedEventArgs, value);
        }

        public string Challenge => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BasicAuthenticationRequestedEventArgsMethods.get_Challenge(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2BasicAuthenticationRequestedEventArgs);

        public CoreWebView2BasicAuthenticationResponse Response => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BasicAuthenticationRequestedEventArgsMethods.get_Response(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2BasicAuthenticationRequestedEventArgs);

        public string Uri => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BasicAuthenticationRequestedEventArgsMethods.get_Uri(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2BasicAuthenticationRequestedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationResponse))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationResponseRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2BasicAuthenticationResponse))]
    public sealed class CoreWebView2BasicAuthenticationResponse : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2BasicAuthenticationResponse>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2BasicAuthenticationResponse => _inner;


        public static CoreWebView2BasicAuthenticationResponse FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2BasicAuthenticationResponse>.FromAbi(thisPtr);
        }

        internal CoreWebView2BasicAuthenticationResponse(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BasicAuthenticationResponseMethods.IID);

        }


        public static bool operator ==(CoreWebView2BasicAuthenticationResponse x, CoreWebView2BasicAuthenticationResponse y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2BasicAuthenticationResponse x, CoreWebView2BasicAuthenticationResponse y) => !(x == y);
        public bool Equals(CoreWebView2BasicAuthenticationResponse other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2BasicAuthenticationResponse that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public string Password
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BasicAuthenticationResponseMethods.get_Password(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2BasicAuthenticationResponse);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BasicAuthenticationResponseMethods.set_Password(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2BasicAuthenticationResponse, value);
        }

        public string UserName
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BasicAuthenticationResponseMethods.get_UserName(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2BasicAuthenticationResponse);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BasicAuthenticationResponseMethods.set_UserName(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2BasicAuthenticationResponse, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2BoundsMode>))]public enum CoreWebView2BoundsMode : int
    {
        UseRawPixels = unchecked((int)0),
        UseRasterizationScale = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtensionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2BrowserExtension))]
    public sealed class CoreWebView2BrowserExtension : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2BrowserExtension>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2BrowserExtension => _inner;


        public static CoreWebView2BrowserExtension FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2BrowserExtension>.FromAbi(thisPtr);
        }

        internal CoreWebView2BrowserExtension(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BrowserExtensionMethods.IID);

        }


        public static bool operator ==(CoreWebView2BrowserExtension x, CoreWebView2BrowserExtension y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2BrowserExtension x, CoreWebView2BrowserExtension y) => !(x == y);
        public bool Equals(CoreWebView2BrowserExtension other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2BrowserExtension that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.IAsyncAction RemoveAsync() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BrowserExtensionMethods.RemoveAsync(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2BrowserExtension);

        public global::Windows.Foundation.IAsyncAction EnableAsync(bool IsEnabled) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BrowserExtensionMethods.EnableAsync(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2BrowserExtension, IsEnabled);

        public string Id => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BrowserExtensionMethods.get_Id(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2BrowserExtension);

        public bool IsEnabled => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BrowserExtensionMethods.get_IsEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2BrowserExtension);

        public string Name => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BrowserExtensionMethods.get_Name(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2BrowserExtension);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2BrowserProcessExitKind>))]public enum CoreWebView2BrowserProcessExitKind : int
    {
        Normal = unchecked((int)0),
        Failed = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitedEventArgs))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2BrowserProcessExitedEventArgs))]
    public sealed class CoreWebView2BrowserProcessExitedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2BrowserProcessExitedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2BrowserProcessExitedEventArgs => _inner;


        public static CoreWebView2BrowserProcessExitedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2BrowserProcessExitedEventArgs>.FromAbi(thisPtr);
        }

        internal CoreWebView2BrowserProcessExitedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BrowserProcessExitedEventArgsMethods.IID);

        }


        public static bool operator ==(CoreWebView2BrowserProcessExitedEventArgs x, CoreWebView2BrowserProcessExitedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2BrowserProcessExitedEventArgs x, CoreWebView2BrowserProcessExitedEventArgs y) => !(x == y);
        public bool Equals(CoreWebView2BrowserProcessExitedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2BrowserProcessExitedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public CoreWebView2BrowserProcessExitKind BrowserProcessExitKind => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BrowserProcessExitedEventArgsMethods.get_BrowserProcessExitKind(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2BrowserProcessExitedEventArgs);

        public uint BrowserProcessId => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BrowserProcessExitedEventArgsMethods.get_BrowserProcessId(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2BrowserProcessExitedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [FlagsAttribute]
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2BrowsingDataKinds>))]public enum CoreWebView2BrowsingDataKinds : uint
    {
        FileSystems = unchecked((uint)0x1),
        IndexedDb = unchecked((uint)0x2),
        LocalStorage = unchecked((uint)0x4),
        WebSql = unchecked((uint)0x8),
        CacheStorage = unchecked((uint)0x10),
        AllDomStorage = unchecked((uint)0x20),
        Cookies = unchecked((uint)0x40),
        AllSite = unchecked((uint)0x80),
        DiskCache = unchecked((uint)0x100),
        DownloadHistory = unchecked((uint)0x200),
        GeneralAutofill = unchecked((uint)0x400),
        PasswordAutosave = unchecked((uint)0x800),
        BrowsingHistory = unchecked((uint)0x1000),
        Settings = unchecked((uint)0x2000),
        AllProfile = unchecked((uint)0x4000),
        ServiceWorkers = unchecked((uint)0x8000),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2CapturePreviewImageFormat>))]public enum CoreWebView2CapturePreviewImageFormat : int
    {
        Png = unchecked((int)0),
        Jpeg = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Certificate))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2CertificateRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2Certificate))]
    public sealed class CoreWebView2Certificate : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2Certificate>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Certificate_Manual;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Certificate_Manual()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Certificate_Manual, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Certificate_ManualMethods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Certificate_Manual;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Certificate_Manual => ___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Certificate_Manual ?? Make___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Certificate_Manual();
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Certificate => _inner;


        public static CoreWebView2Certificate FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2Certificate>.FromAbi(thisPtr);
        }

        internal CoreWebView2Certificate(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CertificateMethods.IID);

        }


        public static bool operator ==(CoreWebView2Certificate x, CoreWebView2Certificate y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2Certificate x, CoreWebView2Certificate y) => !(x == y);
        public bool Equals(CoreWebView2Certificate other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2Certificate that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Security.Cryptography.Certificates.Certificate ToCertificate() => global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Certificate_ManualMethods.ToCertificate(_objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Certificate_Manual);

        public string ToPemEncoding() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CertificateMethods.ToPemEncoding(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Certificate);

        public string DerEncodedSerialNumber => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CertificateMethods.get_DerEncodedSerialNumber(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Certificate);

        public string DisplayName => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CertificateMethods.get_DisplayName(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Certificate);

        public string Issuer => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CertificateMethods.get_Issuer(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Certificate);

        public global::System.Collections.Generic.IReadOnlyList<string> PemEncodedIssuerCertificateChain => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CertificateMethods.get_PemEncodedIssuerCertificateChain(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Certificate);

        public string Subject => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CertificateMethods.get_Subject(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Certificate);

        public double ValidFrom => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CertificateMethods.get_ValidFrom(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Certificate);

        public double ValidTo => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CertificateMethods.get_ValidTo(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Certificate);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("4B9B0FE5-0AD9-5594-81E7-B18ECC0636DE")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Certificate_Manual))]
    internal interface CoreWebView2Certificate_Manual
    {
        global::Windows.Security.Cryptography.Certificates.Certificate ToCertificate();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2ChannelSearchKind>))]public enum CoreWebView2ChannelSearchKind : int
    {
        MostStable = unchecked((int)0),
        LeastStable = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2ClientCertificate))]
    public sealed class CoreWebView2ClientCertificate : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2ClientCertificate>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2ClientCertificate_Manual;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2ClientCertificate_Manual()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2ClientCertificate_Manual, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate_ManualMethods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2ClientCertificate_Manual;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2ClientCertificate_Manual => ___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2ClientCertificate_Manual ?? Make___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2ClientCertificate_Manual();
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificate => _inner;


        public static CoreWebView2ClientCertificate FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2ClientCertificate>.FromAbi(thisPtr);
        }

        internal CoreWebView2ClientCertificate(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificateMethods.IID);

        }


        public static bool operator ==(CoreWebView2ClientCertificate x, CoreWebView2ClientCertificate y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2ClientCertificate x, CoreWebView2ClientCertificate y) => !(x == y);
        public bool Equals(CoreWebView2ClientCertificate other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2ClientCertificate that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Security.Cryptography.Certificates.Certificate ToCertificate() => global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate_ManualMethods.ToCertificate(_objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2ClientCertificate_Manual);

        public string ToPemEncoding() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificateMethods.ToPemEncoding(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificate);

        public string DerEncodedSerialNumber => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificateMethods.get_DerEncodedSerialNumber(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificate);

        public string DisplayName => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificateMethods.get_DisplayName(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificate);

        public string Issuer => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificateMethods.get_Issuer(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificate);

        public CoreWebView2ClientCertificateKind Kind => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificateMethods.get_Kind(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificate);

        public global::System.Collections.Generic.IReadOnlyList<string> PemEncodedIssuerCertificateChain => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificateMethods.get_PemEncodedIssuerCertificateChain(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificate);

        public string Subject => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificateMethods.get_Subject(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificate);

        public double ValidFrom => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificateMethods.get_ValidFrom(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificate);

        public double ValidTo => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificateMethods.get_ValidTo(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificate);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2ClientCertificateKind>))]public enum CoreWebView2ClientCertificateKind : int
    {
        SmartCard = unchecked((int)0),
        Pin = unchecked((int)0x1),
        Other = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2ClientCertificateRequestedEventArgs))]
    public sealed class CoreWebView2ClientCertificateRequestedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2ClientCertificateRequestedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificateRequestedEventArgs => _inner;


        public static CoreWebView2ClientCertificateRequestedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2ClientCertificateRequestedEventArgs>.FromAbi(thisPtr);
        }

        internal CoreWebView2ClientCertificateRequestedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificateRequestedEventArgsMethods.IID);

        }


        public static bool operator ==(CoreWebView2ClientCertificateRequestedEventArgs x, CoreWebView2ClientCertificateRequestedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2ClientCertificateRequestedEventArgs x, CoreWebView2ClientCertificateRequestedEventArgs y) => !(x == y);
        public bool Equals(CoreWebView2ClientCertificateRequestedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2ClientCertificateRequestedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.Deferral GetDeferral() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificateRequestedEventArgsMethods.GetDeferral(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificateRequestedEventArgs);

        public global::System.Collections.Generic.IReadOnlyList<string> AllowedCertificateAuthorities => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificateRequestedEventArgsMethods.get_AllowedCertificateAuthorities(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificateRequestedEventArgs);

        public bool Cancel
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificateRequestedEventArgsMethods.get_Cancel(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificateRequestedEventArgs);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificateRequestedEventArgsMethods.set_Cancel(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificateRequestedEventArgs, value);
        }

        public bool Handled
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificateRequestedEventArgsMethods.get_Handled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificateRequestedEventArgs);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificateRequestedEventArgsMethods.set_Handled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificateRequestedEventArgs, value);
        }

        public string Host => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificateRequestedEventArgsMethods.get_Host(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificateRequestedEventArgs);

        public bool IsProxy => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificateRequestedEventArgsMethods.get_IsProxy(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificateRequestedEventArgs);

        public global::System.Collections.Generic.IReadOnlyList<CoreWebView2ClientCertificate> MutuallyTrustedCertificates => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificateRequestedEventArgsMethods.get_MutuallyTrustedCertificates(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificateRequestedEventArgs);

        public int Port => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificateRequestedEventArgsMethods.get_Port(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificateRequestedEventArgs);

        public CoreWebView2ClientCertificate SelectedCertificate
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificateRequestedEventArgsMethods.get_SelectedCertificate(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificateRequestedEventArgs);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificateRequestedEventArgsMethods.set_SelectedCertificate(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificateRequestedEventArgs, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("FAEFEFC2-20C3-5D86-8A74-F6D87D6FF8FA")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate_Manual))]
    internal interface CoreWebView2ClientCertificate_Manual
    {
        global::Windows.Security.Cryptography.Certificates.Certificate ToCertificate();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2CompositionController))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2CompositionControllerRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2CompositionController))]
    public sealed class CoreWebView2CompositionController : CoreWebView2Controller, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2CompositionController>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController2;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CompositionController2Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController2;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController2 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController2 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController2();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController3;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController3()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController3, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CompositionController3Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController3;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController3 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController3 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController3();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController4;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController4()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController4, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CompositionController4Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController4;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController4 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController4 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController4();
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.Web.WebView2.Core.CoreWebView2CompositionController").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionControllerStatics;
        private static IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionControllerStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionControllerStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionControllerStatics = ActivationFactory.Get("Microsoft.Web.WebView2.Core.CoreWebView2CompositionController", global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CompositionControllerStaticsMethods.IID);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionControllerStatics2_Manual;
        private static IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionControllerStatics2_Manual
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionControllerStatics2_Manual;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionControllerStatics2_Manual = ActivationFactory.Get("Microsoft.Web.WebView2.Core.CoreWebView2CompositionController", global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CompositionControllerStatics2_ManualMethods.IID);
                }
            }
        }

        public static new CoreWebView2CompositionController FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2CompositionController>.FromAbi(thisPtr);
        }

        internal CoreWebView2CompositionController(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CompositionControllerMethods.IID);

        }


        public static bool operator ==(CoreWebView2CompositionController x, CoreWebView2CompositionController y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2CompositionController x, CoreWebView2CompositionController y) => !(x == y);
        public bool Equals(CoreWebView2CompositionController other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2CompositionController that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public void DragLeave() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CompositionController3Methods.DragLeave(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController3);

        public CoreWebView2NonClientRegionKind GetNonClientRegionAtPoint(global::Windows.Foundation.Point point) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CompositionController4Methods.GetNonClientRegionAtPoint(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController4, point);

        public global::System.Collections.Generic.IReadOnlyList<global::Windows.Foundation.Rect> QueryNonClientRegion(CoreWebView2NonClientRegionKind Kind) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CompositionController4Methods.QueryNonClientRegion(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController4, Kind);

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2CompositionController, CoreWebView2NonClientRegionChangedEventArgs> NonClientRegionChanged
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CompositionController4Methods.Get_NonClientRegionChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController4, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CompositionController4Methods.Get_NonClientRegionChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController4, (IWinRTObject)this).Unsubscribe(value);
        }

        public void SendMouseInput(CoreWebView2MouseEventKind eventKind, CoreWebView2MouseEventVirtualKeys virtualKeys, uint mouseData, global::Windows.Foundation.Point point) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CompositionControllerMethods.SendMouseInput(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController, eventKind, virtualKeys, mouseData, point);

        public void SendPointerInput(CoreWebView2PointerEventKind eventKind, CoreWebView2PointerInfo pointerInfo) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CompositionControllerMethods.SendPointerInput(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController, eventKind, pointerInfo);

        public global::Windows.ApplicationModel.DataTransfer.DataPackageOperation DragEnter(global::Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragInfo dragInfo, global::Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragUIOverride dragUIOverride) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CompositionControllerMethods.DragEnter(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController, dragInfo, dragUIOverride);

        public global::Windows.ApplicationModel.DataTransfer.DataPackageOperation DragOver(global::Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragInfo dragInfo, global::Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragUIOverride dragUIOverride) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CompositionControllerMethods.DragOver(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController, dragInfo, dragUIOverride);

        public global::Windows.ApplicationModel.DataTransfer.DataPackageOperation Drop(global::Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragInfo dragInfo) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CompositionControllerMethods.Drop(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController, dragInfo);

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2CompositionController, object> CursorChanged
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CompositionControllerMethods.Get_CursorChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CompositionControllerMethods.Get_CursorChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController, (IWinRTObject)this).Unsubscribe(value);
        }

        public global::Windows.UI.Core.CoreCursor Cursor => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CompositionControllerMethods.get_Cursor(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController);

        public object RootVisualTarget
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CompositionControllerMethods.get_RootVisualTarget(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CompositionControllerMethods.set_RootVisualTarget(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2ContentLoadingEventArgs))]
    public sealed class CoreWebView2ContentLoadingEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2ContentLoadingEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContentLoadingEventArgs => _inner;


        public static CoreWebView2ContentLoadingEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2ContentLoadingEventArgs>.FromAbi(thisPtr);
        }

        internal CoreWebView2ContentLoadingEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContentLoadingEventArgsMethods.IID);

        }


        public static bool operator ==(CoreWebView2ContentLoadingEventArgs x, CoreWebView2ContentLoadingEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2ContentLoadingEventArgs x, CoreWebView2ContentLoadingEventArgs y) => !(x == y);
        public bool Equals(CoreWebView2ContentLoadingEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2ContentLoadingEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool IsErrorPage => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContentLoadingEventArgsMethods.get_IsErrorPage(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContentLoadingEventArgs);

        public ulong NavigationId => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContentLoadingEventArgsMethods.get_NavigationId(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContentLoadingEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItemRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2ContextMenuItem))]
    public sealed class CoreWebView2ContextMenuItem : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2ContextMenuItem>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuItem => _inner;


        public static CoreWebView2ContextMenuItem FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2ContextMenuItem>.FromAbi(thisPtr);
        }

        internal CoreWebView2ContextMenuItem(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuItemMethods.IID);

        }


        public static bool operator ==(CoreWebView2ContextMenuItem x, CoreWebView2ContextMenuItem y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2ContextMenuItem x, CoreWebView2ContextMenuItem y) => !(x == y);
        public bool Equals(CoreWebView2ContextMenuItem other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2ContextMenuItem that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2ContextMenuItem, object> CustomItemSelected
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuItemMethods.Get_CustomItemSelected2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuItem, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuItemMethods.Get_CustomItemSelected2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuItem, (IWinRTObject)this).Unsubscribe(value);
        }

        public global::System.Collections.Generic.IList<CoreWebView2ContextMenuItem> Children => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuItemMethods.get_Children(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuItem);

        public int CommandId => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuItemMethods.get_CommandId(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuItem);

        public global::Windows.Storage.Streams.IRandomAccessStream Icon => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuItemMethods.get_Icon(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuItem);

        public bool IsChecked
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuItemMethods.get_IsChecked(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuItem);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuItemMethods.set_IsChecked(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuItem, value);
        }

        public bool IsEnabled
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuItemMethods.get_IsEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuItem);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuItemMethods.set_IsEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuItem, value);
        }

        public CoreWebView2ContextMenuItemKind Kind => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuItemMethods.get_Kind(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuItem);

        public string Label => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuItemMethods.get_Label(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuItem);

        public string Name => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuItemMethods.get_Name(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuItem);

        public string ShortcutKeyDescription => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuItemMethods.get_ShortcutKeyDescription(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuItem);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2ContextMenuItemKind>))]public enum CoreWebView2ContextMenuItemKind : int
    {
        Command = unchecked((int)0),
        CheckBox = unchecked((int)0x1),
        Radio = unchecked((int)0x2),
        Separator = unchecked((int)0x3),
        Submenu = unchecked((int)0x4),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2ContextMenuRequestedEventArgs))]
    public sealed class CoreWebView2ContextMenuRequestedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2ContextMenuRequestedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuRequestedEventArgs => _inner;


        public static CoreWebView2ContextMenuRequestedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2ContextMenuRequestedEventArgs>.FromAbi(thisPtr);
        }

        internal CoreWebView2ContextMenuRequestedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuRequestedEventArgsMethods.IID);

        }


        public static bool operator ==(CoreWebView2ContextMenuRequestedEventArgs x, CoreWebView2ContextMenuRequestedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2ContextMenuRequestedEventArgs x, CoreWebView2ContextMenuRequestedEventArgs y) => !(x == y);
        public bool Equals(CoreWebView2ContextMenuRequestedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2ContextMenuRequestedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.Deferral GetDeferral() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuRequestedEventArgsMethods.GetDeferral(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuRequestedEventArgs);

        public CoreWebView2ContextMenuTarget ContextMenuTarget => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuRequestedEventArgsMethods.get_ContextMenuTarget(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuRequestedEventArgs);

        public bool Handled
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuRequestedEventArgsMethods.get_Handled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuRequestedEventArgs);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuRequestedEventArgsMethods.set_Handled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuRequestedEventArgs, value);
        }

        public global::Windows.Foundation.Point Location => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuRequestedEventArgsMethods.get_Location(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuRequestedEventArgs);

        public global::System.Collections.Generic.IList<CoreWebView2ContextMenuItem> MenuItems => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuRequestedEventArgsMethods.get_MenuItems(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuRequestedEventArgs);

        public int SelectedCommandId
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuRequestedEventArgsMethods.get_SelectedCommandId(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuRequestedEventArgs);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuRequestedEventArgsMethods.set_SelectedCommandId(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuRequestedEventArgs, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTargetRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2ContextMenuTarget))]
    public sealed class CoreWebView2ContextMenuTarget : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2ContextMenuTarget>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuTarget => _inner;


        public static CoreWebView2ContextMenuTarget FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2ContextMenuTarget>.FromAbi(thisPtr);
        }

        internal CoreWebView2ContextMenuTarget(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuTargetMethods.IID);

        }


        public static bool operator ==(CoreWebView2ContextMenuTarget x, CoreWebView2ContextMenuTarget y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2ContextMenuTarget x, CoreWebView2ContextMenuTarget y) => !(x == y);
        public bool Equals(CoreWebView2ContextMenuTarget other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2ContextMenuTarget that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public string FrameUri => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuTargetMethods.get_FrameUri(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuTarget);

        public bool HasLinkText => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuTargetMethods.get_HasLinkText(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuTarget);

        public bool HasLinkUri => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuTargetMethods.get_HasLinkUri(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuTarget);

        public bool HasSelection => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuTargetMethods.get_HasSelection(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuTarget);

        public bool HasSourceUri => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuTargetMethods.get_HasSourceUri(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuTarget);

        public bool IsEditable => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuTargetMethods.get_IsEditable(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuTarget);

        public bool IsRequestedForMainFrame => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuTargetMethods.get_IsRequestedForMainFrame(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuTarget);

        public CoreWebView2ContextMenuTargetKind Kind => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuTargetMethods.get_Kind(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuTarget);

        public string LinkText => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuTargetMethods.get_LinkText(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuTarget);

        public string LinkUri => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuTargetMethods.get_LinkUri(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuTarget);

        public string PageUri => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuTargetMethods.get_PageUri(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuTarget);

        public string SelectionText => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuTargetMethods.get_SelectionText(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuTarget);

        public string SourceUri => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuTargetMethods.get_SourceUri(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuTarget);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2ContextMenuTargetKind>))]public enum CoreWebView2ContextMenuTargetKind : int
    {
        Page = unchecked((int)0),
        Image = unchecked((int)0x1),
        SelectedText = unchecked((int)0x2),
        Audio = unchecked((int)0x3),
        Video = unchecked((int)0x4),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Controller))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ControllerRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2Controller))]
    public class CoreWebView2Controller : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2Controller>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller2;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Controller2Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller2;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller2 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller2 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller2();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller3;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller3()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller3, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Controller3Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller3;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller3 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller3 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller3();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller4;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller4()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller4, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Controller4Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller4;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller4 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller4 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller4();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrivatePartialController;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrivatePartialController()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrivatePartialController, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrivatePartialControllerMethods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrivatePartialController;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrivatePartialController => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrivatePartialController ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrivatePartialController();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerMethods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller();



        private static class _ICoreWebView2ControllerFactoryMethods
        {}

        private static volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ControllerFactory;
        private static IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ControllerFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ControllerFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ControllerFactory = ActivationFactory.Get("Microsoft.Web.WebView2.Core.CoreWebView2Controller", global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerFactoryMethods.IID);
                }
            }
        }

        public static CoreWebView2Controller FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2Controller>.FromAbi(thisPtr);
        }

        protected internal CoreWebView2Controller(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerMethods.IID);

        }


        public static bool operator ==(CoreWebView2Controller x, CoreWebView2Controller y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2Controller x, CoreWebView2Controller y) => !(x == y);
        public bool Equals(CoreWebView2Controller other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2Controller that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected CoreWebView2Controller(global::WinRT.DerivedComposed _)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(CoreWebView2Controller);
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2Controller, object> RasterizationScaleChanged
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Controller3Methods.Get_RasterizationScaleChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller3, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Controller3Methods.Get_RasterizationScaleChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller3, (IWinRTObject)this).Unsubscribe(value);
        }

        public void SetBoundsAndZoomFactor(global::Windows.Foundation.Rect Bounds, double ZoomFactor) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerMethods.SetBoundsAndZoomFactor(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller, Bounds, ZoomFactor);

        public void MoveFocus(CoreWebView2MoveFocusReason reason) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerMethods.MoveFocus(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller, reason);

        public void NotifyParentWindowPositionChanged() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerMethods.NotifyParentWindowPositionChanged(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller);

        public void Close() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerMethods.Close(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller);

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2Controller, CoreWebView2AcceleratorKeyPressedEventArgs> AcceleratorKeyPressed
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerMethods.Get_AcceleratorKeyPressed2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerMethods.Get_AcceleratorKeyPressed2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2Controller, object> GotFocus
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerMethods.Get_GotFocus2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerMethods.Get_GotFocus2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2Controller, object> LostFocus
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerMethods.Get_LostFocus2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerMethods.Get_LostFocus2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2Controller, CoreWebView2MoveFocusRequestedEventArgs> MoveFocusRequested
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerMethods.Get_MoveFocusRequested2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerMethods.Get_MoveFocusRequested2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2Controller, object> ZoomFactorChanged
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerMethods.Get_ZoomFactorChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerMethods.Get_ZoomFactorChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller, (IWinRTObject)this).Unsubscribe(value);
        }

        public bool AllowExternalDrop
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Controller4Methods.get_AllowExternalDrop(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller4);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Controller4Methods.set_AllowExternalDrop(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller4, value);
        }

        public global::Windows.Foundation.Rect Bounds
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerMethods.get_Bounds(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerMethods.set_Bounds(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller, value);
        }

        public CoreWebView2BoundsMode BoundsMode
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Controller3Methods.get_BoundsMode(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller3);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Controller3Methods.set_BoundsMode(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller3, value);
        }

        public CoreWebView2 CoreWebView2 => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerMethods.get_CoreWebView2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller);

        public global::Windows.UI.Color DefaultBackgroundColor
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Controller2Methods.get_DefaultBackgroundColor(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller2);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Controller2Methods.set_DefaultBackgroundColor(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller2, value);
        }

        public bool IsBrowserHitTransparent => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrivatePartialControllerMethods.get_IsBrowserHitTransparent(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrivatePartialController);

        public bool IsVisible
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerMethods.get_IsVisible(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerMethods.set_IsVisible(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller, value);
        }

        public CoreWebView2ControllerWindowReference ParentWindow
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerMethods.get_ParentWindow(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerMethods.set_ParentWindow(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller, value);
        }

        public double RasterizationScale
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Controller3Methods.get_RasterizationScale(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller3);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Controller3Methods.set_RasterizationScale(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller3, value);
        }

        public bool ShouldDetectMonitorScaleChanges
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Controller3Methods.get_ShouldDetectMonitorScaleChanges(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller3);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Controller3Methods.set_ShouldDetectMonitorScaleChanges(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller3, value);
        }

        public double ZoomFactor
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerMethods.get_ZoomFactor(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerMethods.set_ZoomFactor(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Controller, value);
        }

        protected virtual bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptionsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2ControllerOptions))]
    public sealed class CoreWebView2ControllerOptions : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2ControllerOptions>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ControllerOptions2;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ControllerOptions2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ControllerOptions2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerOptions2Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ControllerOptions2;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ControllerOptions2 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ControllerOptions2 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ControllerOptions2();
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ControllerOptions => _inner;


        public static CoreWebView2ControllerOptions FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2ControllerOptions>.FromAbi(thisPtr);
        }

        internal CoreWebView2ControllerOptions(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerOptionsMethods.IID);

        }


        public static bool operator ==(CoreWebView2ControllerOptions x, CoreWebView2ControllerOptions y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2ControllerOptions x, CoreWebView2ControllerOptions y) => !(x == y);
        public bool Equals(CoreWebView2ControllerOptions other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2ControllerOptions that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool IsInPrivateModeEnabled
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerOptionsMethods.get_IsInPrivateModeEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ControllerOptions);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerOptionsMethods.set_IsInPrivateModeEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ControllerOptions, value);
        }

        public string ProfileName
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerOptionsMethods.get_ProfileName(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ControllerOptions);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerOptionsMethods.set_ProfileName(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ControllerOptions, value);
        }

        public string ScriptLocale
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerOptions2Methods.get_ScriptLocale(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ControllerOptions2);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerOptions2Methods.set_ScriptLocale(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ControllerOptions2, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReferenceRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2ControllerWindowReference))]
    public sealed class CoreWebView2ControllerWindowReference : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2ControllerWindowReference>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ControllerWindowReference => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ControllerWindowReferenceStatics;
        private static IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ControllerWindowReferenceStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ControllerWindowReferenceStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ControllerWindowReferenceStatics = ActivationFactory.Get("Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference", global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerWindowReferenceStaticsMethods.IID);
                }
            }
        }

        public static CoreWebView2ControllerWindowReference CreateFromWindowHandle(ulong windowHandle) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerWindowReferenceStaticsMethods.CreateFromWindowHandle(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ControllerWindowReferenceStatics, windowHandle);

        public static CoreWebView2ControllerWindowReference CreateFromCoreWindow(global::Windows.UI.Core.CoreWindow coreWindow) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerWindowReferenceStaticsMethods.CreateFromCoreWindow(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ControllerWindowReferenceStatics, coreWindow);

        public static CoreWebView2ControllerWindowReference FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2ControllerWindowReference>.FromAbi(thisPtr);
        }

        internal CoreWebView2ControllerWindowReference(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerWindowReferenceMethods.IID);

        }


        public static bool operator ==(CoreWebView2ControllerWindowReference x, CoreWebView2ControllerWindowReference y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2ControllerWindowReference x, CoreWebView2ControllerWindowReference y) => !(x == y);
        public bool Equals(CoreWebView2ControllerWindowReference other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2ControllerWindowReference that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.UI.Core.CoreWindow CoreWindow => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerWindowReferenceMethods.get_CoreWindow(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ControllerWindowReference);

        public ulong WindowHandle => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerWindowReferenceMethods.get_WindowHandle(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ControllerWindowReference);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Cookie))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2CookieRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2Cookie))]
    public sealed class CoreWebView2Cookie : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2Cookie>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Cookie => _inner;


        public static CoreWebView2Cookie FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2Cookie>.FromAbi(thisPtr);
        }

        internal CoreWebView2Cookie(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CookieMethods.IID);

        }


        public static bool operator ==(CoreWebView2Cookie x, CoreWebView2Cookie y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2Cookie x, CoreWebView2Cookie y) => !(x == y);
        public bool Equals(CoreWebView2Cookie other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2Cookie that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public string Domain => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CookieMethods.get_Domain(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Cookie);

        public double Expires
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CookieMethods.get_Expires(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Cookie);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CookieMethods.set_Expires(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Cookie, value);
        }

        public bool IsHttpOnly
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CookieMethods.get_IsHttpOnly(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Cookie);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CookieMethods.set_IsHttpOnly(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Cookie, value);
        }

        public bool IsSecure
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CookieMethods.get_IsSecure(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Cookie);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CookieMethods.set_IsSecure(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Cookie, value);
        }

        public bool IsSession => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CookieMethods.get_IsSession(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Cookie);

        public string Name => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CookieMethods.get_Name(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Cookie);

        public string Path => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CookieMethods.get_Path(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Cookie);

        public CoreWebView2CookieSameSiteKind SameSite
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CookieMethods.get_SameSite(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Cookie);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CookieMethods.set_SameSite(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Cookie, value);
        }

        public string Value
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CookieMethods.get_Value(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Cookie);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CookieMethods.set_Value(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Cookie, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2CookieManager))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2CookieManagerRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2CookieManager))]
    public sealed class CoreWebView2CookieManager : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2CookieManager>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CookieManager_Manual;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CookieManager_Manual()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CookieManager_Manual, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CookieManager_ManualMethods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CookieManager_Manual;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CookieManager_Manual => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CookieManager_Manual ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CookieManager_Manual();
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CookieManager => _inner;


        public static CoreWebView2CookieManager FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2CookieManager>.FromAbi(thisPtr);
        }

        internal CoreWebView2CookieManager(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CookieManagerMethods.IID);

        }


        public static bool operator ==(CoreWebView2CookieManager x, CoreWebView2CookieManager y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2CookieManager x, CoreWebView2CookieManager y) => !(x == y);
        public bool Equals(CoreWebView2CookieManager other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2CookieManager that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<CoreWebView2Cookie>> GetCookiesAsync(string uri) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CookieManager_ManualMethods.GetCookiesAsync(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CookieManager_Manual, uri);

        public CoreWebView2Cookie CreateCookie(string name, string value, string Domain, string Path) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CookieManagerMethods.CreateCookie(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CookieManager, name, value, Domain, Path);

        public CoreWebView2Cookie CopyCookie(CoreWebView2Cookie cookieParam) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CookieManagerMethods.CopyCookie(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CookieManager, cookieParam);

        public void AddOrUpdateCookie(CoreWebView2Cookie cookie) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CookieManagerMethods.AddOrUpdateCookie(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CookieManager, cookie);

        public void DeleteCookie(CoreWebView2Cookie cookie) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CookieManagerMethods.DeleteCookie(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CookieManager, cookie);

        public void DeleteCookies(string name, string uri) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CookieManagerMethods.DeleteCookies(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CookieManager, name, uri);

        public void DeleteCookiesWithDomainAndPath(string name, string Domain, string Path) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CookieManagerMethods.DeleteCookiesWithDomainAndPath(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CookieManager, name, Domain, Path);

        public void DeleteAllCookies() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CookieManagerMethods.DeleteAllCookies(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CookieManager);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2CookieSameSiteKind>))]public enum CoreWebView2CookieSameSiteKind : int
    {
        None = unchecked((int)0),
        Lax = unchecked((int)0x1),
        Strict = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistrationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2CustomSchemeRegistration))]
    public sealed class CoreWebView2CustomSchemeRegistration : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2CustomSchemeRegistration>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CustomSchemeRegistration_Manual;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CustomSchemeRegistration_Manual()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CustomSchemeRegistration_Manual, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CustomSchemeRegistration_ManualMethods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CustomSchemeRegistration_Manual;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CustomSchemeRegistration_Manual => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CustomSchemeRegistration_Manual ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CustomSchemeRegistration_Manual();
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CustomSchemeRegistration => _inner;


        private static class _ICoreWebView2CustomSchemeRegistrationFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, string schemeName)
            {
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                MarshalString.Pinnable __schemeName = new(schemeName);
                fixed(void* ___schemeName = __schemeName)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __schemeName), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return __retval;
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CustomSchemeRegistrationFactory;
        private static IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CustomSchemeRegistrationFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CustomSchemeRegistrationFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CustomSchemeRegistrationFactory = ActivationFactory.Get("Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration", global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CustomSchemeRegistrationFactoryMethods.IID);
                }
            }
        }

        public CoreWebView2CustomSchemeRegistration(string schemeName) 
        { 
        IntPtr ptr = (_ICoreWebView2CustomSchemeRegistrationFactoryMethods.CreateInstance(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CustomSchemeRegistrationFactory, schemeName)); 
        try 
        { 
        _inner = ComWrappersSupport.GetObjectReferenceForInterface(ptr, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CustomSchemeRegistrationMethods.IID, false); 

        } 
        finally 
        { 
        MarshalInspectable<object>.DisposeAbi(ptr); 
        }

        ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
        ComWrappersHelper.Init(_inner, false);
        }

        public static CoreWebView2CustomSchemeRegistration FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2CustomSchemeRegistration>.FromAbi(thisPtr);
        }

        internal CoreWebView2CustomSchemeRegistration(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CustomSchemeRegistrationMethods.IID);

        }


        public static bool operator ==(CoreWebView2CustomSchemeRegistration x, CoreWebView2CustomSchemeRegistration y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2CustomSchemeRegistration x, CoreWebView2CustomSchemeRegistration y) => !(x == y);
        public bool Equals(CoreWebView2CustomSchemeRegistration other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2CustomSchemeRegistration that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::System.Collections.Generic.IList<string> AllowedOrigins => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CustomSchemeRegistration_ManualMethods.get_AllowedOrigins(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CustomSchemeRegistration_Manual);

        public bool HasAuthorityComponent
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CustomSchemeRegistrationMethods.get_HasAuthorityComponent(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CustomSchemeRegistration);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CustomSchemeRegistrationMethods.set_HasAuthorityComponent(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CustomSchemeRegistration, value);
        }

        public string SchemeName => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CustomSchemeRegistration_ManualMethods.get_SchemeName(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CustomSchemeRegistration_Manual);

        public int TreatAsSecure
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CustomSchemeRegistrationMethods.get_TreatAsSecure(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CustomSchemeRegistration);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CustomSchemeRegistrationMethods.set_TreatAsSecure(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2CustomSchemeRegistration, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2DOMContentLoadedEventArgs))]
    public sealed class CoreWebView2DOMContentLoadedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2DOMContentLoadedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DOMContentLoadedEventArgs => _inner;


        public static CoreWebView2DOMContentLoadedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2DOMContentLoadedEventArgs>.FromAbi(thisPtr);
        }

        internal CoreWebView2DOMContentLoadedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DOMContentLoadedEventArgsMethods.IID);

        }


        public static bool operator ==(CoreWebView2DOMContentLoadedEventArgs x, CoreWebView2DOMContentLoadedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2DOMContentLoadedEventArgs x, CoreWebView2DOMContentLoadedEventArgs y) => !(x == y);
        public bool Equals(CoreWebView2DOMContentLoadedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2DOMContentLoadedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public ulong NavigationId => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DOMContentLoadedEventArgsMethods.get_NavigationId(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DOMContentLoadedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2DefaultDownloadDialogCornerAlignment>))]public enum CoreWebView2DefaultDownloadDialogCornerAlignment : int
    {
        TopLeft = unchecked((int)0),
        TopRight = unchecked((int)0x1),
        BottomLeft = unchecked((int)0x2),
        BottomRight = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceivedEventArgs))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceivedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2DevToolsProtocolEventReceivedEventArgs))]
    public sealed class CoreWebView2DevToolsProtocolEventReceivedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2DevToolsProtocolEventReceivedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DevToolsProtocolEventReceivedEventArgs2;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DevToolsProtocolEventReceivedEventArgs2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DevToolsProtocolEventReceivedEventArgs2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DevToolsProtocolEventReceivedEventArgs2Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DevToolsProtocolEventReceivedEventArgs2;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DevToolsProtocolEventReceivedEventArgs2 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DevToolsProtocolEventReceivedEventArgs2 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DevToolsProtocolEventReceivedEventArgs2();
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DevToolsProtocolEventReceivedEventArgs => _inner;


        public static CoreWebView2DevToolsProtocolEventReceivedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2DevToolsProtocolEventReceivedEventArgs>.FromAbi(thisPtr);
        }

        internal CoreWebView2DevToolsProtocolEventReceivedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DevToolsProtocolEventReceivedEventArgsMethods.IID);

        }


        public static bool operator ==(CoreWebView2DevToolsProtocolEventReceivedEventArgs x, CoreWebView2DevToolsProtocolEventReceivedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2DevToolsProtocolEventReceivedEventArgs x, CoreWebView2DevToolsProtocolEventReceivedEventArgs y) => !(x == y);
        public bool Equals(CoreWebView2DevToolsProtocolEventReceivedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2DevToolsProtocolEventReceivedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public string ParameterObjectAsJson => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DevToolsProtocolEventReceivedEventArgsMethods.get_ParameterObjectAsJson(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DevToolsProtocolEventReceivedEventArgs);

        public string SessionId => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DevToolsProtocolEventReceivedEventArgs2Methods.get_SessionId(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DevToolsProtocolEventReceivedEventArgs2);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceiver))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceiverRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2DevToolsProtocolEventReceiver))]
    public sealed class CoreWebView2DevToolsProtocolEventReceiver : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2DevToolsProtocolEventReceiver>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DevToolsProtocolEventReceiver => _inner;


        public static CoreWebView2DevToolsProtocolEventReceiver FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2DevToolsProtocolEventReceiver>.FromAbi(thisPtr);
        }

        internal CoreWebView2DevToolsProtocolEventReceiver(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DevToolsProtocolEventReceiverMethods.IID);

        }


        public static bool operator ==(CoreWebView2DevToolsProtocolEventReceiver x, CoreWebView2DevToolsProtocolEventReceiver y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2DevToolsProtocolEventReceiver x, CoreWebView2DevToolsProtocolEventReceiver y) => !(x == y);
        public bool Equals(CoreWebView2DevToolsProtocolEventReceiver other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2DevToolsProtocolEventReceiver that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2DevToolsProtocolEventReceivedEventArgs> DevToolsProtocolEventReceived
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DevToolsProtocolEventReceiverMethods.Get_DevToolsProtocolEventReceived2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DevToolsProtocolEventReceiver, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DevToolsProtocolEventReceiverMethods.Get_DevToolsProtocolEventReceived2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DevToolsProtocolEventReceiver, (IWinRTObject)this).Unsubscribe(value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2DownloadInterruptReason>))]public enum CoreWebView2DownloadInterruptReason : int
    {
        None = unchecked((int)0),
        FileFailed = unchecked((int)0x1),
        FileAccessDenied = unchecked((int)0x2),
        FileNoSpace = unchecked((int)0x3),
        FileNameTooLong = unchecked((int)0x4),
        FileTooLarge = unchecked((int)0x5),
        FileMalicious = unchecked((int)0x6),
        FileTransientError = unchecked((int)0x7),
        FileBlockedByPolicy = unchecked((int)0x8),
        FileSecurityCheckFailed = unchecked((int)0x9),
        FileTooShort = unchecked((int)0xa),
        FileHashMismatch = unchecked((int)0xb),
        NetworkFailed = unchecked((int)0xc),
        NetworkTimeout = unchecked((int)0xd),
        NetworkDisconnected = unchecked((int)0xe),
        NetworkServerDown = unchecked((int)0xf),
        NetworkInvalidRequest = unchecked((int)0x10),
        ServerFailed = unchecked((int)0x11),
        ServerNoRange = unchecked((int)0x12),
        ServerBadContent = unchecked((int)0x13),
        ServerUnauthorized = unchecked((int)0x14),
        ServerCertificateProblem = unchecked((int)0x15),
        ServerForbidden = unchecked((int)0x16),
        ServerUnexpectedResponse = unchecked((int)0x17),
        ServerContentLengthMismatch = unchecked((int)0x18),
        ServerCrossOriginRedirect = unchecked((int)0x19),
        UserCanceled = unchecked((int)0x1a),
        UserShutdown = unchecked((int)0x1b),
        UserPaused = unchecked((int)0x1c),
        DownloadProcessCrashed = unchecked((int)0x1d),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2DownloadOperation))]
    public sealed class CoreWebView2DownloadOperation : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2DownloadOperation>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation => _inner;


        public static CoreWebView2DownloadOperation FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2DownloadOperation>.FromAbi(thisPtr);
        }

        internal CoreWebView2DownloadOperation(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadOperationMethods.IID);

        }


        public static bool operator ==(CoreWebView2DownloadOperation x, CoreWebView2DownloadOperation y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2DownloadOperation x, CoreWebView2DownloadOperation y) => !(x == y);
        public bool Equals(CoreWebView2DownloadOperation other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2DownloadOperation that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void Cancel() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadOperationMethods.Cancel(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation);

        public void Pause() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadOperationMethods.Pause(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation);

        public void Resume() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadOperationMethods.Resume(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation);

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2DownloadOperation, object> BytesReceivedChanged
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadOperationMethods.Get_BytesReceivedChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadOperationMethods.Get_BytesReceivedChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2DownloadOperation, object> EstimatedEndTimeChanged
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadOperationMethods.Get_EstimatedEndTimeChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadOperationMethods.Get_EstimatedEndTimeChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2DownloadOperation, object> StateChanged
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadOperationMethods.Get_StateChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadOperationMethods.Get_StateChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation, (IWinRTObject)this).Unsubscribe(value);
        }

        public long BytesReceived => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadOperationMethods.get_BytesReceived(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation);

        public bool CanResume => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadOperationMethods.get_CanResume(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation);

        public string ContentDisposition => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadOperationMethods.get_ContentDisposition(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation);

        public string EstimatedEndTime => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadOperationMethods.get_EstimatedEndTime(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation);

        public CoreWebView2DownloadInterruptReason InterruptReason => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadOperationMethods.get_InterruptReason(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation);

        public string MimeType => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadOperationMethods.get_MimeType(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation);

        public string ResultFilePath => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadOperationMethods.get_ResultFilePath(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation);

        public CoreWebView2DownloadState State => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadOperationMethods.get_State(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation);

        public long TotalBytesToReceive => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadOperationMethods.get_TotalBytesToReceive(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation);

        public string Uri => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadOperationMethods.get_Uri(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2DownloadStartingEventArgs))]
    public sealed class CoreWebView2DownloadStartingEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2DownloadStartingEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DownloadStartingEventArgs => _inner;


        public static CoreWebView2DownloadStartingEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2DownloadStartingEventArgs>.FromAbi(thisPtr);
        }

        internal CoreWebView2DownloadStartingEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadStartingEventArgsMethods.IID);

        }


        public static bool operator ==(CoreWebView2DownloadStartingEventArgs x, CoreWebView2DownloadStartingEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2DownloadStartingEventArgs x, CoreWebView2DownloadStartingEventArgs y) => !(x == y);
        public bool Equals(CoreWebView2DownloadStartingEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2DownloadStartingEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.Deferral GetDeferral() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadStartingEventArgsMethods.GetDeferral(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DownloadStartingEventArgs);

        public bool Cancel
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadStartingEventArgsMethods.get_Cancel(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DownloadStartingEventArgs);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadStartingEventArgsMethods.set_Cancel(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DownloadStartingEventArgs, value);
        }

        public CoreWebView2DownloadOperation DownloadOperation => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadStartingEventArgsMethods.get_DownloadOperation(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DownloadStartingEventArgs);

        public bool Handled
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadStartingEventArgsMethods.get_Handled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DownloadStartingEventArgs);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadStartingEventArgsMethods.set_Handled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DownloadStartingEventArgs, value);
        }

        public string ResultFilePath
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadStartingEventArgsMethods.get_ResultFilePath(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DownloadStartingEventArgs);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadStartingEventArgsMethods.set_ResultFilePath(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2DownloadStartingEventArgs, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2DownloadState>))]public enum CoreWebView2DownloadState : int
    {
        InProgress = unchecked((int)0),
        Interrupted = unchecked((int)0x1),
        Completed = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Environment))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2Environment))]
    public sealed class CoreWebView2Environment : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2Environment>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment10;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment10()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment10, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment10Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment10;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment10 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment10 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment10();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment11;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment11()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment11, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment11Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment11;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment11 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment11 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment11();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment12;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment12()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment12, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment12Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment12;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment12 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment12 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment12();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment13;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment13()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment13, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment13Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment13;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment13 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment13 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment13();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment14;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment14()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment14, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment14Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment14;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment14 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment14 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment14();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment2;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment2Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment2;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment2 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment2 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment2();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment3;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment3()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment3, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment3Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment3;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment3 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment3 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment3();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment4;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment4()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment4, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment4Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment4;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment4 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment4 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment4();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment5;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment5()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment5, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment5Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment5;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment5 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment5 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment5();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment6;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment6()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment6, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment6Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment6;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment6 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment6 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment6();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment7;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment7()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment7, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment7Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment7;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment7 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment7 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment7();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment8;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment8()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment8, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment8Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment8;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment8 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment8 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment8();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment9;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment9()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment9, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment9Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment9;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment9 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment9 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment9();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment_Manual;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment_Manual()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment_Manual, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment_ManualMethods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment_Manual;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment_Manual => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment_Manual ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment_Manual();
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.Web.WebView2.Core.CoreWebView2Environment").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentStatics;
        private static IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentStatics = ActivationFactory.Get("Microsoft.Web.WebView2.Core.CoreWebView2Environment", global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentStaticsMethods.IID);
                }
            }
        }

        public static global::Windows.Foundation.IAsyncOperation<CoreWebView2Environment> CreateAsync() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentStaticsMethods.CreateAsync(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentStatics);

        public static global::Windows.Foundation.IAsyncOperation<CoreWebView2Environment> CreateWithOptionsAsync(string browserExecutableFolder, string userDataFolder, CoreWebView2EnvironmentOptions options) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentStaticsMethods.CreateWithOptionsAsync(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentStatics, browserExecutableFolder, userDataFolder, options);

        public static string GetAvailableBrowserVersionString() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentStaticsMethods.GetAvailableBrowserVersionString(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentStatics);

        public static string GetAvailableBrowserVersionString(string browserExecutableFolder) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentStaticsMethods.GetAvailableBrowserVersionString(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentStatics, browserExecutableFolder);

        public static int CompareBrowserVersionString(string browserVersionString1, string browserVersionString2) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentStaticsMethods.CompareBrowserVersionString(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentStatics, browserVersionString1, browserVersionString2);

        private static volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentStatics2;
        private static IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentStatics2
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentStatics2;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentStatics2 = ActivationFactory.Get("Microsoft.Web.WebView2.Core.CoreWebView2Environment", global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentStatics2Methods.IID);
                }
            }
        }

        public static string GetAvailableBrowserVersionString(string browserExecutableFolder, CoreWebView2EnvironmentOptions options) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentStatics2Methods.GetAvailableBrowserVersionString(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentStatics2, browserExecutableFolder, options);

        public static CoreWebView2Environment FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2Environment>.FromAbi(thisPtr);
        }

        internal CoreWebView2Environment(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentMethods.IID);

        }


        public static bool operator ==(CoreWebView2Environment x, CoreWebView2Environment y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2Environment x, CoreWebView2Environment y) => !(x == y);
        public bool Equals(CoreWebView2Environment other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2Environment that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public CoreWebView2ControllerOptions CreateCoreWebView2ControllerOptions() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment10Methods.CreateCoreWebView2ControllerOptions(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment10);

        public CoreWebView2SharedBuffer CreateSharedBuffer(ulong Size) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment12Methods.CreateSharedBuffer(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment12, Size);

        public global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<CoreWebView2ProcessExtendedInfo>> GetProcessExtendedInfosAsync() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment13Methods.GetProcessExtendedInfosAsync(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment13);

        public CoreWebView2FileSystemHandle CreateWebFileSystemFileHandle(string Path, CoreWebView2FileSystemHandlePermission Permission) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment14Methods.CreateWebFileSystemFileHandle(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment14, Path, Permission);

        public CoreWebView2FileSystemHandle CreateWebFileSystemDirectoryHandle(string Path, CoreWebView2FileSystemHandlePermission Permission) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment14Methods.CreateWebFileSystemDirectoryHandle(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment14, Path, Permission);

        public CoreWebView2WebResourceRequest CreateWebResourceRequest(string uri, string Method, global::Windows.Storage.Streams.IRandomAccessStream postData, string Headers) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment2Methods.CreateWebResourceRequest(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment2, uri, Method, postData, Headers);

        public global::Windows.Foundation.IAsyncOperation<CoreWebView2CompositionController> CreateCoreWebView2CompositionControllerAsync(CoreWebView2ControllerWindowReference ParentWindow) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment3Methods.CreateCoreWebView2CompositionControllerAsync(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment3, ParentWindow);

        public CoreWebView2PointerInfo CreateCoreWebView2PointerInfo() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment3Methods.CreateCoreWebView2PointerInfo(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment3);

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2Environment, CoreWebView2BrowserProcessExitedEventArgs> BrowserProcessExited
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment5Methods.Get_BrowserProcessExited2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment5, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment5Methods.Get_BrowserProcessExited2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment5, (IWinRTObject)this).Unsubscribe(value);
        }

        public CoreWebView2PrintSettings CreatePrintSettings() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment6Methods.CreatePrintSettings(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment6);

        public global::System.Collections.Generic.IReadOnlyList<CoreWebView2ProcessInfo> GetProcessInfos() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment8Methods.GetProcessInfos(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment8);

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2Environment, object> ProcessInfosChanged
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment8Methods.Get_ProcessInfosChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment8, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment8Methods.Get_ProcessInfosChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment8, (IWinRTObject)this).Unsubscribe(value);
        }

        public CoreWebView2ContextMenuItem CreateContextMenuItem(string Label, global::Windows.Storage.Streams.IRandomAccessStream iconStream, CoreWebView2ContextMenuItemKind Kind) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment9Methods.CreateContextMenuItem(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment9, Label, iconStream, Kind);

        public global::Windows.Foundation.IAsyncOperation<CoreWebView2Controller> CreateCoreWebView2ControllerAsync(CoreWebView2ControllerWindowReference ParentWindow, CoreWebView2ControllerOptions options) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment_ManualMethods.CreateCoreWebView2ControllerAsync(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment_Manual, ParentWindow, options);

        public global::Windows.Foundation.IAsyncOperation<CoreWebView2CompositionController> CreateCoreWebView2CompositionControllerAsync(CoreWebView2ControllerWindowReference ParentWindow, CoreWebView2ControllerOptions options) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment_ManualMethods.CreateCoreWebView2CompositionControllerAsync(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment_Manual, ParentWindow, options);

        public global::Windows.Foundation.IAsyncOperation<CoreWebView2Controller> CreateCoreWebView2ControllerAsync(CoreWebView2ControllerWindowReference ParentWindow) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentMethods.CreateCoreWebView2ControllerAsync(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment, ParentWindow);

        public CoreWebView2WebResourceResponse CreateWebResourceResponse(global::Windows.Storage.Streams.IRandomAccessStream Content, int StatusCode, string ReasonPhrase, string Headers) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentMethods.CreateWebResourceResponse(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment, Content, StatusCode, ReasonPhrase, Headers);

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2Environment, object> NewBrowserVersionAvailable
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentMethods.Get_NewBrowserVersionAvailable2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentMethods.Get_NewBrowserVersionAvailable2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment, (IWinRTObject)this).Unsubscribe(value);
        }

        public string BrowserVersionString => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentMethods.get_BrowserVersionString(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment);

        public string FailureReportFolderPath => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment11Methods.get_FailureReportFolderPath(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment11);

        public string UserDataFolder => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment7Methods.get_UserDataFolder(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Environment7);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptionsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2EnvironmentOptions))]
    public sealed class CoreWebView2EnvironmentOptions : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2EnvironmentOptions>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions2;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions2Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions2;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions2 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions2 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions2();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions3;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions3()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions3, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions3Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions3;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions3 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions3 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions3();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions4;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions4()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions4, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions4Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions4;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions4 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions4 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions4();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions5;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions5()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions5, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions5Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions5;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions5 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions5 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions5();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions6;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions6()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions6, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions6Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions6;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions6 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions6 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions6();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions7;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions7()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions7, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions7Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions7;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions7 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions7 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions7();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions8;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions8()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions8, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions8Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions8;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions8 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions8 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions8();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions_Manual;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions_Manual()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions_Manual, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions_ManualMethods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions_Manual;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions_Manual => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions_Manual ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions_Manual();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions_Manual3;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions_Manual3()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions_Manual3, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions_Manual3Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions_Manual3;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions_Manual3 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions_Manual3 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions_Manual3();
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2EnvironmentOptions;
        private static IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2EnvironmentOptions
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2EnvironmentOptions;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2EnvironmentOptions = ActivationFactory.Get("Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions");
                }
            }
        }

        public CoreWebView2EnvironmentOptions() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2EnvironmentOptions, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptionsMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static CoreWebView2EnvironmentOptions FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2EnvironmentOptions>.FromAbi(thisPtr);
        }

        internal CoreWebView2EnvironmentOptions(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptionsMethods.IID);

        }


        public static bool operator ==(CoreWebView2EnvironmentOptions x, CoreWebView2EnvironmentOptions y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2EnvironmentOptions x, CoreWebView2EnvironmentOptions y) => !(x == y);
        public bool Equals(CoreWebView2EnvironmentOptions other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2EnvironmentOptions that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public string AdditionalBrowserArguments
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptionsMethods.get_AdditionalBrowserArguments(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptionsMethods.set_AdditionalBrowserArguments(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions, value);
        }

        public bool AllowSingleSignOnUsingOSPrimaryAccount
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptionsMethods.get_AllowSingleSignOnUsingOSPrimaryAccount(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptionsMethods.set_AllowSingleSignOnUsingOSPrimaryAccount(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions, value);
        }

        public bool AreBrowserExtensionsEnabled
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions6Methods.get_AreBrowserExtensionsEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions6);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions6Methods.set_AreBrowserExtensionsEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions6, value);
        }

        public CoreWebView2ChannelSearchKind ChannelSearchKind
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions7Methods.get_ChannelSearchKind(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions7);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions7Methods.set_ChannelSearchKind(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions7, value);
        }

        public global::System.Collections.Generic.IList<CoreWebView2CustomSchemeRegistration> CustomSchemeRegistrations
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions_Manual3Methods.get_CustomSchemeRegistrations(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions_Manual3);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions_Manual3Methods.set_CustomSchemeRegistrations(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions_Manual3, value);
        }

        public bool EnableTrackingPrevention
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions5Methods.get_EnableTrackingPrevention(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions5);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions5Methods.set_EnableTrackingPrevention(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions5, value);
        }

        public bool ExclusiveUserDataFolderAccess
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions2Methods.get_ExclusiveUserDataFolderAccess(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions2);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions2Methods.set_ExclusiveUserDataFolderAccess(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions2, value);
        }

        public bool IsCustomCrashReportingEnabled
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions3Methods.get_IsCustomCrashReportingEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions3);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions3Methods.set_IsCustomCrashReportingEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions3, value);
        }

        public string Language
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptionsMethods.get_Language(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptionsMethods.set_Language(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions, value);
        }

        public CoreWebView2ReleaseChannels ReleaseChannels
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions7Methods.get_ReleaseChannels(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions7);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions7Methods.set_ReleaseChannels(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions7, value);
        }

        public CoreWebView2ScrollbarStyle ScrollBarStyle
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions8Methods.get_ScrollBarStyle(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions8);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions8Methods.set_ScrollBarStyle(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions8, value);
        }

        public string TargetCompatibleBrowserVersion
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptionsMethods.get_TargetCompatibleBrowserVersion(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptionsMethods.set_TargetCompatibleBrowserVersion(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ExecuteScriptResult))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ExecuteScriptResultRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2ExecuteScriptResult))]
    public sealed class CoreWebView2ExecuteScriptResult : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2ExecuteScriptResult>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ExecuteScriptResult_Manual;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ExecuteScriptResult_Manual()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ExecuteScriptResult_Manual, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ExecuteScriptResult_ManualMethods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ExecuteScriptResult_Manual;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ExecuteScriptResult_Manual => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ExecuteScriptResult_Manual ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ExecuteScriptResult_Manual();
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ExecuteScriptResult => _inner;


        public static CoreWebView2ExecuteScriptResult FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2ExecuteScriptResult>.FromAbi(thisPtr);
        }

        internal CoreWebView2ExecuteScriptResult(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ExecuteScriptResultMethods.IID);

        }


        public static bool operator ==(CoreWebView2ExecuteScriptResult x, CoreWebView2ExecuteScriptResult y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2ExecuteScriptResult x, CoreWebView2ExecuteScriptResult y) => !(x == y);
        public bool Equals(CoreWebView2ExecuteScriptResult other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2ExecuteScriptResult that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public int TryGetResultAsString(out string stringResult) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ExecuteScriptResult_ManualMethods.TryGetResultAsString(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ExecuteScriptResult_Manual, out stringResult);

        public CoreWebView2ScriptException Exception => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ExecuteScriptResultMethods.get_Exception(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ExecuteScriptResult);

        public string ResultAsJson => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ExecuteScriptResultMethods.get_ResultAsJson(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ExecuteScriptResult);

        public bool Succeeded => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ExecuteScriptResultMethods.get_Succeeded(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ExecuteScriptResult);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2FaviconImageFormat>))]public enum CoreWebView2FaviconImageFormat : int
    {
        Png = unchecked((int)0),
        Jpeg = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2File))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2FileRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2File))]
    public sealed class CoreWebView2File : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2File>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2File => _inner;


        public static CoreWebView2File FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2File>.FromAbi(thisPtr);
        }

        internal CoreWebView2File(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FileMethods.IID);

        }


        public static bool operator ==(CoreWebView2File x, CoreWebView2File y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2File x, CoreWebView2File y) => !(x == y);
        public bool Equals(CoreWebView2File other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2File that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public string Path => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FileMethods.get_Path(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2File);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandle))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandleRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2FileSystemHandle))]
    public sealed class CoreWebView2FileSystemHandle : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2FileSystemHandle>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2FileSystemHandle => _inner;


        public static CoreWebView2FileSystemHandle FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2FileSystemHandle>.FromAbi(thisPtr);
        }

        internal CoreWebView2FileSystemHandle(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FileSystemHandleMethods.IID);

        }


        public static bool operator ==(CoreWebView2FileSystemHandle x, CoreWebView2FileSystemHandle y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2FileSystemHandle x, CoreWebView2FileSystemHandle y) => !(x == y);
        public bool Equals(CoreWebView2FileSystemHandle other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2FileSystemHandle that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public CoreWebView2FileSystemHandleKind Kind => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FileSystemHandleMethods.get_Kind(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2FileSystemHandle);

        public string Path => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FileSystemHandleMethods.get_Path(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2FileSystemHandle);

        public CoreWebView2FileSystemHandlePermission Permission => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FileSystemHandleMethods.get_Permission(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2FileSystemHandle);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2FileSystemHandleKind>))]public enum CoreWebView2FileSystemHandleKind : int
    {
        File = unchecked((int)0),
        Directory = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2FileSystemHandlePermission>))]public enum CoreWebView2FileSystemHandlePermission : int
    {
        ReadOnly = unchecked((int)0),
        ReadWrite = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Frame))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2FrameRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2Frame))]
    public sealed class CoreWebView2Frame : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2Frame>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame2;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Frame2Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame2;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame2 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame2 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame2();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame3;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame3()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame3, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Frame3Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame3;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame3 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame3 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame3();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame4;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame4()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame4, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Frame4Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame4;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame4 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame4 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame4();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame5;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame5()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame5, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Frame5Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame5;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame5 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame5 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame5();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame6;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame6()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame6, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Frame6Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame6;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame6 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame6 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame6();
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame => _inner;


        public static CoreWebView2Frame FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2Frame>.FromAbi(thisPtr);
        }

        internal CoreWebView2Frame(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FrameMethods.IID);

        }


        public static bool operator ==(CoreWebView2Frame x, CoreWebView2Frame y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2Frame x, CoreWebView2Frame y) => !(x == y);
        public bool Equals(CoreWebView2Frame other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2Frame that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.IAsyncOperation<string> ExecuteScriptAsync(string javaScript) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Frame2Methods.ExecuteScriptAsync(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame2, javaScript);

        public void PostWebMessageAsJson(string webMessageAsJson) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Frame2Methods.PostWebMessageAsJson(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame2, webMessageAsJson);

        public void PostWebMessageAsString(string webMessageAsString) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Frame2Methods.PostWebMessageAsString(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame2, webMessageAsString);

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2Frame, CoreWebView2ContentLoadingEventArgs> ContentLoading
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Frame2Methods.Get_ContentLoading2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Frame2Methods.Get_ContentLoading2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2Frame, CoreWebView2DOMContentLoadedEventArgs> DOMContentLoaded
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Frame2Methods.Get_DOMContentLoaded2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Frame2Methods.Get_DOMContentLoaded2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2Frame, CoreWebView2NavigationCompletedEventArgs> NavigationCompleted
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Frame2Methods.Get_NavigationCompleted2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Frame2Methods.Get_NavigationCompleted2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2Frame, CoreWebView2NavigationStartingEventArgs> NavigationStarting
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Frame2Methods.Get_NavigationStarting2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Frame2Methods.Get_NavigationStarting2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2Frame, CoreWebView2WebMessageReceivedEventArgs> WebMessageReceived
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Frame2Methods.Get_WebMessageReceived2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Frame2Methods.Get_WebMessageReceived2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2Frame, CoreWebView2PermissionRequestedEventArgs> PermissionRequested
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Frame3Methods.Get_PermissionRequested2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame3, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Frame3Methods.Get_PermissionRequested2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame3, (IWinRTObject)this).Unsubscribe(value);
        }

        public void PostSharedBufferToScript(CoreWebView2SharedBuffer sharedBuffer, CoreWebView2SharedBufferAccess access, string additionalDataAsJson) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Frame4Methods.PostSharedBufferToScript(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame4, sharedBuffer, access, additionalDataAsJson);

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2Frame, CoreWebView2ScreenCaptureStartingEventArgs> ScreenCaptureStarting
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Frame6Methods.Get_ScreenCaptureStarting2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame6, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Frame6Methods.Get_ScreenCaptureStarting2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame6, (IWinRTObject)this).Unsubscribe(value);
        }

        public void RemoveHostObjectFromScript(string name) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FrameMethods.RemoveHostObjectFromScript(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame, name);

        public int IsDestroyed() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FrameMethods.IsDestroyed(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame);

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2Frame, object> Destroyed
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FrameMethods.Get_Destroyed2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FrameMethods.Get_Destroyed2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2Frame, object> NameChanged
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FrameMethods.Get_NameChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FrameMethods.Get_NameChanged2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame, (IWinRTObject)this).Unsubscribe(value);
        }

        public uint FrameId => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Frame5Methods.get_FrameId(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame5);

        public string Name => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FrameMethods.get_Name(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Frame);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2FrameCreatedEventArgs))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2FrameCreatedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2FrameCreatedEventArgs))]
    public sealed class CoreWebView2FrameCreatedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2FrameCreatedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2FrameCreatedEventArgs => _inner;


        public static CoreWebView2FrameCreatedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2FrameCreatedEventArgs>.FromAbi(thisPtr);
        }

        internal CoreWebView2FrameCreatedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FrameCreatedEventArgsMethods.IID);

        }


        public static bool operator ==(CoreWebView2FrameCreatedEventArgs x, CoreWebView2FrameCreatedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2FrameCreatedEventArgs x, CoreWebView2FrameCreatedEventArgs y) => !(x == y);
        public bool Equals(CoreWebView2FrameCreatedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2FrameCreatedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public CoreWebView2Frame Frame => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FrameCreatedEventArgsMethods.get_Frame(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2FrameCreatedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2FrameInfoRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2FrameInfo))]
    public sealed class CoreWebView2FrameInfo : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2FrameInfo>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2FrameInfo2;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2FrameInfo2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2FrameInfo2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FrameInfo2Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2FrameInfo2;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2FrameInfo2 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2FrameInfo2 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2FrameInfo2();
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2FrameInfo => _inner;


        public static CoreWebView2FrameInfo FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2FrameInfo>.FromAbi(thisPtr);
        }

        internal CoreWebView2FrameInfo(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FrameInfoMethods.IID);

        }


        public static bool operator ==(CoreWebView2FrameInfo x, CoreWebView2FrameInfo y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2FrameInfo x, CoreWebView2FrameInfo y) => !(x == y);
        public bool Equals(CoreWebView2FrameInfo other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2FrameInfo that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public uint FrameId => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FrameInfo2Methods.get_FrameId(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2FrameInfo2);

        public CoreWebView2FrameKind FrameKind => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FrameInfo2Methods.get_FrameKind(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2FrameInfo2);

        public string Name => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FrameInfoMethods.get_Name(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2FrameInfo);

        public CoreWebView2FrameInfo ParentFrameInfo => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FrameInfo2Methods.get_ParentFrameInfo(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2FrameInfo2);

        public string Source => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FrameInfoMethods.get_Source(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2FrameInfo);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2FrameKind>))]public enum CoreWebView2FrameKind : int
    {
        Unknown = unchecked((int)0),
        MainFrame = unchecked((int)0x1),
        Iframe = unchecked((int)0x2),
        Embed = unchecked((int)0x3),
        Object = unchecked((int)0x4),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2HostResourceAccessKind>))]public enum CoreWebView2HostResourceAccessKind : int
    {
        Deny = unchecked((int)0),
        Allow = unchecked((int)0x1),
        DenyCors = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIteratorRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2HttpHeadersCollectionIterator))]
    public sealed class CoreWebView2HttpHeadersCollectionIterator : global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<string, string>>, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2HttpHeadersCollectionIterator>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2HttpHeadersCollectionIterator => _inner;
        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IEnumerator_global__System_Collections_Generic_KeyValuePair_string__string__;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IEnumerator_global__System_Collections_Generic_KeyValuePair_string__string__()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_Windows_Foundation_Collections_IKeyValuePair_2_String__String_.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IEnumerator_global__System_Collections_Generic_KeyValuePair_string__string__, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IEnumeratorMethods<global::System.Collections.Generic.KeyValuePair<string, string>>.IID), null);
            return ___objRef_global__System_Collections_Generic_IEnumerator_global__System_Collections_Generic_KeyValuePair_string__string__;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IEnumerator_global__System_Collections_Generic_KeyValuePair_string__string__ => ___objRef_global__System_Collections_Generic_IEnumerator_global__System_Collections_Generic_KeyValuePair_string__string__ ?? Make___objRef_global__System_Collections_Generic_IEnumerator_global__System_Collections_Generic_KeyValuePair_string__string__();



        public static CoreWebView2HttpHeadersCollectionIterator FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2HttpHeadersCollectionIterator>.FromAbi(thisPtr);
        }

        internal CoreWebView2HttpHeadersCollectionIterator(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2HttpHeadersCollectionIteratorMethods.IID);

        }


        public static bool operator ==(CoreWebView2HttpHeadersCollectionIterator x, CoreWebView2HttpHeadersCollectionIterator y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2HttpHeadersCollectionIterator x, CoreWebView2HttpHeadersCollectionIterator y) => !(x == y);
        public bool Equals(CoreWebView2HttpHeadersCollectionIterator other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2HttpHeadersCollectionIterator that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool MoveNext() => global::ABI.System.Collections.Generic.IEnumeratorMethods<global::System.Collections.Generic.KeyValuePair<string, string>>.MoveNext(_objRef_global__System_Collections_Generic_IEnumerator_global__System_Collections_Generic_KeyValuePair_string__string__);
        public void Reset() => global::ABI.System.Collections.Generic.IEnumeratorMethods<global::System.Collections.Generic.KeyValuePair<string, string>>.Reset(_objRef_global__System_Collections_Generic_IEnumerator_global__System_Collections_Generic_KeyValuePair_string__string__);
        public void Dispose() => global::ABI.System.Collections.Generic.IEnumeratorMethods<global::System.Collections.Generic.KeyValuePair<string, string>>.Dispose(_objRef_global__System_Collections_Generic_IEnumerator_global__System_Collections_Generic_KeyValuePair_string__string__);
        public global::System.Collections.Generic.KeyValuePair<string, string> Current => global::ABI.System.Collections.Generic.IEnumeratorMethods<global::System.Collections.Generic.KeyValuePair<string, string>>.get_Current(_objRef_global__System_Collections_Generic_IEnumerator_global__System_Collections_Generic_KeyValuePair_string__string__);
        object IEnumerator.Current => Current;

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeadersRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2HttpRequestHeaders))]
    public sealed class CoreWebView2HttpRequestHeaders : global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, string>>, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2HttpRequestHeaders>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2HttpRequestHeaders => _inner;
        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_string__string__;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_string__string__()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Collections_IKeyValuePair_2_String__String_.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_string__string__, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IEnumerableMethods<global::System.Collections.Generic.KeyValuePair<string, string>>.IID), null);
            return ___objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_string__string__;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_string__string__ => ___objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_string__string__ ?? Make___objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_string__string__();



        public static CoreWebView2HttpRequestHeaders FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2HttpRequestHeaders>.FromAbi(thisPtr);
        }

        internal CoreWebView2HttpRequestHeaders(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2HttpRequestHeadersMethods.IID);

        }


        public static bool operator ==(CoreWebView2HttpRequestHeaders x, CoreWebView2HttpRequestHeaders y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2HttpRequestHeaders x, CoreWebView2HttpRequestHeaders y) => !(x == y);
        public bool Equals(CoreWebView2HttpRequestHeaders other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2HttpRequestHeaders that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public string GetHeader(string name) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2HttpRequestHeadersMethods.GetHeader(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2HttpRequestHeaders, name);

        public CoreWebView2HttpHeadersCollectionIterator GetHeaders(string name) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2HttpRequestHeadersMethods.GetHeaders(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2HttpRequestHeaders, name);

        public bool Contains(string name) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2HttpRequestHeadersMethods.Contains(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2HttpRequestHeaders, name);

        public void SetHeader(string name, string value) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2HttpRequestHeadersMethods.SetHeader(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2HttpRequestHeaders, name, value);

        public void RemoveHeader(string name) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2HttpRequestHeadersMethods.RemoveHeader(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2HttpRequestHeaders, name);

        public IEnumerator<global::System.Collections.Generic.KeyValuePair<string, string>> GetEnumerator() => global::ABI.System.Collections.Generic.IEnumerableMethods<global::System.Collections.Generic.KeyValuePair<string, string>>.GetEnumerator(_objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_string__string__);

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeadersRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2HttpResponseHeaders))]
    public sealed class CoreWebView2HttpResponseHeaders : global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, string>>, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2HttpResponseHeaders>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2HttpResponseHeaders => _inner;
        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_string__string__;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_string__string__()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Collections_IKeyValuePair_2_String__String_.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_string__string__, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IEnumerableMethods<global::System.Collections.Generic.KeyValuePair<string, string>>.IID), null);
            return ___objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_string__string__;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_string__string__ => ___objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_string__string__ ?? Make___objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_string__string__();



        public static CoreWebView2HttpResponseHeaders FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2HttpResponseHeaders>.FromAbi(thisPtr);
        }

        internal CoreWebView2HttpResponseHeaders(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2HttpResponseHeadersMethods.IID);

        }


        public static bool operator ==(CoreWebView2HttpResponseHeaders x, CoreWebView2HttpResponseHeaders y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2HttpResponseHeaders x, CoreWebView2HttpResponseHeaders y) => !(x == y);
        public bool Equals(CoreWebView2HttpResponseHeaders other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2HttpResponseHeaders that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void AppendHeader(string name, string value) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2HttpResponseHeadersMethods.AppendHeader(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2HttpResponseHeaders, name, value);

        public bool Contains(string name) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2HttpResponseHeadersMethods.Contains(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2HttpResponseHeaders, name);

        public string GetHeader(string name) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2HttpResponseHeadersMethods.GetHeader(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2HttpResponseHeaders, name);

        public CoreWebView2HttpHeadersCollectionIterator GetHeaders(string name) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2HttpResponseHeadersMethods.GetHeaders(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2HttpResponseHeaders, name);

        public IEnumerator<global::System.Collections.Generic.KeyValuePair<string, string>> GetEnumerator() => global::ABI.System.Collections.Generic.IEnumerableMethods<global::System.Collections.Generic.KeyValuePair<string, string>>.GetEnumerator(_objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_string__string__);

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2KeyEventKind>))]public enum CoreWebView2KeyEventKind : int
    {
        KeyDown = unchecked((int)0),
        KeyUp = unchecked((int)0x1),
        SystemKeyDown = unchecked((int)0x2),
        SystemKeyUp = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgs))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2LaunchingExternalUriSchemeEventArgs))]
    public sealed class CoreWebView2LaunchingExternalUriSchemeEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2LaunchingExternalUriSchemeEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2LaunchingExternalUriSchemeEventArgs => _inner;


        public static CoreWebView2LaunchingExternalUriSchemeEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2LaunchingExternalUriSchemeEventArgs>.FromAbi(thisPtr);
        }

        internal CoreWebView2LaunchingExternalUriSchemeEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2LaunchingExternalUriSchemeEventArgsMethods.IID);

        }


        public static bool operator ==(CoreWebView2LaunchingExternalUriSchemeEventArgs x, CoreWebView2LaunchingExternalUriSchemeEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2LaunchingExternalUriSchemeEventArgs x, CoreWebView2LaunchingExternalUriSchemeEventArgs y) => !(x == y);
        public bool Equals(CoreWebView2LaunchingExternalUriSchemeEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2LaunchingExternalUriSchemeEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.Deferral GetDeferral() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2LaunchingExternalUriSchemeEventArgsMethods.GetDeferral(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2LaunchingExternalUriSchemeEventArgs);

        public bool Cancel
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2LaunchingExternalUriSchemeEventArgsMethods.get_Cancel(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2LaunchingExternalUriSchemeEventArgs);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2LaunchingExternalUriSchemeEventArgsMethods.set_Cancel(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2LaunchingExternalUriSchemeEventArgs, value);
        }

        public string InitiatingOrigin => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2LaunchingExternalUriSchemeEventArgsMethods.get_InitiatingOrigin(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2LaunchingExternalUriSchemeEventArgs);

        public bool IsUserInitiated => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2LaunchingExternalUriSchemeEventArgsMethods.get_IsUserInitiated(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2LaunchingExternalUriSchemeEventArgs);

        public string Uri => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2LaunchingExternalUriSchemeEventArgsMethods.get_Uri(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2LaunchingExternalUriSchemeEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2MemoryUsageTargetLevel>))]public enum CoreWebView2MemoryUsageTargetLevel : int
    {
        Normal = unchecked((int)0),
        Low = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2MouseEventKind>))]public enum CoreWebView2MouseEventKind : int
    {
        HorizontalWheel = unchecked((int)0x20e),
        LeftButtonDoubleClick = unchecked((int)0x203),
        LeftButtonDown = unchecked((int)0x201),
        LeftButtonUp = unchecked((int)0x202),
        Leave = unchecked((int)0x2a3),
        MiddleButtonDoubleClick = unchecked((int)0x209),
        MiddleButtonDown = unchecked((int)0x207),
        MiddleButtonUp = unchecked((int)0x208),
        Move = unchecked((int)0x200),
        RightButtonDoubleClick = unchecked((int)0x206),
        RightButtonDown = unchecked((int)0x204),
        RightButtonUp = unchecked((int)0x205),
        Wheel = unchecked((int)0x20a),
        XButtonDoubleClick = unchecked((int)0x20d),
        XButtonDown = unchecked((int)0x20b),
        XButtonUp = unchecked((int)0x20c),
        NonClientRightButtonDown = unchecked((int)0xa4),
        NonClientRightButtonUp = unchecked((int)0xa5),
    }
    [FlagsAttribute]
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2MouseEventVirtualKeys>))]public enum CoreWebView2MouseEventVirtualKeys : uint
    {
        None = unchecked((uint)0),
        LeftButton = unchecked((uint)0x1),
        RightButton = unchecked((uint)0x2),
        Shift = unchecked((uint)0x4),
        Control = unchecked((uint)0x8),
        MiddleButton = unchecked((uint)0x10),
        XButton1 = unchecked((uint)0x20),
        XButton2 = unchecked((uint)0x40),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2MoveFocusReason>))]public enum CoreWebView2MoveFocusReason : int
    {
        Programmatic = unchecked((int)0),
        Next = unchecked((int)0x1),
        Previous = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusRequestedEventArgs))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusRequestedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2MoveFocusRequestedEventArgs))]
    public sealed class CoreWebView2MoveFocusRequestedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2MoveFocusRequestedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2MoveFocusRequestedEventArgs => _inner;


        public static CoreWebView2MoveFocusRequestedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2MoveFocusRequestedEventArgs>.FromAbi(thisPtr);
        }

        internal CoreWebView2MoveFocusRequestedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2MoveFocusRequestedEventArgsMethods.IID);

        }


        public static bool operator ==(CoreWebView2MoveFocusRequestedEventArgs x, CoreWebView2MoveFocusRequestedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2MoveFocusRequestedEventArgs x, CoreWebView2MoveFocusRequestedEventArgs y) => !(x == y);
        public bool Equals(CoreWebView2MoveFocusRequestedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2MoveFocusRequestedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool Handled
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2MoveFocusRequestedEventArgsMethods.get_Handled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2MoveFocusRequestedEventArgs);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2MoveFocusRequestedEventArgsMethods.set_Handled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2MoveFocusRequestedEventArgs, value);
        }

        public CoreWebView2MoveFocusReason Reason => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2MoveFocusRequestedEventArgsMethods.get_Reason(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2MoveFocusRequestedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2NavigationCompletedEventArgs))]
    public sealed class CoreWebView2NavigationCompletedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2NavigationCompletedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationCompletedEventArgs2;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationCompletedEventArgs2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationCompletedEventArgs2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NavigationCompletedEventArgs2Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationCompletedEventArgs2;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationCompletedEventArgs2 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationCompletedEventArgs2 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationCompletedEventArgs2();
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationCompletedEventArgs => _inner;


        public static CoreWebView2NavigationCompletedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2NavigationCompletedEventArgs>.FromAbi(thisPtr);
        }

        internal CoreWebView2NavigationCompletedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NavigationCompletedEventArgsMethods.IID);

        }


        public static bool operator ==(CoreWebView2NavigationCompletedEventArgs x, CoreWebView2NavigationCompletedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2NavigationCompletedEventArgs x, CoreWebView2NavigationCompletedEventArgs y) => !(x == y);
        public bool Equals(CoreWebView2NavigationCompletedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2NavigationCompletedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public int HttpStatusCode => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NavigationCompletedEventArgs2Methods.get_HttpStatusCode(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationCompletedEventArgs2);

        public bool IsSuccess => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NavigationCompletedEventArgsMethods.get_IsSuccess(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationCompletedEventArgs);

        public ulong NavigationId => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NavigationCompletedEventArgsMethods.get_NavigationId(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationCompletedEventArgs);

        public CoreWebView2WebErrorStatus WebErrorStatus => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NavigationCompletedEventArgsMethods.get_WebErrorStatus(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationCompletedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2NavigationKind>))]public enum CoreWebView2NavigationKind : int
    {
        Reload = unchecked((int)0),
        BackOrForward = unchecked((int)0x1),
        NewDocument = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2NavigationStartingEventArgs))]
    public sealed class CoreWebView2NavigationStartingEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2NavigationStartingEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs2;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NavigationStartingEventArgs2Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs2;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs2 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs2 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs2();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs3;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs3()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs3, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NavigationStartingEventArgs3Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs3;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs3 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs3 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs3();
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs => _inner;


        public static CoreWebView2NavigationStartingEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2NavigationStartingEventArgs>.FromAbi(thisPtr);
        }

        internal CoreWebView2NavigationStartingEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NavigationStartingEventArgsMethods.IID);

        }


        public static bool operator ==(CoreWebView2NavigationStartingEventArgs x, CoreWebView2NavigationStartingEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2NavigationStartingEventArgs x, CoreWebView2NavigationStartingEventArgs y) => !(x == y);
        public bool Equals(CoreWebView2NavigationStartingEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2NavigationStartingEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public string AdditionalAllowedFrameAncestors
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NavigationStartingEventArgs2Methods.get_AdditionalAllowedFrameAncestors(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs2);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NavigationStartingEventArgs2Methods.set_AdditionalAllowedFrameAncestors(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs2, value);
        }

        public bool Cancel
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NavigationStartingEventArgsMethods.get_Cancel(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NavigationStartingEventArgsMethods.set_Cancel(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs, value);
        }

        public bool IsRedirected => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NavigationStartingEventArgsMethods.get_IsRedirected(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs);

        public bool IsUserInitiated => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NavigationStartingEventArgsMethods.get_IsUserInitiated(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs);

        public ulong NavigationId => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NavigationStartingEventArgsMethods.get_NavigationId(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs);

        public CoreWebView2NavigationKind NavigationKind => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NavigationStartingEventArgs3Methods.get_NavigationKind(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs3);

        public CoreWebView2HttpRequestHeaders RequestHeaders => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NavigationStartingEventArgsMethods.get_RequestHeaders(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs);

        public string Uri => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NavigationStartingEventArgsMethods.get_Uri(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2NewWindowRequestedEventArgs))]
    public sealed class CoreWebView2NewWindowRequestedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2NewWindowRequestedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs2;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NewWindowRequestedEventArgs2Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs2;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs2 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs2 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs2();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs3;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs3()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs3, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NewWindowRequestedEventArgs3Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs3;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs3 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs3 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs3();
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs => _inner;


        public static CoreWebView2NewWindowRequestedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2NewWindowRequestedEventArgs>.FromAbi(thisPtr);
        }

        internal CoreWebView2NewWindowRequestedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NewWindowRequestedEventArgsMethods.IID);

        }


        public static bool operator ==(CoreWebView2NewWindowRequestedEventArgs x, CoreWebView2NewWindowRequestedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2NewWindowRequestedEventArgs x, CoreWebView2NewWindowRequestedEventArgs y) => !(x == y);
        public bool Equals(CoreWebView2NewWindowRequestedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2NewWindowRequestedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.Deferral GetDeferral() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NewWindowRequestedEventArgsMethods.GetDeferral(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs);

        public bool Handled
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NewWindowRequestedEventArgsMethods.get_Handled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NewWindowRequestedEventArgsMethods.set_Handled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs, value);
        }

        public bool IsUserInitiated => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NewWindowRequestedEventArgsMethods.get_IsUserInitiated(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs);

        public string Name => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NewWindowRequestedEventArgs2Methods.get_Name(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs2);

        public CoreWebView2 NewWindow
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NewWindowRequestedEventArgsMethods.get_NewWindow(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NewWindowRequestedEventArgsMethods.set_NewWindow(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs, value);
        }

        public CoreWebView2FrameInfo OriginalSourceFrameInfo => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NewWindowRequestedEventArgs3Methods.get_OriginalSourceFrameInfo(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs3);

        public string Uri => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NewWindowRequestedEventArgsMethods.get_Uri(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs);

        public CoreWebView2WindowFeatures WindowFeatures => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NewWindowRequestedEventArgsMethods.get_WindowFeatures(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionChangedEventArgs))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionChangedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2NonClientRegionChangedEventArgs))]
    public sealed class CoreWebView2NonClientRegionChangedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2NonClientRegionChangedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NonClientRegionChangedEventArgs => _inner;


        public static CoreWebView2NonClientRegionChangedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2NonClientRegionChangedEventArgs>.FromAbi(thisPtr);
        }

        internal CoreWebView2NonClientRegionChangedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NonClientRegionChangedEventArgsMethods.IID);

        }


        public static bool operator ==(CoreWebView2NonClientRegionChangedEventArgs x, CoreWebView2NonClientRegionChangedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2NonClientRegionChangedEventArgs x, CoreWebView2NonClientRegionChangedEventArgs y) => !(x == y);
        public bool Equals(CoreWebView2NonClientRegionChangedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2NonClientRegionChangedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public CoreWebView2NonClientRegionKind RegionKind => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NonClientRegionChangedEventArgsMethods.get_RegionKind(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NonClientRegionChangedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2NonClientRegionKind>))]public enum CoreWebView2NonClientRegionKind : int
    {
        Nowhere = unchecked((int)0),
        Client = unchecked((int)0x1),
        Caption = unchecked((int)0x2),
        Minimize = unchecked((int)0x8),
        Maximize = unchecked((int)0x9),
        Close = unchecked((int)0x14),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Notification))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2NotificationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2Notification))]
    public sealed class CoreWebView2Notification : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2Notification>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Notification_Manual2;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Notification_Manual2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Notification_Manual2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Notification_Manual2Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Notification_Manual2;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Notification_Manual2 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Notification_Manual2 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Notification_Manual2();
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Notification => _inner;


        public static CoreWebView2Notification FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2Notification>.FromAbi(thisPtr);
        }

        internal CoreWebView2Notification(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NotificationMethods.IID);

        }


        public static bool operator ==(CoreWebView2Notification x, CoreWebView2Notification y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2Notification x, CoreWebView2Notification y) => !(x == y);
        public bool Equals(CoreWebView2Notification other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2Notification that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void ReportShown() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NotificationMethods.ReportShown(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Notification);

        public void ReportClicked() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NotificationMethods.ReportClicked(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Notification);

        public void ReportClosed() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NotificationMethods.ReportClosed(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Notification);

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2Notification, object> CloseRequested
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NotificationMethods.Get_CloseRequested2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Notification, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NotificationMethods.Get_CloseRequested2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Notification, (IWinRTObject)this).Unsubscribe(value);
        }

        public string BadgeUri => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NotificationMethods.get_BadgeUri(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Notification);

        public string Body => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NotificationMethods.get_Body(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Notification);

        public string BodyImageUri => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NotificationMethods.get_BodyImageUri(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Notification);

        public CoreWebView2TextDirectionKind Direction => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NotificationMethods.get_Direction(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Notification);

        public string IconUri => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NotificationMethods.get_IconUri(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Notification);

        public bool IsSilent => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NotificationMethods.get_IsSilent(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Notification);

        public string Language => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NotificationMethods.get_Language(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Notification);

        public bool RequiresInteraction => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NotificationMethods.get_RequiresInteraction(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Notification);

        public bool ShouldRenotify => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NotificationMethods.get_ShouldRenotify(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Notification);

        public string Tag => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NotificationMethods.get_Tag(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Notification);

        public double Timestamp => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NotificationMethods.get_Timestamp(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Notification);

        public string Title => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NotificationMethods.get_Title(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Notification);

        public global::System.Collections.Generic.IReadOnlyList<ulong> VibrationPattern => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Notification_Manual2Methods.get_VibrationPattern(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Notification_Manual2);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2NotificationReceivedEventArgs))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2NotificationReceivedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2NotificationReceivedEventArgs))]
    public sealed class CoreWebView2NotificationReceivedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2NotificationReceivedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NotificationReceivedEventArgs => _inner;


        public static CoreWebView2NotificationReceivedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2NotificationReceivedEventArgs>.FromAbi(thisPtr);
        }

        internal CoreWebView2NotificationReceivedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NotificationReceivedEventArgsMethods.IID);

        }


        public static bool operator ==(CoreWebView2NotificationReceivedEventArgs x, CoreWebView2NotificationReceivedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2NotificationReceivedEventArgs x, CoreWebView2NotificationReceivedEventArgs y) => !(x == y);
        public bool Equals(CoreWebView2NotificationReceivedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2NotificationReceivedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.Deferral GetDeferral() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NotificationReceivedEventArgsMethods.GetDeferral(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NotificationReceivedEventArgs);

        public bool Handled
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NotificationReceivedEventArgsMethods.get_Handled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NotificationReceivedEventArgs);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NotificationReceivedEventArgsMethods.set_Handled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NotificationReceivedEventArgs, value);
        }

        public CoreWebView2Notification Notification => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NotificationReceivedEventArgsMethods.get_Notification(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NotificationReceivedEventArgs);

        public string SenderOrigin => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NotificationReceivedEventArgsMethods.get_SenderOrigin(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2NotificationReceivedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [FlagsAttribute]
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2PdfToolbarItems>))]public enum CoreWebView2PdfToolbarItems : uint
    {
        None = unchecked((uint)0),
        Save = unchecked((uint)0x1),
        Print = unchecked((uint)0x2),
        SaveAs = unchecked((uint)0x4),
        ZoomIn = unchecked((uint)0x8),
        ZoomOut = unchecked((uint)0x10),
        Rotate = unchecked((uint)0x20),
        FitPage = unchecked((uint)0x40),
        PageLayout = unchecked((uint)0x80),
        Bookmarks = unchecked((uint)0x100),
        PageSelector = unchecked((uint)0x200),
        Search = unchecked((uint)0x400),
        FullScreen = unchecked((uint)0x800),
        MoreSettings = unchecked((uint)0x1000),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2PermissionKind>))]public enum CoreWebView2PermissionKind : int
    {
        UnknownPermission = unchecked((int)0),
        Microphone = unchecked((int)0x1),
        Camera = unchecked((int)0x2),
        Geolocation = unchecked((int)0x3),
        Notifications = unchecked((int)0x4),
        OtherSensors = unchecked((int)0x5),
        ClipboardRead = unchecked((int)0x6),
        MultipleAutomaticDownloads = unchecked((int)0x7),
        FileReadWrite = unchecked((int)0x8),
        Autoplay = unchecked((int)0x9),
        LocalFonts = unchecked((int)0xa),
        MidiSystemExclusiveMessages = unchecked((int)0xb),
        WindowManagement = unchecked((int)0xc),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2PermissionRequestedEventArgs))]
    public sealed class CoreWebView2PermissionRequestedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2PermissionRequestedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs2;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PermissionRequestedEventArgs2Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs2;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs2 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs2 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs2();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs3;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs3()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs3, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PermissionRequestedEventArgs3Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs3;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs3 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs3 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs3();
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs => _inner;


        public static CoreWebView2PermissionRequestedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2PermissionRequestedEventArgs>.FromAbi(thisPtr);
        }

        internal CoreWebView2PermissionRequestedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PermissionRequestedEventArgsMethods.IID);

        }


        public static bool operator ==(CoreWebView2PermissionRequestedEventArgs x, CoreWebView2PermissionRequestedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2PermissionRequestedEventArgs x, CoreWebView2PermissionRequestedEventArgs y) => !(x == y);
        public bool Equals(CoreWebView2PermissionRequestedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2PermissionRequestedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.Deferral GetDeferral() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PermissionRequestedEventArgsMethods.GetDeferral(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs);

        public bool Handled
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PermissionRequestedEventArgs2Methods.get_Handled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs2);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PermissionRequestedEventArgs2Methods.set_Handled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs2, value);
        }

        public bool IsUserInitiated => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PermissionRequestedEventArgsMethods.get_IsUserInitiated(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs);

        public CoreWebView2PermissionKind PermissionKind => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PermissionRequestedEventArgsMethods.get_PermissionKind(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs);

        public bool SavesInProfile
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PermissionRequestedEventArgs3Methods.get_SavesInProfile(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs3);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PermissionRequestedEventArgs3Methods.set_SavesInProfile(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs3, value);
        }

        public CoreWebView2PermissionState State
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PermissionRequestedEventArgsMethods.get_State(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PermissionRequestedEventArgsMethods.set_State(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs, value);
        }

        public string Uri => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PermissionRequestedEventArgsMethods.get_Uri(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2PermissionSetting))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2PermissionSettingRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2PermissionSetting))]
    public sealed class CoreWebView2PermissionSetting : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2PermissionSetting>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PermissionSetting => _inner;


        public static CoreWebView2PermissionSetting FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2PermissionSetting>.FromAbi(thisPtr);
        }

        internal CoreWebView2PermissionSetting(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PermissionSettingMethods.IID);

        }


        public static bool operator ==(CoreWebView2PermissionSetting x, CoreWebView2PermissionSetting y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2PermissionSetting x, CoreWebView2PermissionSetting y) => !(x == y);
        public bool Equals(CoreWebView2PermissionSetting other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2PermissionSetting that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public CoreWebView2PermissionKind PermissionKind => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PermissionSettingMethods.get_PermissionKind(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PermissionSetting);

        public string PermissionOrigin => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PermissionSettingMethods.get_PermissionOrigin(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PermissionSetting);

        public CoreWebView2PermissionState PermissionState => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PermissionSettingMethods.get_PermissionState(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PermissionSetting);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2PermissionState>))]public enum CoreWebView2PermissionState : int
    {
        Default = unchecked((int)0),
        Allow = unchecked((int)0x1),
        Deny = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core", "struct(Microsoft.Web.WebView2.Core.CoreWebView2PhysicalKeyStatus;u4;u4;i4;i4;i4;i4)")][global::WinRT.WindowsRuntimeHelperType][global::WinRT.WinRTExposedType(typeof(global::WinRT.StructTypeDetails<CoreWebView2PhysicalKeyStatus, CoreWebView2PhysicalKeyStatus>))]public struct CoreWebView2PhysicalKeyStatus: IEquatable<CoreWebView2PhysicalKeyStatus>
    {
        public uint RepeatCount;
        public uint ScanCode;
        public int IsExtendedKey;
        public int IsMenuKeyDown;
        public int WasKeyDown;
        public int IsKeyReleased;

        public CoreWebView2PhysicalKeyStatus(uint _RepeatCount, uint _ScanCode, int _IsExtendedKey, int _IsMenuKeyDown, int _WasKeyDown, int _IsKeyReleased)
        {
            RepeatCount = _RepeatCount; ScanCode = _ScanCode; IsExtendedKey = _IsExtendedKey; IsMenuKeyDown = _IsMenuKeyDown; WasKeyDown = _WasKeyDown; IsKeyReleased = _IsKeyReleased; 
        }

        public static bool operator ==(CoreWebView2PhysicalKeyStatus x, CoreWebView2PhysicalKeyStatus y) => x.RepeatCount == y.RepeatCount && x.ScanCode == y.ScanCode && x.IsExtendedKey == y.IsExtendedKey && x.IsMenuKeyDown == y.IsMenuKeyDown && x.WasKeyDown == y.WasKeyDown && x.IsKeyReleased == y.IsKeyReleased;
        public static bool operator !=(CoreWebView2PhysicalKeyStatus x, CoreWebView2PhysicalKeyStatus y) => !(x == y);
        public bool Equals(CoreWebView2PhysicalKeyStatus other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2PhysicalKeyStatus that && this == that;
        public override int GetHashCode() => RepeatCount.GetHashCode() ^ ScanCode.GetHashCode() ^ IsExtendedKey.GetHashCode() ^ IsMenuKeyDown.GetHashCode() ^ WasKeyDown.GetHashCode() ^ IsKeyReleased.GetHashCode();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2PointerEventKind>))]public enum CoreWebView2PointerEventKind : int
    {
        Activate = unchecked((int)0x24b),
        Down = unchecked((int)0x246),
        Enter = unchecked((int)0x249),
        Leave = unchecked((int)0x24a),
        Up = unchecked((int)0x247),
        Update = unchecked((int)0x245),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2PointerInfoRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2PointerInfo))]
    public sealed class CoreWebView2PointerInfo : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2PointerInfo>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo => _inner;


        public static CoreWebView2PointerInfo FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2PointerInfo>.FromAbi(thisPtr);
        }

        internal CoreWebView2PointerInfo(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.IID);

        }


        public static bool operator ==(CoreWebView2PointerInfo x, CoreWebView2PointerInfo y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2PointerInfo x, CoreWebView2PointerInfo y) => !(x == y);
        public bool Equals(CoreWebView2PointerInfo other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2PointerInfo that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public int ButtonChangeKind
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.get_ButtonChangeKind(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.set_ButtonChangeKind(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo, value);
        }

        public global::Windows.Foundation.Rect DisplayRect
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.get_DisplayRect(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.set_DisplayRect(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo, value);
        }

        public uint FrameId
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.get_FrameId(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.set_FrameId(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo, value);
        }

        public global::Windows.Foundation.Point HimetricLocation
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.get_HimetricLocation(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.set_HimetricLocation(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo, value);
        }

        public global::Windows.Foundation.Point HimetricLocationRaw
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.get_HimetricLocationRaw(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.set_HimetricLocationRaw(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo, value);
        }

        public uint HistoryCount
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.get_HistoryCount(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.set_HistoryCount(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo, value);
        }

        public int InputData
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.get_InputData(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.set_InputData(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo, value);
        }

        public uint KeyStates
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.get_KeyStates(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.set_KeyStates(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo, value);
        }

        public uint PenFlags
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.get_PenFlags(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.set_PenFlags(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo, value);
        }

        public uint PenMask
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.get_PenMask(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.set_PenMask(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo, value);
        }

        public uint PenPressure
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.get_PenPressure(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.set_PenPressure(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo, value);
        }

        public uint PenRotation
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.get_PenRotation(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.set_PenRotation(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo, value);
        }

        public int PenTiltX
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.get_PenTiltX(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.set_PenTiltX(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo, value);
        }

        public int PenTiltY
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.get_PenTiltY(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.set_PenTiltY(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo, value);
        }

        public ulong PerformanceCount
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.get_PerformanceCount(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.set_PerformanceCount(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo, value);
        }

        public global::Windows.Foundation.Point PixelLocation
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.get_PixelLocation(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.set_PixelLocation(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo, value);
        }

        public global::Windows.Foundation.Point PixelLocationRaw
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.get_PixelLocationRaw(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.set_PixelLocationRaw(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo, value);
        }

        public global::Windows.Foundation.Rect PointerDeviceRect
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.get_PointerDeviceRect(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.set_PointerDeviceRect(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo, value);
        }

        public uint PointerFlags
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.get_PointerFlags(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.set_PointerFlags(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo, value);
        }

        public uint PointerId
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.get_PointerId(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.set_PointerId(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo, value);
        }

        public uint PointerKind
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.get_PointerKind(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.set_PointerKind(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo, value);
        }

        public uint Time
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.get_Time(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.set_Time(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo, value);
        }

        public global::Windows.Foundation.Rect TouchContact
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.get_TouchContact(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.set_TouchContact(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo, value);
        }

        public global::Windows.Foundation.Rect TouchContactRaw
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.get_TouchContactRaw(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.set_TouchContactRaw(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo, value);
        }

        public uint TouchFlags
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.get_TouchFlags(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.set_TouchFlags(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo, value);
        }

        public uint TouchMask
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.get_TouchMask(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.set_TouchMask(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo, value);
        }

        public uint TouchOrientation
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.get_TouchOrientation(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.set_TouchOrientation(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo, value);
        }

        public uint TouchPressure
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.get_TouchPressure(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.set_TouchPressure(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2PreferredColorScheme>))]public enum CoreWebView2PreferredColorScheme : int
    {
        Auto = unchecked((int)0),
        Light = unchecked((int)0x1),
        Dark = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2PrintCollation>))]public enum CoreWebView2PrintCollation : int
    {
        Default = unchecked((int)0),
        Collated = unchecked((int)0x1),
        Uncollated = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2PrintColorMode>))]public enum CoreWebView2PrintColorMode : int
    {
        Default = unchecked((int)0),
        Color = unchecked((int)0x1),
        Grayscale = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2PrintDialogKind>))]public enum CoreWebView2PrintDialogKind : int
    {
        Browser = unchecked((int)0),
        System = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2PrintDuplex>))]public enum CoreWebView2PrintDuplex : int
    {
        Default = unchecked((int)0),
        OneSided = unchecked((int)0x1),
        TwoSidedLongEdge = unchecked((int)0x2),
        TwoSidedShortEdge = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2PrintMediaSize>))]public enum CoreWebView2PrintMediaSize : int
    {
        Default = unchecked((int)0),
        Custom = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2PrintOrientation>))]public enum CoreWebView2PrintOrientation : int
    {
        Portrait = unchecked((int)0),
        Landscape = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2PrintSettingsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2PrintSettings))]
    public sealed class CoreWebView2PrintSettings : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2PrintSettings>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettings2Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2();
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings => _inner;


        public static CoreWebView2PrintSettings FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2PrintSettings>.FromAbi(thisPtr);
        }

        internal CoreWebView2PrintSettings(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettingsMethods.IID);

        }


        public static bool operator ==(CoreWebView2PrintSettings x, CoreWebView2PrintSettings y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2PrintSettings x, CoreWebView2PrintSettings y) => !(x == y);
        public bool Equals(CoreWebView2PrintSettings other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2PrintSettings that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public CoreWebView2PrintCollation Collation
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettings2Methods.get_Collation(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettings2Methods.set_Collation(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2, value);
        }

        public CoreWebView2PrintColorMode ColorMode
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettings2Methods.get_ColorMode(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettings2Methods.set_ColorMode(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2, value);
        }

        public int Copies
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettings2Methods.get_Copies(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettings2Methods.set_Copies(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2, value);
        }

        public CoreWebView2PrintDuplex Duplex
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettings2Methods.get_Duplex(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettings2Methods.set_Duplex(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2, value);
        }

        public string FooterUri
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettingsMethods.get_FooterUri(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettingsMethods.set_FooterUri(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings, value);
        }

        public string HeaderTitle
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettingsMethods.get_HeaderTitle(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettingsMethods.set_HeaderTitle(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings, value);
        }

        public double MarginBottom
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettingsMethods.get_MarginBottom(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettingsMethods.set_MarginBottom(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings, value);
        }

        public double MarginLeft
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettingsMethods.get_MarginLeft(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettingsMethods.set_MarginLeft(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings, value);
        }

        public double MarginRight
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettingsMethods.get_MarginRight(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettingsMethods.set_MarginRight(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings, value);
        }

        public double MarginTop
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettingsMethods.get_MarginTop(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettingsMethods.set_MarginTop(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings, value);
        }

        public CoreWebView2PrintMediaSize MediaSize
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettings2Methods.get_MediaSize(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettings2Methods.set_MediaSize(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2, value);
        }

        public CoreWebView2PrintOrientation Orientation
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettingsMethods.get_Orientation(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettingsMethods.set_Orientation(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings, value);
        }

        public double PageHeight
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettingsMethods.get_PageHeight(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettingsMethods.set_PageHeight(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings, value);
        }

        public string PageRanges
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettings2Methods.get_PageRanges(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettings2Methods.set_PageRanges(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2, value);
        }

        public double PageWidth
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettingsMethods.get_PageWidth(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettingsMethods.set_PageWidth(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings, value);
        }

        public int PagesPerSide
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettings2Methods.get_PagesPerSide(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettings2Methods.set_PagesPerSide(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2, value);
        }

        public string PrinterName
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettings2Methods.get_PrinterName(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettings2Methods.set_PrinterName(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2, value);
        }

        public double ScaleFactor
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettingsMethods.get_ScaleFactor(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettingsMethods.set_ScaleFactor(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings, value);
        }

        public bool ShouldPrintBackgrounds
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettingsMethods.get_ShouldPrintBackgrounds(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettingsMethods.set_ShouldPrintBackgrounds(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings, value);
        }

        public bool ShouldPrintHeaderAndFooter
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettingsMethods.get_ShouldPrintHeaderAndFooter(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettingsMethods.set_ShouldPrintHeaderAndFooter(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings, value);
        }

        public bool ShouldPrintSelectionOnly
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettingsMethods.get_ShouldPrintSelectionOnly(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettingsMethods.set_ShouldPrintSelectionOnly(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2PrintStatus>))]public enum CoreWebView2PrintStatus : int
    {
        Succeeded = unchecked((int)0),
        PrinterUnavailable = unchecked((int)0x1),
        OtherError = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ProcessExtendedInfo))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ProcessExtendedInfoRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2ProcessExtendedInfo))]
    public sealed class CoreWebView2ProcessExtendedInfo : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2ProcessExtendedInfo>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ProcessExtendedInfo => _inner;


        public static CoreWebView2ProcessExtendedInfo FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2ProcessExtendedInfo>.FromAbi(thisPtr);
        }

        internal CoreWebView2ProcessExtendedInfo(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProcessExtendedInfoMethods.IID);

        }


        public static bool operator ==(CoreWebView2ProcessExtendedInfo x, CoreWebView2ProcessExtendedInfo y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2ProcessExtendedInfo x, CoreWebView2ProcessExtendedInfo y) => !(x == y);
        public bool Equals(CoreWebView2ProcessExtendedInfo other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2ProcessExtendedInfo that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::System.Collections.Generic.IReadOnlyList<CoreWebView2FrameInfo> AssociatedFrameInfos => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProcessExtendedInfoMethods.get_AssociatedFrameInfos(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ProcessExtendedInfo);

        public CoreWebView2ProcessInfo ProcessInfo => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProcessExtendedInfoMethods.get_ProcessInfo(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ProcessExtendedInfo);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2ProcessFailedEventArgs))]
    public sealed class CoreWebView2ProcessFailedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2ProcessFailedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ProcessFailedEventArgs2;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ProcessFailedEventArgs2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ProcessFailedEventArgs2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProcessFailedEventArgs2Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ProcessFailedEventArgs2;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ProcessFailedEventArgs2 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ProcessFailedEventArgs2 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ProcessFailedEventArgs2();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ProcessFailedEventArgs3;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ProcessFailedEventArgs3()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ProcessFailedEventArgs3, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProcessFailedEventArgs3Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ProcessFailedEventArgs3;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ProcessFailedEventArgs3 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ProcessFailedEventArgs3 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ProcessFailedEventArgs3();
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ProcessFailedEventArgs => _inner;


        public static CoreWebView2ProcessFailedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2ProcessFailedEventArgs>.FromAbi(thisPtr);
        }

        internal CoreWebView2ProcessFailedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProcessFailedEventArgsMethods.IID);

        }


        public static bool operator ==(CoreWebView2ProcessFailedEventArgs x, CoreWebView2ProcessFailedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2ProcessFailedEventArgs x, CoreWebView2ProcessFailedEventArgs y) => !(x == y);
        public bool Equals(CoreWebView2ProcessFailedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2ProcessFailedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public int ExitCode => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProcessFailedEventArgs2Methods.get_ExitCode(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ProcessFailedEventArgs2);

        public string FailureSourceModulePath => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProcessFailedEventArgs3Methods.get_FailureSourceModulePath(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ProcessFailedEventArgs3);

        public global::System.Collections.Generic.IReadOnlyList<CoreWebView2FrameInfo> FrameInfosForFailedProcess => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProcessFailedEventArgs2Methods.get_FrameInfosForFailedProcess(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ProcessFailedEventArgs2);

        public string ProcessDescription => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProcessFailedEventArgs2Methods.get_ProcessDescription(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ProcessFailedEventArgs2);

        public CoreWebView2ProcessFailedKind ProcessFailedKind => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProcessFailedEventArgsMethods.get_ProcessFailedKind(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ProcessFailedEventArgs);

        public CoreWebView2ProcessFailedReason Reason => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProcessFailedEventArgs2Methods.get_Reason(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ProcessFailedEventArgs2);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2ProcessFailedKind>))]public enum CoreWebView2ProcessFailedKind : int
    {
        BrowserProcessExited = unchecked((int)0),
        RenderProcessExited = unchecked((int)0x1),
        RenderProcessUnresponsive = unchecked((int)0x2),
        FrameRenderProcessExited = unchecked((int)0x3),
        UtilityProcessExited = unchecked((int)0x4),
        SandboxHelperProcessExited = unchecked((int)0x5),
        GpuProcessExited = unchecked((int)0x6),
        PpapiPluginProcessExited = unchecked((int)0x7),
        PpapiBrokerProcessExited = unchecked((int)0x8),
        UnknownProcessExited = unchecked((int)0x9),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2ProcessFailedReason>))]public enum CoreWebView2ProcessFailedReason : int
    {
        Unexpected = unchecked((int)0),
        Unresponsive = unchecked((int)0x1),
        Terminated = unchecked((int)0x2),
        Crashed = unchecked((int)0x3),
        LaunchFailed = unchecked((int)0x4),
        OutOfMemory = unchecked((int)0x5),
        ProfileDeleted = unchecked((int)0x6),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ProcessInfo))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ProcessInfoRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2ProcessInfo))]
    public sealed class CoreWebView2ProcessInfo : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2ProcessInfo>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ProcessInfo => _inner;


        public static CoreWebView2ProcessInfo FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2ProcessInfo>.FromAbi(thisPtr);
        }

        internal CoreWebView2ProcessInfo(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProcessInfoMethods.IID);

        }


        public static bool operator ==(CoreWebView2ProcessInfo x, CoreWebView2ProcessInfo y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2ProcessInfo x, CoreWebView2ProcessInfo y) => !(x == y);
        public bool Equals(CoreWebView2ProcessInfo other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2ProcessInfo that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public CoreWebView2ProcessKind Kind => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProcessInfoMethods.get_Kind(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ProcessInfo);

        public int ProcessId => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProcessInfoMethods.get_ProcessId(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ProcessInfo);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2ProcessKind>))]public enum CoreWebView2ProcessKind : int
    {
        Browser = unchecked((int)0),
        Renderer = unchecked((int)0x1),
        Utility = unchecked((int)0x2),
        SandboxHelper = unchecked((int)0x3),
        Gpu = unchecked((int)0x4),
        PpapiPlugin = unchecked((int)0x5),
        PpapiBroker = unchecked((int)0x6),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Profile))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ProfileRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2Profile))]
    public sealed class CoreWebView2Profile : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2Profile>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Profile_Manual;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Profile_Manual()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Profile_Manual, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Profile_ManualMethods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Profile_Manual;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Profile_Manual => ___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Profile_Manual ?? Make___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Profile_Manual();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Profile_Manual2;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Profile_Manual2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Profile_Manual2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Profile_Manual2Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Profile_Manual2;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Profile_Manual2 => ___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Profile_Manual2 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Profile_Manual2();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Profile_Manual3;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Profile_Manual3()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Profile_Manual3, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Profile_Manual3Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Profile_Manual3;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Profile_Manual3 => ___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Profile_Manual3 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Profile_Manual3();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile2;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Profile2Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile2;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile2 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile2 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile2();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile3;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile3()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile3, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Profile3Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile3;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile3 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile3 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile3();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile4;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile4()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile4, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Profile4Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile4;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile4 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile4 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile4();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile5;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile5()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile5, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Profile5Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile5;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile5 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile5 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile5();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile6;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile6()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile6, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Profile6Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile6;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile6 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile6 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile6();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile7;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile7()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile7, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Profile7Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile7;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile7 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile7 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile7();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile8;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile8()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile8, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Profile8Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile8;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile8 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile8 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile8();
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile => _inner;


        public static CoreWebView2Profile FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2Profile>.FromAbi(thisPtr);
        }

        internal CoreWebView2Profile(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProfileMethods.IID);

        }


        public static bool operator ==(CoreWebView2Profile x, CoreWebView2Profile y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2Profile x, CoreWebView2Profile y) => !(x == y);
        public bool Equals(CoreWebView2Profile other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2Profile that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.IAsyncAction ClearBrowsingDataAsync(CoreWebView2BrowsingDataKinds dataKinds, global::System.DateTimeOffset startTime, global::System.DateTimeOffset endTime) => global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Profile_ManualMethods.ClearBrowsingDataAsync(_objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Profile_Manual, dataKinds, startTime, endTime);

        public global::Windows.Foundation.IAsyncAction ClearBrowsingDataAsync() => global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Profile_ManualMethods.ClearBrowsingDataAsync(_objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Profile_Manual);

        public global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<CoreWebView2PermissionSetting>> GetNonDefaultPermissionSettingsAsync() => global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Profile_Manual2Methods.GetNonDefaultPermissionSettingsAsync(_objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Profile_Manual2);

        public global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<CoreWebView2BrowserExtension>> GetBrowserExtensionsAsync() => global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Profile_Manual3Methods.GetBrowserExtensionsAsync(_objRef_global__Microsoft_Web_WebView2_Core_CoreWebView2Profile_Manual3);

        public global::Windows.Foundation.IAsyncAction ClearBrowsingDataAsync(CoreWebView2BrowsingDataKinds dataKinds) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Profile2Methods.ClearBrowsingDataAsync(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile2, dataKinds);

        public global::Windows.Foundation.IAsyncAction SetPermissionStateAsync(CoreWebView2PermissionKind PermissionKind, string origin, CoreWebView2PermissionState State) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Profile4Methods.SetPermissionStateAsync(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile4, PermissionKind, origin, State);

        public global::Windows.Foundation.IAsyncOperation<CoreWebView2BrowserExtension> AddBrowserExtensionAsync(string extensionFolderPath) => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Profile7Methods.AddBrowserExtensionAsync(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile7, extensionFolderPath);

        public void Delete() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Profile8Methods.Delete(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile8);

        public event global::Windows.Foundation.TypedEventHandler<CoreWebView2Profile, object> Deleted
        {
            add => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Profile8Methods.Get_Deleted2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile8, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Profile8Methods.Get_Deleted2(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile8, (IWinRTObject)this).Unsubscribe(value);
        }

        public CoreWebView2CookieManager CookieManager => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Profile5Methods.get_CookieManager(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile5);

        public string DefaultDownloadFolderPath
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProfileMethods.get_DefaultDownloadFolderPath(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProfileMethods.set_DefaultDownloadFolderPath(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile, value);
        }

        public bool IsGeneralAutofillEnabled
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Profile6Methods.get_IsGeneralAutofillEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile6);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Profile6Methods.set_IsGeneralAutofillEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile6, value);
        }

        public bool IsInPrivateModeEnabled => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProfileMethods.get_IsInPrivateModeEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile);

        public bool IsPasswordAutosaveEnabled
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Profile6Methods.get_IsPasswordAutosaveEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile6);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Profile6Methods.set_IsPasswordAutosaveEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile6, value);
        }

        public CoreWebView2PreferredColorScheme PreferredColorScheme
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProfileMethods.get_PreferredColorScheme(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProfileMethods.set_PreferredColorScheme(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile, value);
        }

        public CoreWebView2TrackingPreventionLevel PreferredTrackingPreventionLevel
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Profile3Methods.get_PreferredTrackingPreventionLevel(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile3);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Profile3Methods.set_PreferredTrackingPreventionLevel(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile3, value);
        }

        public string ProfileName => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProfileMethods.get_ProfileName(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile);

        public string ProfilePath => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProfileMethods.get_ProfilePath(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Profile);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("B42BFAB4-C4BF-5469-89AC-CADC69E3B0F5")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Profile_Manual))]
    internal interface CoreWebView2Profile_Manual
    {
        [global::Windows.Foundation.Metadata.Overload(@"ClearBrowsingDataAsync")]
        global::Windows.Foundation.IAsyncAction ClearBrowsingDataAsync(CoreWebView2BrowsingDataKinds dataKinds, global::System.DateTimeOffset startTime, global::System.DateTimeOffset endTime);
        [global::Windows.Foundation.Metadata.Overload(@"ClearBrowsingDataAsync2")]
        global::Windows.Foundation.IAsyncAction ClearBrowsingDataAsync();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("6E62815A-6269-5756-92C3-F08AFE17649C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Profile_Manual2))]
    internal interface CoreWebView2Profile_Manual2
    {
        global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<CoreWebView2PermissionSetting>> GetNonDefaultPermissionSettingsAsync();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("C6129971-9ECC-5634-8896-723C1DBACD6F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Profile_Manual3))]
    internal interface CoreWebView2Profile_Manual3
    {
        global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<CoreWebView2BrowserExtension>> GetBrowserExtensionsAsync();
    }
    [FlagsAttribute]
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2ReleaseChannels>))]public enum CoreWebView2ReleaseChannels : uint
    {
        None = unchecked((uint)0),
        Stable = unchecked((uint)0x1),
        Beta = unchecked((uint)0x2),
        Dev = unchecked((uint)0x4),
        Canary = unchecked((uint)0x8),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2SaveAsKind>))]public enum CoreWebView2SaveAsKind : int
    {
        Default = unchecked((int)0),
        HtmlOnly = unchecked((int)0x1),
        SingleFile = unchecked((int)0x2),
        Complete = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2SaveAsUIResult>))]public enum CoreWebView2SaveAsUIResult : int
    {
        Success = unchecked((int)0),
        InvalidPath = unchecked((int)0x1),
        FileAlreadyExists = unchecked((int)0x2),
        KindNotSupported = unchecked((int)0x3),
        Cancelled = unchecked((int)0x4),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2SaveAsUIShowingEventArgs))]
    public sealed class CoreWebView2SaveAsUIShowingEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2SaveAsUIShowingEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SaveAsUIShowingEventArgs => _inner;


        public static CoreWebView2SaveAsUIShowingEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2SaveAsUIShowingEventArgs>.FromAbi(thisPtr);
        }

        internal CoreWebView2SaveAsUIShowingEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SaveAsUIShowingEventArgsMethods.IID);

        }


        public static bool operator ==(CoreWebView2SaveAsUIShowingEventArgs x, CoreWebView2SaveAsUIShowingEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2SaveAsUIShowingEventArgs x, CoreWebView2SaveAsUIShowingEventArgs y) => !(x == y);
        public bool Equals(CoreWebView2SaveAsUIShowingEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2SaveAsUIShowingEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.Deferral GetDeferral() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SaveAsUIShowingEventArgsMethods.GetDeferral(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SaveAsUIShowingEventArgs);

        public bool AllowReplace
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SaveAsUIShowingEventArgsMethods.get_AllowReplace(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SaveAsUIShowingEventArgs);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SaveAsUIShowingEventArgsMethods.set_AllowReplace(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SaveAsUIShowingEventArgs, value);
        }

        public bool Cancel
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SaveAsUIShowingEventArgsMethods.get_Cancel(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SaveAsUIShowingEventArgs);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SaveAsUIShowingEventArgsMethods.set_Cancel(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SaveAsUIShowingEventArgs, value);
        }

        public string ContentMimeType => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SaveAsUIShowingEventArgsMethods.get_ContentMimeType(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SaveAsUIShowingEventArgs);

        public CoreWebView2SaveAsKind Kind
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SaveAsUIShowingEventArgsMethods.get_Kind(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SaveAsUIShowingEventArgs);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SaveAsUIShowingEventArgsMethods.set_Kind(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SaveAsUIShowingEventArgs, value);
        }

        public string SaveAsFilePath
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SaveAsUIShowingEventArgsMethods.get_SaveAsFilePath(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SaveAsUIShowingEventArgs);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SaveAsUIShowingEventArgsMethods.set_SaveAsFilePath(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SaveAsUIShowingEventArgs, value);
        }

        public bool SuppressDefaultDialog
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SaveAsUIShowingEventArgsMethods.get_SuppressDefaultDialog(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SaveAsUIShowingEventArgs);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SaveAsUIShowingEventArgsMethods.set_SuppressDefaultDialog(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SaveAsUIShowingEventArgs, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2SaveFileSecurityCheckStartingEventArgs))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2SaveFileSecurityCheckStartingEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2SaveFileSecurityCheckStartingEventArgs))]
    public sealed class CoreWebView2SaveFileSecurityCheckStartingEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2SaveFileSecurityCheckStartingEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SaveFileSecurityCheckStartingEventArgs => _inner;


        public static CoreWebView2SaveFileSecurityCheckStartingEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2SaveFileSecurityCheckStartingEventArgs>.FromAbi(thisPtr);
        }

        internal CoreWebView2SaveFileSecurityCheckStartingEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SaveFileSecurityCheckStartingEventArgsMethods.IID);

        }


        public static bool operator ==(CoreWebView2SaveFileSecurityCheckStartingEventArgs x, CoreWebView2SaveFileSecurityCheckStartingEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2SaveFileSecurityCheckStartingEventArgs x, CoreWebView2SaveFileSecurityCheckStartingEventArgs y) => !(x == y);
        public bool Equals(CoreWebView2SaveFileSecurityCheckStartingEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2SaveFileSecurityCheckStartingEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.Deferral GetDeferral() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SaveFileSecurityCheckStartingEventArgsMethods.GetDeferral(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SaveFileSecurityCheckStartingEventArgs);

        public bool CancelSave
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SaveFileSecurityCheckStartingEventArgsMethods.get_CancelSave(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SaveFileSecurityCheckStartingEventArgs);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SaveFileSecurityCheckStartingEventArgsMethods.set_CancelSave(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SaveFileSecurityCheckStartingEventArgs, value);
        }

        public string DocumentOriginUri => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SaveFileSecurityCheckStartingEventArgsMethods.get_DocumentOriginUri(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SaveFileSecurityCheckStartingEventArgs);

        public string FileExtension => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SaveFileSecurityCheckStartingEventArgsMethods.get_FileExtension(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SaveFileSecurityCheckStartingEventArgs);

        public string FilePath => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SaveFileSecurityCheckStartingEventArgsMethods.get_FilePath(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SaveFileSecurityCheckStartingEventArgs);

        public bool SuppressDefaultPolicy
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SaveFileSecurityCheckStartingEventArgsMethods.get_SuppressDefaultPolicy(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SaveFileSecurityCheckStartingEventArgs);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SaveFileSecurityCheckStartingEventArgsMethods.set_SuppressDefaultPolicy(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SaveFileSecurityCheckStartingEventArgs, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ScreenCaptureStartingEventArgs))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ScreenCaptureStartingEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2ScreenCaptureStartingEventArgs))]
    public sealed class CoreWebView2ScreenCaptureStartingEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2ScreenCaptureStartingEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ScreenCaptureStartingEventArgs => _inner;


        public static CoreWebView2ScreenCaptureStartingEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2ScreenCaptureStartingEventArgs>.FromAbi(thisPtr);
        }

        internal CoreWebView2ScreenCaptureStartingEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ScreenCaptureStartingEventArgsMethods.IID);

        }


        public static bool operator ==(CoreWebView2ScreenCaptureStartingEventArgs x, CoreWebView2ScreenCaptureStartingEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2ScreenCaptureStartingEventArgs x, CoreWebView2ScreenCaptureStartingEventArgs y) => !(x == y);
        public bool Equals(CoreWebView2ScreenCaptureStartingEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2ScreenCaptureStartingEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.Deferral GetDeferral() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ScreenCaptureStartingEventArgsMethods.GetDeferral(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ScreenCaptureStartingEventArgs);

        public bool Cancel
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ScreenCaptureStartingEventArgsMethods.get_Cancel(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ScreenCaptureStartingEventArgs);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ScreenCaptureStartingEventArgsMethods.set_Cancel(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ScreenCaptureStartingEventArgs, value);
        }

        public bool Handled
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ScreenCaptureStartingEventArgsMethods.get_Handled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ScreenCaptureStartingEventArgs);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ScreenCaptureStartingEventArgsMethods.set_Handled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ScreenCaptureStartingEventArgs, value);
        }

        public CoreWebView2FrameInfo OriginalSourceFrameInfo => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ScreenCaptureStartingEventArgsMethods.get_OriginalSourceFrameInfo(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ScreenCaptureStartingEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2ScriptDialogKind>))]public enum CoreWebView2ScriptDialogKind : int
    {
        Alert = unchecked((int)0),
        Confirm = unchecked((int)0x1),
        Prompt = unchecked((int)0x2),
        Beforeunload = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2ScriptDialogOpeningEventArgs))]
    public sealed class CoreWebView2ScriptDialogOpeningEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2ScriptDialogOpeningEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ScriptDialogOpeningEventArgs => _inner;


        public static CoreWebView2ScriptDialogOpeningEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2ScriptDialogOpeningEventArgs>.FromAbi(thisPtr);
        }

        internal CoreWebView2ScriptDialogOpeningEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ScriptDialogOpeningEventArgsMethods.IID);

        }


        public static bool operator ==(CoreWebView2ScriptDialogOpeningEventArgs x, CoreWebView2ScriptDialogOpeningEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2ScriptDialogOpeningEventArgs x, CoreWebView2ScriptDialogOpeningEventArgs y) => !(x == y);
        public bool Equals(CoreWebView2ScriptDialogOpeningEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2ScriptDialogOpeningEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void Accept() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ScriptDialogOpeningEventArgsMethods.Accept(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ScriptDialogOpeningEventArgs);

        public global::Windows.Foundation.Deferral GetDeferral() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ScriptDialogOpeningEventArgsMethods.GetDeferral(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ScriptDialogOpeningEventArgs);

        public string DefaultText => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ScriptDialogOpeningEventArgsMethods.get_DefaultText(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ScriptDialogOpeningEventArgs);

        public CoreWebView2ScriptDialogKind Kind => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ScriptDialogOpeningEventArgsMethods.get_Kind(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ScriptDialogOpeningEventArgs);

        public string Message => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ScriptDialogOpeningEventArgsMethods.get_Message(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ScriptDialogOpeningEventArgs);

        public string ResultText
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ScriptDialogOpeningEventArgsMethods.get_ResultText(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ScriptDialogOpeningEventArgs);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ScriptDialogOpeningEventArgsMethods.set_ResultText(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ScriptDialogOpeningEventArgs, value);
        }

        public string Uri => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ScriptDialogOpeningEventArgsMethods.get_Uri(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ScriptDialogOpeningEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ScriptException))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ScriptExceptionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2ScriptException))]
    public sealed class CoreWebView2ScriptException : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2ScriptException>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ScriptException => _inner;


        public static CoreWebView2ScriptException FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2ScriptException>.FromAbi(thisPtr);
        }

        internal CoreWebView2ScriptException(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ScriptExceptionMethods.IID);

        }


        public static bool operator ==(CoreWebView2ScriptException x, CoreWebView2ScriptException y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2ScriptException x, CoreWebView2ScriptException y) => !(x == y);
        public bool Equals(CoreWebView2ScriptException other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2ScriptException that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public uint ColumnNumber => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ScriptExceptionMethods.get_ColumnNumber(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ScriptException);

        public uint LineNumber => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ScriptExceptionMethods.get_LineNumber(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ScriptException);

        public string Message => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ScriptExceptionMethods.get_Message(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ScriptException);

        public string Name => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ScriptExceptionMethods.get_Name(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ScriptException);

        public string ToJson => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ScriptExceptionMethods.get_ToJson(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ScriptException);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2ScrollbarStyle>))]public enum CoreWebView2ScrollbarStyle : int
    {
        Default = unchecked((int)0),
        FluentOverlay = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2ServerCertificateErrorAction>))]public enum CoreWebView2ServerCertificateErrorAction : int
    {
        AlwaysAllow = unchecked((int)0),
        Cancel = unchecked((int)0x1),
        Default = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgs))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2ServerCertificateErrorDetectedEventArgs))]
    public sealed class CoreWebView2ServerCertificateErrorDetectedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2ServerCertificateErrorDetectedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ServerCertificateErrorDetectedEventArgs => _inner;


        public static CoreWebView2ServerCertificateErrorDetectedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2ServerCertificateErrorDetectedEventArgs>.FromAbi(thisPtr);
        }

        internal CoreWebView2ServerCertificateErrorDetectedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ServerCertificateErrorDetectedEventArgsMethods.IID);

        }


        public static bool operator ==(CoreWebView2ServerCertificateErrorDetectedEventArgs x, CoreWebView2ServerCertificateErrorDetectedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2ServerCertificateErrorDetectedEventArgs x, CoreWebView2ServerCertificateErrorDetectedEventArgs y) => !(x == y);
        public bool Equals(CoreWebView2ServerCertificateErrorDetectedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2ServerCertificateErrorDetectedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.Deferral GetDeferral() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ServerCertificateErrorDetectedEventArgsMethods.GetDeferral(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ServerCertificateErrorDetectedEventArgs);

        public CoreWebView2ServerCertificateErrorAction Action
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ServerCertificateErrorDetectedEventArgsMethods.get_Action(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ServerCertificateErrorDetectedEventArgs);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ServerCertificateErrorDetectedEventArgsMethods.set_Action(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ServerCertificateErrorDetectedEventArgs, value);
        }

        public CoreWebView2WebErrorStatus ErrorStatus => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ServerCertificateErrorDetectedEventArgsMethods.get_ErrorStatus(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ServerCertificateErrorDetectedEventArgs);

        public string RequestUri => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ServerCertificateErrorDetectedEventArgsMethods.get_RequestUri(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ServerCertificateErrorDetectedEventArgs);

        public CoreWebView2Certificate ServerCertificate => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ServerCertificateErrorDetectedEventArgsMethods.get_ServerCertificate(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2ServerCertificateErrorDetectedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Settings))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2SettingsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2Settings))]
    public sealed class CoreWebView2Settings : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2Settings>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings2;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings2Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings2;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings2 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings2 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings2();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings3;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings3()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings3, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings3Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings3;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings3 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings3 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings3();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings4;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings4()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings4, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings4Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings4;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings4 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings4 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings4();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings5;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings5()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings5, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings5Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings5;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings5 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings5 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings5();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings6;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings6()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings6, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings6Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings6;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings6 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings6 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings6();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings7;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings7()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings7, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings7Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings7;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings7 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings7 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings7();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings8;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings8()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings8, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings8Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings8;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings8 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings8 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings8();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings9;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings9()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings9, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings9Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings9;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings9 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings9 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings9();

        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings_Manual;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings_Manual()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings_Manual, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings_ManualMethods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings_Manual;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings_Manual => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings_Manual ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings_Manual();
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings => _inner;


        public static CoreWebView2Settings FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2Settings>.FromAbi(thisPtr);
        }

        internal CoreWebView2Settings(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SettingsMethods.IID);

        }


        public static bool operator ==(CoreWebView2Settings x, CoreWebView2Settings y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2Settings x, CoreWebView2Settings y) => !(x == y);
        public bool Equals(CoreWebView2Settings other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2Settings that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool AreBrowserAcceleratorKeysEnabled
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings3Methods.get_AreBrowserAcceleratorKeysEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings3);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings3Methods.set_AreBrowserAcceleratorKeysEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings3, value);
        }

        public bool AreDefaultContextMenusEnabled
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SettingsMethods.get_AreDefaultContextMenusEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SettingsMethods.set_AreDefaultContextMenusEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings, value);
        }

        public bool AreDefaultScriptDialogsEnabled
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SettingsMethods.get_AreDefaultScriptDialogsEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SettingsMethods.set_AreDefaultScriptDialogsEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings, value);
        }

        public bool AreDevToolsEnabled
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SettingsMethods.get_AreDevToolsEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SettingsMethods.set_AreDevToolsEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings, value);
        }

        public bool AreHostObjectsAllowed
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SettingsMethods.get_AreHostObjectsAllowed(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SettingsMethods.set_AreHostObjectsAllowed(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings, value);
        }

        public CoreWebView2PdfToolbarItems HiddenPdfToolbarItems
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings7Methods.get_HiddenPdfToolbarItems(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings7);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings7Methods.set_HiddenPdfToolbarItems(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings7, value);
        }

        public ICoreWebView2DispatchAdapter HostObjectDispatchAdapter
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings_ManualMethods.get_HostObjectDispatchAdapter(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings_Manual);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings_ManualMethods.set_HostObjectDispatchAdapter(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings_Manual, value);
        }

        public bool IsBuiltInErrorPageEnabled
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SettingsMethods.get_IsBuiltInErrorPageEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SettingsMethods.set_IsBuiltInErrorPageEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings, value);
        }

        public bool IsGeneralAutofillEnabled
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings4Methods.get_IsGeneralAutofillEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings4);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings4Methods.set_IsGeneralAutofillEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings4, value);
        }

        public bool IsNonClientRegionSupportEnabled
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings9Methods.get_IsNonClientRegionSupportEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings9);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings9Methods.set_IsNonClientRegionSupportEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings9, value);
        }

        public bool IsPasswordAutosaveEnabled
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings4Methods.get_IsPasswordAutosaveEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings4);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings4Methods.set_IsPasswordAutosaveEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings4, value);
        }

        public bool IsPinchZoomEnabled
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings5Methods.get_IsPinchZoomEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings5);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings5Methods.set_IsPinchZoomEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings5, value);
        }

        public bool IsReputationCheckingRequired
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings8Methods.get_IsReputationCheckingRequired(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings8);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings8Methods.set_IsReputationCheckingRequired(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings8, value);
        }

        public bool IsScriptEnabled
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SettingsMethods.get_IsScriptEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SettingsMethods.set_IsScriptEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings, value);
        }

        public bool IsStatusBarEnabled
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SettingsMethods.get_IsStatusBarEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SettingsMethods.set_IsStatusBarEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings, value);
        }

        public bool IsSwipeNavigationEnabled
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings6Methods.get_IsSwipeNavigationEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings6);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings6Methods.set_IsSwipeNavigationEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings6, value);
        }

        public bool IsWebMessageEnabled
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SettingsMethods.get_IsWebMessageEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SettingsMethods.set_IsWebMessageEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings, value);
        }

        public bool IsZoomControlEnabled
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SettingsMethods.get_IsZoomControlEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SettingsMethods.set_IsZoomControlEnabled(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings, value);
        }

        public string UserAgent
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings2Methods.get_UserAgent(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings2);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings2Methods.set_UserAgent(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2Settings2, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2SharedBufferRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2SharedBuffer))]
    public sealed class CoreWebView2SharedBuffer : global::System.IDisposable, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2SharedBuffer>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SharedBuffer_Manual;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SharedBuffer_Manual()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SharedBuffer_Manual, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SharedBuffer_ManualMethods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SharedBuffer_Manual;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SharedBuffer_Manual => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SharedBuffer_Manual ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SharedBuffer_Manual();
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SharedBuffer => _inner;
        private volatile IObjectReference ___objRef_global__System_IDisposable;
        private IObjectReference Make___objRef_global__System_IDisposable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_IDisposable, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.IDisposableMethods.IID), null);
            return ___objRef_global__System_IDisposable;
        }
        private IObjectReference _objRef_global__System_IDisposable => ___objRef_global__System_IDisposable ?? Make___objRef_global__System_IDisposable();



        public static CoreWebView2SharedBuffer FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2SharedBuffer>.FromAbi(thisPtr);
        }

        internal CoreWebView2SharedBuffer(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SharedBufferMethods.IID);

        }


        public static bool operator ==(CoreWebView2SharedBuffer x, CoreWebView2SharedBuffer y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2SharedBuffer x, CoreWebView2SharedBuffer y) => !(x == y);
        public bool Equals(CoreWebView2SharedBuffer other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2SharedBuffer that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Storage.Streams.IRandomAccessStream OpenStream() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SharedBufferMethods.OpenStream(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SharedBuffer);

        public void Dispose() => global::ABI.System.IDisposableMethods.Dispose(_objRef_global__System_IDisposable);

        public global::Windows.Foundation.IMemoryBufferReference Buffer => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SharedBuffer_ManualMethods.get_Buffer(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SharedBuffer_Manual);

        public ulong Size => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SharedBufferMethods.get_Size(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SharedBuffer);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2SharedBufferAccess>))]public enum CoreWebView2SharedBufferAccess : int
    {
        ReadOnly = unchecked((int)0),
        ReadWrite = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2SourceChangedEventArgs))]
    public sealed class CoreWebView2SourceChangedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2SourceChangedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SourceChangedEventArgs => _inner;


        public static CoreWebView2SourceChangedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2SourceChangedEventArgs>.FromAbi(thisPtr);
        }

        internal CoreWebView2SourceChangedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SourceChangedEventArgsMethods.IID);

        }


        public static bool operator ==(CoreWebView2SourceChangedEventArgs x, CoreWebView2SourceChangedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2SourceChangedEventArgs x, CoreWebView2SourceChangedEventArgs y) => !(x == y);
        public bool Equals(CoreWebView2SourceChangedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2SourceChangedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool IsNewDocument => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SourceChangedEventArgsMethods.get_IsNewDocument(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2SourceChangedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2TextDirectionKind>))]public enum CoreWebView2TextDirectionKind : int
    {
        Default = unchecked((int)0),
        LeftToRight = unchecked((int)0x1),
        RightToLeft = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2TrackingPreventionLevel>))]public enum CoreWebView2TrackingPreventionLevel : int
    {
        None = unchecked((int)0),
        Basic = unchecked((int)0x1),
        Balanced = unchecked((int)0x2),
        Strict = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2WebErrorStatus>))]public enum CoreWebView2WebErrorStatus : int
    {
        Unknown = unchecked((int)0),
        CertificateCommonNameIsIncorrect = unchecked((int)0x1),
        CertificateExpired = unchecked((int)0x2),
        ClientCertificateContainsErrors = unchecked((int)0x3),
        CertificateRevoked = unchecked((int)0x4),
        CertificateIsInvalid = unchecked((int)0x5),
        ServerUnreachable = unchecked((int)0x6),
        Timeout = unchecked((int)0x7),
        ErrorHttpInvalidServerResponse = unchecked((int)0x8),
        ConnectionAborted = unchecked((int)0x9),
        ConnectionReset = unchecked((int)0xa),
        Disconnected = unchecked((int)0xb),
        CannotConnect = unchecked((int)0xc),
        HostNameNotResolved = unchecked((int)0xd),
        OperationCanceled = unchecked((int)0xe),
        RedirectFailed = unchecked((int)0xf),
        UnexpectedError = unchecked((int)0x10),
        ValidAuthenticationCredentialsRequired = unchecked((int)0x11),
        ValidProxyAuthenticationRequired = unchecked((int)0x12),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2WebMessageReceivedEventArgs))]
    public sealed class CoreWebView2WebMessageReceivedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2WebMessageReceivedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebMessageReceivedEventArgs2;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebMessageReceivedEventArgs2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebMessageReceivedEventArgs2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebMessageReceivedEventArgs2Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebMessageReceivedEventArgs2;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebMessageReceivedEventArgs2 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebMessageReceivedEventArgs2 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebMessageReceivedEventArgs2();
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebMessageReceivedEventArgs => _inner;


        public static CoreWebView2WebMessageReceivedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2WebMessageReceivedEventArgs>.FromAbi(thisPtr);
        }

        internal CoreWebView2WebMessageReceivedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebMessageReceivedEventArgsMethods.IID);

        }


        public static bool operator ==(CoreWebView2WebMessageReceivedEventArgs x, CoreWebView2WebMessageReceivedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2WebMessageReceivedEventArgs x, CoreWebView2WebMessageReceivedEventArgs y) => !(x == y);
        public bool Equals(CoreWebView2WebMessageReceivedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2WebMessageReceivedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public string TryGetWebMessageAsString() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebMessageReceivedEventArgsMethods.TryGetWebMessageAsString(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebMessageReceivedEventArgs);

        public global::System.Collections.Generic.IReadOnlyList<object> AdditionalObjects => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebMessageReceivedEventArgs2Methods.get_AdditionalObjects(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebMessageReceivedEventArgs2);

        public string Source => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebMessageReceivedEventArgsMethods.get_Source(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebMessageReceivedEventArgs);

        public string WebMessageAsJson => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebMessageReceivedEventArgsMethods.get_WebMessageAsJson(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebMessageReceivedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2WebResourceContext>))]public enum CoreWebView2WebResourceContext : int
    {
        All = unchecked((int)0),
        Document = unchecked((int)0x1),
        Stylesheet = unchecked((int)0x2),
        Image = unchecked((int)0x3),
        Media = unchecked((int)0x4),
        Font = unchecked((int)0x5),
        Script = unchecked((int)0x6),
        XmlHttpRequest = unchecked((int)0x7),
        Fetch = unchecked((int)0x8),
        TextTrack = unchecked((int)0x9),
        EventSource = unchecked((int)0xa),
        Websocket = unchecked((int)0xb),
        Manifest = unchecked((int)0xc),
        SignedExchange = unchecked((int)0xd),
        Ping = unchecked((int)0xe),
        CspViolationReport = unchecked((int)0xf),
        Other = unchecked((int)0x10),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2WebResourceRequest))]
    public sealed class CoreWebView2WebResourceRequest : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2WebResourceRequest>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequest => _inner;


        public static CoreWebView2WebResourceRequest FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2WebResourceRequest>.FromAbi(thisPtr);
        }

        internal CoreWebView2WebResourceRequest(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceRequestMethods.IID);

        }


        public static bool operator ==(CoreWebView2WebResourceRequest x, CoreWebView2WebResourceRequest y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2WebResourceRequest x, CoreWebView2WebResourceRequest y) => !(x == y);
        public bool Equals(CoreWebView2WebResourceRequest other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2WebResourceRequest that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Storage.Streams.IRandomAccessStream Content
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceRequestMethods.get_Content(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequest);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceRequestMethods.set_Content(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequest, value);
        }

        public CoreWebView2HttpRequestHeaders Headers => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceRequestMethods.get_Headers(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequest);

        public string Method
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceRequestMethods.get_Method(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequest);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceRequestMethods.set_Method(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequest, value);
        }

        public string Uri
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceRequestMethods.get_Uri(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequest);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceRequestMethods.set_Uri(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequest, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [FlagsAttribute]
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CoreWebView2WebResourceRequestSourceKinds>))]public enum CoreWebView2WebResourceRequestSourceKinds : uint
    {
        None = unchecked((uint)0),
        Document = unchecked((uint)0x1),
        SharedWorker = unchecked((uint)0x2),
        ServiceWorker = unchecked((uint)0x4),
        All = unchecked((uint)0xffffffff),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2WebResourceRequestedEventArgs))]
    public sealed class CoreWebView2WebResourceRequestedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2WebResourceRequestedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequestedEventArgs2;
        private IObjectReference Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequestedEventArgs2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequestedEventArgs2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceRequestedEventArgs2Methods.IID), null);
            return ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequestedEventArgs2;
        }
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequestedEventArgs2 => ___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequestedEventArgs2 ?? Make___objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequestedEventArgs2();
        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequestedEventArgs => _inner;


        public static CoreWebView2WebResourceRequestedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2WebResourceRequestedEventArgs>.FromAbi(thisPtr);
        }

        internal CoreWebView2WebResourceRequestedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceRequestedEventArgsMethods.IID);

        }


        public static bool operator ==(CoreWebView2WebResourceRequestedEventArgs x, CoreWebView2WebResourceRequestedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2WebResourceRequestedEventArgs x, CoreWebView2WebResourceRequestedEventArgs y) => !(x == y);
        public bool Equals(CoreWebView2WebResourceRequestedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2WebResourceRequestedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.Deferral GetDeferral() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceRequestedEventArgsMethods.GetDeferral(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequestedEventArgs);

        public CoreWebView2WebResourceRequest Request => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceRequestedEventArgsMethods.get_Request(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequestedEventArgs);

        public CoreWebView2WebResourceRequestSourceKinds RequestedSourceKind => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceRequestedEventArgs2Methods.get_RequestedSourceKind(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequestedEventArgs2);

        public CoreWebView2WebResourceContext ResourceContext => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceRequestedEventArgsMethods.get_ResourceContext(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequestedEventArgs);

        public CoreWebView2WebResourceResponse Response
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceRequestedEventArgsMethods.get_Response(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequestedEventArgs);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceRequestedEventArgsMethods.set_Response(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequestedEventArgs, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2WebResourceResponse))]
    public sealed class CoreWebView2WebResourceResponse : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2WebResourceResponse>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponse => _inner;


        public static CoreWebView2WebResourceResponse FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2WebResourceResponse>.FromAbi(thisPtr);
        }

        internal CoreWebView2WebResourceResponse(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponseMethods.IID);

        }


        public static bool operator ==(CoreWebView2WebResourceResponse x, CoreWebView2WebResourceResponse y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2WebResourceResponse x, CoreWebView2WebResourceResponse y) => !(x == y);
        public bool Equals(CoreWebView2WebResourceResponse other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2WebResourceResponse that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Storage.Streams.IRandomAccessStream Content
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponseMethods.get_Content(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponse);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponseMethods.set_Content(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponse, value);
        }

        public CoreWebView2HttpResponseHeaders Headers => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponseMethods.get_Headers(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponse);

        public string ReasonPhrase
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponseMethods.get_ReasonPhrase(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponse);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponseMethods.set_ReasonPhrase(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponse, value);
        }

        public int StatusCode
        {
            get => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponseMethods.get_StatusCode(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponse);
            set => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponseMethods.set_StatusCode(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponse, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseReceivedEventArgs))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseReceivedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2WebResourceResponseReceivedEventArgs))]
    public sealed class CoreWebView2WebResourceResponseReceivedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2WebResourceResponseReceivedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponseReceivedEventArgs => _inner;


        public static CoreWebView2WebResourceResponseReceivedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2WebResourceResponseReceivedEventArgs>.FromAbi(thisPtr);
        }

        internal CoreWebView2WebResourceResponseReceivedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponseReceivedEventArgsMethods.IID);

        }


        public static bool operator ==(CoreWebView2WebResourceResponseReceivedEventArgs x, CoreWebView2WebResourceResponseReceivedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2WebResourceResponseReceivedEventArgs x, CoreWebView2WebResourceResponseReceivedEventArgs y) => !(x == y);
        public bool Equals(CoreWebView2WebResourceResponseReceivedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2WebResourceResponseReceivedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public CoreWebView2WebResourceRequest Request => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponseReceivedEventArgsMethods.get_Request(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponseReceivedEventArgs);

        public CoreWebView2WebResourceResponseView Response => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponseReceivedEventArgsMethods.get_Response(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponseReceivedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseView))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseViewRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2WebResourceResponseView))]
    public sealed class CoreWebView2WebResourceResponseView : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2WebResourceResponseView>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponseView => _inner;


        public static CoreWebView2WebResourceResponseView FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2WebResourceResponseView>.FromAbi(thisPtr);
        }

        internal CoreWebView2WebResourceResponseView(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponseViewMethods.IID);

        }


        public static bool operator ==(CoreWebView2WebResourceResponseView x, CoreWebView2WebResourceResponseView y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2WebResourceResponseView x, CoreWebView2WebResourceResponseView y) => !(x == y);
        public bool Equals(CoreWebView2WebResourceResponseView other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2WebResourceResponseView that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.Streams.IRandomAccessStream> GetContentAsync() => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponseViewMethods.GetContentAsync(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponseView);

        public CoreWebView2HttpResponseHeaders Headers => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponseViewMethods.get_Headers(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponseView);

        public string ReasonPhrase => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponseViewMethods.get_ReasonPhrase(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponseView);

        public int StatusCode => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponseViewMethods.get_StatusCode(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponseView);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures))]
    [global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2WindowFeaturesRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICoreWebView2WindowFeatures))]
    public sealed class CoreWebView2WindowFeatures : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CoreWebView2WindowFeatures>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WindowFeatures => _inner;


        public static CoreWebView2WindowFeatures FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CoreWebView2WindowFeatures>.FromAbi(thisPtr);
        }

        internal CoreWebView2WindowFeatures(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WindowFeaturesMethods.IID);

        }


        public static bool operator ==(CoreWebView2WindowFeatures x, CoreWebView2WindowFeatures y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CoreWebView2WindowFeatures x, CoreWebView2WindowFeatures y) => !(x == y);
        public bool Equals(CoreWebView2WindowFeatures other) => this == other;
        public override bool Equals(object obj) => obj is CoreWebView2WindowFeatures that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool HasPosition => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WindowFeaturesMethods.get_HasPosition(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WindowFeatures);

        public bool HasSize => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WindowFeaturesMethods.get_HasSize(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WindowFeatures);

        public uint Height => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WindowFeaturesMethods.get_Height(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WindowFeatures);

        public uint Left => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WindowFeaturesMethods.get_Left(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WindowFeatures);

        public bool ShouldDisplayMenuBar => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WindowFeaturesMethods.get_ShouldDisplayMenuBar(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WindowFeatures);

        public bool ShouldDisplayScrollBars => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WindowFeaturesMethods.get_ShouldDisplayScrollBars(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WindowFeatures);

        public bool ShouldDisplayStatus => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WindowFeaturesMethods.get_ShouldDisplayStatus(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WindowFeatures);

        public bool ShouldDisplayToolbar => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WindowFeaturesMethods.get_ShouldDisplayToolbar(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WindowFeatures);

        public uint Top => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WindowFeaturesMethods.get_Top(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WindowFeatures);

        public uint Width => global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WindowFeaturesMethods.get_Width(_objRef_global__Microsoft_Web_WebView2_Core_ICoreWebView2WindowFeatures);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("3A3F559A-E5E9-5338-BB67-4EB0504A4F14")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2))]
    internal interface ICoreWebView2
    {
        void Navigate(string uri);
        void NavigateToString(string htmlContent);
        global::Windows.Foundation.IAsyncOperation<string> AddScriptToExecuteOnDocumentCreatedAsync(string javaScript);
        void RemoveScriptToExecuteOnDocumentCreated(string id);
        global::Windows.Foundation.IAsyncOperation<string> ExecuteScriptAsync(string javaScript);
        global::Windows.Foundation.IAsyncAction CapturePreviewAsync(CoreWebView2CapturePreviewImageFormat imageFormat, global::Windows.Storage.Streams.IRandomAccessStream imageStream);
        void Reload();
        void PostWebMessageAsJson(string webMessageAsJson);
        void PostWebMessageAsString(string webMessageAsString);
        global::Windows.Foundation.IAsyncOperation<string> CallDevToolsProtocolMethodAsync(string methodName, string parametersAsJson);
        void GoBack();
        void GoForward();
        CoreWebView2DevToolsProtocolEventReceiver GetDevToolsProtocolEventReceiver(string eventName);
        void Stop();
        void AddHostObjectToScript(string name, object rawObject);
        void RemoveHostObjectFromScript(string name);
        void OpenDevToolsWindow();
        void AddWebResourceRequestedFilter(string uri, CoreWebView2WebResourceContext ResourceContext);
        void RemoveWebResourceRequestedFilter(string uri, CoreWebView2WebResourceContext ResourceContext);
        uint BrowserProcessId { get; }
        bool CanGoBack { get; }
        bool CanGoForward { get; }
        bool ContainsFullScreenElement { get; }
        string DocumentTitle { get; }
        CoreWebView2Settings Settings { get; }
        string Source { get; }
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, object> ContainsFullScreenElementChanged;
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2ContentLoadingEventArgs> ContentLoading;
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, object> DocumentTitleChanged;
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2NavigationCompletedEventArgs> FrameNavigationCompleted;
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2NavigationStartingEventArgs> FrameNavigationStarting;
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, object> HistoryChanged;
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2NavigationCompletedEventArgs> NavigationCompleted;
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2NavigationStartingEventArgs> NavigationStarting;
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2NewWindowRequestedEventArgs> NewWindowRequested;
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2PermissionRequestedEventArgs> PermissionRequested;
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2ProcessFailedEventArgs> ProcessFailed;
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2ScriptDialogOpeningEventArgs> ScriptDialogOpening;
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2SourceChangedEventArgs> SourceChanged;
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2WebMessageReceivedEventArgs> WebMessageReceived;
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2WebResourceRequestedEventArgs> WebResourceRequested;
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, object> WindowCloseRequested;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("41A56100-92A5-59D1-9E71-9222E33AE38B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2AcceleratorKeyPressedEventArgs))]
    internal interface ICoreWebView2AcceleratorKeyPressedEventArgs
    {
        bool Handled { get; set; }
        CoreWebView2KeyEventKind KeyEventKind { get; }
        int KeyEventLParam { get; }
        CoreWebView2PhysicalKeyStatus PhysicalKeyStatus { get; }
        uint VirtualKey { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("4D03AA18-806D-5F10-9AD8-CF5D327A58FB")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2AcceleratorKeyPressedEventArgs2))]
    internal interface ICoreWebView2AcceleratorKeyPressedEventArgs2
    {
        bool IsBrowserAcceleratorKeyEnabled { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("4B16330C-4CA5-555E-AF21-164334405F63")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BasicAuthenticationRequestedEventArgs))]
    internal interface ICoreWebView2BasicAuthenticationRequestedEventArgs
    {
        global::Windows.Foundation.Deferral GetDeferral();
        bool Cancel { get; set; }
        string Challenge { get; }
        CoreWebView2BasicAuthenticationResponse Response { get; }
        string Uri { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("08DF33B9-6E38-5962-9FFD-CAAB3C30FBC1")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BasicAuthenticationResponse))]
    internal interface ICoreWebView2BasicAuthenticationResponse
    {
        string Password { get; set; }
        string UserName { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("BF991443-EE4F-57B8-BF2C-81CD6DBE1153")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BrowserExtension))]
    internal interface ICoreWebView2BrowserExtension
    {
        global::Windows.Foundation.IAsyncAction RemoveAsync();
        global::Windows.Foundation.IAsyncAction EnableAsync(bool IsEnabled);
        string Id { get; }
        bool IsEnabled { get; }
        string Name { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("79963F77-1484-5A46-B91F-DFC5C1A0CE14")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BrowserProcessExitedEventArgs))]
    internal interface ICoreWebView2BrowserProcessExitedEventArgs
    {
        CoreWebView2BrowserProcessExitKind BrowserProcessExitKind { get; }
        uint BrowserProcessId { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("414A3B75-1BC1-55E1-9926-268C0A3462C7")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Certificate))]
    internal interface ICoreWebView2Certificate
    {
        string ToPemEncoding();
        string DerEncodedSerialNumber { get; }
        string DisplayName { get; }
        string Issuer { get; }
        global::System.Collections.Generic.IReadOnlyList<string> PemEncodedIssuerCertificateChain { get; }
        string Subject { get; }
        double ValidFrom { get; }
        double ValidTo { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("091B39F2-68DF-52B4-8FB0-FD3561AF41F2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificate))]
    internal interface ICoreWebView2ClientCertificate
    {
        string ToPemEncoding();
        string DerEncodedSerialNumber { get; }
        string DisplayName { get; }
        string Issuer { get; }
        CoreWebView2ClientCertificateKind Kind { get; }
        global::System.Collections.Generic.IReadOnlyList<string> PemEncodedIssuerCertificateChain { get; }
        string Subject { get; }
        double ValidFrom { get; }
        double ValidTo { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("93287B55-31F9-55A0-B68B-D9841D7E1BF4")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificateRequestedEventArgs))]
    internal interface ICoreWebView2ClientCertificateRequestedEventArgs
    {
        global::Windows.Foundation.Deferral GetDeferral();
        global::System.Collections.Generic.IReadOnlyList<string> AllowedCertificateAuthorities { get; }
        bool Cancel { get; set; }
        bool Handled { get; set; }
        string Host { get; }
        bool IsProxy { get; }
        global::System.Collections.Generic.IReadOnlyList<CoreWebView2ClientCertificate> MutuallyTrustedCertificates { get; }
        int Port { get; }
        CoreWebView2ClientCertificate SelectedCertificate { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("31BBB153-11B2-58E8-9BEB-69F5C8E14420")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CompositionController))]
    internal interface ICoreWebView2CompositionController
    {
        void SendMouseInput(CoreWebView2MouseEventKind eventKind, CoreWebView2MouseEventVirtualKeys virtualKeys, uint mouseData, global::Windows.Foundation.Point point);
        void SendPointerInput(CoreWebView2PointerEventKind eventKind, CoreWebView2PointerInfo pointerInfo);
        global::Windows.ApplicationModel.DataTransfer.DataPackageOperation DragEnter(global::Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragInfo dragInfo, global::Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragUIOverride dragUIOverride);
        global::Windows.ApplicationModel.DataTransfer.DataPackageOperation DragOver(global::Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragInfo dragInfo, global::Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragUIOverride dragUIOverride);
        global::Windows.ApplicationModel.DataTransfer.DataPackageOperation Drop(global::Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragInfo dragInfo);
        global::Windows.UI.Core.CoreCursor Cursor { get; }
        object RootVisualTarget { get; set; }
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2CompositionController, object> CursorChanged;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("8CEF61B9-FA55-547D-AAE6-7BCAED4249A2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CompositionController2))]
    internal interface ICoreWebView2CompositionController2
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("BBBECDCF-0F03-50F0-8F85-9CBF6C9BBE10")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CompositionController3))]
    internal interface ICoreWebView2CompositionController3
    {
        void DragLeave();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("C950CB84-2648-5AD5-BADD-BFE659682FB6")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CompositionController4))]
    internal interface ICoreWebView2CompositionController4
    {
        CoreWebView2NonClientRegionKind GetNonClientRegionAtPoint(global::Windows.Foundation.Point point);
        global::System.Collections.Generic.IReadOnlyList<global::Windows.Foundation.Rect> QueryNonClientRegion(CoreWebView2NonClientRegionKind Kind);
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2CompositionController, CoreWebView2NonClientRegionChangedEventArgs> NonClientRegionChanged;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("4DF0AB1F-7F2A-573B-B81A-B9B531224736")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CompositionControllerStatics))]
    internal interface ICoreWebView2CompositionControllerStatics
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("48A321E7-4F40-526E-837E-1EB0C477B69D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CompositionControllerStatics2_Manual))]
    internal interface ICoreWebView2CompositionControllerStatics2_Manual
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("6CF95373-946C-5DAE-9B3E-0FE23D5AA29F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContentLoadingEventArgs))]
    internal interface ICoreWebView2ContentLoadingEventArgs
    {
        bool IsErrorPage { get; }
        ulong NavigationId { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("2A65706F-941A-52CD-8651-A165586B0ABF")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuItem))]
    internal interface ICoreWebView2ContextMenuItem
    {
        global::System.Collections.Generic.IList<CoreWebView2ContextMenuItem> Children { get; }
        int CommandId { get; }
        global::Windows.Storage.Streams.IRandomAccessStream Icon { get; }
        bool IsChecked { get; set; }
        bool IsEnabled { get; set; }
        CoreWebView2ContextMenuItemKind Kind { get; }
        string Label { get; }
        string Name { get; }
        string ShortcutKeyDescription { get; }
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2ContextMenuItem, object> CustomItemSelected;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("D77BDD8C-9B3E-596E-AE80-320C0DF4ECBC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuRequestedEventArgs))]
    internal interface ICoreWebView2ContextMenuRequestedEventArgs
    {
        global::Windows.Foundation.Deferral GetDeferral();
        CoreWebView2ContextMenuTarget ContextMenuTarget { get; }
        bool Handled { get; set; }
        global::Windows.Foundation.Point Location { get; }
        global::System.Collections.Generic.IList<CoreWebView2ContextMenuItem> MenuItems { get; }
        int SelectedCommandId { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("41E24E6A-4612-5BD9-8E61-E9280615205E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuTarget))]
    internal interface ICoreWebView2ContextMenuTarget
    {
        string FrameUri { get; }
        bool HasLinkText { get; }
        bool HasLinkUri { get; }
        bool HasSelection { get; }
        bool HasSourceUri { get; }
        bool IsEditable { get; }
        bool IsRequestedForMainFrame { get; }
        CoreWebView2ContextMenuTargetKind Kind { get; }
        string LinkText { get; }
        string LinkUri { get; }
        string PageUri { get; }
        string SelectionText { get; }
        string SourceUri { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("A588121C-53BF-590E-80E5-29D729CBD743")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Controller))]
    internal interface ICoreWebView2Controller
    {
        void SetBoundsAndZoomFactor(global::Windows.Foundation.Rect Bounds, double ZoomFactor);
        void MoveFocus(CoreWebView2MoveFocusReason reason);
        void NotifyParentWindowPositionChanged();
        void Close();
        global::Windows.Foundation.Rect Bounds { get; set; }
        CoreWebView2 CoreWebView2 { get; }
        bool IsVisible { get; set; }
        CoreWebView2ControllerWindowReference ParentWindow { get; set; }
        double ZoomFactor { get; set; }
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2Controller, CoreWebView2AcceleratorKeyPressedEventArgs> AcceleratorKeyPressed;
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2Controller, object> GotFocus;
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2Controller, object> LostFocus;
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2Controller, CoreWebView2MoveFocusRequestedEventArgs> MoveFocusRequested;
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2Controller, object> ZoomFactorChanged;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("0069C40B-2E8A-513F-9D9D-E0C2B64F7200")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Controller2))]
    internal interface ICoreWebView2Controller2
    {
        global::Windows.UI.Color DefaultBackgroundColor { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("E5BAE214-791A-5D13-9B76-A257D9FDA2AC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Controller3))]
    internal interface ICoreWebView2Controller3
    {
        CoreWebView2BoundsMode BoundsMode { get; set; }
        double RasterizationScale { get; set; }
        bool ShouldDetectMonitorScaleChanges { get; set; }
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2Controller, object> RasterizationScaleChanged;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("94E2862D-4638-54BA-92CF-E31A31499B78")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Controller4))]
    internal interface ICoreWebView2Controller4
    {
        bool AllowExternalDrop { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("270B2C5B-C3A9-53D8-A5CA-262EA9EA62E8")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerFactory))]
    internal interface ICoreWebView2ControllerFactory
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("3337E821-3606-5A0E-8E2F-0C1E57D743F7")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerOptions))]
    internal interface ICoreWebView2ControllerOptions
    {
        bool IsInPrivateModeEnabled { get; set; }
        string ProfileName { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("41B69E93-CC17-5C7D-A0C8-FA21C27AADB6")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerOptions2))]
    internal interface ICoreWebView2ControllerOptions2
    {
        string ScriptLocale { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("0FEDDAD4-48A3-5CC4-9F61-E7ADFD1E9C76")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerWindowReference))]
    internal interface ICoreWebView2ControllerWindowReference
    {
        global::Windows.UI.Core.CoreWindow CoreWindow { get; }
        ulong WindowHandle { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("DDF6EBF1-EBC6-5A34-9008-661C3A2EB767")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerWindowReferenceStatics))]
    internal interface ICoreWebView2ControllerWindowReferenceStatics
    {
        CoreWebView2ControllerWindowReference CreateFromWindowHandle(ulong windowHandle);
        CoreWebView2ControllerWindowReference CreateFromCoreWindow(global::Windows.UI.Core.CoreWindow coreWindow);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("52F670FE-8CA2-5AAD-AEDB-25F7903B7038")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Cookie))]
    internal interface ICoreWebView2Cookie
    {
        string Domain { get; }
        double Expires { get; set; }
        bool IsHttpOnly { get; set; }
        bool IsSecure { get; set; }
        bool IsSession { get; }
        string Name { get; }
        string Path { get; }
        CoreWebView2CookieSameSiteKind SameSite { get; set; }
        string Value { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("4098F516-ADCA-5563-AAA5-D7AFFD847AA3")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CookieManager))]
    internal interface ICoreWebView2CookieManager
    {
        CoreWebView2Cookie CreateCookie(string name, string value, string Domain, string Path);
        CoreWebView2Cookie CopyCookie(CoreWebView2Cookie cookieParam);
        void AddOrUpdateCookie(CoreWebView2Cookie cookie);
        void DeleteCookie(CoreWebView2Cookie cookie);
        void DeleteCookies(string name, string uri);
        void DeleteCookiesWithDomainAndPath(string name, string Domain, string Path);
        void DeleteAllCookies();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("9BCCA0EA-7225-577A-BB23-C7C98023154E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CookieManager_Manual))]
    internal interface ICoreWebView2CookieManager_Manual
    {
        global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<CoreWebView2Cookie>> GetCookiesAsync(string uri);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("16DC60D9-DDEC-5C3D-BC1F-4408D1875AF1")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CustomSchemeRegistration))]
    internal interface ICoreWebView2CustomSchemeRegistration
    {
        bool HasAuthorityComponent { get; set; }
        int TreatAsSecure { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("309DDDFA-FF3E-5D8D-A18A-C1341F325EA7")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CustomSchemeRegistrationFactory))]
    internal interface ICoreWebView2CustomSchemeRegistrationFactory
    {
        CoreWebView2CustomSchemeRegistration CreateInstance(string schemeName);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("074FF15C-7D7F-5101-A02E-C077C5E21C41")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CustomSchemeRegistration_Manual))]
    internal interface ICoreWebView2CustomSchemeRegistration_Manual
    {
        global::System.Collections.Generic.IList<string> AllowedOrigins { get; }
        string SchemeName { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("C474D0A3-24AC-59FC-B78B-DA7562A6A052")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DOMContentLoadedEventArgs))]
    internal interface ICoreWebView2DOMContentLoadedEventArgs
    {
        ulong NavigationId { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("B6A4B41D-FD18-59FA-923A-C57555D960CE")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DevToolsProtocolEventReceivedEventArgs))]
    internal interface ICoreWebView2DevToolsProtocolEventReceivedEventArgs
    {
        string ParameterObjectAsJson { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("221728BA-635E-50D2-BD3C-FD22F4113978")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DevToolsProtocolEventReceivedEventArgs2))]
    internal interface ICoreWebView2DevToolsProtocolEventReceivedEventArgs2
    {
        string SessionId { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("B2A2BE79-65FC-5537-8715-3D92BF31090B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DevToolsProtocolEventReceiver))]
    internal interface ICoreWebView2DevToolsProtocolEventReceiver
    {
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2DevToolsProtocolEventReceivedEventArgs> DevToolsProtocolEventReceived;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("7888A42D-18F3-5966-80CB-8CC25351BD0A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter))]
    public interface ICoreWebView2DispatchAdapter
    {
        object WrapNamedObject(string name, ICoreWebView2DispatchAdapter adapter);
        object WrapObject(object unwrapped, ICoreWebView2DispatchAdapter adapter);
        object UnwrapObject(object wrapped);
        void Clean();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("AFE73E6B-E760-5A06-9BF6-1E743C13CD2D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadOperation))]
    internal interface ICoreWebView2DownloadOperation
    {
        void Cancel();
        void Pause();
        void Resume();
        long BytesReceived { get; }
        bool CanResume { get; }
        string ContentDisposition { get; }
        string EstimatedEndTime { get; }
        CoreWebView2DownloadInterruptReason InterruptReason { get; }
        string MimeType { get; }
        string ResultFilePath { get; }
        CoreWebView2DownloadState State { get; }
        long TotalBytesToReceive { get; }
        string Uri { get; }
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2DownloadOperation, object> BytesReceivedChanged;
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2DownloadOperation, object> EstimatedEndTimeChanged;
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2DownloadOperation, object> StateChanged;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("45D982BA-9256-5B35-B023-26A438599110")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadStartingEventArgs))]
    internal interface ICoreWebView2DownloadStartingEventArgs
    {
        global::Windows.Foundation.Deferral GetDeferral();
        bool Cancel { get; set; }
        CoreWebView2DownloadOperation DownloadOperation { get; }
        bool Handled { get; set; }
        string ResultFilePath { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("D8CC7831-B783-556B-B9CE-899C1E95D585")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment))]
    internal interface ICoreWebView2Environment
    {
        global::Windows.Foundation.IAsyncOperation<CoreWebView2Controller> CreateCoreWebView2ControllerAsync(CoreWebView2ControllerWindowReference ParentWindow);
        CoreWebView2WebResourceResponse CreateWebResourceResponse(global::Windows.Storage.Streams.IRandomAccessStream Content, int StatusCode, string ReasonPhrase, string Headers);
        string BrowserVersionString { get; }
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2Environment, object> NewBrowserVersionAvailable;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("C224E69C-1EFD-5ECC-ADC8-2B52E7B97CE5")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment10))]
    internal interface ICoreWebView2Environment10
    {
        CoreWebView2ControllerOptions CreateCoreWebView2ControllerOptions();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("DA23D64C-8B61-5B6C-8581-F6A688ABD7CD")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment11))]
    internal interface ICoreWebView2Environment11
    {
        string FailureReportFolderPath { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("82531DDB-BE63-5254-812F-880D9F0EC54E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment12))]
    internal interface ICoreWebView2Environment12
    {
        CoreWebView2SharedBuffer CreateSharedBuffer(ulong Size);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("22C97F2F-8A28-5794-941C-A25BCC3CF47E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment13))]
    internal interface ICoreWebView2Environment13
    {
        global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<CoreWebView2ProcessExtendedInfo>> GetProcessExtendedInfosAsync();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("39F9505F-0D1F-5284-9FA9-9DBD818973FA")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment14))]
    internal interface ICoreWebView2Environment14
    {
        CoreWebView2FileSystemHandle CreateWebFileSystemFileHandle(string Path, CoreWebView2FileSystemHandlePermission Permission);
        CoreWebView2FileSystemHandle CreateWebFileSystemDirectoryHandle(string Path, CoreWebView2FileSystemHandlePermission Permission);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("0B634668-1017-5FC7-9921-F1F51866A8C0")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment2))]
    internal interface ICoreWebView2Environment2
    {
        CoreWebView2WebResourceRequest CreateWebResourceRequest(string uri, string Method, global::Windows.Storage.Streams.IRandomAccessStream postData, string Headers);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("5E33F46C-C0B9-5126-8840-17F9C11B3A8A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment3))]
    internal interface ICoreWebView2Environment3
    {
        global::Windows.Foundation.IAsyncOperation<CoreWebView2CompositionController> CreateCoreWebView2CompositionControllerAsync(CoreWebView2ControllerWindowReference ParentWindow);
        CoreWebView2PointerInfo CreateCoreWebView2PointerInfo();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("6DB697DA-EEBD-5818-8790-1FE57EF319E2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment4))]
    internal interface ICoreWebView2Environment4
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("F33399AF-E4D3-59DC-AC38-8397AADCEDB1")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment5))]
    internal interface ICoreWebView2Environment5
    {
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2Environment, CoreWebView2BrowserProcessExitedEventArgs> BrowserProcessExited;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("965D538F-5958-5D98-8972-F622021DF402")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment6))]
    internal interface ICoreWebView2Environment6
    {
        CoreWebView2PrintSettings CreatePrintSettings();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("E1F44FE2-FC54-5383-A383-C87E1DA96B83")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment7))]
    internal interface ICoreWebView2Environment7
    {
        string UserDataFolder { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("DB67C807-D0DB-5980-A3A9-75EF8F63D6F6")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment8))]
    internal interface ICoreWebView2Environment8
    {
        global::System.Collections.Generic.IReadOnlyList<CoreWebView2ProcessInfo> GetProcessInfos();
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2Environment, object> ProcessInfosChanged;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("C8213EC7-7DC9-5468-A88B-15C6B7144478")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment9))]
    internal interface ICoreWebView2Environment9
    {
        CoreWebView2ContextMenuItem CreateContextMenuItem(string Label, global::Windows.Storage.Streams.IRandomAccessStream iconStream, CoreWebView2ContextMenuItemKind Kind);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("25D6DC39-0062-5735-8B09-A6F535F19E97")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions))]
    internal interface ICoreWebView2EnvironmentOptions
    {
        string AdditionalBrowserArguments { get; set; }
        bool AllowSingleSignOnUsingOSPrimaryAccount { get; set; }
        string Language { get; set; }
        string TargetCompatibleBrowserVersion { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("E77350FB-77A1-56F7-BE95-EB7F8A7A3072")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions2))]
    internal interface ICoreWebView2EnvironmentOptions2
    {
        bool ExclusiveUserDataFolderAccess { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("48AB919D-2444-5E8C-A6F6-ABA840D6C5FF")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions3))]
    internal interface ICoreWebView2EnvironmentOptions3
    {
        bool IsCustomCrashReportingEnabled { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("A2CB850F-CD14-5A7D-9C98-53FD51EC9858")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions4))]
    internal interface ICoreWebView2EnvironmentOptions4
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("36B1CA6C-E06C-5050-8EF9-247C5A7AA9C9")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions5))]
    internal interface ICoreWebView2EnvironmentOptions5
    {
        bool EnableTrackingPrevention { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("EB5B14C2-6F05-514E-B19A-76744D1CE684")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions6))]
    internal interface ICoreWebView2EnvironmentOptions6
    {
        bool AreBrowserExtensionsEnabled { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("7447B9ED-A60D-5AF8-AB2A-56C544BC356A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions7))]
    internal interface ICoreWebView2EnvironmentOptions7
    {
        CoreWebView2ChannelSearchKind ChannelSearchKind { get; set; }
        CoreWebView2ReleaseChannels ReleaseChannels { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("F143E9D2-2669-5B6A-8F88-7B05C9E1EF4D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions8))]
    internal interface ICoreWebView2EnvironmentOptions8
    {
        CoreWebView2ScrollbarStyle ScrollBarStyle { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("1F104443-EA93-5A37-B791-34E6A31172ED")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions_Manual))]
    internal interface ICoreWebView2EnvironmentOptions_Manual
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("665E9C11-CA1B-5255-A6F5-D741AC39E18F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions_Manual3))]
    internal interface ICoreWebView2EnvironmentOptions_Manual3
    {
        global::System.Collections.Generic.IList<CoreWebView2CustomSchemeRegistration> CustomSchemeRegistrations { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("0E33F804-F20B-5635-8491-162AAA27517B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentStatics))]
    internal interface ICoreWebView2EnvironmentStatics
    {
        global::Windows.Foundation.IAsyncOperation<CoreWebView2Environment> CreateAsync();
        global::Windows.Foundation.IAsyncOperation<CoreWebView2Environment> CreateWithOptionsAsync(string browserExecutableFolder, string userDataFolder, CoreWebView2EnvironmentOptions options);
        [global::Windows.Foundation.Metadata.Overload(@"GetAvailableBrowserVersionString")]
        string GetAvailableBrowserVersionString();
        [global::Windows.Foundation.Metadata.Overload(@"GetAvailableBrowserVersionString2")]
        string GetAvailableBrowserVersionString(string browserExecutableFolder);
        int CompareBrowserVersionString(string browserVersionString1, string browserVersionString2);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("DCBA13E4-EE49-5860-8499-C49161A7D8CE")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentStatics2))]
    internal interface ICoreWebView2EnvironmentStatics2
    {
        [global::Windows.Foundation.Metadata.Overload(@"GetAvailableBrowserVersionStringWithOptions")]
        string GetAvailableBrowserVersionString(string browserExecutableFolder, CoreWebView2EnvironmentOptions options);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("F51CFABE-73AD-5635-A935-6386AEF9238E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Environment_Manual))]
    internal interface ICoreWebView2Environment_Manual
    {
        global::Windows.Foundation.IAsyncOperation<CoreWebView2Controller> CreateCoreWebView2ControllerAsync(CoreWebView2ControllerWindowReference ParentWindow, CoreWebView2ControllerOptions options);
        global::Windows.Foundation.IAsyncOperation<CoreWebView2CompositionController> CreateCoreWebView2CompositionControllerAsync(CoreWebView2ControllerWindowReference ParentWindow, CoreWebView2ControllerOptions options);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("9BEF80F9-580C-56A0-8DB9-75EC792C8421")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ExecuteScriptResult))]
    internal interface ICoreWebView2ExecuteScriptResult
    {
        CoreWebView2ScriptException Exception { get; }
        string ResultAsJson { get; }
        bool Succeeded { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("5931BC73-376C-5BA7-BCBB-3CAEC6D1FF5B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ExecuteScriptResult_Manual))]
    internal interface ICoreWebView2ExecuteScriptResult_Manual
    {
        int TryGetResultAsString(out string stringResult);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("CAB45512-9594-50F1-AC3C-9CC103B574A3")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2File))]
    internal interface ICoreWebView2File
    {
        string Path { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("241CB4C8-0021-5F72-8BF2-E141DCE4C151")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FileSystemHandle))]
    internal interface ICoreWebView2FileSystemHandle
    {
        CoreWebView2FileSystemHandleKind Kind { get; }
        string Path { get; }
        CoreWebView2FileSystemHandlePermission Permission { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("02FFCBF9-19E7-5BB8-8273-346420FB1503")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Frame))]
    internal interface ICoreWebView2Frame
    {
        void RemoveHostObjectFromScript(string name);
        int IsDestroyed();
        string Name { get; }
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2Frame, object> Destroyed;
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2Frame, object> NameChanged;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("33DBC9C9-A103-56E3-B722-363814200320")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Frame2))]
    internal interface ICoreWebView2Frame2
    {
        global::Windows.Foundation.IAsyncOperation<string> ExecuteScriptAsync(string javaScript);
        void PostWebMessageAsJson(string webMessageAsJson);
        void PostWebMessageAsString(string webMessageAsString);
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2Frame, CoreWebView2ContentLoadingEventArgs> ContentLoading;
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2Frame, CoreWebView2DOMContentLoadedEventArgs> DOMContentLoaded;
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2Frame, CoreWebView2NavigationCompletedEventArgs> NavigationCompleted;
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2Frame, CoreWebView2NavigationStartingEventArgs> NavigationStarting;
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2Frame, CoreWebView2WebMessageReceivedEventArgs> WebMessageReceived;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("6545DAC4-1666-50A5-BBE8-EC04842A466F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Frame3))]
    internal interface ICoreWebView2Frame3
    {
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2Frame, CoreWebView2PermissionRequestedEventArgs> PermissionRequested;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("D46CD758-64B9-543E-A7B8-CAC9B4C059A7")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Frame4))]
    internal interface ICoreWebView2Frame4
    {
        void PostSharedBufferToScript(CoreWebView2SharedBuffer sharedBuffer, CoreWebView2SharedBufferAccess access, string additionalDataAsJson);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("27C4803D-9A7F-599A-BF72-07E8DC964A5B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Frame5))]
    internal interface ICoreWebView2Frame5
    {
        uint FrameId { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("BA197DAD-D2F4-5127-80B8-FAAB02EC211E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Frame6))]
    internal interface ICoreWebView2Frame6
    {
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2Frame, CoreWebView2ScreenCaptureStartingEventArgs> ScreenCaptureStarting;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("527B01B8-FC6D-5543-8DCE-96CDFDB32C81")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FrameCreatedEventArgs))]
    internal interface ICoreWebView2FrameCreatedEventArgs
    {
        CoreWebView2Frame Frame { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("F9B82E06-73F3-513B-BC2C-445DDEDBA976")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FrameInfo))]
    internal interface ICoreWebView2FrameInfo
    {
        string Name { get; }
        string Source { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("7F0770C6-0D5E-529B-B00C-F15656F605C4")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FrameInfo2))]
    internal interface ICoreWebView2FrameInfo2
    {
        uint FrameId { get; }
        CoreWebView2FrameKind FrameKind { get; }
        CoreWebView2FrameInfo ParentFrameInfo { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("ADF264EE-D980-5F48-A60E-8705DE046608")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2HttpHeadersCollectionIterator))]
    internal interface ICoreWebView2HttpHeadersCollectionIterator
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("DC2226C7-3515-55BB-BCB2-57B78F86B91D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2HttpRequestHeaders))]
    internal interface ICoreWebView2HttpRequestHeaders
    {
        string GetHeader(string name);
        CoreWebView2HttpHeadersCollectionIterator GetHeaders(string name);
        bool Contains(string name);
        void SetHeader(string name, string value);
        void RemoveHeader(string name);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("F3D383E9-747F-5574-8662-9A6B920CECD4")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2HttpResponseHeaders))]
    internal interface ICoreWebView2HttpResponseHeaders
    {
        void AppendHeader(string name, string value);
        bool Contains(string name);
        string GetHeader(string name);
        CoreWebView2HttpHeadersCollectionIterator GetHeaders(string name);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("6AB44F8D-EC6A-56A1-AE3C-9C55DFF6CBC6")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2LaunchingExternalUriSchemeEventArgs))]
    internal interface ICoreWebView2LaunchingExternalUriSchemeEventArgs
    {
        global::Windows.Foundation.Deferral GetDeferral();
        bool Cancel { get; set; }
        string InitiatingOrigin { get; }
        bool IsUserInitiated { get; }
        string Uri { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("2E29103B-ECDD-5C1D-B288-3F066D608919")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2MoveFocusRequestedEventArgs))]
    internal interface ICoreWebView2MoveFocusRequestedEventArgs
    {
        bool Handled { get; set; }
        CoreWebView2MoveFocusReason Reason { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("4865E238-036A-5664-95A3-447EC44CF498")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NavigationCompletedEventArgs))]
    internal interface ICoreWebView2NavigationCompletedEventArgs
    {
        bool IsSuccess { get; }
        ulong NavigationId { get; }
        CoreWebView2WebErrorStatus WebErrorStatus { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("6E4D3C33-A6E2-5896-90C5-68B4B5E55B40")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NavigationCompletedEventArgs2))]
    internal interface ICoreWebView2NavigationCompletedEventArgs2
    {
        int HttpStatusCode { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("548D23D3-FEA3-5616-BD05-AE08066C86D3")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NavigationStartingEventArgs))]
    internal interface ICoreWebView2NavigationStartingEventArgs
    {
        bool Cancel { get; set; }
        bool IsRedirected { get; }
        bool IsUserInitiated { get; }
        ulong NavigationId { get; }
        CoreWebView2HttpRequestHeaders RequestHeaders { get; }
        string Uri { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("D7A3824E-7654-5C4B-B069-E6501634D84C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NavigationStartingEventArgs2))]
    internal interface ICoreWebView2NavigationStartingEventArgs2
    {
        string AdditionalAllowedFrameAncestors { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("17DB72F6-E995-59F6-91BA-4411E755F3AB")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NavigationStartingEventArgs3))]
    internal interface ICoreWebView2NavigationStartingEventArgs3
    {
        CoreWebView2NavigationKind NavigationKind { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("E6E013BA-AEC8-532E-9AC9-1590AF7B25EC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NewWindowRequestedEventArgs))]
    internal interface ICoreWebView2NewWindowRequestedEventArgs
    {
        global::Windows.Foundation.Deferral GetDeferral();
        bool Handled { get; set; }
        bool IsUserInitiated { get; }
        CoreWebView2 NewWindow { get; set; }
        string Uri { get; }
        CoreWebView2WindowFeatures WindowFeatures { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("F4806259-E63A-5C0B-A02C-5F10E11094F4")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NewWindowRequestedEventArgs2))]
    internal interface ICoreWebView2NewWindowRequestedEventArgs2
    {
        string Name { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("1F0F7826-8D70-5720-BB8B-D87F63CBFB9C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NewWindowRequestedEventArgs3))]
    internal interface ICoreWebView2NewWindowRequestedEventArgs3
    {
        CoreWebView2FrameInfo OriginalSourceFrameInfo { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("4F583622-CD0F-55D6-BE7E-8A8F99A20E62")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NonClientRegionChangedEventArgs))]
    internal interface ICoreWebView2NonClientRegionChangedEventArgs
    {
        CoreWebView2NonClientRegionKind RegionKind { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("2516351D-6CCD-5484-BFF3-75F4DD4749E5")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Notification))]
    internal interface ICoreWebView2Notification
    {
        void ReportShown();
        void ReportClicked();
        void ReportClosed();
        string BadgeUri { get; }
        string Body { get; }
        string BodyImageUri { get; }
        CoreWebView2TextDirectionKind Direction { get; }
        string IconUri { get; }
        bool IsSilent { get; }
        string Language { get; }
        bool RequiresInteraction { get; }
        bool ShouldRenotify { get; }
        string Tag { get; }
        double Timestamp { get; }
        string Title { get; }
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2Notification, object> CloseRequested;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("9416A036-5E06-57CB-8BBB-7F6EA1DC9A3D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NotificationReceivedEventArgs))]
    internal interface ICoreWebView2NotificationReceivedEventArgs
    {
        global::Windows.Foundation.Deferral GetDeferral();
        bool Handled { get; set; }
        CoreWebView2Notification Notification { get; }
        string SenderOrigin { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("A2C84873-F40E-5ADE-A7DB-E478233C5897")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Notification_Manual2))]
    internal interface ICoreWebView2Notification_Manual2
    {
        global::System.Collections.Generic.IReadOnlyList<ulong> VibrationPattern { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("118BDD9B-CEF1-5910-929E-C1A321328239")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PermissionRequestedEventArgs))]
    internal interface ICoreWebView2PermissionRequestedEventArgs
    {
        global::Windows.Foundation.Deferral GetDeferral();
        bool IsUserInitiated { get; }
        CoreWebView2PermissionKind PermissionKind { get; }
        CoreWebView2PermissionState State { get; set; }
        string Uri { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("A6652FBA-EBE5-5891-ADDC-CB37DA8F7E66")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PermissionRequestedEventArgs2))]
    internal interface ICoreWebView2PermissionRequestedEventArgs2
    {
        bool Handled { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("200E8BCC-BC11-5BEB-AA7A-79D4C95D73AA")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PermissionRequestedEventArgs3))]
    internal interface ICoreWebView2PermissionRequestedEventArgs3
    {
        bool SavesInProfile { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("B4158D0B-8EF8-575F-8E99-5FE02E8B579E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PermissionSetting))]
    internal interface ICoreWebView2PermissionSetting
    {
        CoreWebView2PermissionKind PermissionKind { get; }
        string PermissionOrigin { get; }
        CoreWebView2PermissionState PermissionState { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("C3860E0D-C018-5A84-BC06-9F8F7B275DFF")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfo))]
    internal interface ICoreWebView2PointerInfo
    {
        int ButtonChangeKind { get; set; }
        global::Windows.Foundation.Rect DisplayRect { get; set; }
        uint FrameId { get; set; }
        global::Windows.Foundation.Point HimetricLocation { get; set; }
        global::Windows.Foundation.Point HimetricLocationRaw { get; set; }
        uint HistoryCount { get; set; }
        int InputData { get; set; }
        uint KeyStates { get; set; }
        uint PenFlags { get; set; }
        uint PenMask { get; set; }
        uint PenPressure { get; set; }
        uint PenRotation { get; set; }
        int PenTiltX { get; set; }
        int PenTiltY { get; set; }
        ulong PerformanceCount { get; set; }
        global::Windows.Foundation.Point PixelLocation { get; set; }
        global::Windows.Foundation.Point PixelLocationRaw { get; set; }
        global::Windows.Foundation.Rect PointerDeviceRect { get; set; }
        uint PointerFlags { get; set; }
        uint PointerId { get; set; }
        uint PointerKind { get; set; }
        uint Time { get; set; }
        global::Windows.Foundation.Rect TouchContact { get; set; }
        global::Windows.Foundation.Rect TouchContactRaw { get; set; }
        uint TouchFlags { get; set; }
        uint TouchMask { get; set; }
        uint TouchOrientation { get; set; }
        uint TouchPressure { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("9C75C8C0-EF3D-58A8-9A8C-18EED9FD0F16")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettings))]
    internal interface ICoreWebView2PrintSettings
    {
        string FooterUri { get; set; }
        string HeaderTitle { get; set; }
        double MarginBottom { get; set; }
        double MarginLeft { get; set; }
        double MarginRight { get; set; }
        double MarginTop { get; set; }
        CoreWebView2PrintOrientation Orientation { get; set; }
        double PageHeight { get; set; }
        double PageWidth { get; set; }
        double ScaleFactor { get; set; }
        bool ShouldPrintBackgrounds { get; set; }
        bool ShouldPrintHeaderAndFooter { get; set; }
        bool ShouldPrintSelectionOnly { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("D2A97895-CA6E-57FC-905D-C6F77A081768")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettings2))]
    internal interface ICoreWebView2PrintSettings2
    {
        CoreWebView2PrintCollation Collation { get; set; }
        CoreWebView2PrintColorMode ColorMode { get; set; }
        int Copies { get; set; }
        CoreWebView2PrintDuplex Duplex { get; set; }
        CoreWebView2PrintMediaSize MediaSize { get; set; }
        string PageRanges { get; set; }
        int PagesPerSide { get; set; }
        string PrinterName { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("2850F27C-0C9D-5CDC-B356-18F5B97D9FCF")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrivatePartial))]
    internal interface ICoreWebView2PrivatePartial
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("527F6678-8629-5C2A-BC3B-8D5C95E2B9BC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrivatePartialController))]
    internal interface ICoreWebView2PrivatePartialController
    {
        bool IsBrowserHitTransparent { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("60E9238B-621D-57E8-B670-74382B2380A7")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProcessExtendedInfo))]
    internal interface ICoreWebView2ProcessExtendedInfo
    {
        global::System.Collections.Generic.IReadOnlyList<CoreWebView2FrameInfo> AssociatedFrameInfos { get; }
        CoreWebView2ProcessInfo ProcessInfo { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("25A8F8C9-D944-539D-AFA3-24172B48EF47")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProcessFailedEventArgs))]
    internal interface ICoreWebView2ProcessFailedEventArgs
    {
        CoreWebView2ProcessFailedKind ProcessFailedKind { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("C5D9C952-B456-5DC7-9F76-FDE967484AF5")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProcessFailedEventArgs2))]
    internal interface ICoreWebView2ProcessFailedEventArgs2
    {
        int ExitCode { get; }
        global::System.Collections.Generic.IReadOnlyList<CoreWebView2FrameInfo> FrameInfosForFailedProcess { get; }
        string ProcessDescription { get; }
        CoreWebView2ProcessFailedReason Reason { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("D129A419-ADAE-5C3C-8FCE-5592994E9CD3")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProcessFailedEventArgs3))]
    internal interface ICoreWebView2ProcessFailedEventArgs3
    {
        string FailureSourceModulePath { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("B6EC37E1-23EB-5924-B346-E837890AA9D5")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProcessInfo))]
    internal interface ICoreWebView2ProcessInfo
    {
        CoreWebView2ProcessKind Kind { get; }
        int ProcessId { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("D4BDD25C-A2DB-5C03-9659-ABDEB9793621")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Profile))]
    internal interface ICoreWebView2Profile
    {
        string DefaultDownloadFolderPath { get; set; }
        bool IsInPrivateModeEnabled { get; }
        CoreWebView2PreferredColorScheme PreferredColorScheme { get; set; }
        string ProfileName { get; }
        string ProfilePath { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("93D21E18-1B06-59D0-9687-10F4844B016D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Profile2))]
    internal interface ICoreWebView2Profile2
    {
        global::Windows.Foundation.IAsyncAction ClearBrowsingDataAsync(CoreWebView2BrowsingDataKinds dataKinds);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("507ED587-C511-5E47-BE5B-FC9CCDF179B6")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Profile3))]
    internal interface ICoreWebView2Profile3
    {
        CoreWebView2TrackingPreventionLevel PreferredTrackingPreventionLevel { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("EEAE109A-F641-5A5B-942F-9922594FFB4D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Profile4))]
    internal interface ICoreWebView2Profile4
    {
        global::Windows.Foundation.IAsyncAction SetPermissionStateAsync(CoreWebView2PermissionKind PermissionKind, string origin, CoreWebView2PermissionState State);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("C9AAC8F7-E502-5485-B033-99E4940EE0F1")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Profile5))]
    internal interface ICoreWebView2Profile5
    {
        CoreWebView2CookieManager CookieManager { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("C16A4665-9D44-5768-94A3-69B3976FC3D6")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Profile6))]
    internal interface ICoreWebView2Profile6
    {
        bool IsGeneralAutofillEnabled { get; set; }
        bool IsPasswordAutosaveEnabled { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("5F665761-5C12-5F39-B9FE-607E6E94ADD1")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Profile7))]
    internal interface ICoreWebView2Profile7
    {
        global::Windows.Foundation.IAsyncOperation<CoreWebView2BrowserExtension> AddBrowserExtensionAsync(string extensionFolderPath);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("9362D39C-D521-59E9-88FD-7C5AA1167DA6")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Profile8))]
    internal interface ICoreWebView2Profile8
    {
        void Delete();
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2Profile, object> Deleted;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("CC39A250-2B4C-5608-9097-C59B8A8231B9")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SaveAsUIShowingEventArgs))]
    internal interface ICoreWebView2SaveAsUIShowingEventArgs
    {
        global::Windows.Foundation.Deferral GetDeferral();
        bool AllowReplace { get; set; }
        bool Cancel { get; set; }
        string ContentMimeType { get; }
        CoreWebView2SaveAsKind Kind { get; set; }
        string SaveAsFilePath { get; set; }
        bool SuppressDefaultDialog { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("6F6B50FF-3EAE-5C4C-A29F-6FCE822A04E0")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SaveFileSecurityCheckStartingEventArgs))]
    internal interface ICoreWebView2SaveFileSecurityCheckStartingEventArgs
    {
        global::Windows.Foundation.Deferral GetDeferral();
        bool CancelSave { get; set; }
        string DocumentOriginUri { get; }
        string FileExtension { get; }
        string FilePath { get; }
        bool SuppressDefaultPolicy { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("35F0E2BB-94B0-5BE7-B633-F87244E38BFE")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ScreenCaptureStartingEventArgs))]
    internal interface ICoreWebView2ScreenCaptureStartingEventArgs
    {
        global::Windows.Foundation.Deferral GetDeferral();
        bool Cancel { get; set; }
        bool Handled { get; set; }
        CoreWebView2FrameInfo OriginalSourceFrameInfo { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("A4315212-C7EB-568A-86E4-C61E31BA6CDA")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ScriptDialogOpeningEventArgs))]
    internal interface ICoreWebView2ScriptDialogOpeningEventArgs
    {
        void Accept();
        global::Windows.Foundation.Deferral GetDeferral();
        string DefaultText { get; }
        CoreWebView2ScriptDialogKind Kind { get; }
        string Message { get; }
        string ResultText { get; set; }
        string Uri { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("09BC3CE3-3978-50A5-86AE-5C596D371C4E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ScriptException))]
    internal interface ICoreWebView2ScriptException
    {
        uint ColumnNumber { get; }
        uint LineNumber { get; }
        string Message { get; }
        string Name { get; }
        string ToJson { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("90FDC703-5A9E-56F6-A422-7C114C736420")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ServerCertificateErrorDetectedEventArgs))]
    internal interface ICoreWebView2ServerCertificateErrorDetectedEventArgs
    {
        global::Windows.Foundation.Deferral GetDeferral();
        CoreWebView2ServerCertificateErrorAction Action { get; set; }
        CoreWebView2WebErrorStatus ErrorStatus { get; }
        string RequestUri { get; }
        CoreWebView2Certificate ServerCertificate { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("003B325E-74CD-52DD-8024-EBB8BE38E48E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings))]
    internal interface ICoreWebView2Settings
    {
        bool AreDefaultContextMenusEnabled { get; set; }
        bool AreDefaultScriptDialogsEnabled { get; set; }
        bool AreDevToolsEnabled { get; set; }
        bool AreHostObjectsAllowed { get; set; }
        bool IsBuiltInErrorPageEnabled { get; set; }
        bool IsScriptEnabled { get; set; }
        bool IsStatusBarEnabled { get; set; }
        bool IsWebMessageEnabled { get; set; }
        bool IsZoomControlEnabled { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("377D3480-FDB2-56E7-BADE-507D352887E9")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings2))]
    internal interface ICoreWebView2Settings2
    {
        string UserAgent { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("52200F01-5309-5B2E-A03C-3D2677591940")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings3))]
    internal interface ICoreWebView2Settings3
    {
        bool AreBrowserAcceleratorKeysEnabled { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("D6A955F0-DAEF-5A6A-A6F6-C72F0EDE7620")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings4))]
    internal interface ICoreWebView2Settings4
    {
        bool IsGeneralAutofillEnabled { get; set; }
        bool IsPasswordAutosaveEnabled { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("AFC42B23-4839-5D73-ACF7-E0335631ABF5")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings5))]
    internal interface ICoreWebView2Settings5
    {
        bool IsPinchZoomEnabled { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("3FE4AE85-0540-5BF1-B4D9-99EC57AA64F5")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings6))]
    internal interface ICoreWebView2Settings6
    {
        bool IsSwipeNavigationEnabled { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("688027CD-9F84-59E8-8D5C-91123DF24B92")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings7))]
    internal interface ICoreWebView2Settings7
    {
        CoreWebView2PdfToolbarItems HiddenPdfToolbarItems { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("956F1A8F-3198-5577-B250-7D91D17F7EED")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings8))]
    internal interface ICoreWebView2Settings8
    {
        bool IsReputationCheckingRequired { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("4C346681-714D-5A3D-8105-2A7B80BEEAB5")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings9))]
    internal interface ICoreWebView2Settings9
    {
        bool IsNonClientRegionSupportEnabled { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("0A538C87-E000-511C-87CA-DED3413D03DA")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Settings_Manual))]
    internal interface ICoreWebView2Settings_Manual
    {
        ICoreWebView2DispatchAdapter HostObjectDispatchAdapter { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("2907CC84-F843-5959-8734-F871766F8F13")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SharedBuffer))]
    internal interface ICoreWebView2SharedBuffer
    {
        global::Windows.Storage.Streams.IRandomAccessStream OpenStream();
        ulong Size { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("1AA4E213-ACE3-5F74-A2AE-C6489CEB3239")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SharedBuffer_Manual))]
    internal interface ICoreWebView2SharedBuffer_Manual
    {
        global::Windows.Foundation.IMemoryBufferReference Buffer { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("CA437B2C-6A18-5552-B749-B198F8CC34D9")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SourceChangedEventArgs))]
    internal interface ICoreWebView2SourceChangedEventArgs
    {
        bool IsNewDocument { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("EB066159-B725-5D5B-ADC8-F5D7B9290304")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebMessageReceivedEventArgs))]
    internal interface ICoreWebView2WebMessageReceivedEventArgs
    {
        string TryGetWebMessageAsString();
        string Source { get; }
        string WebMessageAsJson { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("71DC5FA0-08A0-5DEA-9363-799DF5021452")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebMessageReceivedEventArgs2))]
    internal interface ICoreWebView2WebMessageReceivedEventArgs2
    {
        global::System.Collections.Generic.IReadOnlyList<object> AdditionalObjects { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("5C742259-67D2-5DF2-8382-0F201B4D7197")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceRequest))]
    internal interface ICoreWebView2WebResourceRequest
    {
        global::Windows.Storage.Streams.IRandomAccessStream Content { get; set; }
        CoreWebView2HttpRequestHeaders Headers { get; }
        string Method { get; set; }
        string Uri { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("577F1FC4-C943-54A9-9700-BD469B48BD41")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceRequestedEventArgs))]
    internal interface ICoreWebView2WebResourceRequestedEventArgs
    {
        global::Windows.Foundation.Deferral GetDeferral();
        CoreWebView2WebResourceRequest Request { get; }
        CoreWebView2WebResourceContext ResourceContext { get; }
        CoreWebView2WebResourceResponse Response { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("0BBE4B89-88A9-575A-B09E-7946EE415E94")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceRequestedEventArgs2))]
    internal interface ICoreWebView2WebResourceRequestedEventArgs2
    {
        CoreWebView2WebResourceRequestSourceKinds RequestedSourceKind { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("14621923-E485-5F44-8F5D-BD4243BC398F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponse))]
    internal interface ICoreWebView2WebResourceResponse
    {
        global::Windows.Storage.Streams.IRandomAccessStream Content { get; set; }
        CoreWebView2HttpResponseHeaders Headers { get; }
        string ReasonPhrase { get; set; }
        int StatusCode { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("12424671-9711-54F4-BCDF-5F307ADD6EC2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponseReceivedEventArgs))]
    internal interface ICoreWebView2WebResourceResponseReceivedEventArgs
    {
        CoreWebView2WebResourceRequest Request { get; }
        CoreWebView2WebResourceResponseView Response { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("33EE060B-B578-5698-B541-FEF87FE7FE72")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponseView))]
    internal interface ICoreWebView2WebResourceResponseView
    {
        global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.Streams.IRandomAccessStream> GetContentAsync();
        CoreWebView2HttpResponseHeaders Headers { get; }
        string ReasonPhrase { get; }
        int StatusCode { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("EE8686D6-056F-5E06-824F-4E2A24C1C1D6")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WindowFeatures))]
    internal interface ICoreWebView2WindowFeatures
    {
        bool HasPosition { get; }
        bool HasSize { get; }
        uint Height { get; }
        uint Left { get; }
        bool ShouldDisplayMenuBar { get; }
        bool ShouldDisplayScrollBars { get; }
        bool ShouldDisplayStatus { get; }
        bool ShouldDisplayToolbar { get; }
        uint Top { get; }
        uint Width { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("A7B20434-970F-54B1-AA63-3C42671FA9AB")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_10))]
    internal interface ICoreWebView2_10
    {
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2BasicAuthenticationRequestedEventArgs> BasicAuthenticationRequested;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("C00ACBB1-AE32-501F-AD19-9D0AC32D6142")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_11))]
    internal interface ICoreWebView2_11
    {
        global::Windows.Foundation.IAsyncOperation<string> CallDevToolsProtocolMethodForSessionAsync(string sessionId, string methodName, string parametersAsJson);
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2ContextMenuRequestedEventArgs> ContextMenuRequested;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("DBBBE9A1-18D3-5F67-B362-0F4AE937D754")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_12))]
    internal interface ICoreWebView2_12
    {
        string StatusBarText { get; }
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, object> StatusBarTextChanged;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("314B5846-DBC7-5DE4-A792-647EA0F3296A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_13))]
    internal interface ICoreWebView2_13
    {
        CoreWebView2Profile Profile { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("A7647B24-3B1E-50A9-BE24-6E8AC63FE491")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_14))]
    internal interface ICoreWebView2_14
    {
        global::Windows.Foundation.IAsyncAction ClearServerCertificateErrorActionsAsync();
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2ServerCertificateErrorDetectedEventArgs> ServerCertificateErrorDetected;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("4443F532-D2BA-5AE2-A9B3-8DE62BD5D4A9")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_15))]
    internal interface ICoreWebView2_15
    {
        global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.Streams.IRandomAccessStream> GetFaviconAsync(CoreWebView2FaviconImageFormat format);
        string FaviconUri { get; }
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, object> FaviconChanged;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("61D0A57C-6C4F-50FF-A137-314B0099A2B8")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_16))]
    internal interface ICoreWebView2_16
    {
        global::Windows.Foundation.IAsyncOperation<CoreWebView2PrintStatus> PrintAsync(CoreWebView2PrintSettings printSettings);
        void ShowPrintUI(CoreWebView2PrintDialogKind printDialogKind);
        global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.Streams.IRandomAccessStream> PrintToPdfStreamAsync(CoreWebView2PrintSettings printSettings);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("2345F9DB-5488-559A-82AF-9086CC4F7988")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_17))]
    internal interface ICoreWebView2_17
    {
        void PostSharedBufferToScript(CoreWebView2SharedBuffer sharedBuffer, CoreWebView2SharedBufferAccess access, string additionalDataAsJson);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("94F52E61-9D75-5A81-ACD3-830FF29CE6F7")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_18))]
    internal interface ICoreWebView2_18
    {
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2LaunchingExternalUriSchemeEventArgs> LaunchingExternalUriScheme;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("35A94A5C-E027-5DC5-8C2B-C2FC7D589159")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_19))]
    internal interface ICoreWebView2_19
    {
        CoreWebView2MemoryUsageTargetLevel MemoryUsageTargetLevel { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("578CB133-2873-5408-BD9E-389BBE9FA7FA")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_2))]
    internal interface ICoreWebView2_2
    {
        void NavigateWithWebResourceRequest(CoreWebView2WebResourceRequest Request);
        CoreWebView2CookieManager CookieManager { get; }
        CoreWebView2Environment Environment { get; }
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2DOMContentLoadedEventArgs> DOMContentLoaded;
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2WebResourceResponseReceivedEventArgs> WebResourceResponseReceived;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("859C4805-E988-50D5-85D7-A50643FC815E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_20))]
    internal interface ICoreWebView2_20
    {
        uint FrameId { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("F7FC7705-7922-5ABC-9E24-C64F1C14B185")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_21))]
    internal interface ICoreWebView2_21
    {
        global::Windows.Foundation.IAsyncOperation<CoreWebView2ExecuteScriptResult> ExecuteScriptWithResultAsync(string javaScript);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("D58AA4CF-9B67-5419-8565-F401A98FEEB2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_22))]
    internal interface ICoreWebView2_22
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("D6767391-FDFE-5B95-96AE-11DE6B8726DD")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_23))]
    internal interface ICoreWebView2_23
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("469056B8-E78D-55ED-9AF1-207A7F60911F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_24))]
    internal interface ICoreWebView2_24
    {
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2NotificationReceivedEventArgs> NotificationReceived;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("B8E2EDCE-D943-5871-8397-483DBD6C0F9E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_25))]
    internal interface ICoreWebView2_25
    {
        global::Windows.Foundation.IAsyncOperation<CoreWebView2SaveAsUIResult> ShowSaveAsUIAsync();
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2SaveAsUIShowingEventArgs> SaveAsUIShowing;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("E7D803DD-B2F4-5FA3-8E63-114489D4063D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_26))]
    internal interface ICoreWebView2_26
    {
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2SaveFileSecurityCheckStartingEventArgs> SaveFileSecurityCheckStarting;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("D964F497-FFDF-5BCD-BF52-FF4585F2EBC2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_27))]
    internal interface ICoreWebView2_27
    {
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2ScreenCaptureStartingEventArgs> ScreenCaptureStarting;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("A8C76AE7-6170-5DFE-8F00-79CD76A9B4D9")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_3))]
    internal interface ICoreWebView2_3
    {
        global::Windows.Foundation.IAsyncOperation<bool> TrySuspendAsync();
        void Resume();
        void SetVirtualHostNameToFolderMapping(string hostName, string folderPath, CoreWebView2HostResourceAccessKind accessKind);
        void ClearVirtualHostNameToFolderMapping(string hostName);
        bool IsSuspended { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("4AC595CE-1502-5775-B2C8-22C11A369C25")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_4))]
    internal interface ICoreWebView2_4
    {
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2DownloadStartingEventArgs> DownloadStarting;
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2FrameCreatedEventArgs> FrameCreated;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("DD6AF643-220C-5DC6-B0A8-22C41E472595")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_5))]
    internal interface ICoreWebView2_5
    {
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, CoreWebView2ClientCertificateRequestedEventArgs> ClientCertificateRequested;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("92B34B96-853D-5BB6-AC52-30297CE805F1")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_6))]
    internal interface ICoreWebView2_6
    {
        void OpenTaskManagerWindow();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("F9B7107A-2E09-5596-A033-911BA12315F7")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_7))]
    internal interface ICoreWebView2_7
    {
        global::Windows.Foundation.IAsyncOperation<bool> PrintToPdfAsync(string ResultFilePath, CoreWebView2PrintSettings printSettings);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("AA2503C0-8D1C-5A3D-B898-F55F7595268A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_8))]
    internal interface ICoreWebView2_8
    {
        bool IsDocumentPlayingAudio { get; }
        bool IsMuted { get; set; }
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, object> IsDocumentPlayingAudioChanged;
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, object> IsMutedChanged;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("64B2EC16-0B29-5216-BF86-E575C88F7031")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_9))]
    internal interface ICoreWebView2_9
    {
        void OpenDefaultDownloadDialog();
        void CloseDefaultDownloadDialog();
        CoreWebView2DefaultDownloadDialogCornerAlignment DefaultDownloadDialogCornerAlignment { get; set; }
        global::Windows.Foundation.Point DefaultDownloadDialogMargin { get; set; }
        bool IsDefaultDownloadDialogOpen { get; }
        event global::Windows.Foundation.TypedEventHandler<CoreWebView2, object> IsDefaultDownloadDialogOpenChanged;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("2D988546-9962-516B-BE53-859FB0F50179")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_Manual))]
    internal interface ICoreWebView2_Manual
    {
        void AddWebResourceRequestedFilter(string uri, CoreWebView2WebResourceContext resourceContext, CoreWebView2WebResourceRequestSourceKinds requestSourceKinds);
        void RemoveWebResourceRequestedFilter(string uri, CoreWebView2WebResourceContext resourceContext, CoreWebView2WebResourceRequestSourceKinds requestSourceKinds);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Web.WebView2.Core")][Guid("57D0C484-F304-52D4-85A6-68CFAFD63B61")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2_Manual2))]
    internal interface ICoreWebView2_Manual2
    {
        void PostWebMessageAsJson(string webMessageAsJson, global::System.Collections.Generic.IReadOnlyList<object> additionalObjects);
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.Web.WebView2.Core
{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2 obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2 obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2Methods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2 FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2 obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2RcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2AcceleratorKeyPressedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2AcceleratorKeyPressedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2AcceleratorKeyPressedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2AcceleratorKeyPressedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2BasicAuthenticationRequestedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BasicAuthenticationRequestedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BasicAuthenticationRequestedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2BasicAuthenticationRequestedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2BasicAuthenticationResponse
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationResponse obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationResponse>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BasicAuthenticationResponseMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationResponse obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BasicAuthenticationResponseMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationResponse FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationResponse.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationResponse obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationResponse>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationResponse[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationResponse>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationResponse>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationResponse[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationResponse>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationResponse[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationResponse>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationResponse[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationResponse>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationResponse>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationResponse>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2BasicAuthenticationResponseRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationResponse(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2BrowserExtension
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BrowserExtensionMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BrowserExtensionMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2BrowserExtensionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2BrowserProcessExitedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BrowserProcessExitedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2BrowserProcessExitedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2BrowserProcessExitedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2Certificate
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2Certificate obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2Certificate>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CertificateMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2Certificate obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CertificateMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2Certificate FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2Certificate.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2Certificate obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Certificate>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2Certificate[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Certificate>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Certificate>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2Certificate[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Certificate>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2Certificate[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Certificate>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2Certificate[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Certificate>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Certificate>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Certificate>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2CertificateRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2Certificate(inspectable.ObjRef);
    }
    internal static class CoreWebView2Certificate_ManualMethods
    {


        internal static unsafe global::Windows.Security.Cryptography.Certificates.Certificate ToCertificate(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Security.Cryptography.Certificates.Certificate.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Security.Cryptography.Certificates.Certificate.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE5, 0xF, 0x9B, 0x4B, 0xD9, 0xA, 0x94, 0x55, 0x81, 0xE7, 0xB1, 0x8E, 0xCC, 0x6, 0x36, 0xDE };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4B9B0FE5-0AD9-5594-81E7-B18ECC0636DE")]
    internal interface CoreWebView2Certificate_Manual : global::Microsoft.Web.WebView2.Core.CoreWebView2Certificate_Manual
    {
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2ClientCertificate
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificateMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificateMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2ClientCertificateRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2ClientCertificateRequestedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificateRequestedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificateRequestedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2ClientCertificateRequestedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs(inspectable.ObjRef);
    }
    internal static class CoreWebView2ClientCertificate_ManualMethods
    {


        internal static unsafe global::Windows.Security.Cryptography.Certificates.Certificate ToCertificate(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Security.Cryptography.Certificates.Certificate.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Security.Cryptography.Certificates.Certificate.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC2, 0xEF, 0xEF, 0xFA, 0xC3, 0x20, 0x86, 0x5D, 0x8A, 0x74, 0xF6, 0xD8, 0x7D, 0x6F, 0xF8, 0xFA };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("FAEFEFC2-20C3-5D86-8A74-F6D87D6FF8FA")]
    internal interface CoreWebView2ClientCertificate_Manual : global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate_Manual
    {
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2CompositionController
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CompositionControllerMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CompositionControllerMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2CompositionControllerRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2ContentLoadingEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContentLoadingEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContentLoadingEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2ContentLoadingEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2ContextMenuItem
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuItemMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuItemMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2ContextMenuItemRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2ContextMenuRequestedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuRequestedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuRequestedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2ContextMenuRequestedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2ContextMenuTarget
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuTargetMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuTargetMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2ContextMenuTargetRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2Controller
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2Controller obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2Controller obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2Controller FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2Controller.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2Controller obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2Controller[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2Controller[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2Controller[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2Controller[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2ControllerRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2Controller(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2ControllerOptions
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerOptionsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerOptionsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2ControllerOptionsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2ControllerWindowReference
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerWindowReferenceMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ControllerWindowReferenceMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2ControllerWindowReferenceRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2Cookie
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2Cookie obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2Cookie>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CookieMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2Cookie obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CookieMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2Cookie FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2Cookie.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2Cookie obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Cookie>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2Cookie[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Cookie>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Cookie>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2Cookie[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Cookie>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2Cookie[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Cookie>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2Cookie[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Cookie>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Cookie>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Cookie>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2CookieRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2Cookie(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2CookieManager
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2CookieManager obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2CookieManager>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CookieManagerMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2CookieManager obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CookieManagerMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2CookieManager FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2CookieManager.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2CookieManager obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2CookieManager>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2CookieManager[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2CookieManager>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2CookieManager>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2CookieManager[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2CookieManager>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2CookieManager[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2CookieManager>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2CookieManager[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2CookieManager>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2CookieManager>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2CookieManager>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2CookieManagerRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2CookieManager(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2CustomSchemeRegistration
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CustomSchemeRegistrationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2CustomSchemeRegistrationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2CustomSchemeRegistrationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2DOMContentLoadedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DOMContentLoadedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DOMContentLoadedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2DOMContentLoadedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2DevToolsProtocolEventReceivedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceivedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceivedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DevToolsProtocolEventReceivedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceivedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DevToolsProtocolEventReceivedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceivedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceivedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceivedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceivedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceivedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceivedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceivedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceivedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceivedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceivedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceivedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceivedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceivedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceivedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceivedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2DevToolsProtocolEventReceivedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceivedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2DevToolsProtocolEventReceiver
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceiver obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceiver>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DevToolsProtocolEventReceiverMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceiver obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DevToolsProtocolEventReceiverMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceiver FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceiver.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceiver obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceiver>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceiver[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceiver>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceiver>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceiver[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceiver>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceiver[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceiver>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceiver[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceiver>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceiver>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceiver>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2DevToolsProtocolEventReceiverRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceiver(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2DownloadOperation
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadOperationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadOperationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2DownloadOperationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2DownloadStartingEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadStartingEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DownloadStartingEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2DownloadStartingEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2Environment
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2Environment obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2Environment>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2Environment obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2Environment FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2Environment.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2Environment obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Environment>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2Environment[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Environment>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Environment>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2Environment[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Environment>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2Environment[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Environment>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2Environment[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Environment>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Environment>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Environment>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2EnvironmentRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2Environment(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2EnvironmentOptions
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptionsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptionsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2EnvironmentOptionsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2ExecuteScriptResult
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2ExecuteScriptResult obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2ExecuteScriptResult>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ExecuteScriptResultMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2ExecuteScriptResult obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ExecuteScriptResultMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2ExecuteScriptResult FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2ExecuteScriptResult.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2ExecuteScriptResult obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ExecuteScriptResult>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ExecuteScriptResult[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ExecuteScriptResult>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ExecuteScriptResult>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ExecuteScriptResult[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ExecuteScriptResult>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ExecuteScriptResult[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ExecuteScriptResult>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ExecuteScriptResult[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ExecuteScriptResult>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ExecuteScriptResult>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ExecuteScriptResult>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2ExecuteScriptResultRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2ExecuteScriptResult(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2File
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2File obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2File>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FileMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2File obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FileMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2File FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2File.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2File obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2File>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2File[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2File>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2File>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2File[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2File>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2File[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2File>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2File[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2File>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2File>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2File>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2FileRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2File(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2FileSystemHandle
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandle obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandle>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FileSystemHandleMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandle obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FileSystemHandleMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandle FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandle.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandle obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandle>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandle[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandle>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandle>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandle[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandle>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandle[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandle>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandle[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandle>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandle>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandle>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2FileSystemHandleRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandle(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2Frame
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2Frame obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FrameMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2Frame obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FrameMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2Frame FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2Frame.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2Frame obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2Frame[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2Frame[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2Frame[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2Frame[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2FrameRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2Frame(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2FrameCreatedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2FrameCreatedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2FrameCreatedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FrameCreatedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2FrameCreatedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FrameCreatedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2FrameCreatedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2FrameCreatedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2FrameCreatedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2FrameCreatedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2FrameCreatedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2FrameCreatedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2FrameCreatedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2FrameCreatedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2FrameCreatedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2FrameCreatedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2FrameCreatedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2FrameCreatedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2FrameCreatedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2FrameCreatedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2FrameCreatedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2FrameCreatedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2FrameCreatedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2FrameInfo
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FrameInfoMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2FrameInfoMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2FrameInfoRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2HttpHeadersCollectionIterator
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2HttpHeadersCollectionIteratorMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2HttpHeadersCollectionIteratorMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2HttpHeadersCollectionIteratorRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2HttpRequestHeaders
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2HttpRequestHeadersMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2HttpRequestHeadersMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2HttpRequestHeadersRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2HttpResponseHeaders
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2HttpResponseHeadersMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2HttpResponseHeadersMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2HttpResponseHeadersRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2LaunchingExternalUriSchemeEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2LaunchingExternalUriSchemeEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2LaunchingExternalUriSchemeEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2LaunchingExternalUriSchemeEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2MoveFocusRequestedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusRequestedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusRequestedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2MoveFocusRequestedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusRequestedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2MoveFocusRequestedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusRequestedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusRequestedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusRequestedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusRequestedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusRequestedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusRequestedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusRequestedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusRequestedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusRequestedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusRequestedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusRequestedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusRequestedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusRequestedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2MoveFocusRequestedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusRequestedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2NavigationCompletedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NavigationCompletedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NavigationCompletedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2NavigationCompletedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2NavigationStartingEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NavigationStartingEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NavigationStartingEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2NavigationStartingEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2NewWindowRequestedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NewWindowRequestedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NewWindowRequestedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2NewWindowRequestedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2NonClientRegionChangedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionChangedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionChangedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NonClientRegionChangedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionChangedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NonClientRegionChangedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionChangedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionChangedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionChangedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionChangedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionChangedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionChangedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionChangedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionChangedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionChangedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionChangedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionChangedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionChangedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionChangedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2NonClientRegionChangedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionChangedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2Notification
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2Notification obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2Notification>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NotificationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2Notification obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NotificationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2Notification FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2Notification.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2Notification obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Notification>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2Notification[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Notification>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Notification>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2Notification[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Notification>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2Notification[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Notification>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2Notification[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Notification>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Notification>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Notification>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2NotificationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2Notification(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2NotificationReceivedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2NotificationReceivedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2NotificationReceivedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NotificationReceivedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2NotificationReceivedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2NotificationReceivedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2NotificationReceivedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2NotificationReceivedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2NotificationReceivedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NotificationReceivedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2NotificationReceivedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NotificationReceivedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NotificationReceivedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2NotificationReceivedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NotificationReceivedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2NotificationReceivedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NotificationReceivedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2NotificationReceivedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NotificationReceivedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NotificationReceivedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2NotificationReceivedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2NotificationReceivedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2NotificationReceivedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2PermissionRequestedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PermissionRequestedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PermissionRequestedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2PermissionRequestedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2PermissionSetting
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionSetting obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionSetting>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PermissionSettingMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionSetting obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PermissionSettingMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionSetting FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionSetting.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionSetting obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionSetting>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionSetting[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionSetting>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionSetting>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionSetting[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionSetting>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionSetting[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionSetting>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionSetting[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionSetting>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionSetting>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionSetting>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2PermissionSettingRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionSetting(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2PointerInfo
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfoMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2PointerInfoRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2PrintSettings
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettingsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettingsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2PrintSettingsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2ProcessExtendedInfo
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessExtendedInfo obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessExtendedInfo>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProcessExtendedInfoMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessExtendedInfo obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProcessExtendedInfoMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessExtendedInfo FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessExtendedInfo.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessExtendedInfo obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessExtendedInfo>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessExtendedInfo[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessExtendedInfo>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessExtendedInfo>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessExtendedInfo[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessExtendedInfo>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessExtendedInfo[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessExtendedInfo>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessExtendedInfo[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessExtendedInfo>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessExtendedInfo>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessExtendedInfo>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2ProcessExtendedInfoRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessExtendedInfo(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2ProcessFailedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProcessFailedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProcessFailedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2ProcessFailedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2ProcessInfo
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessInfo obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessInfo>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProcessInfoMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessInfo obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProcessInfoMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessInfo FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessInfo.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessInfo obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessInfo>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessInfo[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessInfo>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessInfo>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessInfo[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessInfo>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessInfo[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessInfo>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessInfo[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessInfo>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessInfo>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessInfo>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2ProcessInfoRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessInfo(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2Profile
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2Profile obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2Profile>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProfileMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2Profile obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ProfileMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2Profile FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2Profile.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2Profile obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Profile>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2Profile[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Profile>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Profile>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2Profile[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Profile>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2Profile[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Profile>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2Profile[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Profile>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Profile>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Profile>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2ProfileRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2Profile(inspectable.ObjRef);
    }
    internal static class CoreWebView2Profile_ManualMethods
    {


        internal static unsafe global::Windows.Foundation.IAsyncAction ClearBrowsingDataAsync(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2BrowsingDataKinds dataKinds, global::System.DateTimeOffset startTime, global::System.DateTimeOffset endTime)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.DateTimeOffset.Marshaler __startTime = default;
            global::ABI.System.DateTimeOffset.Marshaler __endTime = default;
            IntPtr __retval = default;
            try
            {
                __startTime = global::ABI.System.DateTimeOffset.CreateMarshaler(startTime);
                __endTime = global::ABI.System.DateTimeOffset.CreateMarshaler(endTime);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2BrowsingDataKinds, global::ABI.System.DateTimeOffset, global::ABI.System.DateTimeOffset, IntPtr*, int>**)ThisPtr)[6](ThisPtr, dataKinds, global::ABI.System.DateTimeOffset.GetAbi(__startTime), global::ABI.System.DateTimeOffset.GetAbi(__endTime), &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Windows.Foundation.IAsyncAction>.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.DateTimeOffset.DisposeMarshaler(__startTime);
                global::ABI.System.DateTimeOffset.DisposeMarshaler(__endTime);
                MarshalInterface<global::Windows.Foundation.IAsyncAction>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncAction ClearBrowsingDataAsync(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Windows.Foundation.IAsyncAction>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncAction>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB4, 0xFA, 0x2B, 0xB4, 0xBF, 0xC4, 0x69, 0x54, 0x89, 0xAC, 0xCA, 0xDC, 0x69, 0xE3, 0xB0, 0xF5 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B42BFAB4-C4BF-5469-89AC-CADC69E3B0F5")]
    internal interface CoreWebView2Profile_Manual : global::Microsoft.Web.WebView2.Core.CoreWebView2Profile_Manual
    {
    }
    internal static class CoreWebView2Profile_Manual2Methods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionSetting>> GetNonDefaultPermissionSettingsAsync(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Foundation_Collections_IVectorView_1_Microsoft_Web_WebView2_Core_CoreWebView2PermissionSetting_.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionSetting>>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionSetting>>>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x5A, 0x81, 0x62, 0x6E, 0x69, 0x62, 0x56, 0x57, 0x92, 0xC3, 0xF0, 0x8A, 0xFE, 0x17, 0x64, 0x9C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("6E62815A-6269-5756-92C3-F08AFE17649C")]
    internal interface CoreWebView2Profile_Manual2 : global::Microsoft.Web.WebView2.Core.CoreWebView2Profile_Manual2
    {
    }
    internal static class CoreWebView2Profile_Manual3Methods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension>> GetBrowserExtensionsAsync(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Foundation_Collections_IVectorView_1_Microsoft_Web_WebView2_Core_CoreWebView2BrowserExtension_.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension>>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension>>>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x71, 0x99, 0x12, 0xC6, 0xCC, 0x9E, 0x34, 0x56, 0x88, 0x96, 0x72, 0x3C, 0x1D, 0xBA, 0xCD, 0x6F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C6129971-9ECC-5634-8896-723C1DBACD6F")]
    internal interface CoreWebView2Profile_Manual3 : global::Microsoft.Web.WebView2.Core.CoreWebView2Profile_Manual3
    {
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2SaveAsUIShowingEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SaveAsUIShowingEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SaveAsUIShowingEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2SaveAsUIShowingEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2SaveFileSecurityCheckStartingEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2SaveFileSecurityCheckStartingEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2SaveFileSecurityCheckStartingEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SaveFileSecurityCheckStartingEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2SaveFileSecurityCheckStartingEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SaveFileSecurityCheckStartingEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2SaveFileSecurityCheckStartingEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2SaveFileSecurityCheckStartingEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2SaveFileSecurityCheckStartingEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2SaveFileSecurityCheckStartingEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2SaveFileSecurityCheckStartingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2SaveFileSecurityCheckStartingEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2SaveFileSecurityCheckStartingEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2SaveFileSecurityCheckStartingEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2SaveFileSecurityCheckStartingEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2SaveFileSecurityCheckStartingEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2SaveFileSecurityCheckStartingEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2SaveFileSecurityCheckStartingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2SaveFileSecurityCheckStartingEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2SaveFileSecurityCheckStartingEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2SaveFileSecurityCheckStartingEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2SaveFileSecurityCheckStartingEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2SaveFileSecurityCheckStartingEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2ScreenCaptureStartingEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2ScreenCaptureStartingEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2ScreenCaptureStartingEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ScreenCaptureStartingEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2ScreenCaptureStartingEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ScreenCaptureStartingEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2ScreenCaptureStartingEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2ScreenCaptureStartingEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2ScreenCaptureStartingEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ScreenCaptureStartingEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ScreenCaptureStartingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ScreenCaptureStartingEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ScreenCaptureStartingEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ScreenCaptureStartingEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ScreenCaptureStartingEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ScreenCaptureStartingEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ScreenCaptureStartingEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ScreenCaptureStartingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ScreenCaptureStartingEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ScreenCaptureStartingEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ScreenCaptureStartingEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2ScreenCaptureStartingEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2ScreenCaptureStartingEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2ScriptDialogOpeningEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ScriptDialogOpeningEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ScriptDialogOpeningEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2ScriptDialogOpeningEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2ScriptException
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptException obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptException>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ScriptExceptionMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptException obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ScriptExceptionMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptException FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptException.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptException obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptException>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptException[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptException>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptException>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptException[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptException>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptException[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptException>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptException[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptException>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptException>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptException>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2ScriptExceptionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptException(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2ServerCertificateErrorDetectedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ServerCertificateErrorDetectedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2ServerCertificateErrorDetectedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2ServerCertificateErrorDetectedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2Settings
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2Settings obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2Settings>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SettingsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2Settings obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SettingsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2Settings FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2Settings.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2Settings obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Settings>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2Settings[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Settings>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Settings>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2Settings[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Settings>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2Settings[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Settings>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2Settings[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Settings>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Settings>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2Settings>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2SettingsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2Settings(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2SharedBuffer
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SharedBufferMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SharedBufferMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2SharedBufferRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2SourceChangedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SourceChangedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2SourceChangedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2SourceChangedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2WebMessageReceivedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebMessageReceivedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebMessageReceivedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2WebMessageReceivedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2WebResourceRequest
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceRequestMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceRequestMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2WebResourceRequestRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2WebResourceRequestedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceRequestedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceRequestedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2WebResourceRequestedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2WebResourceResponse
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponseMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponseMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2WebResourceResponseRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2WebResourceResponseReceivedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseReceivedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseReceivedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponseReceivedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseReceivedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponseReceivedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseReceivedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseReceivedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseReceivedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseReceivedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseReceivedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseReceivedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseReceivedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseReceivedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseReceivedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseReceivedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseReceivedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseReceivedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseReceivedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseReceivedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseReceivedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2WebResourceResponseReceivedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseReceivedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2WebResourceResponseView
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseView obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseView>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponseViewMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseView obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponseViewMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseView FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseView.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseView obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseView>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseView[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseView>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseView>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseView[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseView>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseView[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseView>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseView[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseView>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseView>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseView>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2WebResourceResponseViewRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseView(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CoreWebView2WindowFeatures
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WindowFeaturesMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2WindowFeaturesMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures FromAbi(IntPtr thisPtr) => global::Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures>.MarshalerArray CreateMarshalerArray(global::Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures>.GetAbiArray(box);
        public static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures[] array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CoreWebView2WindowFeaturesRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures(inspectable.ObjRef);
    }
    internal static class ICoreWebView2Methods
    {


        internal static unsafe void Navigate(IObjectReference _obj, string uri)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __uri = new(uri);
            fixed(void* ___uri = __uri)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[45](ThisPtr, MarshalString.GetAbi(ref __uri)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe void NavigateToString(IObjectReference _obj, string htmlContent)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __htmlContent = new(htmlContent);
            fixed(void* ___htmlContent = __htmlContent)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[46](ThisPtr, MarshalString.GetAbi(ref __htmlContent)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<string> AddScriptToExecuteOnDocumentCreatedAsync(IObjectReference _obj, string javaScript)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __javaScript = new(javaScript);
                fixed(void* ___javaScript = __javaScript)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[47](ThisPtr, MarshalString.GetAbi(ref __javaScript), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_String.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperation<string>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<string>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe void RemoveScriptToExecuteOnDocumentCreated(IObjectReference _obj, string id)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __id = new(id);
            fixed(void* ___id = __id)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[48](ThisPtr, MarshalString.GetAbi(ref __id)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<string> ExecuteScriptAsync(IObjectReference _obj, string javaScript)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __javaScript = new(javaScript);
                fixed(void* ___javaScript = __javaScript)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[49](ThisPtr, MarshalString.GetAbi(ref __javaScript), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_String.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperation<string>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<string>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncAction CapturePreviewAsync(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2CapturePreviewImageFormat imageFormat, global::Windows.Storage.Streams.IRandomAccessStream imageStream)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __imageStream = default;
            IntPtr __retval = default;
            try
            {
                __imageStream = MarshalInterface<global::Windows.Storage.Streams.IRandomAccessStream>.CreateMarshaler2(imageStream, global::ABI.Windows.Storage.Streams.IRandomAccessStreamMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2CapturePreviewImageFormat, IntPtr, IntPtr*, int>**)ThisPtr)[50](ThisPtr, imageFormat, MarshalInspectable<object>.GetAbi(__imageStream), &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Windows.Foundation.IAsyncAction>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__imageStream);
                MarshalInterface<global::Windows.Foundation.IAsyncAction>.DisposeAbi(__retval);
            }
        }

        internal static unsafe void Reload(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[51](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void PostWebMessageAsJson(IObjectReference _obj, string webMessageAsJson)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __webMessageAsJson = new(webMessageAsJson);
            fixed(void* ___webMessageAsJson = __webMessageAsJson)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[52](ThisPtr, MarshalString.GetAbi(ref __webMessageAsJson)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe void PostWebMessageAsString(IObjectReference _obj, string webMessageAsString)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __webMessageAsString = new(webMessageAsString);
            fixed(void* ___webMessageAsString = __webMessageAsString)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[53](ThisPtr, MarshalString.GetAbi(ref __webMessageAsString)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<string> CallDevToolsProtocolMethodAsync(IObjectReference _obj, string methodName, string parametersAsJson)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __methodName = new(methodName);
                MarshalString.Pinnable __parametersAsJson = new(parametersAsJson);
                fixed(void* ___methodName = __methodName, ___parametersAsJson = __parametersAsJson)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[54](ThisPtr, MarshalString.GetAbi(ref __methodName), MarshalString.GetAbi(ref __parametersAsJson), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_String.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperation<string>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<string>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe void GoBack(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[55](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void GoForward(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[56](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceiver GetDevToolsProtocolEventReceiver(IObjectReference _obj, string eventName)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __eventName = new(eventName);
                fixed(void* ___eventName = __eventName)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[57](ThisPtr, MarshalString.GetAbi(ref __eventName), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceiver.FromAbi(__retval);
                }
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceiver.DisposeAbi(__retval);
            }
        }

        internal static unsafe void Stop(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[58](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void AddHostObjectToScript(IObjectReference _obj, string name, object rawObject)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __rawObject = default;
            try
            {
                __rawObject = MarshalInspectable<object>.CreateMarshaler2(rawObject);
                MarshalString.Pinnable __name = new(name);
                fixed(void* ___name = __name)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[59](ThisPtr, MarshalString.GetAbi(ref __name), MarshalInspectable<object>.GetAbi(__rawObject)));
                    global::System.GC.KeepAlive(_obj);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__rawObject);
            }
        }

        internal static unsafe void RemoveHostObjectFromScript(IObjectReference _obj, string name)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __name = new(name);
            fixed(void* ___name = __name)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[60](ThisPtr, MarshalString.GetAbi(ref __name)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe void OpenDevToolsWindow(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[61](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void AddWebResourceRequestedFilter(IObjectReference _obj, string uri, global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceContext ResourceContext)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __uri = new(uri);
            fixed(void* ___uri = __uri)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceContext, int>**)ThisPtr)[62](ThisPtr, MarshalString.GetAbi(ref __uri), ResourceContext));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe void RemoveWebResourceRequestedFilter(IObjectReference _obj, string uri, global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceContext ResourceContext)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __uri = new(uri);
            fixed(void* ___uri = __uri)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceContext, int>**)ThisPtr)[63](ThisPtr, MarshalString.GetAbi(ref __uri), ResourceContext));
                global::System.GC.KeepAlive(_obj);
            }
        }
        internal static unsafe uint get_BrowserProcessId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe bool get_CanGoBack(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_CanGoForward(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_ContainsFullScreenElement(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe string get_DocumentTitle(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2Settings get_Settings(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Settings.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Settings.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_Source(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>>> _ContainsFullScreenElementChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>>> MakeContainsFullScreenElementChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ContainsFullScreenElementChanged_, new(), null);
            return _ContainsFullScreenElementChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>>> _ContainsFullScreenElementChanged => _ContainsFullScreenElementChanged_ ?? MakeContainsFullScreenElementChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>> Get_ContainsFullScreenElementChanged2(IObjectReference _obj, object _thisObj)
        {
            return _ContainsFullScreenElementChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[39],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[40],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs>>> _ContentLoading_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs>>> MakeContentLoadingTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ContentLoading_, new(), null);
            return _ContentLoading_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs>>> _ContentLoading => _ContentLoading_ ?? MakeContentLoadingTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs>> Get_ContentLoading2(IObjectReference _obj, object _thisObj)
        {
            return _ContentLoading.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__global__Microsoft_Web_WebView2_Core_CoreWebView2ContentLoadingEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[15],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[16],
                1);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>>> _DocumentTitleChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>>> MakeDocumentTitleChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _DocumentTitleChanged_, new(), null);
            return _DocumentTitleChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>>> _DocumentTitleChanged => _DocumentTitleChanged_ ?? MakeDocumentTitleChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>> Get_DocumentTitleChanged2(IObjectReference _obj, object _thisObj)
        {
            return _DocumentTitleChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[37],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[38],
                2);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs>>> _FrameNavigationCompleted_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs>>> MakeFrameNavigationCompletedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _FrameNavigationCompleted_, new(), null);
            return _FrameNavigationCompleted_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs>>> _FrameNavigationCompleted => _FrameNavigationCompleted_ ?? MakeFrameNavigationCompletedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs>> Get_FrameNavigationCompleted2(IObjectReference _obj, object _thisObj)
        {
            return _FrameNavigationCompleted.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__global__Microsoft_Web_WebView2_Core_CoreWebView2NavigationCompletedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[25],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[26],
                3);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs>>> _FrameNavigationStarting_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs>>> MakeFrameNavigationStartingTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _FrameNavigationStarting_, new(), null);
            return _FrameNavigationStarting_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs>>> _FrameNavigationStarting => _FrameNavigationStarting_ ?? MakeFrameNavigationStartingTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs>> Get_FrameNavigationStarting2(IObjectReference _obj, object _thisObj)
        {
            return _FrameNavigationStarting.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__global__Microsoft_Web_WebView2_Core_CoreWebView2NavigationStartingEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[23],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[24],
                4);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>>> _HistoryChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>>> MakeHistoryChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _HistoryChanged_, new(), null);
            return _HistoryChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>>> _HistoryChanged => _HistoryChanged_ ?? MakeHistoryChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>> Get_HistoryChanged2(IObjectReference _obj, object _thisObj)
        {
            return _HistoryChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[19],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[20],
                5);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs>>> _NavigationCompleted_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs>>> MakeNavigationCompletedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _NavigationCompleted_, new(), null);
            return _NavigationCompleted_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs>>> _NavigationCompleted => _NavigationCompleted_ ?? MakeNavigationCompletedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs>> Get_NavigationCompleted2(IObjectReference _obj, object _thisObj)
        {
            return _NavigationCompleted.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__global__Microsoft_Web_WebView2_Core_CoreWebView2NavigationCompletedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[21],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[22],
                6);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs>>> _NavigationStarting_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs>>> MakeNavigationStartingTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _NavigationStarting_, new(), null);
            return _NavigationStarting_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs>>> _NavigationStarting => _NavigationStarting_ ?? MakeNavigationStartingTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs>> Get_NavigationStarting2(IObjectReference _obj, object _thisObj)
        {
            return _NavigationStarting.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__global__Microsoft_Web_WebView2_Core_CoreWebView2NavigationStartingEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[13],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[14],
                7);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs>>> _NewWindowRequested_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs>>> MakeNewWindowRequestedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _NewWindowRequested_, new(), null);
            return _NewWindowRequested_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs>>> _NewWindowRequested => _NewWindowRequested_ ?? MakeNewWindowRequestedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs>> Get_NewWindowRequested2(IObjectReference _obj, object _thisObj)
        {
            return _NewWindowRequested.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__global__Microsoft_Web_WebView2_Core_CoreWebView2NewWindowRequestedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[35],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[36],
                8);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs>>> _PermissionRequested_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs>>> MakePermissionRequestedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _PermissionRequested_, new(), null);
            return _PermissionRequested_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs>>> _PermissionRequested => _PermissionRequested_ ?? MakePermissionRequestedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs>> Get_PermissionRequested2(IObjectReference _obj, object _thisObj)
        {
            return _PermissionRequested.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__global__Microsoft_Web_WebView2_Core_CoreWebView2PermissionRequestedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[29],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[30],
                9);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs>>> _ProcessFailed_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs>>> MakeProcessFailedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ProcessFailed_, new(), null);
            return _ProcessFailed_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs>>> _ProcessFailed => _ProcessFailed_ ?? MakeProcessFailedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs>> Get_ProcessFailed2(IObjectReference _obj, object _thisObj)
        {
            return _ProcessFailed.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__global__Microsoft_Web_WebView2_Core_CoreWebView2ProcessFailedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[31],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[32],
                10);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs>>> _ScriptDialogOpening_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs>>> MakeScriptDialogOpeningTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ScriptDialogOpening_, new(), null);
            return _ScriptDialogOpening_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs>>> _ScriptDialogOpening => _ScriptDialogOpening_ ?? MakeScriptDialogOpeningTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs>> Get_ScriptDialogOpening2(IObjectReference _obj, object _thisObj)
        {
            return _ScriptDialogOpening.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__global__Microsoft_Web_WebView2_Core_CoreWebView2ScriptDialogOpeningEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[27],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[28],
                11);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs>>> _SourceChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs>>> MakeSourceChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _SourceChanged_, new(), null);
            return _SourceChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs>>> _SourceChanged => _SourceChanged_ ?? MakeSourceChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs>> Get_SourceChanged2(IObjectReference _obj, object _thisObj)
        {
            return _SourceChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__global__Microsoft_Web_WebView2_Core_CoreWebView2SourceChangedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[17],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[18],
                12);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs>>> _WebMessageReceived_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs>>> MakeWebMessageReceivedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _WebMessageReceived_, new(), null);
            return _WebMessageReceived_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs>>> _WebMessageReceived => _WebMessageReceived_ ?? MakeWebMessageReceivedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs>> Get_WebMessageReceived2(IObjectReference _obj, object _thisObj)
        {
            return _WebMessageReceived.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__global__Microsoft_Web_WebView2_Core_CoreWebView2WebMessageReceivedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[33],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[34],
                13);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs>>> _WebResourceRequested_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs>>> MakeWebResourceRequestedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _WebResourceRequested_, new(), null);
            return _WebResourceRequested_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs>>> _WebResourceRequested => _WebResourceRequested_ ?? MakeWebResourceRequestedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs>> Get_WebResourceRequested2(IObjectReference _obj, object _thisObj)
        {
            return _WebResourceRequested.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__global__Microsoft_Web_WebView2_Core_CoreWebView2WebResourceRequestedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[41],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[42],
                14);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>>> _WindowCloseRequested_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>>> MakeWindowCloseRequestedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _WindowCloseRequested_, new(), null);
            return _WindowCloseRequested_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>>> _WindowCloseRequested => _WindowCloseRequested_ ?? MakeWindowCloseRequestedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>> Get_WindowCloseRequested2(IObjectReference _obj, object _thisObj)
        {
            return _WindowCloseRequested.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[43],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[44],
                15);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x9A, 0x55, 0x3F, 0x3A, 0xE9, 0xE5, 0x38, 0x53, 0xBB, 0x67, 0x4E, 0xB0, 0x50, 0x4A, 0x4F, 0x14 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("3A3F559A-E5E9-5338-BB67-4EB0504A4F14")]
    internal interface ICoreWebView2 : global::Microsoft.Web.WebView2.Core.ICoreWebView2
    {
    }
    internal static class ICoreWebView2AcceleratorKeyPressedEventArgsMethods
    {

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[11](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2KeyEventKind get_KeyEventKind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2KeyEventKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2KeyEventKind*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe int get_KeyEventLParam(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2PhysicalKeyStatus get_PhysicalKeyStatus(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2PhysicalKeyStatus __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2PhysicalKeyStatus*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe uint get_VirtualKey(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x0, 0x61, 0xA5, 0x41, 0xA5, 0x92, 0xD1, 0x59, 0x9E, 0x71, 0x92, 0x22, 0xE3, 0x3A, 0xE3, 0x8B };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("41A56100-92A5-59D1-9E71-9222E33AE38B")]
    internal interface ICoreWebView2AcceleratorKeyPressedEventArgs : global::Microsoft.Web.WebView2.Core.ICoreWebView2AcceleratorKeyPressedEventArgs
    {
    }
    internal static class ICoreWebView2AcceleratorKeyPressedEventArgs2Methods
    {

        internal static unsafe bool get_IsBrowserAcceleratorKeyEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsBrowserAcceleratorKeyEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x18, 0xAA, 0x3, 0x4D, 0x6D, 0x80, 0x10, 0x5F, 0x9A, 0xD8, 0xCF, 0x5D, 0x32, 0x7A, 0x58, 0xFB };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4D03AA18-806D-5F10-9AD8-CF5D327A58FB")]
    internal interface ICoreWebView2AcceleratorKeyPressedEventArgs2 : global::Microsoft.Web.WebView2.Core.ICoreWebView2AcceleratorKeyPressedEventArgs2
    {
    }
    internal static class ICoreWebView2BasicAuthenticationRequestedEventArgsMethods
    {


        internal static unsafe global::Windows.Foundation.Deferral GetDeferral(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Foundation.Deferral.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Foundation.Deferral.DisposeAbi(__retval);
            }
        }
        internal static unsafe bool get_Cancel(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Cancel(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[10](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe string get_Challenge(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationResponse get_Response(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationResponse.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationResponse.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_Uri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC, 0x33, 0x16, 0x4B, 0xA5, 0x4C, 0x5E, 0x55, 0xAF, 0x21, 0x16, 0x43, 0x34, 0x40, 0x5F, 0x63 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4B16330C-4CA5-555E-AF21-164334405F63")]
    internal interface ICoreWebView2BasicAuthenticationRequestedEventArgs : global::Microsoft.Web.WebView2.Core.ICoreWebView2BasicAuthenticationRequestedEventArgs
    {
    }
    internal static class ICoreWebView2BasicAuthenticationResponseMethods
    {

        internal static unsafe string get_Password(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Password(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe string get_UserName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_UserName(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB9, 0x33, 0xDF, 0x8, 0x38, 0x6E, 0x62, 0x59, 0x9F, 0xFD, 0xCA, 0xAB, 0x3C, 0x30, 0xFB, 0xC1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("08DF33B9-6E38-5962-9FFD-CAAB3C30FBC1")]
    internal interface ICoreWebView2BasicAuthenticationResponse : global::Microsoft.Web.WebView2.Core.ICoreWebView2BasicAuthenticationResponse
    {
    }
    internal static class ICoreWebView2BrowserExtensionMethods
    {


        internal static unsafe global::Windows.Foundation.IAsyncAction RemoveAsync(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Windows.Foundation.IAsyncAction>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncAction>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncAction EnableAsync(IObjectReference _obj, bool IsEnabled)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, IntPtr*, int>**)ThisPtr)[10](ThisPtr, (byte)(IsEnabled ? 1 : 0), &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Windows.Foundation.IAsyncAction>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncAction>.DisposeAbi(__retval);
            }
        }
        internal static unsafe string get_Id(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool get_IsEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe string get_Name(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x43, 0x14, 0x99, 0xBF, 0x4F, 0xEE, 0xB8, 0x57, 0xBF, 0x2C, 0x81, 0xCD, 0x6D, 0xBE, 0x11, 0x53 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("BF991443-EE4F-57B8-BF2C-81CD6DBE1153")]
    internal interface ICoreWebView2BrowserExtension : global::Microsoft.Web.WebView2.Core.ICoreWebView2BrowserExtension
    {
    }
    internal static class ICoreWebView2BrowserProcessExitedEventArgsMethods
    {

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitKind get_BrowserProcessExitKind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitKind*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe uint get_BrowserProcessId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x77, 0x3F, 0x96, 0x79, 0x84, 0x14, 0x46, 0x5A, 0xB9, 0x1F, 0xDF, 0xC5, 0xC1, 0xA0, 0xCE, 0x14 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("79963F77-1484-5A46-B91F-DFC5C1A0CE14")]
    internal interface ICoreWebView2BrowserProcessExitedEventArgs : global::Microsoft.Web.WebView2.Core.ICoreWebView2BrowserProcessExitedEventArgs
    {
    }
    internal static class ICoreWebView2CertificateMethods
    {


        internal static unsafe string ToPemEncoding(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe string get_DerEncodedSerialNumber(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_DisplayName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_Issuer(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Collections.Generic.IReadOnlyList<string> get_PemEncodedIssuerCertificateChain(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_String.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IReadOnlyList<string>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IReadOnlyList<string>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_Subject(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe double get_ValidFrom(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_ValidTo(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x75, 0x3B, 0x4A, 0x41, 0xC1, 0x1B, 0xE1, 0x55, 0x99, 0x26, 0x26, 0x8C, 0xA, 0x34, 0x62, 0xC7 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("414A3B75-1BC1-55E1-9926-268C0A3462C7")]
    internal interface ICoreWebView2Certificate : global::Microsoft.Web.WebView2.Core.ICoreWebView2Certificate
    {
    }
    internal static class ICoreWebView2ClientCertificateMethods
    {


        internal static unsafe string ToPemEncoding(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe string get_DerEncodedSerialNumber(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_DisplayName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_Issuer(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateKind get_Kind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateKind*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::System.Collections.Generic.IReadOnlyList<string> get_PemEncodedIssuerCertificateChain(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_String.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IReadOnlyList<string>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IReadOnlyList<string>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_Subject(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe double get_ValidFrom(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_ValidTo(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF2, 0x39, 0x1B, 0x9, 0xDF, 0x68, 0xB4, 0x52, 0x8F, 0xB0, 0xFD, 0x35, 0x61, 0xAF, 0x41, 0xF2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("091B39F2-68DF-52B4-8FB0-FD3561AF41F2")]
    internal interface ICoreWebView2ClientCertificate : global::Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificate
    {
    }
    internal static class ICoreWebView2ClientCertificateRequestedEventArgsMethods
    {


        internal static unsafe global::Windows.Foundation.Deferral GetDeferral(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[17](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Foundation.Deferral.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Foundation.Deferral.DisposeAbi(__retval);
            }
        }
        internal static unsafe global::System.Collections.Generic.IReadOnlyList<string> get_AllowedCertificateAuthorities(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_String.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IReadOnlyList<string>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IReadOnlyList<string>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool get_Cancel(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Cancel(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[14](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[15](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[16](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe string get_Host(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool get_IsProxy(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate> get_MutuallyTrustedCertificates(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Microsoft_Web_WebView2_Core_CoreWebView2ClientCertificate.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe int get_Port(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate get_SelectedCertificate(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SelectedCertificate(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[12](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x55, 0x7B, 0x28, 0x93, 0xF9, 0x31, 0xA0, 0x55, 0xB6, 0x8B, 0xD9, 0x84, 0x1D, 0x7E, 0x1B, 0xF4 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("93287B55-31F9-55A0-B68B-D9841D7E1BF4")]
    internal interface ICoreWebView2ClientCertificateRequestedEventArgs : global::Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificateRequestedEventArgs
    {
    }
    internal static class ICoreWebView2CompositionControllerMethods
    {


        internal static unsafe void SendMouseInput(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2MouseEventKind eventKind, global::Microsoft.Web.WebView2.Core.CoreWebView2MouseEventVirtualKeys virtualKeys, uint mouseData, global::Windows.Foundation.Point point)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2MouseEventKind, global::Microsoft.Web.WebView2.Core.CoreWebView2MouseEventVirtualKeys, uint, global::Windows.Foundation.Point, int>**)ThisPtr)[10](ThisPtr, eventKind, virtualKeys, mouseData, point));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void SendPointerInput(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2PointerEventKind eventKind, global::Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo pointerInfo)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __pointerInfo = default;
            try
            {
                __pointerInfo = global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo.CreateMarshaler2(pointerInfo);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2PointerEventKind, IntPtr, int>**)ThisPtr)[11](ThisPtr, eventKind, MarshalInspectable<object>.GetAbi(__pointerInfo)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__pointerInfo);
            }
        }

        internal static unsafe global::Windows.ApplicationModel.DataTransfer.DataPackageOperation DragEnter(IObjectReference _obj, global::Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragInfo dragInfo, global::Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragUIOverride dragUIOverride)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dragInfo = default;
            ObjectReferenceValue __dragUIOverride = default;
            global::Windows.ApplicationModel.DataTransfer.DataPackageOperation __retval = default;
            try
            {
                __dragInfo = global::ABI.Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragInfo.CreateMarshaler2(dragInfo);
                __dragUIOverride = global::ABI.Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragUIOverride.CreateMarshaler2(dragUIOverride);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, global::Windows.ApplicationModel.DataTransfer.DataPackageOperation*, int>**)ThisPtr)[13](ThisPtr, MarshalInspectable<object>.GetAbi(__dragInfo), MarshalInspectable<object>.GetAbi(__dragUIOverride), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dragInfo);
                MarshalInspectable<object>.DisposeMarshaler(__dragUIOverride);
            }
        }

        internal static unsafe global::Windows.ApplicationModel.DataTransfer.DataPackageOperation DragOver(IObjectReference _obj, global::Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragInfo dragInfo, global::Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragUIOverride dragUIOverride)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dragInfo = default;
            ObjectReferenceValue __dragUIOverride = default;
            global::Windows.ApplicationModel.DataTransfer.DataPackageOperation __retval = default;
            try
            {
                __dragInfo = global::ABI.Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragInfo.CreateMarshaler2(dragInfo);
                __dragUIOverride = global::ABI.Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragUIOverride.CreateMarshaler2(dragUIOverride);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, global::Windows.ApplicationModel.DataTransfer.DataPackageOperation*, int>**)ThisPtr)[14](ThisPtr, MarshalInspectable<object>.GetAbi(__dragInfo), MarshalInspectable<object>.GetAbi(__dragUIOverride), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dragInfo);
                MarshalInspectable<object>.DisposeMarshaler(__dragUIOverride);
            }
        }

        internal static unsafe global::Windows.ApplicationModel.DataTransfer.DataPackageOperation Drop(IObjectReference _obj, global::Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragInfo dragInfo)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dragInfo = default;
            global::Windows.ApplicationModel.DataTransfer.DataPackageOperation __retval = default;
            try
            {
                __dragInfo = global::ABI.Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragInfo.CreateMarshaler2(dragInfo);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Windows.ApplicationModel.DataTransfer.DataPackageOperation*, int>**)ThisPtr)[15](ThisPtr, MarshalInspectable<object>.GetAbi(__dragInfo), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dragInfo);
            }
        }
        internal static unsafe global::Windows.UI.Core.CoreCursor get_Cursor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.UI.Core.CoreCursor.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.UI.Core.CoreCursor.DisposeAbi(__retval);
            }
        }

        internal static unsafe object get_RootVisualTarget(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_RootVisualTarget(IObjectReference _obj, object value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInspectable<object>.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController, object>>> _CursorChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController, object>>> MakeCursorChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _CursorChanged_, new(), null);
            return _CursorChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController, object>>> _CursorChanged => _CursorChanged_ ?? MakeCursorChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController, object>> Get_CursorChanged2(IObjectReference _obj, object _thisObj)
        {
            return _CursorChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2CompositionController__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[8],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[9],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x53, 0xB1, 0xBB, 0x31, 0xB2, 0x11, 0xE8, 0x58, 0x9B, 0xEB, 0x69, 0xF5, 0xC8, 0xE1, 0x44, 0x20 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("31BBB153-11B2-58E8-9BEB-69F5C8E14420")]
    internal interface ICoreWebView2CompositionController : global::Microsoft.Web.WebView2.Core.ICoreWebView2CompositionController
    {
    }
    internal static class ICoreWebView2CompositionController2Methods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB9, 0x61, 0xEF, 0x8C, 0x55, 0xFA, 0x7D, 0x54, 0xAA, 0xE6, 0x7B, 0xCA, 0xED, 0x42, 0x49, 0xA2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8CEF61B9-FA55-547D-AAE6-7BCAED4249A2")]
    internal interface ICoreWebView2CompositionController2 : global::Microsoft.Web.WebView2.Core.ICoreWebView2CompositionController2
    {
    }
    internal static class ICoreWebView2CompositionController3Methods
    {


        internal static unsafe void DragLeave(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[6](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xCF, 0xCD, 0xBE, 0xBB, 0x3, 0xF, 0xF0, 0x50, 0x8F, 0x85, 0x9C, 0xBF, 0x6C, 0x9B, 0xBE, 0x10 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("BBBECDCF-0F03-50F0-8F85-9CBF6C9BBE10")]
    internal interface ICoreWebView2CompositionController3 : global::Microsoft.Web.WebView2.Core.ICoreWebView2CompositionController3
    {
    }
    internal static class ICoreWebView2CompositionController4Methods
    {


        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionKind GetNonClientRegionAtPoint(IObjectReference _obj, global::Windows.Foundation.Point point)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point, global::Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionKind*, int>**)ThisPtr)[8](ThisPtr, point, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::System.Collections.Generic.IReadOnlyList<global::Windows.Foundation.Rect> QueryNonClientRegion(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionKind Kind)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionKind, IntPtr*, int>**)ThisPtr)[9](ThisPtr, Kind, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Windows_Foundation_Rect.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Windows.Foundation.Rect>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Windows.Foundation.Rect>>.DisposeAbi(__retval);
            }
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController, global::Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionChangedEventArgs>>> _NonClientRegionChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController, global::Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionChangedEventArgs>>> MakeNonClientRegionChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _NonClientRegionChanged_, new(), null);
            return _NonClientRegionChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController, global::Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionChangedEventArgs>>> _NonClientRegionChanged => _NonClientRegionChanged_ ?? MakeNonClientRegionChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController, global::Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionChangedEventArgs>> Get_NonClientRegionChanged2(IObjectReference _obj, object _thisObj)
        {
            return _NonClientRegionChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2CompositionController__global__Microsoft_Web_WebView2_Core_CoreWebView2NonClientRegionChangedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[6],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[7],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x84, 0xCB, 0x50, 0xC9, 0x48, 0x26, 0xD5, 0x5A, 0xBA, 0xDD, 0xBF, 0xE6, 0x59, 0x68, 0x2F, 0xB6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C950CB84-2648-5AD5-BADD-BFE659682FB6")]
    internal interface ICoreWebView2CompositionController4 : global::Microsoft.Web.WebView2.Core.ICoreWebView2CompositionController4
    {
    }
    internal static class ICoreWebView2CompositionControllerStaticsMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x1F, 0xAB, 0xF0, 0x4D, 0x2A, 0x7F, 0x3B, 0x57, 0xB8, 0x1A, 0xB9, 0xB5, 0x31, 0x22, 0x47, 0x36 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4DF0AB1F-7F2A-573B-B81A-B9B531224736")]
    internal interface ICoreWebView2CompositionControllerStatics : global::Microsoft.Web.WebView2.Core.ICoreWebView2CompositionControllerStatics
    {
    }
    internal static class ICoreWebView2CompositionControllerStatics2_ManualMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE7, 0x21, 0xA3, 0x48, 0x40, 0x4F, 0x6E, 0x52, 0x83, 0x7E, 0x1E, 0xB0, 0xC4, 0x77, 0xB6, 0x9D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("48A321E7-4F40-526E-837E-1EB0C477B69D")]
    internal interface ICoreWebView2CompositionControllerStatics2_Manual : global::Microsoft.Web.WebView2.Core.ICoreWebView2CompositionControllerStatics2_Manual
    {
    }
    internal static class ICoreWebView2ContentLoadingEventArgsMethods
    {

        internal static unsafe bool get_IsErrorPage(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe ulong get_NavigationId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            ulong __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, ulong*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x73, 0x53, 0xF9, 0x6C, 0x6C, 0x94, 0xAE, 0x5D, 0x9B, 0x3E, 0xF, 0xE2, 0x3D, 0x5A, 0xA2, 0x9F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("6CF95373-946C-5DAE-9B3E-0FE23D5AA29F")]
    internal interface ICoreWebView2ContentLoadingEventArgs : global::Microsoft.Web.WebView2.Core.ICoreWebView2ContentLoadingEventArgs
    {
    }
    internal static class ICoreWebView2ContextMenuItemMethods
    {

        internal static unsafe global::System.Collections.Generic.IList<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem> get_Children(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[16](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_Web_WebView2_Core_CoreWebView2ContextMenuItem.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe int get_CommandId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Storage.Streams.IRandomAccessStream get_Icon(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Windows.Storage.Streams.IRandomAccessStream>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Storage.Streams.IRandomAccessStream>.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool get_IsChecked(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsChecked(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[15](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[13](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItemKind get_Kind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItemKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItemKind*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe string get_Label(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_Name(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_ShortcutKeyDescription(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem, object>>> _CustomItemSelected_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem, object>>> MakeCustomItemSelectedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _CustomItemSelected_, new(), null);
            return _CustomItemSelected_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem, object>>> _CustomItemSelected => _CustomItemSelected_ ?? MakeCustomItemSelectedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem, object>> Get_CustomItemSelected2(IObjectReference _obj, object _thisObj)
        {
            return _CustomItemSelected.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2ContextMenuItem__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[17],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[18],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x6F, 0x70, 0x65, 0x2A, 0x1A, 0x94, 0xCD, 0x52, 0x86, 0x51, 0xA1, 0x65, 0x58, 0x6B, 0xA, 0xBF };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2A65706F-941A-52CD-8651-A165586B0ABF")]
    internal interface ICoreWebView2ContextMenuItem : global::Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuItem
    {
    }
    internal static class ICoreWebView2ContextMenuRequestedEventArgsMethods
    {


        internal static unsafe global::Windows.Foundation.Deferral GetDeferral(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Foundation.Deferral.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Foundation.Deferral.DisposeAbi(__retval);
            }
        }
        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget get_ContextMenuTarget(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[12](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.Foundation.Point get_Location(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::System.Collections.Generic.IList<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem> get_MenuItems(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_Web_WebView2_Core_CoreWebView2ContextMenuItem.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe int get_SelectedCommandId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_SelectedCommandId(IObjectReference _obj, int value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int>**)ThisPtr)[10](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x8C, 0xDD, 0x7B, 0xD7, 0x3E, 0x9B, 0x6E, 0x59, 0xAE, 0x80, 0x32, 0xC, 0xD, 0xF4, 0xEC, 0xBC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D77BDD8C-9B3E-596E-AE80-320C0DF4ECBC")]
    internal interface ICoreWebView2ContextMenuRequestedEventArgs : global::Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuRequestedEventArgs
    {
    }
    internal static class ICoreWebView2ContextMenuTargetMethods
    {

        internal static unsafe string get_FrameUri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool get_HasLinkText(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_HasLinkUri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_HasSelection(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[17](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_HasSourceUri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[15](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_IsEditable(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_IsRequestedForMainFrame(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTargetKind get_Kind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTargetKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTargetKind*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe string get_LinkText(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_LinkUri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_PageUri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_SelectionText(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[18](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_SourceUri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[16](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x6A, 0x4E, 0xE2, 0x41, 0x12, 0x46, 0xD9, 0x5B, 0x8E, 0x61, 0xE9, 0x28, 0x6, 0x15, 0x20, 0x5E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("41E24E6A-4612-5BD9-8E61-E9280615205E")]
    internal interface ICoreWebView2ContextMenuTarget : global::Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuTarget
    {
    }
    internal static class ICoreWebView2ControllerMethods
    {


        internal static unsafe void SetBoundsAndZoomFactor(IObjectReference _obj, global::Windows.Foundation.Rect Bounds, double ZoomFactor)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect, double, int>**)ThisPtr)[25](ThisPtr, Bounds, ZoomFactor));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void MoveFocus(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusReason reason)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusReason, int>**)ThisPtr)[26](ThisPtr, reason));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void NotifyParentWindowPositionChanged(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[27](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void Close(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[28](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }
        internal static unsafe global::Windows.Foundation.Rect get_Bounds(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Rect __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Bounds(IObjectReference _obj, global::Windows.Foundation.Rect value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2 get_CoreWebView2(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool get_IsVisible(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsVisible(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference get_ParentWindow(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ParentWindow(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[13](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe double get_ZoomFactor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ZoomFactor(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller, global::Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs>>> _AcceleratorKeyPressed_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller, global::Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs>>> MakeAcceleratorKeyPressedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _AcceleratorKeyPressed_, new(), null);
            return _AcceleratorKeyPressed_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller, global::Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs>>> _AcceleratorKeyPressed => _AcceleratorKeyPressed_ ?? MakeAcceleratorKeyPressedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller, global::Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs>> Get_AcceleratorKeyPressed2(IObjectReference _obj, object _thisObj)
        {
            return _AcceleratorKeyPressed.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2Controller__global__Microsoft_Web_WebView2_Core_CoreWebView2AcceleratorKeyPressedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[23],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[24],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller, object>>> _GotFocus_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller, object>>> MakeGotFocusTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _GotFocus_, new(), null);
            return _GotFocus_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller, object>>> _GotFocus => _GotFocus_ ?? MakeGotFocusTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller, object>> Get_GotFocus2(IObjectReference _obj, object _thisObj)
        {
            return _GotFocus.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2Controller__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[19],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[20],
                1);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller, object>>> _LostFocus_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller, object>>> MakeLostFocusTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _LostFocus_, new(), null);
            return _LostFocus_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller, object>>> _LostFocus => _LostFocus_ ?? MakeLostFocusTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller, object>> Get_LostFocus2(IObjectReference _obj, object _thisObj)
        {
            return _LostFocus.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2Controller__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[21],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[22],
                2);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller, global::Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusRequestedEventArgs>>> _MoveFocusRequested_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller, global::Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusRequestedEventArgs>>> MakeMoveFocusRequestedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _MoveFocusRequested_, new(), null);
            return _MoveFocusRequested_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller, global::Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusRequestedEventArgs>>> _MoveFocusRequested => _MoveFocusRequested_ ?? MakeMoveFocusRequestedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller, global::Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusRequestedEventArgs>> Get_MoveFocusRequested2(IObjectReference _obj, object _thisObj)
        {
            return _MoveFocusRequested.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2Controller__global__Microsoft_Web_WebView2_Core_CoreWebView2MoveFocusRequestedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[17],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[18],
                3);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller, object>>> _ZoomFactorChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller, object>>> MakeZoomFactorChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ZoomFactorChanged_, new(), null);
            return _ZoomFactorChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller, object>>> _ZoomFactorChanged => _ZoomFactorChanged_ ?? MakeZoomFactorChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller, object>> Get_ZoomFactorChanged2(IObjectReference _obj, object _thisObj)
        {
            return _ZoomFactorChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2Controller__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[15],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[16],
                4);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x1C, 0x12, 0x88, 0xA5, 0xBF, 0x53, 0xE, 0x59, 0x80, 0xE5, 0x29, 0xD7, 0x29, 0xCB, 0xD7, 0x43 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A588121C-53BF-590E-80E5-29D729CBD743")]
    internal interface ICoreWebView2Controller : global::Microsoft.Web.WebView2.Core.ICoreWebView2Controller
    {
    }
    internal static class ICoreWebView2Controller2Methods
    {

        internal static unsafe global::Windows.UI.Color get_DefaultBackgroundColor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_DefaultBackgroundColor(IObjectReference _obj, global::Windows.UI.Color value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB, 0xC4, 0x69, 0x0, 0x8A, 0x2E, 0x3F, 0x51, 0x9D, 0x9D, 0xE0, 0xC2, 0xB6, 0x4F, 0x72, 0x0 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("0069C40B-2E8A-513F-9D9D-E0C2B64F7200")]
    internal interface ICoreWebView2Controller2 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Controller2
    {
    }
    internal static class ICoreWebView2Controller3Methods
    {

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2BoundsMode get_BoundsMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2BoundsMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2BoundsMode*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_BoundsMode(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2BoundsMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2BoundsMode, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_RasterizationScale(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_RasterizationScale(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_ShouldDetectMonitorScaleChanges(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_ShouldDetectMonitorScaleChanges(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[9](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller, object>>> _RasterizationScaleChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller, object>>> MakeRasterizationScaleChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _RasterizationScaleChanged_, new(), null);
            return _RasterizationScaleChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller, object>>> _RasterizationScaleChanged => _RasterizationScaleChanged_ ?? MakeRasterizationScaleChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller, object>> Get_RasterizationScaleChanged2(IObjectReference _obj, object _thisObj)
        {
            return _RasterizationScaleChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2Controller__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[12],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[13],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x14, 0xE2, 0xBA, 0xE5, 0x1A, 0x79, 0x13, 0x5D, 0x9B, 0x76, 0xA2, 0x57, 0xD9, 0xFD, 0xA2, 0xAC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E5BAE214-791A-5D13-9B76-A257D9FDA2AC")]
    internal interface ICoreWebView2Controller3 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Controller3
    {
    }
    internal static class ICoreWebView2Controller4Methods
    {

        internal static unsafe bool get_AllowExternalDrop(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_AllowExternalDrop(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x2D, 0x86, 0xE2, 0x94, 0x38, 0x46, 0xBA, 0x54, 0x92, 0xCF, 0xE3, 0x1A, 0x31, 0x49, 0x9B, 0x78 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("94E2862D-4638-54BA-92CF-E31A31499B78")]
    internal interface ICoreWebView2Controller4 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Controller4
    {
    }
    internal static class ICoreWebView2ControllerFactoryMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x5B, 0x2C, 0xB, 0x27, 0xA9, 0xC3, 0xD8, 0x53, 0xA5, 0xCA, 0x26, 0x2E, 0xA9, 0xEA, 0x62, 0xE8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("270B2C5B-C3A9-53D8-A5CA-262EA9EA62E8")]
    internal interface ICoreWebView2ControllerFactory : global::Microsoft.Web.WebView2.Core.ICoreWebView2ControllerFactory
    {
    }
    internal static class ICoreWebView2ControllerOptionsMethods
    {

        internal static unsafe bool get_IsInPrivateModeEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsInPrivateModeEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[9](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe string get_ProfileName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ProfileName(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x21, 0xE8, 0x37, 0x33, 0x6, 0x36, 0xE, 0x5A, 0x8E, 0x2F, 0xC, 0x1E, 0x57, 0xD7, 0x43, 0xF7 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("3337E821-3606-5A0E-8E2F-0C1E57D743F7")]
    internal interface ICoreWebView2ControllerOptions : global::Microsoft.Web.WebView2.Core.ICoreWebView2ControllerOptions
    {
    }
    internal static class ICoreWebView2ControllerOptions2Methods
    {

        internal static unsafe string get_ScriptLocale(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ScriptLocale(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x93, 0x9E, 0xB6, 0x41, 0x17, 0xCC, 0x7D, 0x5C, 0xA0, 0xC8, 0xFA, 0x21, 0xC2, 0x7A, 0xAD, 0xB6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("41B69E93-CC17-5C7D-A0C8-FA21C27AADB6")]
    internal interface ICoreWebView2ControllerOptions2 : global::Microsoft.Web.WebView2.Core.ICoreWebView2ControllerOptions2
    {
    }
    internal static class ICoreWebView2ControllerWindowReferenceMethods
    {

        internal static unsafe global::Windows.UI.Core.CoreWindow get_CoreWindow(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.UI.Core.CoreWindow.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.UI.Core.CoreWindow.DisposeAbi(__retval);
            }
        }

        internal static unsafe ulong get_WindowHandle(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            ulong __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, ulong*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD4, 0xDA, 0xED, 0xF, 0xA3, 0x48, 0xC4, 0x5C, 0x9F, 0x61, 0xE7, 0xAD, 0xFD, 0x1E, 0x9C, 0x76 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("0FEDDAD4-48A3-5CC4-9F61-E7ADFD1E9C76")]
    internal interface ICoreWebView2ControllerWindowReference : global::Microsoft.Web.WebView2.Core.ICoreWebView2ControllerWindowReference
    {
    }
    internal static class ICoreWebView2ControllerWindowReferenceStaticsMethods
    {


        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference CreateFromWindowHandle(IObjectReference _obj, ulong windowHandle)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, ulong, IntPtr*, int>**)ThisPtr)[6](ThisPtr, windowHandle, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference CreateFromCoreWindow(IObjectReference _obj, global::Windows.UI.Core.CoreWindow coreWindow)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __coreWindow = default;
            IntPtr __retval = default;
            try
            {
                __coreWindow = global::ABI.Windows.UI.Core.CoreWindow.CreateMarshaler2(coreWindow);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__coreWindow), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__coreWindow);
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF1, 0xEB, 0xF6, 0xDD, 0xC6, 0xEB, 0x34, 0x5A, 0x90, 0x8, 0x66, 0x1C, 0x3A, 0x2E, 0xB7, 0x67 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("DDF6EBF1-EBC6-5A34-9008-661C3A2EB767")]
    internal interface ICoreWebView2ControllerWindowReferenceStatics : global::Microsoft.Web.WebView2.Core.ICoreWebView2ControllerWindowReferenceStatics
    {
    }
    internal static class ICoreWebView2CookieMethods
    {

        internal static unsafe string get_Domain(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe double get_Expires(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Expires(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[12](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsHttpOnly(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsHttpOnly(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[14](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsSecure(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[17](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsSecure(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[18](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsSession(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[19](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe string get_Name(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_Path(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2CookieSameSiteKind get_SameSite(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2CookieSameSiteKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2CookieSameSiteKind*, int>**)ThisPtr)[15](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_SameSite(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2CookieSameSiteKind value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2CookieSameSiteKind, int>**)ThisPtr)[16](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe string get_Value(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Value(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[8](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFE, 0x70, 0xF6, 0x52, 0xA2, 0x8C, 0xAD, 0x5A, 0xAE, 0xDB, 0x25, 0xF7, 0x90, 0x3B, 0x70, 0x38 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("52F670FE-8CA2-5AAD-AEDB-25F7903B7038")]
    internal interface ICoreWebView2Cookie : global::Microsoft.Web.WebView2.Core.ICoreWebView2Cookie
    {
    }
    internal static class ICoreWebView2CookieManagerMethods
    {


        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2Cookie CreateCookie(IObjectReference _obj, string name, string value, string Domain, string Path)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __name = new(name);
                MarshalString.Pinnable __value = new(value);
                MarshalString.Pinnable __Domain = new(Domain);
                MarshalString.Pinnable __Path = new(Path);
                fixed(void* ___name = __name, ___value = __value, ___Domain = __Domain, ___Path = __Path)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __name), MarshalString.GetAbi(ref __value), MarshalString.GetAbi(ref __Domain), MarshalString.GetAbi(ref __Path), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Cookie.FromAbi(__retval);
                }
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Cookie.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2Cookie CopyCookie(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2Cookie cookieParam)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __cookieParam = default;
            IntPtr __retval = default;
            try
            {
                __cookieParam = global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Cookie.CreateMarshaler2(cookieParam);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__cookieParam), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Cookie.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__cookieParam);
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Cookie.DisposeAbi(__retval);
            }
        }

        internal static unsafe void AddOrUpdateCookie(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2Cookie cookie)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __cookie = default;
            try
            {
                __cookie = global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Cookie.CreateMarshaler2(cookie);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__cookie)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__cookie);
            }
        }

        internal static unsafe void DeleteCookie(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2Cookie cookie)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __cookie = default;
            try
            {
                __cookie = global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Cookie.CreateMarshaler2(cookie);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__cookie)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__cookie);
            }
        }

        internal static unsafe void DeleteCookies(IObjectReference _obj, string name, string uri)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __name = new(name);
            MarshalString.Pinnable __uri = new(uri);
            fixed(void* ___name = __name, ___uri = __uri)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[10](ThisPtr, MarshalString.GetAbi(ref __name), MarshalString.GetAbi(ref __uri)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe void DeleteCookiesWithDomainAndPath(IObjectReference _obj, string name, string Domain, string Path)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __name = new(name);
            MarshalString.Pinnable __Domain = new(Domain);
            MarshalString.Pinnable __Path = new(Path);
            fixed(void* ___name = __name, ___Domain = __Domain, ___Path = __Path)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalString.GetAbi(ref __name), MarshalString.GetAbi(ref __Domain), MarshalString.GetAbi(ref __Path)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe void DeleteAllCookies(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[12](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x16, 0xF5, 0x98, 0x40, 0xCA, 0xAD, 0x63, 0x55, 0xAA, 0xA5, 0xD7, 0xAF, 0xFD, 0x84, 0x7A, 0xA3 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4098F516-ADCA-5563-AAA5-D7AFFD847AA3")]
    internal interface ICoreWebView2CookieManager : global::Microsoft.Web.WebView2.Core.ICoreWebView2CookieManager
    {
    }
    internal static class ICoreWebView2CookieManager_ManualMethods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Web.WebView2.Core.CoreWebView2Cookie>> GetCookiesAsync(IObjectReference _obj, string uri)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __uri = new(uri);
                fixed(void* ___uri = __uri)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __uri), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Foundation_Collections_IVectorView_1_Microsoft_Web_WebView2_Core_CoreWebView2Cookie_.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Web.WebView2.Core.CoreWebView2Cookie>>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Web.WebView2.Core.CoreWebView2Cookie>>>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xEA, 0xA0, 0xCC, 0x9B, 0x25, 0x72, 0x7A, 0x57, 0xBB, 0x23, 0xC7, 0xC9, 0x80, 0x23, 0x15, 0x4E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("9BCCA0EA-7225-577A-BB23-C7C98023154E")]
    internal interface ICoreWebView2CookieManager_Manual : global::Microsoft.Web.WebView2.Core.ICoreWebView2CookieManager_Manual
    {
    }
    internal static class ICoreWebView2CustomSchemeRegistrationMethods
    {

        internal static unsafe bool get_HasAuthorityComponent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_HasAuthorityComponent(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[9](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe int get_TreatAsSecure(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_TreatAsSecure(IObjectReference _obj, int value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD9, 0x60, 0xDC, 0x16, 0xEC, 0xDD, 0x3D, 0x5C, 0xBC, 0x1F, 0x44, 0x8, 0xD1, 0x87, 0x5A, 0xF1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("16DC60D9-DDEC-5C3D-BC1F-4408D1875AF1")]
    internal interface ICoreWebView2CustomSchemeRegistration : global::Microsoft.Web.WebView2.Core.ICoreWebView2CustomSchemeRegistration
    {
    }
    internal static class ICoreWebView2CustomSchemeRegistrationFactoryMethods
    {


        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration CreateInstance(IObjectReference _obj, string schemeName)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __schemeName = new(schemeName);
                fixed(void* ___schemeName = __schemeName)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __schemeName), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration.FromAbi(__retval);
                }
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFA, 0xDD, 0x9D, 0x30, 0x3E, 0xFF, 0x8D, 0x5D, 0xA1, 0x8A, 0xC1, 0x34, 0x1F, 0x32, 0x5E, 0xA7 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("309DDDFA-FF3E-5D8D-A18A-C1341F325EA7")]
    internal interface ICoreWebView2CustomSchemeRegistrationFactory : global::Microsoft.Web.WebView2.Core.ICoreWebView2CustomSchemeRegistrationFactory
    {
    }
    internal static class ICoreWebView2CustomSchemeRegistration_ManualMethods
    {

        internal static unsafe global::System.Collections.Generic.IList<string> get_AllowedOrigins(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_String.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<string>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<string>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_SchemeName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x5C, 0xF1, 0x4F, 0x7, 0x7F, 0x7D, 0x1, 0x51, 0xA0, 0x2E, 0xC0, 0x77, 0xC5, 0xE2, 0x1C, 0x41 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("074FF15C-7D7F-5101-A02E-C077C5E21C41")]
    internal interface ICoreWebView2CustomSchemeRegistration_Manual : global::Microsoft.Web.WebView2.Core.ICoreWebView2CustomSchemeRegistration_Manual
    {
    }
    internal static class ICoreWebView2DOMContentLoadedEventArgsMethods
    {

        internal static unsafe ulong get_NavigationId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            ulong __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, ulong*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA3, 0xD0, 0x74, 0xC4, 0xAC, 0x24, 0xFC, 0x59, 0xB7, 0x8B, 0xDA, 0x75, 0x62, 0xA6, 0xA0, 0x52 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C474D0A3-24AC-59FC-B78B-DA7562A6A052")]
    internal interface ICoreWebView2DOMContentLoadedEventArgs : global::Microsoft.Web.WebView2.Core.ICoreWebView2DOMContentLoadedEventArgs
    {
    }
    internal static class ICoreWebView2DevToolsProtocolEventReceivedEventArgsMethods
    {

        internal static unsafe string get_ParameterObjectAsJson(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x1D, 0xB4, 0xA4, 0xB6, 0x18, 0xFD, 0xFA, 0x59, 0x92, 0x3A, 0xC5, 0x75, 0x55, 0xD9, 0x60, 0xCE };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B6A4B41D-FD18-59FA-923A-C57555D960CE")]
    internal interface ICoreWebView2DevToolsProtocolEventReceivedEventArgs : global::Microsoft.Web.WebView2.Core.ICoreWebView2DevToolsProtocolEventReceivedEventArgs
    {
    }
    internal static class ICoreWebView2DevToolsProtocolEventReceivedEventArgs2Methods
    {

        internal static unsafe string get_SessionId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xBA, 0x28, 0x17, 0x22, 0x5E, 0x63, 0xD2, 0x50, 0xBD, 0x3C, 0xFD, 0x22, 0xF4, 0x11, 0x39, 0x78 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("221728BA-635E-50D2-BD3C-FD22F4113978")]
    internal interface ICoreWebView2DevToolsProtocolEventReceivedEventArgs2 : global::Microsoft.Web.WebView2.Core.ICoreWebView2DevToolsProtocolEventReceivedEventArgs2
    {
    }
    internal static class ICoreWebView2DevToolsProtocolEventReceiverMethods
    {


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceivedEventArgs>>> _DevToolsProtocolEventReceived_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceivedEventArgs>>> MakeDevToolsProtocolEventReceivedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _DevToolsProtocolEventReceived_, new(), null);
            return _DevToolsProtocolEventReceived_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceivedEventArgs>>> _DevToolsProtocolEventReceived => _DevToolsProtocolEventReceived_ ?? MakeDevToolsProtocolEventReceivedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceivedEventArgs>> Get_DevToolsProtocolEventReceived2(IObjectReference _obj, object _thisObj)
        {
            return _DevToolsProtocolEventReceived.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__global__Microsoft_Web_WebView2_Core_CoreWebView2DevToolsProtocolEventReceivedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[6],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[7],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x79, 0xBE, 0xA2, 0xB2, 0xFC, 0x65, 0x37, 0x55, 0x87, 0x15, 0x3D, 0x92, 0xBF, 0x31, 0x9, 0xB };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B2A2BE79-65FC-5537-8715-3D92BF31090B")]
    internal interface ICoreWebView2DevToolsProtocolEventReceiver : global::Microsoft.Web.WebView2.Core.ICoreWebView2DevToolsProtocolEventReceiver
    {
    }
    public static class ICoreWebView2DispatchAdapterMethods
    {


        public static unsafe object WrapNamedObject(IObjectReference _obj, string name, global::Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter adapter)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __adapter = default;
            IntPtr __retval = default;
            try
            {
                __adapter = MarshalInterface<global::Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter>.CreateMarshaler2(adapter, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapterMethods.IID);
                MarshalString.Pinnable __name = new(name);
                fixed(void* ___name = __name)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __name), MarshalInspectable<object>.GetAbi(__adapter), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return MarshalInspectable<object>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__adapter);
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }

        public static unsafe object WrapObject(IObjectReference _obj, object unwrapped, global::Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter adapter)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __unwrapped = default;
            ObjectReferenceValue __adapter = default;
            IntPtr __retval = default;
            try
            {
                __unwrapped = MarshalInspectable<object>.CreateMarshaler2(unwrapped);
                __adapter = MarshalInterface<global::Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter>.CreateMarshaler2(adapter, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapterMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__unwrapped), MarshalInspectable<object>.GetAbi(__adapter), &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__unwrapped);
                MarshalInspectable<object>.DisposeMarshaler(__adapter);
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }

        public static unsafe object UnwrapObject(IObjectReference _obj, object wrapped)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __wrapped = default;
            IntPtr __retval = default;
            try
            {
                __wrapped = MarshalInspectable<object>.CreateMarshaler2(wrapped);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__wrapped), &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__wrapped);
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }

        public static unsafe void Clean(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[9](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x2D, 0xA4, 0x88, 0x78, 0xF3, 0x18, 0x66, 0x59, 0x80, 0xCB, 0x8C, 0xC2, 0x53, 0x51, 0xBD, 0xA };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => ICoreWebView2DispatchAdapter.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("7888A42D-18F3-5966-80CB-8CC25351BD0A")]
    internal unsafe interface ICoreWebView2DispatchAdapter : global::Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe ICoreWebView2DispatchAdapter()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(ICoreWebView2DispatchAdapter), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 4);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_WrapNamedObject_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_WrapObject_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_UnwrapObject_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_Clean_3;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_WrapNamedObject_0(IntPtr thisPtr, IntPtr name, IntPtr adapter, IntPtr* result)
        {

            object __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter>(thisPtr).WrapNamedObject(MarshalString.FromAbi(name), MarshalInterface<global::Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter>.FromAbi(adapter));
                *result = MarshalInspectable<object>.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_WrapObject_1(IntPtr thisPtr, IntPtr unwrapped, IntPtr adapter, IntPtr* result)
        {

            object __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter>(thisPtr).WrapObject(MarshalInspectable<object>.FromAbi(unwrapped), MarshalInterface<global::Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter>.FromAbi(adapter));
                *result = MarshalInspectable<object>.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_UnwrapObject_2(IntPtr thisPtr, IntPtr wrapped, IntPtr* result)
        {

            object __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter>(thisPtr).UnwrapObject(MarshalInspectable<object>.FromAbi(wrapped));
                *result = MarshalInspectable<object>.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Clean_3(IntPtr thisPtr)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter>(thisPtr).Clean();

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe object global::Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter.WrapNamedObject(string name, global::Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter adapter)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter).TypeHandle));
            return global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapterMethods.WrapNamedObject(_obj, name, adapter);
        }

        unsafe object global::Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter.WrapObject(object unwrapped, global::Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter adapter)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter).TypeHandle));
            return global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapterMethods.WrapObject(_obj, unwrapped, adapter);
        }

        unsafe object global::Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter.UnwrapObject(object wrapped)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter).TypeHandle));
            return global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapterMethods.UnwrapObject(_obj, wrapped);
        }

        unsafe void global::Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter.Clean()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter).TypeHandle));
            global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapterMethods.Clean(_obj);
        }
    }

    internal static class ICoreWebView2DownloadOperationMethods
    {


        internal static unsafe void Cancel(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[22](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void Pause(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[23](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void Resume(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[24](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }
        internal static unsafe long get_BytesReceived(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            long __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, long*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe bool get_CanResume(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[15](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe string get_ContentDisposition(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_EstimatedEndTime(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadInterruptReason get_InterruptReason(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadInterruptReason __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadInterruptReason*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe string get_MimeType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_ResultFilePath(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadState get_State(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadState __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadState*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe long get_TotalBytesToReceive(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            long __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, long*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe string get_Uri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation, object>>> _BytesReceivedChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation, object>>> MakeBytesReceivedChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _BytesReceivedChanged_, new(), null);
            return _BytesReceivedChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation, object>>> _BytesReceivedChanged => _BytesReceivedChanged_ ?? MakeBytesReceivedChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation, object>> Get_BytesReceivedChanged2(IObjectReference _obj, object _thisObj)
        {
            return _BytesReceivedChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2DownloadOperation__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[16],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[17],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation, object>>> _EstimatedEndTimeChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation, object>>> MakeEstimatedEndTimeChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _EstimatedEndTimeChanged_, new(), null);
            return _EstimatedEndTimeChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation, object>>> _EstimatedEndTimeChanged => _EstimatedEndTimeChanged_ ?? MakeEstimatedEndTimeChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation, object>> Get_EstimatedEndTimeChanged2(IObjectReference _obj, object _thisObj)
        {
            return _EstimatedEndTimeChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2DownloadOperation__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[18],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[19],
                1);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation, object>>> _StateChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation, object>>> MakeStateChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _StateChanged_, new(), null);
            return _StateChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation, object>>> _StateChanged => _StateChanged_ ?? MakeStateChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation, object>> Get_StateChanged2(IObjectReference _obj, object _thisObj)
        {
            return _StateChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2DownloadOperation__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[20],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[21],
                2);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x6B, 0x3E, 0xE7, 0xAF, 0x60, 0xE7, 0x6, 0x5A, 0x9B, 0xF6, 0x1E, 0x74, 0x3C, 0x13, 0xCD, 0x2D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("AFE73E6B-E760-5A06-9BF6-1E743C13CD2D")]
    internal interface ICoreWebView2DownloadOperation : global::Microsoft.Web.WebView2.Core.ICoreWebView2DownloadOperation
    {
    }
    internal static class ICoreWebView2DownloadStartingEventArgsMethods
    {


        internal static unsafe global::Windows.Foundation.Deferral GetDeferral(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Foundation.Deferral.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Foundation.Deferral.DisposeAbi(__retval);
            }
        }
        internal static unsafe bool get_Cancel(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Cancel(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[8](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation get_DownloadOperation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[12](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe string get_ResultFilePath(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ResultFilePath(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[10](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xBA, 0x82, 0xD9, 0x45, 0x56, 0x92, 0x35, 0x5B, 0xB0, 0x23, 0x26, 0xA4, 0x38, 0x59, 0x91, 0x10 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("45D982BA-9256-5B35-B023-26A438599110")]
    internal interface ICoreWebView2DownloadStartingEventArgs : global::Microsoft.Web.WebView2.Core.ICoreWebView2DownloadStartingEventArgs
    {
    }
    internal static class ICoreWebView2EnvironmentMethods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller> CreateCoreWebView2ControllerAsync(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference ParentWindow)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __ParentWindow = default;
            IntPtr __retval = default;
            try
            {
                __ParentWindow = global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference.CreateMarshaler2(ParentWindow);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__ParentWindow), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Web_WebView2_Core_CoreWebView2Controller.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__ParentWindow);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse CreateWebResourceResponse(IObjectReference _obj, global::Windows.Storage.Streams.IRandomAccessStream Content, int StatusCode, string ReasonPhrase, string Headers)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __Content = default;
            IntPtr __retval = default;
            try
            {
                __Content = MarshalInterface<global::Windows.Storage.Streams.IRandomAccessStream>.CreateMarshaler2(Content, global::ABI.Windows.Storage.Streams.IRandomAccessStreamMethods.IID);
                MarshalString.Pinnable __ReasonPhrase = new(ReasonPhrase);
                MarshalString.Pinnable __Headers = new(Headers);
                fixed(void* ___ReasonPhrase = __ReasonPhrase, ___Headers = __Headers)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, MarshalInspectable<object>.GetAbi(__Content), StatusCode, MarshalString.GetAbi(ref __ReasonPhrase), MarshalString.GetAbi(ref __Headers), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__Content);
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse.DisposeAbi(__retval);
            }
        }
        internal static unsafe string get_BrowserVersionString(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Environment, object>>> _NewBrowserVersionAvailable_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Environment, object>>> MakeNewBrowserVersionAvailableTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _NewBrowserVersionAvailable_, new(), null);
            return _NewBrowserVersionAvailable_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Environment, object>>> _NewBrowserVersionAvailable => _NewBrowserVersionAvailable_ ?? MakeNewBrowserVersionAvailableTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Environment, object>> Get_NewBrowserVersionAvailable2(IObjectReference _obj, object _thisObj)
        {
            return _NewBrowserVersionAvailable.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2Environment__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[7],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[8],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x31, 0x78, 0xCC, 0xD8, 0x83, 0xB7, 0x6B, 0x55, 0xB9, 0xCE, 0x89, 0x9C, 0x1E, 0x95, 0xD5, 0x85 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D8CC7831-B783-556B-B9CE-899C1E95D585")]
    internal interface ICoreWebView2Environment : global::Microsoft.Web.WebView2.Core.ICoreWebView2Environment
    {
    }
    internal static class ICoreWebView2Environment10Methods
    {


        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions CreateCoreWebView2ControllerOptions(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x9C, 0xE6, 0x24, 0xC2, 0xFD, 0x1E, 0xCC, 0x5E, 0xAD, 0xC8, 0x2B, 0x52, 0xE7, 0xB9, 0x7C, 0xE5 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C224E69C-1EFD-5ECC-ADC8-2B52E7B97CE5")]
    internal interface ICoreWebView2Environment10 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Environment10
    {
    }
    internal static class ICoreWebView2Environment11Methods
    {

        internal static unsafe string get_FailureReportFolderPath(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x4C, 0xD6, 0x23, 0xDA, 0x61, 0x8B, 0x6C, 0x5B, 0x85, 0x81, 0xF6, 0xA6, 0x88, 0xAB, 0xD7, 0xCD };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("DA23D64C-8B61-5B6C-8581-F6A688ABD7CD")]
    internal interface ICoreWebView2Environment11 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Environment11
    {
    }
    internal static class ICoreWebView2Environment12Methods
    {


        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer CreateSharedBuffer(IObjectReference _obj, ulong Size)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, ulong, IntPtr*, int>**)ThisPtr)[6](ThisPtr, Size, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xDB, 0x1D, 0x53, 0x82, 0x63, 0xBE, 0x54, 0x52, 0x81, 0x2F, 0x88, 0xD, 0x9F, 0xE, 0xC5, 0x4E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("82531DDB-BE63-5254-812F-880D9F0EC54E")]
    internal interface ICoreWebView2Environment12 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Environment12
    {
    }
    internal static class ICoreWebView2Environment13Methods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessExtendedInfo>> GetProcessExtendedInfosAsync(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Foundation_Collections_IVectorView_1_Microsoft_Web_WebView2_Core_CoreWebView2ProcessExtendedInfo_.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessExtendedInfo>>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessExtendedInfo>>>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x2F, 0x7F, 0xC9, 0x22, 0x28, 0x8A, 0x94, 0x57, 0x94, 0x1C, 0xA2, 0x5B, 0xCC, 0x3C, 0xF4, 0x7E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("22C97F2F-8A28-5794-941C-A25BCC3CF47E")]
    internal interface ICoreWebView2Environment13 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Environment13
    {
    }
    internal static class ICoreWebView2Environment14Methods
    {


        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandle CreateWebFileSystemFileHandle(IObjectReference _obj, string Path, global::Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandlePermission Permission)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __Path = new(Path);
                fixed(void* ___Path = __Path)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandlePermission, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __Path), Permission, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandle.FromAbi(__retval);
                }
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandle.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandle CreateWebFileSystemDirectoryHandle(IObjectReference _obj, string Path, global::Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandlePermission Permission)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __Path = new(Path);
                fixed(void* ___Path = __Path)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandlePermission, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __Path), Permission, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandle.FromAbi(__retval);
                }
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandle.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x5F, 0x50, 0xF9, 0x39, 0x1F, 0xD, 0x84, 0x52, 0x9F, 0xA9, 0x9D, 0xBD, 0x81, 0x89, 0x73, 0xFA };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("39F9505F-0D1F-5284-9FA9-9DBD818973FA")]
    internal interface ICoreWebView2Environment14 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Environment14
    {
    }
    internal static class ICoreWebView2Environment2Methods
    {


        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest CreateWebResourceRequest(IObjectReference _obj, string uri, string Method, global::Windows.Storage.Streams.IRandomAccessStream postData, string Headers)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __postData = default;
            IntPtr __retval = default;
            try
            {
                __postData = MarshalInterface<global::Windows.Storage.Streams.IRandomAccessStream>.CreateMarshaler2(postData, global::ABI.Windows.Storage.Streams.IRandomAccessStreamMethods.IID);
                MarshalString.Pinnable __uri = new(uri);
                MarshalString.Pinnable __Method = new(Method);
                MarshalString.Pinnable __Headers = new(Headers);
                fixed(void* ___uri = __uri, ___Method = __Method, ___Headers = __Headers)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __uri), MarshalString.GetAbi(ref __Method), MarshalInspectable<object>.GetAbi(__postData), MarshalString.GetAbi(ref __Headers), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__postData);
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x68, 0x46, 0x63, 0xB, 0x17, 0x10, 0xC7, 0x5F, 0x99, 0x21, 0xF1, 0xF5, 0x18, 0x66, 0xA8, 0xC0 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("0B634668-1017-5FC7-9921-F1F51866A8C0")]
    internal interface ICoreWebView2Environment2 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Environment2
    {
    }
    internal static class ICoreWebView2Environment3Methods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController> CreateCoreWebView2CompositionControllerAsync(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference ParentWindow)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __ParentWindow = default;
            IntPtr __retval = default;
            try
            {
                __ParentWindow = global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference.CreateMarshaler2(ParentWindow);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__ParentWindow), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Web_WebView2_Core_CoreWebView2CompositionController.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__ParentWindow);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo CreateCoreWebView2PointerInfo(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x6C, 0xF4, 0x33, 0x5E, 0xB9, 0xC0, 0x26, 0x51, 0x88, 0x40, 0x17, 0xF9, 0xC1, 0x1B, 0x3A, 0x8A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("5E33F46C-C0B9-5126-8840-17F9C11B3A8A")]
    internal interface ICoreWebView2Environment3 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Environment3
    {
    }
    internal static class ICoreWebView2Environment4Methods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xDA, 0x97, 0xB6, 0x6D, 0xBD, 0xEE, 0x18, 0x58, 0x87, 0x90, 0x1F, 0xE5, 0x7E, 0xF3, 0x19, 0xE2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("6DB697DA-EEBD-5818-8790-1FE57EF319E2")]
    internal interface ICoreWebView2Environment4 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Environment4
    {
    }
    internal static class ICoreWebView2Environment5Methods
    {


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Environment, global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitedEventArgs>>> _BrowserProcessExited_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Environment, global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitedEventArgs>>> MakeBrowserProcessExitedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _BrowserProcessExited_, new(), null);
            return _BrowserProcessExited_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Environment, global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitedEventArgs>>> _BrowserProcessExited => _BrowserProcessExited_ ?? MakeBrowserProcessExitedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Environment, global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitedEventArgs>> Get_BrowserProcessExited2(IObjectReference _obj, object _thisObj)
        {
            return _BrowserProcessExited.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2Environment__global__Microsoft_Web_WebView2_Core_CoreWebView2BrowserProcessExitedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[6],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[7],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xAF, 0x99, 0x33, 0xF3, 0xD3, 0xE4, 0xDC, 0x59, 0xAC, 0x38, 0x83, 0x97, 0xAA, 0xDC, 0xED, 0xB1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F33399AF-E4D3-59DC-AC38-8397AADCEDB1")]
    internal interface ICoreWebView2Environment5 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Environment5
    {
    }
    internal static class ICoreWebView2Environment6Methods
    {


        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings CreatePrintSettings(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x8F, 0x53, 0x5D, 0x96, 0x58, 0x59, 0x98, 0x5D, 0x89, 0x72, 0xF6, 0x22, 0x2, 0x1D, 0xF4, 0x2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("965D538F-5958-5D98-8972-F622021DF402")]
    internal interface ICoreWebView2Environment6 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Environment6
    {
    }
    internal static class ICoreWebView2Environment7Methods
    {

        internal static unsafe string get_UserDataFolder(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE2, 0x4F, 0xF4, 0xE1, 0x54, 0xFC, 0x83, 0x53, 0xA3, 0x83, 0xC8, 0x7E, 0x1D, 0xA9, 0x6B, 0x83 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E1F44FE2-FC54-5383-A383-C87E1DA96B83")]
    internal interface ICoreWebView2Environment7 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Environment7
    {
    }
    internal static class ICoreWebView2Environment8Methods
    {


        internal static unsafe global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessInfo> GetProcessInfos(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Microsoft_Web_WebView2_Core_CoreWebView2ProcessInfo.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessInfo>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessInfo>>.DisposeAbi(__retval);
            }
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Environment, object>>> _ProcessInfosChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Environment, object>>> MakeProcessInfosChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ProcessInfosChanged_, new(), null);
            return _ProcessInfosChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Environment, object>>> _ProcessInfosChanged => _ProcessInfosChanged_ ?? MakeProcessInfosChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Environment, object>> Get_ProcessInfosChanged2(IObjectReference _obj, object _thisObj)
        {
            return _ProcessInfosChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2Environment__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[6],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[7],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7, 0xC8, 0x67, 0xDB, 0xDB, 0xD0, 0x80, 0x59, 0xA3, 0xA9, 0x75, 0xEF, 0x8F, 0x63, 0xD6, 0xF6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("DB67C807-D0DB-5980-A3A9-75EF8F63D6F6")]
    internal interface ICoreWebView2Environment8 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Environment8
    {
    }
    internal static class ICoreWebView2Environment9Methods
    {


        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem CreateContextMenuItem(IObjectReference _obj, string Label, global::Windows.Storage.Streams.IRandomAccessStream iconStream, global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItemKind Kind)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __iconStream = default;
            IntPtr __retval = default;
            try
            {
                __iconStream = MarshalInterface<global::Windows.Storage.Streams.IRandomAccessStream>.CreateMarshaler2(iconStream, global::ABI.Windows.Storage.Streams.IRandomAccessStreamMethods.IID);
                MarshalString.Pinnable __Label = new(Label);
                fixed(void* ___Label = __Label)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItemKind, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __Label), MarshalInspectable<object>.GetAbi(__iconStream), Kind, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__iconStream);
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC7, 0x3E, 0x21, 0xC8, 0xC9, 0x7D, 0x68, 0x54, 0xA8, 0x8B, 0x15, 0xC6, 0xB7, 0x14, 0x44, 0x78 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C8213EC7-7DC9-5468-A88B-15C6B7144478")]
    internal interface ICoreWebView2Environment9 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Environment9
    {
    }
    internal static class ICoreWebView2EnvironmentOptionsMethods
    {

        internal static unsafe string get_AdditionalBrowserArguments(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_AdditionalBrowserArguments(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe bool get_AllowSingleSignOnUsingOSPrimaryAccount(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_AllowSingleSignOnUsingOSPrimaryAccount(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[13](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe string get_Language(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Language(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe string get_TargetCompatibleBrowserVersion(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_TargetCompatibleBrowserVersion(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x39, 0xDC, 0xD6, 0x25, 0x62, 0x0, 0x35, 0x57, 0x8B, 0x9, 0xA6, 0xF5, 0x35, 0xF1, 0x9E, 0x97 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("25D6DC39-0062-5735-8B09-A6F535F19E97")]
    internal interface ICoreWebView2EnvironmentOptions : global::Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions
    {
    }
    internal static class ICoreWebView2EnvironmentOptions2Methods
    {

        internal static unsafe bool get_ExclusiveUserDataFolderAccess(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_ExclusiveUserDataFolderAccess(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFB, 0x50, 0x73, 0xE7, 0xA1, 0x77, 0xF7, 0x56, 0xBE, 0x95, 0xEB, 0x7F, 0x8A, 0x7A, 0x30, 0x72 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E77350FB-77A1-56F7-BE95-EB7F8A7A3072")]
    internal interface ICoreWebView2EnvironmentOptions2 : global::Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions2
    {
    }
    internal static class ICoreWebView2EnvironmentOptions3Methods
    {

        internal static unsafe bool get_IsCustomCrashReportingEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsCustomCrashReportingEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x9D, 0x91, 0xAB, 0x48, 0x44, 0x24, 0x8C, 0x5E, 0xA6, 0xF6, 0xAB, 0xA8, 0x40, 0xD6, 0xC5, 0xFF };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("48AB919D-2444-5E8C-A6F6-ABA840D6C5FF")]
    internal interface ICoreWebView2EnvironmentOptions3 : global::Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions3
    {
    }
    internal static class ICoreWebView2EnvironmentOptions4Methods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF, 0x85, 0xCB, 0xA2, 0x14, 0xCD, 0x7D, 0x5A, 0x9C, 0x98, 0x53, 0xFD, 0x51, 0xEC, 0x98, 0x58 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A2CB850F-CD14-5A7D-9C98-53FD51EC9858")]
    internal interface ICoreWebView2EnvironmentOptions4 : global::Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions4
    {
    }
    internal static class ICoreWebView2EnvironmentOptions5Methods
    {

        internal static unsafe bool get_EnableTrackingPrevention(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_EnableTrackingPrevention(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x6C, 0xCA, 0xB1, 0x36, 0x6C, 0xE0, 0x50, 0x50, 0x8E, 0xF9, 0x24, 0x7C, 0x5A, 0x7A, 0xA9, 0xC9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("36B1CA6C-E06C-5050-8EF9-247C5A7AA9C9")]
    internal interface ICoreWebView2EnvironmentOptions5 : global::Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions5
    {
    }
    internal static class ICoreWebView2EnvironmentOptions6Methods
    {

        internal static unsafe bool get_AreBrowserExtensionsEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_AreBrowserExtensionsEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC2, 0x14, 0x5B, 0xEB, 0x5, 0x6F, 0x4E, 0x51, 0xB1, 0x9A, 0x76, 0x74, 0x4D, 0x1C, 0xE6, 0x84 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("EB5B14C2-6F05-514E-B19A-76744D1CE684")]
    internal interface ICoreWebView2EnvironmentOptions6 : global::Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions6
    {
    }
    internal static class ICoreWebView2EnvironmentOptions7Methods
    {

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ChannelSearchKind get_ChannelSearchKind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2ChannelSearchKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2ChannelSearchKind*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ChannelSearchKind(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2ChannelSearchKind value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2ChannelSearchKind, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ReleaseChannels get_ReleaseChannels(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2ReleaseChannels __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2ReleaseChannels*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ReleaseChannels(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2ReleaseChannels value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2ReleaseChannels, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xED, 0xB9, 0x47, 0x74, 0xD, 0xA6, 0xF8, 0x5A, 0xAB, 0x2A, 0x56, 0xC5, 0x44, 0xBC, 0x35, 0x6A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("7447B9ED-A60D-5AF8-AB2A-56C544BC356A")]
    internal interface ICoreWebView2EnvironmentOptions7 : global::Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions7
    {
    }
    internal static class ICoreWebView2EnvironmentOptions8Methods
    {

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ScrollbarStyle get_ScrollBarStyle(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2ScrollbarStyle __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2ScrollbarStyle*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ScrollBarStyle(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2ScrollbarStyle value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2ScrollbarStyle, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD2, 0xE9, 0x43, 0xF1, 0x69, 0x26, 0x6A, 0x5B, 0x8F, 0x88, 0x7B, 0x5, 0xC9, 0xE1, 0xEF, 0x4D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F143E9D2-2669-5B6A-8F88-7B05C9E1EF4D")]
    internal interface ICoreWebView2EnvironmentOptions8 : global::Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions8
    {
    }
    internal static class ICoreWebView2EnvironmentOptions_ManualMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x43, 0x44, 0x10, 0x1F, 0x93, 0xEA, 0x37, 0x5A, 0xB7, 0x91, 0x34, 0xE6, 0xA3, 0x11, 0x72, 0xED };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("1F104443-EA93-5A37-B791-34E6A31172ED")]
    internal interface ICoreWebView2EnvironmentOptions_Manual : global::Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions_Manual
    {
    }
    internal static class ICoreWebView2EnvironmentOptions_Manual3Methods
    {

        internal static unsafe global::System.Collections.Generic.IList<global::Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration> get_CustomSchemeRegistrations(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_Web_WebView2_Core_CoreWebView2CustomSchemeRegistration.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_CustomSchemeRegistrations(IObjectReference _obj, global::System.Collections.Generic.IList<global::Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration>>.CreateMarshaler2(value, global::ABI.System.Collections.Generic.IListMethods<global::Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration>.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x11, 0x9C, 0x5E, 0x66, 0x1B, 0xCA, 0x55, 0x52, 0xA6, 0xF5, 0xD7, 0x41, 0xAC, 0x39, 0xE1, 0x8F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("665E9C11-CA1B-5255-A6F5-D741AC39E18F")]
    internal interface ICoreWebView2EnvironmentOptions_Manual3 : global::Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions_Manual3
    {
    }
    internal static class ICoreWebView2EnvironmentStaticsMethods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Web.WebView2.Core.CoreWebView2Environment> CreateAsync(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Web_WebView2_Core_CoreWebView2Environment.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Web.WebView2.Core.CoreWebView2Environment>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Web.WebView2.Core.CoreWebView2Environment>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Web.WebView2.Core.CoreWebView2Environment> CreateWithOptionsAsync(IObjectReference _obj, string browserExecutableFolder, string userDataFolder, global::Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __options = default;
            IntPtr __retval = default;
            try
            {
                __options = global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions.CreateMarshaler2(options);
                MarshalString.Pinnable __browserExecutableFolder = new(browserExecutableFolder);
                MarshalString.Pinnable __userDataFolder = new(userDataFolder);
                fixed(void* ___browserExecutableFolder = __browserExecutableFolder, ___userDataFolder = __userDataFolder)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __browserExecutableFolder), MarshalString.GetAbi(ref __userDataFolder), MarshalInspectable<object>.GetAbi(__options), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Web_WebView2_Core_CoreWebView2Environment.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Web.WebView2.Core.CoreWebView2Environment>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__options);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Web.WebView2.Core.CoreWebView2Environment>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe string GetAvailableBrowserVersionString(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string GetAvailableBrowserVersionString(IObjectReference _obj, string browserExecutableFolder)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __browserExecutableFolder = new(browserExecutableFolder);
                fixed(void* ___browserExecutableFolder = __browserExecutableFolder)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, MarshalString.GetAbi(ref __browserExecutableFolder), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return MarshalString.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe int CompareBrowserVersionString(IObjectReference _obj, string browserVersionString1, string browserVersionString2)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            MarshalString.Pinnable __browserVersionString1 = new(browserVersionString1);
            MarshalString.Pinnable __browserVersionString2 = new(browserVersionString2);
            fixed(void* ___browserVersionString1 = __browserVersionString1, ___browserVersionString2 = __browserVersionString2)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int*, int>**)ThisPtr)[10](ThisPtr, MarshalString.GetAbi(ref __browserVersionString1), MarshalString.GetAbi(ref __browserVersionString2), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x4, 0xF8, 0x33, 0xE, 0xB, 0xF2, 0x35, 0x56, 0x84, 0x91, 0x16, 0x2A, 0xAA, 0x27, 0x51, 0x7B };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("0E33F804-F20B-5635-8491-162AAA27517B")]
    internal interface ICoreWebView2EnvironmentStatics : global::Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentStatics
    {
    }
    internal static class ICoreWebView2EnvironmentStatics2Methods
    {


        internal static unsafe string GetAvailableBrowserVersionString(IObjectReference _obj, string browserExecutableFolder, global::Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __options = default;
            IntPtr __retval = default;
            try
            {
                __options = global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions.CreateMarshaler2(options);
                MarshalString.Pinnable __browserExecutableFolder = new(browserExecutableFolder);
                fixed(void* ___browserExecutableFolder = __browserExecutableFolder)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __browserExecutableFolder), MarshalInspectable<object>.GetAbi(__options), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return MarshalString.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__options);
                MarshalString.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE4, 0x13, 0xBA, 0xDC, 0x49, 0xEE, 0x60, 0x58, 0x84, 0x99, 0xC4, 0x91, 0x61, 0xA7, 0xD8, 0xCE };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("DCBA13E4-EE49-5860-8499-C49161A7D8CE")]
    internal interface ICoreWebView2EnvironmentStatics2 : global::Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentStatics2
    {
    }
    internal static class ICoreWebView2Environment_ManualMethods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller> CreateCoreWebView2ControllerAsync(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference ParentWindow, global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __ParentWindow = default;
            ObjectReferenceValue __options = default;
            IntPtr __retval = default;
            try
            {
                __ParentWindow = global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference.CreateMarshaler2(ParentWindow);
                __options = global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions.CreateMarshaler2(options);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__ParentWindow), MarshalInspectable<object>.GetAbi(__options), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Web_WebView2_Core_CoreWebView2Controller.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__ParentWindow);
                MarshalInspectable<object>.DisposeMarshaler(__options);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Web.WebView2.Core.CoreWebView2Controller>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController> CreateCoreWebView2CompositionControllerAsync(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference ParentWindow, global::Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __ParentWindow = default;
            ObjectReferenceValue __options = default;
            IntPtr __retval = default;
            try
            {
                __ParentWindow = global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference.CreateMarshaler2(ParentWindow);
                __options = global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions.CreateMarshaler2(options);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__ParentWindow), MarshalInspectable<object>.GetAbi(__options), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Web_WebView2_Core_CoreWebView2CompositionController.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__ParentWindow);
                MarshalInspectable<object>.DisposeMarshaler(__options);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Web.WebView2.Core.CoreWebView2CompositionController>>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xBE, 0xFA, 0x1C, 0xF5, 0xAD, 0x73, 0x35, 0x56, 0xA9, 0x35, 0x63, 0x86, 0xAE, 0xF9, 0x23, 0x8E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F51CFABE-73AD-5635-A935-6386AEF9238E")]
    internal interface ICoreWebView2Environment_Manual : global::Microsoft.Web.WebView2.Core.ICoreWebView2Environment_Manual
    {
    }
    internal static class ICoreWebView2ExecuteScriptResultMethods
    {

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptException get_Exception(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ScriptException.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ScriptException.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_ResultAsJson(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool get_Succeeded(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF9, 0x80, 0xEF, 0x9B, 0xC, 0x58, 0xA0, 0x56, 0x8D, 0xB9, 0x75, 0xEC, 0x79, 0x2C, 0x84, 0x21 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("9BEF80F9-580C-56A0-8DB9-75EC792C8421")]
    internal interface ICoreWebView2ExecuteScriptResult : global::Microsoft.Web.WebView2.Core.ICoreWebView2ExecuteScriptResult
    {
    }
    internal static class ICoreWebView2ExecuteScriptResult_ManualMethods
    {


        internal static unsafe int TryGetResultAsString(IObjectReference _obj, out string stringResult)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __stringResult = default;
            int __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int*, int>**)ThisPtr)[6](ThisPtr, &__stringResult, &__retval));
                global::System.GC.KeepAlive(_obj);
                stringResult = MarshalString.FromAbi(__stringResult);
                return __retval;
            }
            finally
            {
                MarshalString.DisposeAbi(__stringResult);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x73, 0xBC, 0x31, 0x59, 0x6C, 0x37, 0xA7, 0x5B, 0xBC, 0xBB, 0x3C, 0xAE, 0xC6, 0xD1, 0xFF, 0x5B };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("5931BC73-376C-5BA7-BCBB-3CAEC6D1FF5B")]
    internal interface ICoreWebView2ExecuteScriptResult_Manual : global::Microsoft.Web.WebView2.Core.ICoreWebView2ExecuteScriptResult_Manual
    {
    }
    internal static class ICoreWebView2FileMethods
    {

        internal static unsafe string get_Path(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x12, 0x55, 0xB4, 0xCA, 0x94, 0x95, 0xF1, 0x50, 0xAC, 0x3C, 0x9C, 0xC1, 0x3, 0xB5, 0x74, 0xA3 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("CAB45512-9594-50F1-AC3C-9CC103B574A3")]
    internal interface ICoreWebView2File : global::Microsoft.Web.WebView2.Core.ICoreWebView2File
    {
    }
    internal static class ICoreWebView2FileSystemHandleMethods
    {

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandleKind get_Kind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandleKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandleKind*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe string get_Path(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandlePermission get_Permission(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandlePermission __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandlePermission*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC8, 0xB4, 0x1C, 0x24, 0x21, 0x0, 0x72, 0x5F, 0x8B, 0xF2, 0xE1, 0x41, 0xDC, 0xE4, 0xC1, 0x51 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("241CB4C8-0021-5F72-8BF2-E141DCE4C151")]
    internal interface ICoreWebView2FileSystemHandle : global::Microsoft.Web.WebView2.Core.ICoreWebView2FileSystemHandle
    {
    }
    internal static class ICoreWebView2FrameMethods
    {


        internal static unsafe void RemoveHostObjectFromScript(IObjectReference _obj, string name)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __name = new(name);
            fixed(void* ___name = __name)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalString.GetAbi(ref __name)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe int IsDestroyed(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe string get_Name(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, object>>> _Destroyed_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, object>>> MakeDestroyedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Destroyed_, new(), null);
            return _Destroyed_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, object>>> _Destroyed => _Destroyed_ ?? MakeDestroyedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, object>> Get_Destroyed2(IObjectReference _obj, object _thisObj)
        {
            return _Destroyed.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2Frame__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[9],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[10],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, object>>> _NameChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, object>>> MakeNameChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _NameChanged_, new(), null);
            return _NameChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, object>>> _NameChanged => _NameChanged_ ?? MakeNameChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, object>> Get_NameChanged2(IObjectReference _obj, object _thisObj)
        {
            return _NameChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2Frame__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[7],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[8],
                1);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF9, 0xCB, 0xFF, 0x2, 0xE7, 0x19, 0xB8, 0x5B, 0x82, 0x73, 0x34, 0x64, 0x20, 0xFB, 0x15, 0x3 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("02FFCBF9-19E7-5BB8-8273-346420FB1503")]
    internal interface ICoreWebView2Frame : global::Microsoft.Web.WebView2.Core.ICoreWebView2Frame
    {
    }
    internal static class ICoreWebView2Frame2Methods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<string> ExecuteScriptAsync(IObjectReference _obj, string javaScript)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __javaScript = new(javaScript);
                fixed(void* ___javaScript = __javaScript)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[16](ThisPtr, MarshalString.GetAbi(ref __javaScript), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_String.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperation<string>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<string>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe void PostWebMessageAsJson(IObjectReference _obj, string webMessageAsJson)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __webMessageAsJson = new(webMessageAsJson);
            fixed(void* ___webMessageAsJson = __webMessageAsJson)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[17](ThisPtr, MarshalString.GetAbi(ref __webMessageAsJson)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe void PostWebMessageAsString(IObjectReference _obj, string webMessageAsString)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __webMessageAsString = new(webMessageAsString);
            fixed(void* ___webMessageAsString = __webMessageAsString)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[18](ThisPtr, MarshalString.GetAbi(ref __webMessageAsString)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, global::Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs>>> _ContentLoading_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, global::Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs>>> MakeContentLoadingTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ContentLoading_, new(), null);
            return _ContentLoading_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, global::Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs>>> _ContentLoading => _ContentLoading_ ?? MakeContentLoadingTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, global::Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs>> Get_ContentLoading2(IObjectReference _obj, object _thisObj)
        {
            return _ContentLoading.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2Frame__global__Microsoft_Web_WebView2_Core_CoreWebView2ContentLoadingEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[8],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[9],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, global::Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs>>> _DOMContentLoaded_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, global::Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs>>> MakeDOMContentLoadedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _DOMContentLoaded_, new(), null);
            return _DOMContentLoaded_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, global::Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs>>> _DOMContentLoaded => _DOMContentLoaded_ ?? MakeDOMContentLoadedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, global::Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs>> Get_DOMContentLoaded2(IObjectReference _obj, object _thisObj)
        {
            return _DOMContentLoaded.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2Frame__global__Microsoft_Web_WebView2_Core_CoreWebView2DOMContentLoadedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[12],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[13],
                1);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs>>> _NavigationCompleted_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs>>> MakeNavigationCompletedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _NavigationCompleted_, new(), null);
            return _NavigationCompleted_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs>>> _NavigationCompleted => _NavigationCompleted_ ?? MakeNavigationCompletedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs>> Get_NavigationCompleted2(IObjectReference _obj, object _thisObj)
        {
            return _NavigationCompleted.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2Frame__global__Microsoft_Web_WebView2_Core_CoreWebView2NavigationCompletedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[10],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[11],
                2);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs>>> _NavigationStarting_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs>>> MakeNavigationStartingTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _NavigationStarting_, new(), null);
            return _NavigationStarting_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs>>> _NavigationStarting => _NavigationStarting_ ?? MakeNavigationStartingTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs>> Get_NavigationStarting2(IObjectReference _obj, object _thisObj)
        {
            return _NavigationStarting.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2Frame__global__Microsoft_Web_WebView2_Core_CoreWebView2NavigationStartingEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[6],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[7],
                3);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, global::Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs>>> _WebMessageReceived_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, global::Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs>>> MakeWebMessageReceivedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _WebMessageReceived_, new(), null);
            return _WebMessageReceived_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, global::Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs>>> _WebMessageReceived => _WebMessageReceived_ ?? MakeWebMessageReceivedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, global::Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs>> Get_WebMessageReceived2(IObjectReference _obj, object _thisObj)
        {
            return _WebMessageReceived.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2Frame__global__Microsoft_Web_WebView2_Core_CoreWebView2WebMessageReceivedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[14],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[15],
                4);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC9, 0xC9, 0xDB, 0x33, 0x3, 0xA1, 0xE3, 0x56, 0xB7, 0x22, 0x36, 0x38, 0x14, 0x20, 0x3, 0x20 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("33DBC9C9-A103-56E3-B722-363814200320")]
    internal interface ICoreWebView2Frame2 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Frame2
    {
    }
    internal static class ICoreWebView2Frame3Methods
    {


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs>>> _PermissionRequested_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs>>> MakePermissionRequestedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _PermissionRequested_, new(), null);
            return _PermissionRequested_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs>>> _PermissionRequested => _PermissionRequested_ ?? MakePermissionRequestedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs>> Get_PermissionRequested2(IObjectReference _obj, object _thisObj)
        {
            return _PermissionRequested.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2Frame__global__Microsoft_Web_WebView2_Core_CoreWebView2PermissionRequestedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[6],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[7],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC4, 0xDA, 0x45, 0x65, 0x66, 0x16, 0xA5, 0x50, 0xBB, 0xE8, 0xEC, 0x4, 0x84, 0x2A, 0x46, 0x6F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("6545DAC4-1666-50A5-BBE8-EC04842A466F")]
    internal interface ICoreWebView2Frame3 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Frame3
    {
    }
    internal static class ICoreWebView2Frame4Methods
    {


        internal static unsafe void PostSharedBufferToScript(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer sharedBuffer, global::Microsoft.Web.WebView2.Core.CoreWebView2SharedBufferAccess access, string additionalDataAsJson)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __sharedBuffer = default;
            try
            {
                __sharedBuffer = global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer.CreateMarshaler2(sharedBuffer);
                MarshalString.Pinnable __additionalDataAsJson = new(additionalDataAsJson);
                fixed(void* ___additionalDataAsJson = __additionalDataAsJson)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2SharedBufferAccess, IntPtr, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__sharedBuffer), access, MarshalString.GetAbi(ref __additionalDataAsJson)));
                    global::System.GC.KeepAlive(_obj);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__sharedBuffer);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x58, 0xD7, 0x6C, 0xD4, 0xB9, 0x64, 0x3E, 0x54, 0xA7, 0xB8, 0xCA, 0xC9, 0xB4, 0xC0, 0x59, 0xA7 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D46CD758-64B9-543E-A7B8-CAC9B4C059A7")]
    internal interface ICoreWebView2Frame4 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Frame4
    {
    }
    internal static class ICoreWebView2Frame5Methods
    {

        internal static unsafe uint get_FrameId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3D, 0x80, 0xC4, 0x27, 0x7F, 0x9A, 0x9A, 0x59, 0xBF, 0x72, 0x7, 0xE8, 0xDC, 0x96, 0x4A, 0x5B };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("27C4803D-9A7F-599A-BF72-07E8DC964A5B")]
    internal interface ICoreWebView2Frame5 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Frame5
    {
    }
    internal static class ICoreWebView2Frame6Methods
    {


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, global::Microsoft.Web.WebView2.Core.CoreWebView2ScreenCaptureStartingEventArgs>>> _ScreenCaptureStarting_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, global::Microsoft.Web.WebView2.Core.CoreWebView2ScreenCaptureStartingEventArgs>>> MakeScreenCaptureStartingTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ScreenCaptureStarting_, new(), null);
            return _ScreenCaptureStarting_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, global::Microsoft.Web.WebView2.Core.CoreWebView2ScreenCaptureStartingEventArgs>>> _ScreenCaptureStarting => _ScreenCaptureStarting_ ?? MakeScreenCaptureStartingTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Frame, global::Microsoft.Web.WebView2.Core.CoreWebView2ScreenCaptureStartingEventArgs>> Get_ScreenCaptureStarting2(IObjectReference _obj, object _thisObj)
        {
            return _ScreenCaptureStarting.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2Frame__global__Microsoft_Web_WebView2_Core_CoreWebView2ScreenCaptureStartingEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[6],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[7],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xAD, 0x7D, 0x19, 0xBA, 0xF4, 0xD2, 0x27, 0x51, 0x80, 0xB8, 0xFA, 0xAB, 0x2, 0xEC, 0x21, 0x1E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("BA197DAD-D2F4-5127-80B8-FAAB02EC211E")]
    internal interface ICoreWebView2Frame6 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Frame6
    {
    }
    internal static class ICoreWebView2FrameCreatedEventArgsMethods
    {

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2Frame get_Frame(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Frame.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Frame.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB8, 0x1, 0x7B, 0x52, 0x6D, 0xFC, 0x43, 0x55, 0x8D, 0xCE, 0x96, 0xCD, 0xFD, 0xB3, 0x2C, 0x81 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("527B01B8-FC6D-5543-8DCE-96CDFDB32C81")]
    internal interface ICoreWebView2FrameCreatedEventArgs : global::Microsoft.Web.WebView2.Core.ICoreWebView2FrameCreatedEventArgs
    {
    }
    internal static class ICoreWebView2FrameInfoMethods
    {

        internal static unsafe string get_Name(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_Source(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x6, 0x2E, 0xB8, 0xF9, 0xF3, 0x73, 0x3B, 0x51, 0xBC, 0x2C, 0x44, 0x5D, 0xDE, 0xDB, 0xA9, 0x76 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F9B82E06-73F3-513B-BC2C-445DDEDBA976")]
    internal interface ICoreWebView2FrameInfo : global::Microsoft.Web.WebView2.Core.ICoreWebView2FrameInfo
    {
    }
    internal static class ICoreWebView2FrameInfo2Methods
    {

        internal static unsafe uint get_FrameId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2FrameKind get_FrameKind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2FrameKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2FrameKind*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo get_ParentFrameInfo(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC6, 0x70, 0x7, 0x7F, 0x5E, 0xD, 0x9B, 0x52, 0xB0, 0xC, 0xF1, 0x56, 0x56, 0xF6, 0x5, 0xC4 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("7F0770C6-0D5E-529B-B00C-F15656F605C4")]
    internal interface ICoreWebView2FrameInfo2 : global::Microsoft.Web.WebView2.Core.ICoreWebView2FrameInfo2
    {
    }
    internal static class ICoreWebView2HttpHeadersCollectionIteratorMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xEE, 0x64, 0xF2, 0xAD, 0x80, 0xD9, 0x48, 0x5F, 0xA6, 0xE, 0x87, 0x5, 0xDE, 0x4, 0x66, 0x8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("ADF264EE-D980-5F48-A60E-8705DE046608")]
    internal interface ICoreWebView2HttpHeadersCollectionIterator : global::Microsoft.Web.WebView2.Core.ICoreWebView2HttpHeadersCollectionIterator
    {
    }
    internal static class ICoreWebView2HttpRequestHeadersMethods
    {


        internal static unsafe string GetHeader(IObjectReference _obj, string name)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __name = new(name);
                fixed(void* ___name = __name)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __name), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return MarshalString.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator GetHeaders(IObjectReference _obj, string name)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __name = new(name);
                fixed(void* ___name = __name)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __name), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator.FromAbi(__retval);
                }
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool Contains(IObjectReference _obj, string name)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            MarshalString.Pinnable __name = new(name);
            fixed(void* ___name = __name)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, MarshalString.GetAbi(ref __name), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
        }

        internal static unsafe void SetHeader(IObjectReference _obj, string name, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __name = new(name);
            MarshalString.Pinnable __value = new(value);
            fixed(void* ___name = __name, ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalString.GetAbi(ref __name), MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe void RemoveHeader(IObjectReference _obj, string name)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __name = new(name);
            fixed(void* ___name = __name)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[10](ThisPtr, MarshalString.GetAbi(ref __name)));
                global::System.GC.KeepAlive(_obj);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC7, 0x26, 0x22, 0xDC, 0x15, 0x35, 0xBB, 0x55, 0xBC, 0xB2, 0x57, 0xB7, 0x8F, 0x86, 0xB9, 0x1D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("DC2226C7-3515-55BB-BCB2-57B78F86B91D")]
    internal interface ICoreWebView2HttpRequestHeaders : global::Microsoft.Web.WebView2.Core.ICoreWebView2HttpRequestHeaders
    {
    }
    internal static class ICoreWebView2HttpResponseHeadersMethods
    {


        internal static unsafe void AppendHeader(IObjectReference _obj, string name, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __name = new(name);
            MarshalString.Pinnable __value = new(value);
            fixed(void* ___name = __name, ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __name), MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe bool Contains(IObjectReference _obj, string name)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            MarshalString.Pinnable __name = new(name);
            fixed(void* ___name = __name)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __name), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
        }

        internal static unsafe string GetHeader(IObjectReference _obj, string name)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __name = new(name);
                fixed(void* ___name = __name)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, MarshalString.GetAbi(ref __name), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return MarshalString.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator GetHeaders(IObjectReference _obj, string name)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __name = new(name);
                fixed(void* ___name = __name)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, MarshalString.GetAbi(ref __name), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator.FromAbi(__retval);
                }
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE9, 0x83, 0xD3, 0xF3, 0x7F, 0x74, 0x74, 0x55, 0x86, 0x62, 0x9A, 0x6B, 0x92, 0xC, 0xEC, 0xD4 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F3D383E9-747F-5574-8662-9A6B920CECD4")]
    internal interface ICoreWebView2HttpResponseHeaders : global::Microsoft.Web.WebView2.Core.ICoreWebView2HttpResponseHeaders
    {
    }
    internal static class ICoreWebView2LaunchingExternalUriSchemeEventArgsMethods
    {


        internal static unsafe global::Windows.Foundation.Deferral GetDeferral(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Foundation.Deferral.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Foundation.Deferral.DisposeAbi(__retval);
            }
        }
        internal static unsafe bool get_Cancel(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Cancel(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[10](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe string get_InitiatingOrigin(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool get_IsUserInitiated(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe string get_Uri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x8D, 0x4F, 0xB4, 0x6A, 0x6A, 0xEC, 0xA1, 0x56, 0xAE, 0x3C, 0x9C, 0x55, 0xDF, 0xF6, 0xCB, 0xC6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("6AB44F8D-EC6A-56A1-AE3C-9C55DFF6CBC6")]
    internal interface ICoreWebView2LaunchingExternalUriSchemeEventArgs : global::Microsoft.Web.WebView2.Core.ICoreWebView2LaunchingExternalUriSchemeEventArgs
    {
    }
    internal static class ICoreWebView2MoveFocusRequestedEventArgsMethods
    {

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[8](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusReason get_Reason(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusReason __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusReason*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3B, 0x10, 0x29, 0x2E, 0xDD, 0xEC, 0x1D, 0x5C, 0xB2, 0x88, 0x3F, 0x6, 0x6D, 0x60, 0x89, 0x19 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2E29103B-ECDD-5C1D-B288-3F066D608919")]
    internal interface ICoreWebView2MoveFocusRequestedEventArgs : global::Microsoft.Web.WebView2.Core.ICoreWebView2MoveFocusRequestedEventArgs
    {
    }
    internal static class ICoreWebView2NavigationCompletedEventArgsMethods
    {

        internal static unsafe bool get_IsSuccess(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe ulong get_NavigationId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            ulong __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, ulong*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2WebErrorStatus get_WebErrorStatus(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2WebErrorStatus __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2WebErrorStatus*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x38, 0xE2, 0x65, 0x48, 0x6A, 0x3, 0x64, 0x56, 0x95, 0xA3, 0x44, 0x7E, 0xC4, 0x4C, 0xF4, 0x98 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4865E238-036A-5664-95A3-447EC44CF498")]
    internal interface ICoreWebView2NavigationCompletedEventArgs : global::Microsoft.Web.WebView2.Core.ICoreWebView2NavigationCompletedEventArgs
    {
    }
    internal static class ICoreWebView2NavigationCompletedEventArgs2Methods
    {

        internal static unsafe int get_HttpStatusCode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x33, 0x3C, 0x4D, 0x6E, 0xE2, 0xA6, 0x96, 0x58, 0x90, 0xC5, 0x68, 0xB4, 0xB5, 0xE5, 0x5B, 0x40 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("6E4D3C33-A6E2-5896-90C5-68B4B5E55B40")]
    internal interface ICoreWebView2NavigationCompletedEventArgs2 : global::Microsoft.Web.WebView2.Core.ICoreWebView2NavigationCompletedEventArgs2
    {
    }
    internal static class ICoreWebView2NavigationStartingEventArgsMethods
    {

        internal static unsafe bool get_Cancel(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Cancel(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[11](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsRedirected(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_IsUserInitiated(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe ulong get_NavigationId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            ulong __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, ulong*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders get_RequestHeaders(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_Uri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD3, 0x23, 0x8D, 0x54, 0xA3, 0xFE, 0x16, 0x56, 0xBD, 0x5, 0xAE, 0x8, 0x6, 0x6C, 0x86, 0xD3 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("548D23D3-FEA3-5616-BD05-AE08066C86D3")]
    internal interface ICoreWebView2NavigationStartingEventArgs : global::Microsoft.Web.WebView2.Core.ICoreWebView2NavigationStartingEventArgs
    {
    }
    internal static class ICoreWebView2NavigationStartingEventArgs2Methods
    {

        internal static unsafe string get_AdditionalAllowedFrameAncestors(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_AdditionalAllowedFrameAncestors(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x4E, 0x82, 0xA3, 0xD7, 0x54, 0x76, 0x4B, 0x5C, 0xB0, 0x69, 0xE6, 0x50, 0x16, 0x34, 0xD8, 0x4C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D7A3824E-7654-5C4B-B069-E6501634D84C")]
    internal interface ICoreWebView2NavigationStartingEventArgs2 : global::Microsoft.Web.WebView2.Core.ICoreWebView2NavigationStartingEventArgs2
    {
    }
    internal static class ICoreWebView2NavigationStartingEventArgs3Methods
    {

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationKind get_NavigationKind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2NavigationKind*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF6, 0x72, 0xDB, 0x17, 0x95, 0xE9, 0xF6, 0x59, 0x91, 0xBA, 0x44, 0x11, 0xE7, 0x55, 0xF3, 0xAB };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("17DB72F6-E995-59F6-91BA-4411E755F3AB")]
    internal interface ICoreWebView2NavigationStartingEventArgs3 : global::Microsoft.Web.WebView2.Core.ICoreWebView2NavigationStartingEventArgs3
    {
    }
    internal static class ICoreWebView2NewWindowRequestedEventArgsMethods
    {


        internal static unsafe global::Windows.Foundation.Deferral GetDeferral(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Foundation.Deferral.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Foundation.Deferral.DisposeAbi(__retval);
            }
        }
        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[10](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsUserInitiated(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2 get_NewWindow(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_NewWindow(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2 value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe string get_Uri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures get_WindowFeatures(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xBA, 0x13, 0xE0, 0xE6, 0xC8, 0xAE, 0x2E, 0x53, 0x9A, 0xC9, 0x15, 0x90, 0xAF, 0x7B, 0x25, 0xEC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E6E013BA-AEC8-532E-9AC9-1590AF7B25EC")]
    internal interface ICoreWebView2NewWindowRequestedEventArgs : global::Microsoft.Web.WebView2.Core.ICoreWebView2NewWindowRequestedEventArgs
    {
    }
    internal static class ICoreWebView2NewWindowRequestedEventArgs2Methods
    {

        internal static unsafe string get_Name(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x59, 0x62, 0x80, 0xF4, 0x3A, 0xE6, 0xB, 0x5C, 0xA0, 0x2C, 0x5F, 0x10, 0xE1, 0x10, 0x94, 0xF4 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F4806259-E63A-5C0B-A02C-5F10E11094F4")]
    internal interface ICoreWebView2NewWindowRequestedEventArgs2 : global::Microsoft.Web.WebView2.Core.ICoreWebView2NewWindowRequestedEventArgs2
    {
    }
    internal static class ICoreWebView2NewWindowRequestedEventArgs3Methods
    {

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo get_OriginalSourceFrameInfo(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x26, 0x78, 0xF, 0x1F, 0x70, 0x8D, 0x20, 0x57, 0xBB, 0x8B, 0xD8, 0x7F, 0x63, 0xCB, 0xFB, 0x9C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("1F0F7826-8D70-5720-BB8B-D87F63CBFB9C")]
    internal interface ICoreWebView2NewWindowRequestedEventArgs3 : global::Microsoft.Web.WebView2.Core.ICoreWebView2NewWindowRequestedEventArgs3
    {
    }
    internal static class ICoreWebView2NonClientRegionChangedEventArgsMethods
    {

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionKind get_RegionKind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionKind*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x22, 0x36, 0x58, 0x4F, 0xF, 0xCD, 0xD6, 0x55, 0xBE, 0x7E, 0x8A, 0x8F, 0x99, 0xA2, 0xE, 0x62 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4F583622-CD0F-55D6-BE7E-8A8F99A20E62")]
    internal interface ICoreWebView2NonClientRegionChangedEventArgs : global::Microsoft.Web.WebView2.Core.ICoreWebView2NonClientRegionChangedEventArgs
    {
    }
    internal static class ICoreWebView2NotificationMethods
    {


        internal static unsafe void ReportShown(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[20](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void ReportClicked(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[21](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void ReportClosed(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[22](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }
        internal static unsafe string get_BadgeUri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_Body(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_BodyImageUri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2TextDirectionKind get_Direction(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2TextDirectionKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2TextDirectionKind*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe string get_IconUri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool get_IsSilent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[16](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe string get_Language(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool get_RequiresInteraction(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[15](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_ShouldRenotify(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe string get_Tag(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe double get_Timestamp(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[17](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe string get_Title(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Notification, object>>> _CloseRequested_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Notification, object>>> MakeCloseRequestedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _CloseRequested_, new(), null);
            return _CloseRequested_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Notification, object>>> _CloseRequested => _CloseRequested_ ?? MakeCloseRequestedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Notification, object>> Get_CloseRequested2(IObjectReference _obj, object _thisObj)
        {
            return _CloseRequested.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2Notification__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[18],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[19],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x1D, 0x35, 0x16, 0x25, 0xCD, 0x6C, 0x84, 0x54, 0xBF, 0xF3, 0x75, 0xF4, 0xDD, 0x47, 0x49, 0xE5 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2516351D-6CCD-5484-BFF3-75F4DD4749E5")]
    internal interface ICoreWebView2Notification : global::Microsoft.Web.WebView2.Core.ICoreWebView2Notification
    {
    }
    internal static class ICoreWebView2NotificationReceivedEventArgsMethods
    {


        internal static unsafe global::Windows.Foundation.Deferral GetDeferral(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Foundation.Deferral.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Foundation.Deferral.DisposeAbi(__retval);
            }
        }
        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[9](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2Notification get_Notification(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Notification.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Notification.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_SenderOrigin(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x36, 0xA0, 0x16, 0x94, 0x6, 0x5E, 0xCB, 0x57, 0x8B, 0xBB, 0x7F, 0x6E, 0xA1, 0xDC, 0x9A, 0x3D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("9416A036-5E06-57CB-8BBB-7F6EA1DC9A3D")]
    internal interface ICoreWebView2NotificationReceivedEventArgs : global::Microsoft.Web.WebView2.Core.ICoreWebView2NotificationReceivedEventArgs
    {
    }
    internal static class ICoreWebView2Notification_Manual2Methods
    {

        internal static unsafe global::System.Collections.Generic.IReadOnlyList<ulong> get_VibrationPattern(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_UInt64.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IReadOnlyList<ulong>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IReadOnlyList<ulong>>.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x73, 0x48, 0xC8, 0xA2, 0xE, 0xF4, 0xDE, 0x5A, 0xA7, 0xDB, 0xE4, 0x78, 0x23, 0x3C, 0x58, 0x97 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A2C84873-F40E-5ADE-A7DB-E478233C5897")]
    internal interface ICoreWebView2Notification_Manual2 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Notification_Manual2
    {
    }
    internal static class ICoreWebView2PermissionRequestedEventArgsMethods
    {


        internal static unsafe global::Windows.Foundation.Deferral GetDeferral(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Foundation.Deferral.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Foundation.Deferral.DisposeAbi(__retval);
            }
        }
        internal static unsafe bool get_IsUserInitiated(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionKind get_PermissionKind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionKind*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionState get_State(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionState __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionState*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_State(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionState value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionState, int>**)ThisPtr)[10](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe string get_Uri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x9B, 0xDD, 0x8B, 0x11, 0xF1, 0xCE, 0x10, 0x59, 0x92, 0x9E, 0xC1, 0xA3, 0x21, 0x32, 0x82, 0x39 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("118BDD9B-CEF1-5910-929E-C1A321328239")]
    internal interface ICoreWebView2PermissionRequestedEventArgs : global::Microsoft.Web.WebView2.Core.ICoreWebView2PermissionRequestedEventArgs
    {
    }
    internal static class ICoreWebView2PermissionRequestedEventArgs2Methods
    {

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xBA, 0x2F, 0x65, 0xA6, 0xE5, 0xEB, 0x91, 0x58, 0xAD, 0xDC, 0xCB, 0x37, 0xDA, 0x8F, 0x7E, 0x66 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A6652FBA-EBE5-5891-ADDC-CB37DA8F7E66")]
    internal interface ICoreWebView2PermissionRequestedEventArgs2 : global::Microsoft.Web.WebView2.Core.ICoreWebView2PermissionRequestedEventArgs2
    {
    }
    internal static class ICoreWebView2PermissionRequestedEventArgs3Methods
    {

        internal static unsafe bool get_SavesInProfile(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_SavesInProfile(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xCC, 0x8B, 0xE, 0x20, 0x11, 0xBC, 0xEB, 0x5B, 0xAA, 0x7A, 0x79, 0xD4, 0xC9, 0x5D, 0x73, 0xAA };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("200E8BCC-BC11-5BEB-AA7A-79D4C95D73AA")]
    internal interface ICoreWebView2PermissionRequestedEventArgs3 : global::Microsoft.Web.WebView2.Core.ICoreWebView2PermissionRequestedEventArgs3
    {
    }
    internal static class ICoreWebView2PermissionSettingMethods
    {

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionKind get_PermissionKind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionKind*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe string get_PermissionOrigin(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionState get_PermissionState(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionState __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionState*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB, 0x8D, 0x15, 0xB4, 0xF8, 0x8E, 0x5F, 0x57, 0x8E, 0x99, 0x5F, 0xE0, 0x2E, 0x8B, 0x57, 0x9E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B4158D0B-8EF8-575F-8E99-5FE02E8B579E")]
    internal interface ICoreWebView2PermissionSetting : global::Microsoft.Web.WebView2.Core.ICoreWebView2PermissionSetting
    {
    }
    internal static class ICoreWebView2PointerInfoMethods
    {

        internal static unsafe int get_ButtonChangeKind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[36](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ButtonChangeKind(IObjectReference _obj, int value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int>**)ThisPtr)[37](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.Foundation.Rect get_DisplayRect(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Rect __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect*, int>**)ThisPtr)[16](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_DisplayRect(IObjectReference _obj, global::Windows.Foundation.Rect value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect, int>**)ThisPtr)[17](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe uint get_FrameId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_FrameId(IObjectReference _obj, uint value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.Foundation.Point get_HimetricLocation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[20](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_HimetricLocation(IObjectReference _obj, global::Windows.Foundation.Point value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point, int>**)ThisPtr)[21](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.Foundation.Point get_HimetricLocationRaw(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[24](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_HimetricLocationRaw(IObjectReference _obj, global::Windows.Foundation.Point value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point, int>**)ThisPtr)[25](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe uint get_HistoryCount(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[28](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_HistoryCount(IObjectReference _obj, uint value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint, int>**)ThisPtr)[29](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe int get_InputData(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[30](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_InputData(IObjectReference _obj, int value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int>**)ThisPtr)[31](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe uint get_KeyStates(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[32](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_KeyStates(IObjectReference _obj, uint value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint, int>**)ThisPtr)[33](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe uint get_PenFlags(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[38](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_PenFlags(IObjectReference _obj, uint value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint, int>**)ThisPtr)[39](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe uint get_PenMask(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[40](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_PenMask(IObjectReference _obj, uint value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint, int>**)ThisPtr)[41](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe uint get_PenPressure(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[42](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_PenPressure(IObjectReference _obj, uint value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint, int>**)ThisPtr)[43](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe uint get_PenRotation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[44](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_PenRotation(IObjectReference _obj, uint value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint, int>**)ThisPtr)[45](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe int get_PenTiltX(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[46](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_PenTiltX(IObjectReference _obj, int value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int>**)ThisPtr)[47](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe int get_PenTiltY(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[48](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_PenTiltY(IObjectReference _obj, int value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int>**)ThisPtr)[49](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe ulong get_PerformanceCount(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            ulong __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, ulong*, int>**)ThisPtr)[34](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_PerformanceCount(IObjectReference _obj, ulong value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, ulong, int>**)ThisPtr)[35](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.Foundation.Point get_PixelLocation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[18](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_PixelLocation(IObjectReference _obj, global::Windows.Foundation.Point value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point, int>**)ThisPtr)[19](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.Foundation.Point get_PixelLocationRaw(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[22](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_PixelLocationRaw(IObjectReference _obj, global::Windows.Foundation.Point value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point, int>**)ThisPtr)[23](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.Foundation.Rect get_PointerDeviceRect(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Rect __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_PointerDeviceRect(IObjectReference _obj, global::Windows.Foundation.Rect value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect, int>**)ThisPtr)[15](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe uint get_PointerFlags(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_PointerFlags(IObjectReference _obj, uint value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint, int>**)ThisPtr)[13](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe uint get_PointerId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_PointerId(IObjectReference _obj, uint value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe uint get_PointerKind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_PointerKind(IObjectReference _obj, uint value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe uint get_Time(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[26](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Time(IObjectReference _obj, uint value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint, int>**)ThisPtr)[27](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.Foundation.Rect get_TouchContact(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Rect __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect*, int>**)ThisPtr)[54](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_TouchContact(IObjectReference _obj, global::Windows.Foundation.Rect value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect, int>**)ThisPtr)[55](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.Foundation.Rect get_TouchContactRaw(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Rect __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect*, int>**)ThisPtr)[56](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_TouchContactRaw(IObjectReference _obj, global::Windows.Foundation.Rect value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect, int>**)ThisPtr)[57](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe uint get_TouchFlags(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[50](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_TouchFlags(IObjectReference _obj, uint value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint, int>**)ThisPtr)[51](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe uint get_TouchMask(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[52](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_TouchMask(IObjectReference _obj, uint value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint, int>**)ThisPtr)[53](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe uint get_TouchOrientation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[58](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_TouchOrientation(IObjectReference _obj, uint value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint, int>**)ThisPtr)[59](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe uint get_TouchPressure(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[60](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_TouchPressure(IObjectReference _obj, uint value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint, int>**)ThisPtr)[61](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD, 0xE, 0x86, 0xC3, 0x18, 0xC0, 0x84, 0x5A, 0xBC, 0x6, 0x9F, 0x8F, 0x7B, 0x27, 0x5D, 0xFF };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C3860E0D-C018-5A84-BC06-9F8F7B275DFF")]
    internal interface ICoreWebView2PointerInfo : global::Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfo
    {
    }
    internal static class ICoreWebView2PrintSettingsMethods
    {

        internal static unsafe string get_FooterUri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[30](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_FooterUri(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[31](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe string get_HeaderTitle(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[28](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_HeaderTitle(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[29](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe double get_MarginBottom(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[16](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_MarginBottom(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[17](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_MarginLeft(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[18](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_MarginLeft(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[19](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_MarginRight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[20](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_MarginRight(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[21](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_MarginTop(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_MarginTop(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[15](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2PrintOrientation get_Orientation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2PrintOrientation __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2PrintOrientation*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Orientation(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2PrintOrientation value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2PrintOrientation, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_PageHeight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_PageHeight(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[13](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_PageWidth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_PageWidth(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_ScaleFactor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ScaleFactor(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_ShouldPrintBackgrounds(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[22](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_ShouldPrintBackgrounds(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[23](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_ShouldPrintHeaderAndFooter(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[26](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_ShouldPrintHeaderAndFooter(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[27](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_ShouldPrintSelectionOnly(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[24](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_ShouldPrintSelectionOnly(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[25](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC0, 0xC8, 0x75, 0x9C, 0x3D, 0xEF, 0xA8, 0x58, 0x9A, 0x8C, 0x18, 0xEE, 0xD9, 0xFD, 0xF, 0x16 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("9C75C8C0-EF3D-58A8-9A8C-18EED9FD0F16")]
    internal interface ICoreWebView2PrintSettings : global::Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettings
    {
    }
    internal static class ICoreWebView2PrintSettings2Methods
    {

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2PrintCollation get_Collation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2PrintCollation __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2PrintCollation*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Collation(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2PrintCollation value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2PrintCollation, int>**)ThisPtr)[13](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2PrintColorMode get_ColorMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2PrintColorMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2PrintColorMode*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ColorMode(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2PrintColorMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2PrintColorMode, int>**)ThisPtr)[15](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe int get_Copies(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Copies(IObjectReference _obj, int value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2PrintDuplex get_Duplex(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2PrintDuplex __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2PrintDuplex*, int>**)ThisPtr)[16](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Duplex(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2PrintDuplex value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2PrintDuplex, int>**)ThisPtr)[17](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2PrintMediaSize get_MediaSize(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2PrintMediaSize __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2PrintMediaSize*, int>**)ThisPtr)[18](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_MediaSize(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2PrintMediaSize value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2PrintMediaSize, int>**)ThisPtr)[19](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe string get_PageRanges(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_PageRanges(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe int get_PagesPerSide(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_PagesPerSide(IObjectReference _obj, int value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe string get_PrinterName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[20](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_PrinterName(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[21](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x95, 0x78, 0xA9, 0xD2, 0x6E, 0xCA, 0xFC, 0x57, 0x90, 0x5D, 0xC6, 0xF7, 0x7A, 0x8, 0x17, 0x68 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D2A97895-CA6E-57FC-905D-C6F77A081768")]
    internal interface ICoreWebView2PrintSettings2 : global::Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettings2
    {
    }
    internal static class ICoreWebView2PrivatePartialMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7C, 0xF2, 0x50, 0x28, 0x9D, 0xC, 0xDC, 0x5C, 0xB3, 0x56, 0x18, 0xF5, 0xB9, 0x7D, 0x9F, 0xCF };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2850F27C-0C9D-5CDC-B356-18F5B97D9FCF")]
    internal interface ICoreWebView2PrivatePartial : global::Microsoft.Web.WebView2.Core.ICoreWebView2PrivatePartial
    {
    }
    internal static class ICoreWebView2PrivatePartialControllerMethods
    {

        internal static unsafe bool get_IsBrowserHitTransparent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x78, 0x66, 0x7F, 0x52, 0x29, 0x86, 0x2A, 0x5C, 0xBC, 0x3B, 0x8D, 0x5C, 0x95, 0xE2, 0xB9, 0xBC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("527F6678-8629-5C2A-BC3B-8D5C95E2B9BC")]
    internal interface ICoreWebView2PrivatePartialController : global::Microsoft.Web.WebView2.Core.ICoreWebView2PrivatePartialController
    {
    }
    internal static class ICoreWebView2ProcessExtendedInfoMethods
    {

        internal static unsafe global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo> get_AssociatedFrameInfos(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Microsoft_Web_WebView2_Core_CoreWebView2FrameInfo.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessInfo get_ProcessInfo(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ProcessInfo.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2ProcessInfo.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x8B, 0x23, 0xE9, 0x60, 0x1D, 0x62, 0xE8, 0x57, 0xB6, 0x70, 0x74, 0x38, 0x2B, 0x23, 0x80, 0xA7 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("60E9238B-621D-57E8-B670-74382B2380A7")]
    internal interface ICoreWebView2ProcessExtendedInfo : global::Microsoft.Web.WebView2.Core.ICoreWebView2ProcessExtendedInfo
    {
    }
    internal static class ICoreWebView2ProcessFailedEventArgsMethods
    {

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedKind get_ProcessFailedKind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedKind*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC9, 0xF8, 0xA8, 0x25, 0x44, 0xD9, 0x9D, 0x53, 0xAF, 0xA3, 0x24, 0x17, 0x2B, 0x48, 0xEF, 0x47 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("25A8F8C9-D944-539D-AFA3-24172B48EF47")]
    internal interface ICoreWebView2ProcessFailedEventArgs : global::Microsoft.Web.WebView2.Core.ICoreWebView2ProcessFailedEventArgs
    {
    }
    internal static class ICoreWebView2ProcessFailedEventArgs2Methods
    {

        internal static unsafe int get_ExitCode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo> get_FrameInfosForFailedProcess(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Microsoft_Web_WebView2_Core_CoreWebView2FrameInfo.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_ProcessDescription(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedReason get_Reason(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedReason __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedReason*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x52, 0xC9, 0xD9, 0xC5, 0x56, 0xB4, 0xC7, 0x5D, 0x9F, 0x76, 0xFD, 0xE9, 0x67, 0x48, 0x4A, 0xF5 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C5D9C952-B456-5DC7-9F76-FDE967484AF5")]
    internal interface ICoreWebView2ProcessFailedEventArgs2 : global::Microsoft.Web.WebView2.Core.ICoreWebView2ProcessFailedEventArgs2
    {
    }
    internal static class ICoreWebView2ProcessFailedEventArgs3Methods
    {

        internal static unsafe string get_FailureSourceModulePath(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x19, 0xA4, 0x29, 0xD1, 0xAE, 0xAD, 0x3C, 0x5C, 0x8F, 0xCE, 0x55, 0x92, 0x99, 0x4E, 0x9C, 0xD3 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D129A419-ADAE-5C3C-8FCE-5592994E9CD3")]
    internal interface ICoreWebView2ProcessFailedEventArgs3 : global::Microsoft.Web.WebView2.Core.ICoreWebView2ProcessFailedEventArgs3
    {
    }
    internal static class ICoreWebView2ProcessInfoMethods
    {

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessKind get_Kind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2ProcessKind*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe int get_ProcessId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE1, 0x37, 0xEC, 0xB6, 0xEB, 0x23, 0x24, 0x59, 0xB3, 0x46, 0xE8, 0x37, 0x89, 0xA, 0xA9, 0xD5 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B6EC37E1-23EB-5924-B346-E837890AA9D5")]
    internal interface ICoreWebView2ProcessInfo : global::Microsoft.Web.WebView2.Core.ICoreWebView2ProcessInfo
    {
    }
    internal static class ICoreWebView2ProfileMethods
    {

        internal static unsafe string get_DefaultDownloadFolderPath(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_DefaultDownloadFolderPath(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[10](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe bool get_IsInPrivateModeEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2PreferredColorScheme get_PreferredColorScheme(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2PreferredColorScheme __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2PreferredColorScheme*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_PreferredColorScheme(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2PreferredColorScheme value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2PreferredColorScheme, int>**)ThisPtr)[12](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe string get_ProfileName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_ProfilePath(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x5C, 0xD2, 0xBD, 0xD4, 0xDB, 0xA2, 0x3, 0x5C, 0x96, 0x59, 0xAB, 0xDE, 0xB9, 0x79, 0x36, 0x21 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D4BDD25C-A2DB-5C03-9659-ABDEB9793621")]
    internal interface ICoreWebView2Profile : global::Microsoft.Web.WebView2.Core.ICoreWebView2Profile
    {
    }
    internal static class ICoreWebView2Profile2Methods
    {


        internal static unsafe global::Windows.Foundation.IAsyncAction ClearBrowsingDataAsync(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2BrowsingDataKinds dataKinds)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2BrowsingDataKinds, IntPtr*, int>**)ThisPtr)[6](ThisPtr, dataKinds, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Windows.Foundation.IAsyncAction>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncAction>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x18, 0x1E, 0xD2, 0x93, 0x6, 0x1B, 0xD0, 0x59, 0x96, 0x87, 0x10, 0xF4, 0x84, 0x4B, 0x1, 0x6D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("93D21E18-1B06-59D0-9687-10F4844B016D")]
    internal interface ICoreWebView2Profile2 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Profile2
    {
    }
    internal static class ICoreWebView2Profile3Methods
    {

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2TrackingPreventionLevel get_PreferredTrackingPreventionLevel(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2TrackingPreventionLevel __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2TrackingPreventionLevel*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_PreferredTrackingPreventionLevel(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2TrackingPreventionLevel value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2TrackingPreventionLevel, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x87, 0xD5, 0x7E, 0x50, 0x11, 0xC5, 0x47, 0x5E, 0xBE, 0x5B, 0xFC, 0x9C, 0xCD, 0xF1, 0x79, 0xB6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("507ED587-C511-5E47-BE5B-FC9CCDF179B6")]
    internal interface ICoreWebView2Profile3 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Profile3
    {
    }
    internal static class ICoreWebView2Profile4Methods
    {


        internal static unsafe global::Windows.Foundation.IAsyncAction SetPermissionStateAsync(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionKind PermissionKind, string origin, global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionState State)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __origin = new(origin);
                fixed(void* ___origin = __origin)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionKind, IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2PermissionState, IntPtr*, int>**)ThisPtr)[6](ThisPtr, PermissionKind, MarshalString.GetAbi(ref __origin), State, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return MarshalInterface<global::Windows.Foundation.IAsyncAction>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncAction>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x9A, 0x10, 0xAE, 0xEE, 0x41, 0xF6, 0x5B, 0x5A, 0x94, 0x2F, 0x99, 0x22, 0x59, 0x4F, 0xFB, 0x4D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("EEAE109A-F641-5A5B-942F-9922594FFB4D")]
    internal interface ICoreWebView2Profile4 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Profile4
    {
    }
    internal static class ICoreWebView2Profile5Methods
    {

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2CookieManager get_CookieManager(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2CookieManager.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2CookieManager.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF7, 0xC8, 0xAA, 0xC9, 0x2, 0xE5, 0x85, 0x54, 0xB0, 0x33, 0x99, 0xE4, 0x94, 0xE, 0xE0, 0xF1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C9AAC8F7-E502-5485-B033-99E4940EE0F1")]
    internal interface ICoreWebView2Profile5 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Profile5
    {
    }
    internal static class ICoreWebView2Profile6Methods
    {

        internal static unsafe bool get_IsGeneralAutofillEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsGeneralAutofillEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[9](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsPasswordAutosaveEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsPasswordAutosaveEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x65, 0x46, 0x6A, 0xC1, 0x44, 0x9D, 0x68, 0x57, 0x94, 0xA3, 0x69, 0xB3, 0x97, 0x6F, 0xC3, 0xD6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C16A4665-9D44-5768-94A3-69B3976FC3D6")]
    internal interface ICoreWebView2Profile6 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Profile6
    {
    }
    internal static class ICoreWebView2Profile7Methods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension> AddBrowserExtensionAsync(IObjectReference _obj, string extensionFolderPath)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __extensionFolderPath = new(extensionFolderPath);
                fixed(void* ___extensionFolderPath = __extensionFolderPath)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __extensionFolderPath), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Web_WebView2_Core_CoreWebView2BrowserExtension.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension>>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x61, 0x57, 0x66, 0x5F, 0x12, 0x5C, 0x39, 0x5F, 0xB9, 0xFE, 0x60, 0x7E, 0x6E, 0x94, 0xAD, 0xD1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("5F665761-5C12-5F39-B9FE-607E6E94ADD1")]
    internal interface ICoreWebView2Profile7 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Profile7
    {
    }
    internal static class ICoreWebView2Profile8Methods
    {


        internal static unsafe void Delete(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[8](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Profile, object>>> _Deleted_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Profile, object>>> MakeDeletedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Deleted_, new(), null);
            return _Deleted_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Profile, object>>> _Deleted => _Deleted_ ?? MakeDeletedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2Profile, object>> Get_Deleted2(IObjectReference _obj, object _thisObj)
        {
            return _Deleted.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2Profile__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[6],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[7],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x9C, 0xD3, 0x62, 0x93, 0x21, 0xD5, 0xE9, 0x59, 0x88, 0xFD, 0x7C, 0x5A, 0xA1, 0x16, 0x7D, 0xA6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("9362D39C-D521-59E9-88FD-7C5AA1167DA6")]
    internal interface ICoreWebView2Profile8 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Profile8
    {
    }
    internal static class ICoreWebView2SaveAsUIShowingEventArgsMethods
    {


        internal static unsafe global::Windows.Foundation.Deferral GetDeferral(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[17](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Foundation.Deferral.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Foundation.Deferral.DisposeAbi(__retval);
            }
        }
        internal static unsafe bool get_AllowReplace(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_AllowReplace(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[14](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_Cancel(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Cancel(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[8](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe string get_ContentMimeType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2SaveAsKind get_Kind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2SaveAsKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2SaveAsKind*, int>**)ThisPtr)[15](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Kind(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2SaveAsKind value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2SaveAsKind, int>**)ThisPtr)[16](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe string get_SaveAsFilePath(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SaveAsFilePath(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[12](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe bool get_SuppressDefaultDialog(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_SuppressDefaultDialog(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[10](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x50, 0xA2, 0x39, 0xCC, 0x4C, 0x2B, 0x8, 0x56, 0x90, 0x97, 0xC5, 0x9B, 0x8A, 0x82, 0x31, 0xB9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("CC39A250-2B4C-5608-9097-C59B8A8231B9")]
    internal interface ICoreWebView2SaveAsUIShowingEventArgs : global::Microsoft.Web.WebView2.Core.ICoreWebView2SaveAsUIShowingEventArgs
    {
    }
    internal static class ICoreWebView2SaveFileSecurityCheckStartingEventArgsMethods
    {


        internal static unsafe global::Windows.Foundation.Deferral GetDeferral(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Foundation.Deferral.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Foundation.Deferral.DisposeAbi(__retval);
            }
        }
        internal static unsafe bool get_CancelSave(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_CancelSave(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe string get_DocumentOriginUri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_FileExtension(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_FilePath(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool get_SuppressDefaultPolicy(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_SuppressDefaultPolicy(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[12](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFF, 0x50, 0x6B, 0x6F, 0xAE, 0x3E, 0x4C, 0x5C, 0xA2, 0x9F, 0x6F, 0xCE, 0x82, 0x2A, 0x4, 0xE0 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("6F6B50FF-3EAE-5C4C-A29F-6FCE822A04E0")]
    internal interface ICoreWebView2SaveFileSecurityCheckStartingEventArgs : global::Microsoft.Web.WebView2.Core.ICoreWebView2SaveFileSecurityCheckStartingEventArgs
    {
    }
    internal static class ICoreWebView2ScreenCaptureStartingEventArgsMethods
    {


        internal static unsafe global::Windows.Foundation.Deferral GetDeferral(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Foundation.Deferral.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Foundation.Deferral.DisposeAbi(__retval);
            }
        }
        internal static unsafe bool get_Cancel(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Cancel(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[9](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo get_OriginalSourceFrameInfo(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xBB, 0xE2, 0xF0, 0x35, 0xB0, 0x94, 0xE7, 0x5B, 0xB6, 0x33, 0xF8, 0x72, 0x44, 0xE3, 0x8B, 0xFE };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("35F0E2BB-94B0-5BE7-B633-F87244E38BFE")]
    internal interface ICoreWebView2ScreenCaptureStartingEventArgs : global::Microsoft.Web.WebView2.Core.ICoreWebView2ScreenCaptureStartingEventArgs
    {
    }
    internal static class ICoreWebView2ScriptDialogOpeningEventArgsMethods
    {


        internal static unsafe void Accept(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[12](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.Foundation.Deferral GetDeferral(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Foundation.Deferral.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Foundation.Deferral.DisposeAbi(__retval);
            }
        }
        internal static unsafe string get_DefaultText(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogKind get_Kind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogKind*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe string get_Message(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_ResultText(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ResultText(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe string get_Uri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x12, 0x52, 0x31, 0xA4, 0xEB, 0xC7, 0x8A, 0x56, 0x86, 0xE4, 0xC6, 0x1E, 0x31, 0xBA, 0x6C, 0xDA };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A4315212-C7EB-568A-86E4-C61E31BA6CDA")]
    internal interface ICoreWebView2ScriptDialogOpeningEventArgs : global::Microsoft.Web.WebView2.Core.ICoreWebView2ScriptDialogOpeningEventArgs
    {
    }
    internal static class ICoreWebView2ScriptExceptionMethods
    {

        internal static unsafe uint get_ColumnNumber(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe uint get_LineNumber(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe string get_Message(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_Name(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_ToJson(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE3, 0x3C, 0xBC, 0x9, 0x78, 0x39, 0xA5, 0x50, 0x86, 0xAE, 0x5C, 0x59, 0x6D, 0x37, 0x1C, 0x4E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("09BC3CE3-3978-50A5-86AE-5C596D371C4E")]
    internal interface ICoreWebView2ScriptException : global::Microsoft.Web.WebView2.Core.ICoreWebView2ScriptException
    {
    }
    internal static class ICoreWebView2ServerCertificateErrorDetectedEventArgsMethods
    {


        internal static unsafe global::Windows.Foundation.Deferral GetDeferral(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Foundation.Deferral.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Foundation.Deferral.DisposeAbi(__retval);
            }
        }
        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorAction get_Action(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorAction __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorAction*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Action(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorAction value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorAction, int>**)ThisPtr)[10](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2WebErrorStatus get_ErrorStatus(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2WebErrorStatus __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2WebErrorStatus*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe string get_RequestUri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2Certificate get_ServerCertificate(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Certificate.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Certificate.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3, 0xC7, 0xFD, 0x90, 0x9E, 0x5A, 0xF6, 0x56, 0xA4, 0x22, 0x7C, 0x11, 0x4C, 0x73, 0x64, 0x20 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("90FDC703-5A9E-56F6-A422-7C114C736420")]
    internal interface ICoreWebView2ServerCertificateErrorDetectedEventArgs : global::Microsoft.Web.WebView2.Core.ICoreWebView2ServerCertificateErrorDetectedEventArgs
    {
    }
    internal static class ICoreWebView2SettingsMethods
    {

        internal static unsafe bool get_AreDefaultContextMenusEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[16](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_AreDefaultContextMenusEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[17](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_AreDefaultScriptDialogsEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_AreDefaultScriptDialogsEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[11](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_AreDevToolsEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_AreDevToolsEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[15](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_AreHostObjectsAllowed(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[18](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_AreHostObjectsAllowed(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[19](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsBuiltInErrorPageEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[22](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsBuiltInErrorPageEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[23](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsScriptEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsScriptEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsStatusBarEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsStatusBarEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[13](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsWebMessageEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsWebMessageEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[9](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsZoomControlEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[20](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsZoomControlEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[21](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x5E, 0x32, 0x3B, 0x0, 0xCD, 0x74, 0xDD, 0x52, 0x80, 0x24, 0xEB, 0xB8, 0xBE, 0x38, 0xE4, 0x8E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("003B325E-74CD-52DD-8024-EBB8BE38E48E")]
    internal interface ICoreWebView2Settings : global::Microsoft.Web.WebView2.Core.ICoreWebView2Settings
    {
    }
    internal static class ICoreWebView2Settings2Methods
    {

        internal static unsafe string get_UserAgent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_UserAgent(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x80, 0x34, 0x7D, 0x37, 0xB2, 0xFD, 0xE7, 0x56, 0xBA, 0xDE, 0x50, 0x7D, 0x35, 0x28, 0x87, 0xE9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("377D3480-FDB2-56E7-BADE-507D352887E9")]
    internal interface ICoreWebView2Settings2 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Settings2
    {
    }
    internal static class ICoreWebView2Settings3Methods
    {

        internal static unsafe bool get_AreBrowserAcceleratorKeysEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_AreBrowserAcceleratorKeysEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x1, 0xF, 0x20, 0x52, 0x9, 0x53, 0x2E, 0x5B, 0xA0, 0x3C, 0x3D, 0x26, 0x77, 0x59, 0x19, 0x40 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("52200F01-5309-5B2E-A03C-3D2677591940")]
    internal interface ICoreWebView2Settings3 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Settings3
    {
    }
    internal static class ICoreWebView2Settings4Methods
    {

        internal static unsafe bool get_IsGeneralAutofillEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsGeneralAutofillEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[9](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsPasswordAutosaveEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsPasswordAutosaveEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF0, 0x55, 0xA9, 0xD6, 0xEF, 0xDA, 0x6A, 0x5A, 0xA6, 0xF6, 0xC7, 0x2F, 0xE, 0xDE, 0x76, 0x20 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D6A955F0-DAEF-5A6A-A6F6-C72F0EDE7620")]
    internal interface ICoreWebView2Settings4 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Settings4
    {
    }
    internal static class ICoreWebView2Settings5Methods
    {

        internal static unsafe bool get_IsPinchZoomEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsPinchZoomEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x23, 0x2B, 0xC4, 0xAF, 0x39, 0x48, 0x73, 0x5D, 0xAC, 0xF7, 0xE0, 0x33, 0x56, 0x31, 0xAB, 0xF5 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("AFC42B23-4839-5D73-ACF7-E0335631ABF5")]
    internal interface ICoreWebView2Settings5 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Settings5
    {
    }
    internal static class ICoreWebView2Settings6Methods
    {

        internal static unsafe bool get_IsSwipeNavigationEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsSwipeNavigationEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x85, 0xAE, 0xE4, 0x3F, 0x40, 0x5, 0xF1, 0x5B, 0xB4, 0xD9, 0x99, 0xEC, 0x57, 0xAA, 0x64, 0xF5 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("3FE4AE85-0540-5BF1-B4D9-99EC57AA64F5")]
    internal interface ICoreWebView2Settings6 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Settings6
    {
    }
    internal static class ICoreWebView2Settings7Methods
    {

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2PdfToolbarItems get_HiddenPdfToolbarItems(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2PdfToolbarItems __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2PdfToolbarItems*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_HiddenPdfToolbarItems(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2PdfToolbarItems value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2PdfToolbarItems, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xCD, 0x27, 0x80, 0x68, 0x84, 0x9F, 0xE8, 0x59, 0x8D, 0x5C, 0x91, 0x12, 0x3D, 0xF2, 0x4B, 0x92 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("688027CD-9F84-59E8-8D5C-91123DF24B92")]
    internal interface ICoreWebView2Settings7 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Settings7
    {
    }
    internal static class ICoreWebView2Settings8Methods
    {

        internal static unsafe bool get_IsReputationCheckingRequired(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsReputationCheckingRequired(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x8F, 0x1A, 0x6F, 0x95, 0x98, 0x31, 0x77, 0x55, 0xB2, 0x50, 0x7D, 0x91, 0xD1, 0x7F, 0x7E, 0xED };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("956F1A8F-3198-5577-B250-7D91D17F7EED")]
    internal interface ICoreWebView2Settings8 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Settings8
    {
    }
    internal static class ICoreWebView2Settings9Methods
    {

        internal static unsafe bool get_IsNonClientRegionSupportEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsNonClientRegionSupportEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x81, 0x66, 0x34, 0x4C, 0x4D, 0x71, 0x3D, 0x5A, 0x81, 0x5, 0x2A, 0x7B, 0x80, 0xBE, 0xEA, 0xB5 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4C346681-714D-5A3D-8105-2A7B80BEEAB5")]
    internal interface ICoreWebView2Settings9 : global::Microsoft.Web.WebView2.Core.ICoreWebView2Settings9
    {
    }
    internal static class ICoreWebView2Settings_ManualMethods
    {

        internal static unsafe global::Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter get_HostObjectDispatchAdapter(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_HostObjectDispatchAdapter(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter>.CreateMarshaler2(value, global::ABI.Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapterMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x87, 0x8C, 0x53, 0xA, 0x0, 0xE0, 0x1C, 0x51, 0x87, 0xCA, 0xDE, 0xD3, 0x41, 0x3D, 0x3, 0xDA };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("0A538C87-E000-511C-87CA-DED3413D03DA")]
    internal interface ICoreWebView2Settings_Manual : global::Microsoft.Web.WebView2.Core.ICoreWebView2Settings_Manual
    {
    }
    internal static class ICoreWebView2SharedBufferMethods
    {


        internal static unsafe global::Windows.Storage.Streams.IRandomAccessStream OpenStream(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Windows.Storage.Streams.IRandomAccessStream>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Storage.Streams.IRandomAccessStream>.DisposeAbi(__retval);
            }
        }
        internal static unsafe ulong get_Size(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            ulong __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, ulong*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x84, 0xCC, 0x7, 0x29, 0x43, 0xF8, 0x59, 0x59, 0x87, 0x34, 0xF8, 0x71, 0x76, 0x6F, 0x8F, 0x13 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2907CC84-F843-5959-8734-F871766F8F13")]
    internal interface ICoreWebView2SharedBuffer : global::Microsoft.Web.WebView2.Core.ICoreWebView2SharedBuffer
    {
    }
    internal static class ICoreWebView2SharedBuffer_ManualMethods
    {

        internal static unsafe global::Windows.Foundation.IMemoryBufferReference get_Buffer(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Windows.Foundation.IMemoryBufferReference>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IMemoryBufferReference>.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x13, 0xE2, 0xA4, 0x1A, 0xE3, 0xAC, 0x74, 0x5F, 0xA2, 0xAE, 0xC6, 0x48, 0x9C, 0xEB, 0x32, 0x39 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("1AA4E213-ACE3-5F74-A2AE-C6489CEB3239")]
    internal interface ICoreWebView2SharedBuffer_Manual : global::Microsoft.Web.WebView2.Core.ICoreWebView2SharedBuffer_Manual
    {
    }
    internal static class ICoreWebView2SourceChangedEventArgsMethods
    {

        internal static unsafe bool get_IsNewDocument(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x2C, 0x7B, 0x43, 0xCA, 0x18, 0x6A, 0x52, 0x55, 0xB7, 0x49, 0xB1, 0x98, 0xF8, 0xCC, 0x34, 0xD9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("CA437B2C-6A18-5552-B749-B198F8CC34D9")]
    internal interface ICoreWebView2SourceChangedEventArgs : global::Microsoft.Web.WebView2.Core.ICoreWebView2SourceChangedEventArgs
    {
    }
    internal static class ICoreWebView2WebMessageReceivedEventArgsMethods
    {


        internal static unsafe string TryGetWebMessageAsString(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe string get_Source(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_WebMessageAsJson(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x59, 0x61, 0x6, 0xEB, 0x25, 0xB7, 0x5B, 0x5D, 0xAD, 0xC8, 0xF5, 0xD7, 0xB9, 0x29, 0x3, 0x4 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("EB066159-B725-5D5B-ADC8-F5D7B9290304")]
    internal interface ICoreWebView2WebMessageReceivedEventArgs : global::Microsoft.Web.WebView2.Core.ICoreWebView2WebMessageReceivedEventArgs
    {
    }
    internal static class ICoreWebView2WebMessageReceivedEventArgs2Methods
    {

        internal static unsafe global::System.Collections.Generic.IReadOnlyList<object> get_AdditionalObjects(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_object.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IReadOnlyList<object>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IReadOnlyList<object>>.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA0, 0x5F, 0xDC, 0x71, 0xA0, 0x8, 0xEA, 0x5D, 0x93, 0x63, 0x79, 0x9D, 0xF5, 0x2, 0x14, 0x52 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("71DC5FA0-08A0-5DEA-9363-799DF5021452")]
    internal interface ICoreWebView2WebMessageReceivedEventArgs2 : global::Microsoft.Web.WebView2.Core.ICoreWebView2WebMessageReceivedEventArgs2
    {
    }
    internal static class ICoreWebView2WebResourceRequestMethods
    {

        internal static unsafe global::Windows.Storage.Streams.IRandomAccessStream get_Content(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Windows.Storage.Streams.IRandomAccessStream>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Storage.Streams.IRandomAccessStream>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Content(IObjectReference _obj, global::Windows.Storage.Streams.IRandomAccessStream value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::Windows.Storage.Streams.IRandomAccessStream>.CreateMarshaler2(value, global::ABI.Windows.Storage.Streams.IRandomAccessStreamMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders get_Headers(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_Method(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Method(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe string get_Uri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Uri(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x59, 0x22, 0x74, 0x5C, 0xD2, 0x67, 0xF2, 0x5D, 0x83, 0x82, 0xF, 0x20, 0x1B, 0x4D, 0x71, 0x97 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("5C742259-67D2-5DF2-8382-0F201B4D7197")]
    internal interface ICoreWebView2WebResourceRequest : global::Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceRequest
    {
    }
    internal static class ICoreWebView2WebResourceRequestedEventArgsMethods
    {


        internal static unsafe global::Windows.Foundation.Deferral GetDeferral(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Foundation.Deferral.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Foundation.Deferral.DisposeAbi(__retval);
            }
        }
        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest get_Request(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceContext get_ResourceContext(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceContext __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceContext*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse get_Response(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Response(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC4, 0x1F, 0x7F, 0x57, 0x43, 0xC9, 0xA9, 0x54, 0x97, 0x0, 0xBD, 0x46, 0x9B, 0x48, 0xBD, 0x41 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("577F1FC4-C943-54A9-9700-BD469B48BD41")]
    internal interface ICoreWebView2WebResourceRequestedEventArgs : global::Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceRequestedEventArgs
    {
    }
    internal static class ICoreWebView2WebResourceRequestedEventArgs2Methods
    {

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestSourceKinds get_RequestedSourceKind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestSourceKinds __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestSourceKinds*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x89, 0x4B, 0xBE, 0xB, 0xA9, 0x88, 0x5A, 0x57, 0xB0, 0x9E, 0x79, 0x46, 0xEE, 0x41, 0x5E, 0x94 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("0BBE4B89-88A9-575A-B09E-7946EE415E94")]
    internal interface ICoreWebView2WebResourceRequestedEventArgs2 : global::Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceRequestedEventArgs2
    {
    }
    internal static class ICoreWebView2WebResourceResponseMethods
    {

        internal static unsafe global::Windows.Storage.Streams.IRandomAccessStream get_Content(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Windows.Storage.Streams.IRandomAccessStream>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Storage.Streams.IRandomAccessStream>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Content(IObjectReference _obj, global::Windows.Storage.Streams.IRandomAccessStream value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::Windows.Storage.Streams.IRandomAccessStream>.CreateMarshaler2(value, global::ABI.Windows.Storage.Streams.IRandomAccessStreamMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders get_Headers(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_ReasonPhrase(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ReasonPhrase(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[12](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe int get_StatusCode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_StatusCode(IObjectReference _obj, int value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int>**)ThisPtr)[10](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x23, 0x19, 0x62, 0x14, 0x85, 0xE4, 0x44, 0x5F, 0x8F, 0x5D, 0xBD, 0x42, 0x43, 0xBC, 0x39, 0x8F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("14621923-E485-5F44-8F5D-BD4243BC398F")]
    internal interface ICoreWebView2WebResourceResponse : global::Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponse
    {
    }
    internal static class ICoreWebView2WebResourceResponseReceivedEventArgsMethods
    {

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest get_Request(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseView get_Response(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseView.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseView.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x71, 0x46, 0x42, 0x12, 0x11, 0x97, 0xF4, 0x54, 0xBC, 0xDF, 0x5F, 0x30, 0x7A, 0xDD, 0x6E, 0xC2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("12424671-9711-54F4-BCDF-5F307ADD6EC2")]
    internal interface ICoreWebView2WebResourceResponseReceivedEventArgs : global::Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponseReceivedEventArgs
    {
    }
    internal static class ICoreWebView2WebResourceResponseViewMethods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.Streams.IRandomAccessStream> GetContentAsync(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Storage_Streams_IRandomAccessStream.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.Streams.IRandomAccessStream>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.Streams.IRandomAccessStream>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders get_Headers(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_ReasonPhrase(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe int get_StatusCode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB, 0x6, 0xEE, 0x33, 0x78, 0xB5, 0x98, 0x56, 0xB5, 0x41, 0xFE, 0xF8, 0x7F, 0xE7, 0xFE, 0x72 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("33EE060B-B578-5698-B541-FEF87FE7FE72")]
    internal interface ICoreWebView2WebResourceResponseView : global::Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponseView
    {
    }
    internal static class ICoreWebView2WindowFeaturesMethods
    {

        internal static unsafe bool get_HasPosition(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_HasSize(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe uint get_Height(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe uint get_Left(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe bool get_ShouldDisplayMenuBar(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_ShouldDisplayScrollBars(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[15](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_ShouldDisplayStatus(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_ShouldDisplayToolbar(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe uint get_Top(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe uint get_Width(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD6, 0x86, 0x86, 0xEE, 0x6F, 0x5, 0x6, 0x5E, 0x82, 0x4F, 0x4E, 0x2A, 0x24, 0xC1, 0xC1, 0xD6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("EE8686D6-056F-5E06-824F-4E2A24C1C1D6")]
    internal interface ICoreWebView2WindowFeatures : global::Microsoft.Web.WebView2.Core.ICoreWebView2WindowFeatures
    {
    }
    internal static class ICoreWebView2_10Methods
    {


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgs>>> _BasicAuthenticationRequested_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgs>>> MakeBasicAuthenticationRequestedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _BasicAuthenticationRequested_, new(), null);
            return _BasicAuthenticationRequested_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgs>>> _BasicAuthenticationRequested => _BasicAuthenticationRequested_ ?? MakeBasicAuthenticationRequestedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgs>> Get_BasicAuthenticationRequested2(IObjectReference _obj, object _thisObj)
        {
            return _BasicAuthenticationRequested.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__global__Microsoft_Web_WebView2_Core_CoreWebView2BasicAuthenticationRequestedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[6],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[7],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x34, 0x4, 0xB2, 0xA7, 0xF, 0x97, 0xB1, 0x54, 0xAA, 0x63, 0x3C, 0x42, 0x67, 0x1F, 0xA9, 0xAB };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A7B20434-970F-54B1-AA63-3C42671FA9AB")]
    internal interface ICoreWebView2_10 : global::Microsoft.Web.WebView2.Core.ICoreWebView2_10
    {
    }
    internal static class ICoreWebView2_11Methods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<string> CallDevToolsProtocolMethodForSessionAsync(IObjectReference _obj, string sessionId, string methodName, string parametersAsJson)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __sessionId = new(sessionId);
                MarshalString.Pinnable __methodName = new(methodName);
                MarshalString.Pinnable __parametersAsJson = new(parametersAsJson);
                fixed(void* ___sessionId = __sessionId, ___methodName = __methodName, ___parametersAsJson = __parametersAsJson)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, MarshalString.GetAbi(ref __sessionId), MarshalString.GetAbi(ref __methodName), MarshalString.GetAbi(ref __parametersAsJson), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_String.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperation<string>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<string>>.DisposeAbi(__retval);
            }
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs>>> _ContextMenuRequested_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs>>> MakeContextMenuRequestedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ContextMenuRequested_, new(), null);
            return _ContextMenuRequested_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs>>> _ContextMenuRequested => _ContextMenuRequested_ ?? MakeContextMenuRequestedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs>> Get_ContextMenuRequested2(IObjectReference _obj, object _thisObj)
        {
            return _ContextMenuRequested.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__global__Microsoft_Web_WebView2_Core_CoreWebView2ContextMenuRequestedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[6],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[7],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB1, 0xCB, 0xA, 0xC0, 0x32, 0xAE, 0x1F, 0x50, 0xAD, 0x19, 0x9D, 0xA, 0xC3, 0x2D, 0x61, 0x42 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C00ACBB1-AE32-501F-AD19-9D0AC32D6142")]
    internal interface ICoreWebView2_11 : global::Microsoft.Web.WebView2.Core.ICoreWebView2_11
    {
    }
    internal static class ICoreWebView2_12Methods
    {

        internal static unsafe string get_StatusBarText(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>>> _StatusBarTextChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>>> MakeStatusBarTextChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _StatusBarTextChanged_, new(), null);
            return _StatusBarTextChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>>> _StatusBarTextChanged => _StatusBarTextChanged_ ?? MakeStatusBarTextChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>> Get_StatusBarTextChanged2(IObjectReference _obj, object _thisObj)
        {
            return _StatusBarTextChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[7],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[8],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA1, 0xE9, 0xBB, 0xDB, 0xD3, 0x18, 0x67, 0x5F, 0xB3, 0x62, 0xF, 0x4A, 0xE9, 0x37, 0xD7, 0x54 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("DBBBE9A1-18D3-5F67-B362-0F4AE937D754")]
    internal interface ICoreWebView2_12 : global::Microsoft.Web.WebView2.Core.ICoreWebView2_12
    {
    }
    internal static class ICoreWebView2_13Methods
    {

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2Profile get_Profile(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Profile.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Profile.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x46, 0x58, 0x4B, 0x31, 0xC7, 0xDB, 0xE4, 0x5D, 0xA7, 0x92, 0x64, 0x7E, 0xA0, 0xF3, 0x29, 0x6A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("314B5846-DBC7-5DE4-A792-647EA0F3296A")]
    internal interface ICoreWebView2_13 : global::Microsoft.Web.WebView2.Core.ICoreWebView2_13
    {
    }
    internal static class ICoreWebView2_14Methods
    {


        internal static unsafe global::Windows.Foundation.IAsyncAction ClearServerCertificateErrorActionsAsync(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Windows.Foundation.IAsyncAction>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncAction>.DisposeAbi(__retval);
            }
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgs>>> _ServerCertificateErrorDetected_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgs>>> MakeServerCertificateErrorDetectedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ServerCertificateErrorDetected_, new(), null);
            return _ServerCertificateErrorDetected_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgs>>> _ServerCertificateErrorDetected => _ServerCertificateErrorDetected_ ?? MakeServerCertificateErrorDetectedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgs>> Get_ServerCertificateErrorDetected2(IObjectReference _obj, object _thisObj)
        {
            return _ServerCertificateErrorDetected.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__global__Microsoft_Web_WebView2_Core_CoreWebView2ServerCertificateErrorDetectedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[6],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[7],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x24, 0x7B, 0x64, 0xA7, 0x1E, 0x3B, 0xA9, 0x50, 0xBE, 0x24, 0x6E, 0x8A, 0xC6, 0x3F, 0xE4, 0x91 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A7647B24-3B1E-50A9-BE24-6E8AC63FE491")]
    internal interface ICoreWebView2_14 : global::Microsoft.Web.WebView2.Core.ICoreWebView2_14
    {
    }
    internal static class ICoreWebView2_15Methods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.Streams.IRandomAccessStream> GetFaviconAsync(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2FaviconImageFormat format)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2FaviconImageFormat, IntPtr*, int>**)ThisPtr)[9](ThisPtr, format, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Storage_Streams_IRandomAccessStream.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.Streams.IRandomAccessStream>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.Streams.IRandomAccessStream>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe string get_FaviconUri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>>> _FaviconChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>>> MakeFaviconChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _FaviconChanged_, new(), null);
            return _FaviconChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>>> _FaviconChanged => _FaviconChanged_ ?? MakeFaviconChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>> Get_FaviconChanged2(IObjectReference _obj, object _thisObj)
        {
            return _FaviconChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[7],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[8],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x32, 0xF5, 0x43, 0x44, 0xBA, 0xD2, 0xE2, 0x5A, 0xA9, 0xB3, 0x8D, 0xE6, 0x2B, 0xD5, 0xD4, 0xA9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4443F532-D2BA-5AE2-A9B3-8DE62BD5D4A9")]
    internal interface ICoreWebView2_15 : global::Microsoft.Web.WebView2.Core.ICoreWebView2_15
    {
    }
    internal static class ICoreWebView2_16Methods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Web.WebView2.Core.CoreWebView2PrintStatus> PrintAsync(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings printSettings)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __printSettings = default;
            IntPtr __retval = default;
            try
            {
                __printSettings = global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings.CreateMarshaler2(printSettings);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__printSettings), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Web_WebView2_Core_CoreWebView2PrintStatus.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Web.WebView2.Core.CoreWebView2PrintStatus>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__printSettings);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Web.WebView2.Core.CoreWebView2PrintStatus>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe void ShowPrintUI(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2PrintDialogKind printDialogKind)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2PrintDialogKind, int>**)ThisPtr)[7](ThisPtr, printDialogKind));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.Streams.IRandomAccessStream> PrintToPdfStreamAsync(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings printSettings)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __printSettings = default;
            IntPtr __retval = default;
            try
            {
                __printSettings = global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings.CreateMarshaler2(printSettings);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__printSettings), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Storage_Streams_IRandomAccessStream.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.Streams.IRandomAccessStream>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__printSettings);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.Streams.IRandomAccessStream>>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7C, 0xA5, 0xD0, 0x61, 0x4F, 0x6C, 0xFF, 0x50, 0xA1, 0x37, 0x31, 0x4B, 0x0, 0x99, 0xA2, 0xB8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("61D0A57C-6C4F-50FF-A137-314B0099A2B8")]
    internal interface ICoreWebView2_16 : global::Microsoft.Web.WebView2.Core.ICoreWebView2_16
    {
    }
    internal static class ICoreWebView2_17Methods
    {


        internal static unsafe void PostSharedBufferToScript(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer sharedBuffer, global::Microsoft.Web.WebView2.Core.CoreWebView2SharedBufferAccess access, string additionalDataAsJson)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __sharedBuffer = default;
            try
            {
                __sharedBuffer = global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer.CreateMarshaler2(sharedBuffer);
                MarshalString.Pinnable __additionalDataAsJson = new(additionalDataAsJson);
                fixed(void* ___additionalDataAsJson = __additionalDataAsJson)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2SharedBufferAccess, IntPtr, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__sharedBuffer), access, MarshalString.GetAbi(ref __additionalDataAsJson)));
                    global::System.GC.KeepAlive(_obj);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__sharedBuffer);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xDB, 0xF9, 0x45, 0x23, 0x88, 0x54, 0x9A, 0x55, 0x82, 0xAF, 0x90, 0x86, 0xCC, 0x4F, 0x79, 0x88 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2345F9DB-5488-559A-82AF-9086CC4F7988")]
    internal interface ICoreWebView2_17 : global::Microsoft.Web.WebView2.Core.ICoreWebView2_17
    {
    }
    internal static class ICoreWebView2_18Methods
    {


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgs>>> _LaunchingExternalUriScheme_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgs>>> MakeLaunchingExternalUriSchemeTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _LaunchingExternalUriScheme_, new(), null);
            return _LaunchingExternalUriScheme_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgs>>> _LaunchingExternalUriScheme => _LaunchingExternalUriScheme_ ?? MakeLaunchingExternalUriSchemeTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgs>> Get_LaunchingExternalUriScheme2(IObjectReference _obj, object _thisObj)
        {
            return _LaunchingExternalUriScheme.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__global__Microsoft_Web_WebView2_Core_CoreWebView2LaunchingExternalUriSchemeEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[6],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[7],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x61, 0x2E, 0xF5, 0x94, 0x75, 0x9D, 0x81, 0x5A, 0xAC, 0xD3, 0x83, 0xF, 0xF2, 0x9C, 0xE6, 0xF7 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("94F52E61-9D75-5A81-ACD3-830FF29CE6F7")]
    internal interface ICoreWebView2_18 : global::Microsoft.Web.WebView2.Core.ICoreWebView2_18
    {
    }
    internal static class ICoreWebView2_19Methods
    {

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2MemoryUsageTargetLevel get_MemoryUsageTargetLevel(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2MemoryUsageTargetLevel __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2MemoryUsageTargetLevel*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_MemoryUsageTargetLevel(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2MemoryUsageTargetLevel value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2MemoryUsageTargetLevel, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x5C, 0x4A, 0xA9, 0x35, 0x27, 0xE0, 0xC5, 0x5D, 0x8C, 0x2B, 0xC2, 0xFC, 0x7D, 0x58, 0x91, 0x59 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("35A94A5C-E027-5DC5-8C2B-C2FC7D589159")]
    internal interface ICoreWebView2_19 : global::Microsoft.Web.WebView2.Core.ICoreWebView2_19
    {
    }
    internal static class ICoreWebView2_2Methods
    {


        internal static unsafe void NavigateWithWebResourceRequest(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest Request)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __Request = default;
            try
            {
                __Request = global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest.CreateMarshaler2(Request);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[12](ThisPtr, MarshalInspectable<object>.GetAbi(__Request)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__Request);
            }
        }
        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2CookieManager get_CookieManager(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2CookieManager.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2CookieManager.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2Environment get_Environment(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Environment.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2Environment.DisposeAbi(__retval);
            }
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs>>> _DOMContentLoaded_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs>>> MakeDOMContentLoadedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _DOMContentLoaded_, new(), null);
            return _DOMContentLoaded_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs>>> _DOMContentLoaded => _DOMContentLoaded_ ?? MakeDOMContentLoadedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs>> Get_DOMContentLoaded2(IObjectReference _obj, object _thisObj)
        {
            return _DOMContentLoaded.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__global__Microsoft_Web_WebView2_Core_CoreWebView2DOMContentLoadedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[10],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[11],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseReceivedEventArgs>>> _WebResourceResponseReceived_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseReceivedEventArgs>>> MakeWebResourceResponseReceivedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _WebResourceResponseReceived_, new(), null);
            return _WebResourceResponseReceived_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseReceivedEventArgs>>> _WebResourceResponseReceived => _WebResourceResponseReceived_ ?? MakeWebResourceResponseReceivedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseReceivedEventArgs>> Get_WebResourceResponseReceived2(IObjectReference _obj, object _thisObj)
        {
            return _WebResourceResponseReceived.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__global__Microsoft_Web_WebView2_Core_CoreWebView2WebResourceResponseReceivedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[8],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[9],
                1);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x33, 0xB1, 0x8C, 0x57, 0x73, 0x28, 0x8, 0x54, 0xBD, 0x9E, 0x38, 0x9B, 0xBE, 0x9F, 0xA7, 0xFA };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("578CB133-2873-5408-BD9E-389BBE9FA7FA")]
    internal interface ICoreWebView2_2 : global::Microsoft.Web.WebView2.Core.ICoreWebView2_2
    {
    }
    internal static class ICoreWebView2_20Methods
    {

        internal static unsafe uint get_FrameId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x5, 0x48, 0x9C, 0x85, 0x88, 0xE9, 0xD5, 0x50, 0x85, 0xD7, 0xA5, 0x6, 0x43, 0xFC, 0x81, 0x5E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("859C4805-E988-50D5-85D7-A50643FC815E")]
    internal interface ICoreWebView2_20 : global::Microsoft.Web.WebView2.Core.ICoreWebView2_20
    {
    }
    internal static class ICoreWebView2_21Methods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Web.WebView2.Core.CoreWebView2ExecuteScriptResult> ExecuteScriptWithResultAsync(IObjectReference _obj, string javaScript)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __javaScript = new(javaScript);
                fixed(void* ___javaScript = __javaScript)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __javaScript), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Web_WebView2_Core_CoreWebView2ExecuteScriptResult.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Web.WebView2.Core.CoreWebView2ExecuteScriptResult>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Web.WebView2.Core.CoreWebView2ExecuteScriptResult>>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x5, 0x77, 0xFC, 0xF7, 0x22, 0x79, 0xBC, 0x5A, 0x9E, 0x24, 0xC6, 0x4F, 0x1C, 0x14, 0xB1, 0x85 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F7FC7705-7922-5ABC-9E24-C64F1C14B185")]
    internal interface ICoreWebView2_21 : global::Microsoft.Web.WebView2.Core.ICoreWebView2_21
    {
    }
    internal static class ICoreWebView2_22Methods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xCF, 0xA4, 0x8A, 0xD5, 0x67, 0x9B, 0x19, 0x54, 0x85, 0x65, 0xF4, 0x1, 0xA9, 0x8F, 0xEE, 0xB2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D58AA4CF-9B67-5419-8565-F401A98FEEB2")]
    internal interface ICoreWebView2_22 : global::Microsoft.Web.WebView2.Core.ICoreWebView2_22
    {
    }
    internal static class ICoreWebView2_23Methods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x91, 0x73, 0x76, 0xD6, 0xFE, 0xFD, 0x95, 0x5B, 0x96, 0xAE, 0x11, 0xDE, 0x6B, 0x87, 0x26, 0xDD };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D6767391-FDFE-5B95-96AE-11DE6B8726DD")]
    internal interface ICoreWebView2_23 : global::Microsoft.Web.WebView2.Core.ICoreWebView2_23
    {
    }
    internal static class ICoreWebView2_24Methods
    {


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2NotificationReceivedEventArgs>>> _NotificationReceived_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2NotificationReceivedEventArgs>>> MakeNotificationReceivedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _NotificationReceived_, new(), null);
            return _NotificationReceived_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2NotificationReceivedEventArgs>>> _NotificationReceived => _NotificationReceived_ ?? MakeNotificationReceivedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2NotificationReceivedEventArgs>> Get_NotificationReceived2(IObjectReference _obj, object _thisObj)
        {
            return _NotificationReceived.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__global__Microsoft_Web_WebView2_Core_CoreWebView2NotificationReceivedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[6],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[7],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB8, 0x56, 0x90, 0x46, 0x8D, 0xE7, 0xED, 0x55, 0x9A, 0xF1, 0x20, 0x7A, 0x7F, 0x60, 0x91, 0x1F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("469056B8-E78D-55ED-9AF1-207A7F60911F")]
    internal interface ICoreWebView2_24 : global::Microsoft.Web.WebView2.Core.ICoreWebView2_24
    {
    }
    internal static class ICoreWebView2_25Methods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIResult> ShowSaveAsUIAsync(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Web_WebView2_Core_CoreWebView2SaveAsUIResult.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIResult>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIResult>>.DisposeAbi(__retval);
            }
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs>>> _SaveAsUIShowing_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs>>> MakeSaveAsUIShowingTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _SaveAsUIShowing_, new(), null);
            return _SaveAsUIShowing_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs>>> _SaveAsUIShowing => _SaveAsUIShowing_ ?? MakeSaveAsUIShowingTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs>> Get_SaveAsUIShowing2(IObjectReference _obj, object _thisObj)
        {
            return _SaveAsUIShowing.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__global__Microsoft_Web_WebView2_Core_CoreWebView2SaveAsUIShowingEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[6],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[7],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xCE, 0xED, 0xE2, 0xB8, 0x43, 0xD9, 0x71, 0x58, 0x83, 0x97, 0x48, 0x3D, 0xBD, 0x6C, 0xF, 0x9E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B8E2EDCE-D943-5871-8397-483DBD6C0F9E")]
    internal interface ICoreWebView2_25 : global::Microsoft.Web.WebView2.Core.ICoreWebView2_25
    {
    }
    internal static class ICoreWebView2_26Methods
    {


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2SaveFileSecurityCheckStartingEventArgs>>> _SaveFileSecurityCheckStarting_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2SaveFileSecurityCheckStartingEventArgs>>> MakeSaveFileSecurityCheckStartingTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _SaveFileSecurityCheckStarting_, new(), null);
            return _SaveFileSecurityCheckStarting_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2SaveFileSecurityCheckStartingEventArgs>>> _SaveFileSecurityCheckStarting => _SaveFileSecurityCheckStarting_ ?? MakeSaveFileSecurityCheckStartingTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2SaveFileSecurityCheckStartingEventArgs>> Get_SaveFileSecurityCheckStarting2(IObjectReference _obj, object _thisObj)
        {
            return _SaveFileSecurityCheckStarting.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__global__Microsoft_Web_WebView2_Core_CoreWebView2SaveFileSecurityCheckStartingEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[6],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[7],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xDD, 0x3, 0xD8, 0xE7, 0xF4, 0xB2, 0xA3, 0x5F, 0x8E, 0x63, 0x11, 0x44, 0x89, 0xD4, 0x6, 0x3D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E7D803DD-B2F4-5FA3-8E63-114489D4063D")]
    internal interface ICoreWebView2_26 : global::Microsoft.Web.WebView2.Core.ICoreWebView2_26
    {
    }
    internal static class ICoreWebView2_27Methods
    {


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2ScreenCaptureStartingEventArgs>>> _ScreenCaptureStarting_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2ScreenCaptureStartingEventArgs>>> MakeScreenCaptureStartingTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ScreenCaptureStarting_, new(), null);
            return _ScreenCaptureStarting_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2ScreenCaptureStartingEventArgs>>> _ScreenCaptureStarting => _ScreenCaptureStarting_ ?? MakeScreenCaptureStartingTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2ScreenCaptureStartingEventArgs>> Get_ScreenCaptureStarting2(IObjectReference _obj, object _thisObj)
        {
            return _ScreenCaptureStarting.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__global__Microsoft_Web_WebView2_Core_CoreWebView2ScreenCaptureStartingEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[6],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[7],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x97, 0xF4, 0x64, 0xD9, 0xDF, 0xFF, 0xCD, 0x5B, 0xBF, 0x52, 0xFF, 0x45, 0x85, 0xF2, 0xEB, 0xC2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D964F497-FFDF-5BCD-BF52-FF4585F2EBC2")]
    internal interface ICoreWebView2_27 : global::Microsoft.Web.WebView2.Core.ICoreWebView2_27
    {
    }
    internal static class ICoreWebView2_3Methods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<bool> TrySuspendAsync(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Boolean.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<bool>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<bool>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe void Resume(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[8](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void SetVirtualHostNameToFolderMapping(IObjectReference _obj, string hostName, string folderPath, global::Microsoft.Web.WebView2.Core.CoreWebView2HostResourceAccessKind accessKind)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __hostName = new(hostName);
            MarshalString.Pinnable __folderPath = new(folderPath);
            fixed(void* ___hostName = __hostName, ___folderPath = __folderPath)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2HostResourceAccessKind, int>**)ThisPtr)[9](ThisPtr, MarshalString.GetAbi(ref __hostName), MarshalString.GetAbi(ref __folderPath), accessKind));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe void ClearVirtualHostNameToFolderMapping(IObjectReference _obj, string hostName)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __hostName = new(hostName);
            fixed(void* ___hostName = __hostName)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[10](ThisPtr, MarshalString.GetAbi(ref __hostName)));
                global::System.GC.KeepAlive(_obj);
            }
        }
        internal static unsafe bool get_IsSuspended(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE7, 0x6A, 0xC7, 0xA8, 0x70, 0x61, 0xFE, 0x5D, 0x8F, 0x0, 0x79, 0xCD, 0x76, 0xA9, 0xB4, 0xD9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A8C76AE7-6170-5DFE-8F00-79CD76A9B4D9")]
    internal interface ICoreWebView2_3 : global::Microsoft.Web.WebView2.Core.ICoreWebView2_3
    {
    }
    internal static class ICoreWebView2_4Methods
    {


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs>>> _DownloadStarting_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs>>> MakeDownloadStartingTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _DownloadStarting_, new(), null);
            return _DownloadStarting_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs>>> _DownloadStarting => _DownloadStarting_ ?? MakeDownloadStartingTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs>> Get_DownloadStarting2(IObjectReference _obj, object _thisObj)
        {
            return _DownloadStarting.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__global__Microsoft_Web_WebView2_Core_CoreWebView2DownloadStartingEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[8],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[9],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2FrameCreatedEventArgs>>> _FrameCreated_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2FrameCreatedEventArgs>>> MakeFrameCreatedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _FrameCreated_, new(), null);
            return _FrameCreated_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2FrameCreatedEventArgs>>> _FrameCreated => _FrameCreated_ ?? MakeFrameCreatedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2FrameCreatedEventArgs>> Get_FrameCreated2(IObjectReference _obj, object _thisObj)
        {
            return _FrameCreated.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__global__Microsoft_Web_WebView2_Core_CoreWebView2FrameCreatedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[6],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[7],
                1);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xCE, 0x95, 0xC5, 0x4A, 0x2, 0x15, 0x75, 0x57, 0xB2, 0xC8, 0x22, 0xC1, 0x1A, 0x36, 0x9C, 0x25 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4AC595CE-1502-5775-B2C8-22C11A369C25")]
    internal interface ICoreWebView2_4 : global::Microsoft.Web.WebView2.Core.ICoreWebView2_4
    {
    }
    internal static class ICoreWebView2_5Methods
    {


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs>>> _ClientCertificateRequested_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs>>> MakeClientCertificateRequestedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ClientCertificateRequested_, new(), null);
            return _ClientCertificateRequested_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs>>> _ClientCertificateRequested => _ClientCertificateRequested_ ?? MakeClientCertificateRequestedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, global::Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs>> Get_ClientCertificateRequested2(IObjectReference _obj, object _thisObj)
        {
            return _ClientCertificateRequested.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__global__Microsoft_Web_WebView2_Core_CoreWebView2ClientCertificateRequestedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[6],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[7],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x43, 0xF6, 0x6A, 0xDD, 0xC, 0x22, 0xC6, 0x5D, 0xB0, 0xA8, 0x22, 0xC4, 0x1E, 0x47, 0x25, 0x95 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("DD6AF643-220C-5DC6-B0A8-22C41E472595")]
    internal interface ICoreWebView2_5 : global::Microsoft.Web.WebView2.Core.ICoreWebView2_5
    {
    }
    internal static class ICoreWebView2_6Methods
    {


        internal static unsafe void OpenTaskManagerWindow(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[6](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x96, 0x4B, 0xB3, 0x92, 0x3D, 0x85, 0xB6, 0x5B, 0xAC, 0x52, 0x30, 0x29, 0x7C, 0xE8, 0x5, 0xF1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("92B34B96-853D-5BB6-AC52-30297CE805F1")]
    internal interface ICoreWebView2_6 : global::Microsoft.Web.WebView2.Core.ICoreWebView2_6
    {
    }
    internal static class ICoreWebView2_7Methods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<bool> PrintToPdfAsync(IObjectReference _obj, string ResultFilePath, global::Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings printSettings)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __printSettings = default;
            IntPtr __retval = default;
            try
            {
                __printSettings = global::ABI.Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings.CreateMarshaler2(printSettings);
                MarshalString.Pinnable __ResultFilePath = new(ResultFilePath);
                fixed(void* ___ResultFilePath = __ResultFilePath)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __ResultFilePath), MarshalInspectable<object>.GetAbi(__printSettings), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Boolean.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperation<bool>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__printSettings);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<bool>>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7A, 0x10, 0xB7, 0xF9, 0x9, 0x2E, 0x96, 0x55, 0xA0, 0x33, 0x91, 0x1B, 0xA1, 0x23, 0x15, 0xF7 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F9B7107A-2E09-5596-A033-911BA12315F7")]
    internal interface ICoreWebView2_7 : global::Microsoft.Web.WebView2.Core.ICoreWebView2_7
    {
    }
    internal static class ICoreWebView2_8Methods
    {

        internal static unsafe bool get_IsDocumentPlayingAudio(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_IsMuted(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsMuted(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>>> _IsDocumentPlayingAudioChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>>> MakeIsDocumentPlayingAudioChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _IsDocumentPlayingAudioChanged_, new(), null);
            return _IsDocumentPlayingAudioChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>>> _IsDocumentPlayingAudioChanged => _IsDocumentPlayingAudioChanged_ ?? MakeIsDocumentPlayingAudioChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>> Get_IsDocumentPlayingAudioChanged2(IObjectReference _obj, object _thisObj)
        {
            return _IsDocumentPlayingAudioChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[11],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[12],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>>> _IsMutedChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>>> MakeIsMutedChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _IsMutedChanged_, new(), null);
            return _IsMutedChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>>> _IsMutedChanged => _IsMutedChanged_ ?? MakeIsMutedChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>> Get_IsMutedChanged2(IObjectReference _obj, object _thisObj)
        {
            return _IsMutedChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[9],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[10],
                1);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC0, 0x3, 0x25, 0xAA, 0x1C, 0x8D, 0x3D, 0x5A, 0xB8, 0x98, 0xF5, 0x5F, 0x75, 0x95, 0x26, 0x8A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("AA2503C0-8D1C-5A3D-B898-F55F7595268A")]
    internal interface ICoreWebView2_8 : global::Microsoft.Web.WebView2.Core.ICoreWebView2_8
    {
    }
    internal static class ICoreWebView2_9Methods
    {


        internal static unsafe void OpenDefaultDownloadDialog(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[13](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void CloseDefaultDownloadDialog(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[14](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }
        internal static unsafe global::Microsoft.Web.WebView2.Core.CoreWebView2DefaultDownloadDialogCornerAlignment get_DefaultDownloadDialogCornerAlignment(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Web.WebView2.Core.CoreWebView2DefaultDownloadDialogCornerAlignment __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2DefaultDownloadDialogCornerAlignment*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_DefaultDownloadDialogCornerAlignment(IObjectReference _obj, global::Microsoft.Web.WebView2.Core.CoreWebView2DefaultDownloadDialogCornerAlignment value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2DefaultDownloadDialogCornerAlignment, int>**)ThisPtr)[8](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.Foundation.Point get_DefaultDownloadDialogMargin(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_DefaultDownloadDialogMargin(IObjectReference _obj, global::Windows.Foundation.Point value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point, int>**)ThisPtr)[10](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsDefaultDownloadDialogOpen(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>>> _IsDefaultDownloadDialogOpenChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>>> MakeIsDefaultDownloadDialogOpenChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _IsDefaultDownloadDialogOpenChanged_, new(), null);
            return _IsDefaultDownloadDialogOpenChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>>> _IsDefaultDownloadDialogOpenChanged => _IsDefaultDownloadDialogOpenChanged_ ?? MakeIsDefaultDownloadDialogOpenChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Web.WebView2.Core.CoreWebView2, object>> Get_IsDefaultDownloadDialogOpenChanged2(IObjectReference _obj, object _thisObj)
        {
            return _IsDefaultDownloadDialogOpenChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Web_WebView2_Core_CoreWebView2__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[11],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[12],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x16, 0xEC, 0xB2, 0x64, 0x29, 0xB, 0x16, 0x52, 0xBF, 0x86, 0xE5, 0x75, 0xC8, 0x8F, 0x70, 0x31 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("64B2EC16-0B29-5216-BF86-E575C88F7031")]
    internal interface ICoreWebView2_9 : global::Microsoft.Web.WebView2.Core.ICoreWebView2_9
    {
    }
    internal static class ICoreWebView2_ManualMethods
    {


        internal static unsafe void AddWebResourceRequestedFilter(IObjectReference _obj, string uri, global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceContext resourceContext, global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestSourceKinds requestSourceKinds)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __uri = new(uri);
            fixed(void* ___uri = __uri)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceContext, global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestSourceKinds, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __uri), resourceContext, requestSourceKinds));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe void RemoveWebResourceRequestedFilter(IObjectReference _obj, string uri, global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceContext resourceContext, global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestSourceKinds requestSourceKinds)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __uri = new(uri);
            fixed(void* ___uri = __uri)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceContext, global::Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestSourceKinds, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __uri), resourceContext, requestSourceKinds));
                global::System.GC.KeepAlive(_obj);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x46, 0x85, 0x98, 0x2D, 0x62, 0x99, 0x6B, 0x51, 0xBE, 0x53, 0x85, 0x9F, 0xB0, 0xF5, 0x1, 0x79 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2D988546-9962-516B-BE53-859FB0F50179")]
    internal interface ICoreWebView2_Manual : global::Microsoft.Web.WebView2.Core.ICoreWebView2_Manual
    {
    }
    internal static class ICoreWebView2_Manual2Methods
    {


        internal static unsafe void PostWebMessageAsJson(IObjectReference _obj, string webMessageAsJson, global::System.Collections.Generic.IReadOnlyList<object> additionalObjects)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __additionalObjects = default;
            try
            {
                __additionalObjects = MarshalInterface<global::System.Collections.Generic.IReadOnlyList<object>>.CreateMarshaler2(additionalObjects, global::ABI.System.Collections.Generic.IReadOnlyListMethods<object>.IID);
                MarshalString.Pinnable __webMessageAsJson = new(webMessageAsJson);
                fixed(void* ___webMessageAsJson = __webMessageAsJson)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __webMessageAsJson), MarshalInspectable<object>.GetAbi(__additionalObjects)));
                    global::System.GC.KeepAlive(_obj);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__additionalObjects);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x84, 0xC4, 0xD0, 0x57, 0x4, 0xF3, 0xD4, 0x52, 0x85, 0xA6, 0x68, 0xCF, 0xAF, 0xD6, 0x3B, 0x61 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("57D0C484-F304-52D4-85A6-68CFAFD63B61")]
    internal interface ICoreWebView2_Manual2 : global::Microsoft.Web.WebView2.Core.ICoreWebView2_Manual2
    {
    }
}
#pragma warning restore CA1416
