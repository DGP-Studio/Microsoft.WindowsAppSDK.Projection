//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.Windows.ApplicationModel.Background
{
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.ApplicationModel.Background")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.ApplicationModel.Background.BackgroundTaskBuilder))]
    [global::ABI.Microsoft.Windows.ApplicationModel.Background.BackgroundTaskBuilderRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IBackgroundTaskBuilder))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(BackgroundTaskContract), 65536u)]
    public sealed class BackgroundTaskBuilder : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<BackgroundTaskBuilder>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_ApplicationModel_Background_IBackgroundTaskBuilder => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_ApplicationModel_Background_BackgroundTaskBuilder;
        private static IObjectReference _objRef_global__Microsoft_Windows_ApplicationModel_Background_BackgroundTaskBuilder
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Windows_ApplicationModel_Background_BackgroundTaskBuilder;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_ApplicationModel_Background_BackgroundTaskBuilder = ActivationFactory.Get("Microsoft.Windows.ApplicationModel.Background.BackgroundTaskBuilder");
                }
            }
        }

        public BackgroundTaskBuilder() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_Windows_ApplicationModel_Background_BackgroundTaskBuilder, global::ABI.Microsoft.Windows.ApplicationModel.Background.IBackgroundTaskBuilderMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static BackgroundTaskBuilder FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<BackgroundTaskBuilder>.FromAbi(thisPtr);
        }

        internal BackgroundTaskBuilder(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.ApplicationModel.Background.IBackgroundTaskBuilderMethods.IID);

        }


        public static bool operator ==(BackgroundTaskBuilder x, BackgroundTaskBuilder y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(BackgroundTaskBuilder x, BackgroundTaskBuilder y) => !(x == y);
        public bool Equals(BackgroundTaskBuilder other) => this == other;
        public override bool Equals(object obj) => obj is BackgroundTaskBuilder that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void SetTrigger(global::Windows.ApplicationModel.Background.IBackgroundTrigger trigger) => global::ABI.Microsoft.Windows.ApplicationModel.Background.IBackgroundTaskBuilderMethods.SetTrigger(_objRef_global__Microsoft_Windows_ApplicationModel_Background_IBackgroundTaskBuilder, trigger);

        public void SetTaskEntryPointClsid(Guid clsId) => global::ABI.Microsoft.Windows.ApplicationModel.Background.IBackgroundTaskBuilderMethods.SetTaskEntryPointClsid(_objRef_global__Microsoft_Windows_ApplicationModel_Background_IBackgroundTaskBuilder, clsId);

        public void AddCondition(global::Windows.ApplicationModel.Background.IBackgroundCondition condition) => global::ABI.Microsoft.Windows.ApplicationModel.Background.IBackgroundTaskBuilderMethods.AddCondition(_objRef_global__Microsoft_Windows_ApplicationModel_Background_IBackgroundTaskBuilder, condition);

        public global::Windows.ApplicationModel.Background.BackgroundTaskRegistration Register() => global::ABI.Microsoft.Windows.ApplicationModel.Background.IBackgroundTaskBuilderMethods.Register(_objRef_global__Microsoft_Windows_ApplicationModel_Background_IBackgroundTaskBuilder);

        public global::Windows.ApplicationModel.Background.BackgroundTaskRegistration Register(string name) => global::ABI.Microsoft.Windows.ApplicationModel.Background.IBackgroundTaskBuilderMethods.Register(_objRef_global__Microsoft_Windows_ApplicationModel_Background_IBackgroundTaskBuilder, name);

        public string Name
        {
            get => global::ABI.Microsoft.Windows.ApplicationModel.Background.IBackgroundTaskBuilderMethods.get_Name(_objRef_global__Microsoft_Windows_ApplicationModel_Background_IBackgroundTaskBuilder);
            set => global::ABI.Microsoft.Windows.ApplicationModel.Background.IBackgroundTaskBuilderMethods.set_Name(_objRef_global__Microsoft_Windows_ApplicationModel_Background_IBackgroundTaskBuilder, value);
        }

        public global::Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup TaskGroup
        {
            get => global::ABI.Microsoft.Windows.ApplicationModel.Background.IBackgroundTaskBuilderMethods.get_TaskGroup(_objRef_global__Microsoft_Windows_ApplicationModel_Background_IBackgroundTaskBuilder);
            set => global::ABI.Microsoft.Windows.ApplicationModel.Background.IBackgroundTaskBuilderMethods.set_TaskGroup(_objRef_global__Microsoft_Windows_ApplicationModel_Background_IBackgroundTaskBuilder, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::Windows.Foundation.Metadata.ContractVersion(65536u)]
    public enum BackgroundTaskContract
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.ApplicationModel.Background")][Guid("32A355A0-75CA-5CB8-9F8E-2C4EA62D1EE3")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.ApplicationModel.Background.IBackgroundTaskBuilder))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(BackgroundTaskContract), 65536u)]
    internal interface IBackgroundTaskBuilder
    {
        void SetTrigger(global::Windows.ApplicationModel.Background.IBackgroundTrigger trigger);
        void SetTaskEntryPointClsid(Guid clsId);
        void AddCondition(global::Windows.ApplicationModel.Background.IBackgroundCondition condition);
        [global::Windows.Foundation.Metadata.Overload(@"Register")]
        global::Windows.ApplicationModel.Background.BackgroundTaskRegistration Register();
        [global::Windows.Foundation.Metadata.Overload(@"Register2")]
        global::Windows.ApplicationModel.Background.BackgroundTaskRegistration Register(string name);
        string Name { get; set; }
        global::Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup TaskGroup { get; set; }
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.Windows.ApplicationModel.Background
{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct BackgroundTaskBuilder
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.ApplicationModel.Background.BackgroundTaskBuilder obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.ApplicationModel.Background.BackgroundTaskBuilder>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.ApplicationModel.Background.IBackgroundTaskBuilderMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.ApplicationModel.Background.BackgroundTaskBuilder obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.ApplicationModel.Background.IBackgroundTaskBuilderMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.ApplicationModel.Background.BackgroundTaskBuilder FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.ApplicationModel.Background.BackgroundTaskBuilder.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.ApplicationModel.Background.BackgroundTaskBuilder obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.ApplicationModel.Background.BackgroundTaskBuilder>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.ApplicationModel.Background.BackgroundTaskBuilder[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.ApplicationModel.Background.BackgroundTaskBuilder>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.ApplicationModel.Background.BackgroundTaskBuilder>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.ApplicationModel.Background.BackgroundTaskBuilder[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.ApplicationModel.Background.BackgroundTaskBuilder>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.ApplicationModel.Background.BackgroundTaskBuilder[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.ApplicationModel.Background.BackgroundTaskBuilder>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.ApplicationModel.Background.BackgroundTaskBuilder[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.ApplicationModel.Background.BackgroundTaskBuilder>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.ApplicationModel.Background.BackgroundTaskBuilder>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.ApplicationModel.Background.BackgroundTaskBuilder>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class BackgroundTaskBuilderRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.ApplicationModel.Background.BackgroundTaskBuilder(inspectable.ObjRef);
    }
    internal static class IBackgroundTaskBuilderMethods
    {


        internal static unsafe void SetTrigger(IObjectReference _obj, global::Windows.ApplicationModel.Background.IBackgroundTrigger trigger)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __trigger = default;
            try
            {
                __trigger = MarshalInterface<global::Windows.ApplicationModel.Background.IBackgroundTrigger>.CreateMarshaler2(trigger, global::ABI.Windows.ApplicationModel.Background.IBackgroundTriggerMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__trigger)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__trigger);
            }
        }

        internal static unsafe void SetTaskEntryPointClsid(IObjectReference _obj, Guid clsId)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, Guid, int>**)ThisPtr)[7](ThisPtr, clsId));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void AddCondition(IObjectReference _obj, global::Windows.ApplicationModel.Background.IBackgroundCondition condition)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __condition = default;
            try
            {
                __condition = MarshalInterface<global::Windows.ApplicationModel.Background.IBackgroundCondition>.CreateMarshaler2(condition, global::ABI.Windows.ApplicationModel.Background.IBackgroundConditionMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__condition)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__condition);
            }
        }

        internal static unsafe global::Windows.ApplicationModel.Background.BackgroundTaskRegistration Register(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.ApplicationModel.Background.BackgroundTaskRegistration.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.ApplicationModel.Background.BackgroundTaskRegistration.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.ApplicationModel.Background.BackgroundTaskRegistration Register(IObjectReference _obj, string name)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __name = new(name);
                fixed(void* ___name = __name)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, MarshalString.GetAbi(ref __name), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Windows.ApplicationModel.Background.BackgroundTaskRegistration.FromAbi(__retval);
                }
            }
            finally
            {
                global::ABI.Windows.ApplicationModel.Background.BackgroundTaskRegistration.DisposeAbi(__retval);
            }
        }
        internal static unsafe string get_Name(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Name(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup get_TaskGroup(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_TaskGroup(IObjectReference _obj, global::Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA0, 0x55, 0xA3, 0x32, 0xCA, 0x75, 0xB8, 0x5C, 0x9F, 0x8E, 0x2C, 0x4E, 0xA6, 0x2D, 0x1E, 0xE3 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("32A355A0-75CA-5CB8-9F8E-2C4EA62D1EE3")]
    internal interface IBackgroundTaskBuilder : global::Microsoft.Windows.ApplicationModel.Background.IBackgroundTaskBuilder
    {
    }
}
#pragma warning restore CA1416
