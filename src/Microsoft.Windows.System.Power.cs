//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.Windows.System.Power
{
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.System.Power")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<BatteryStatus>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(PowerNotificationsContract), 65536u)]
    public enum BatteryStatus : int
    {
        NotPresent = unchecked((int)0),
        Discharging = unchecked((int)0x1),
        Idle = unchecked((int)0x2),
        Charging = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.System.Power")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<DisplayStatus>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(PowerNotificationsContract), 65536u)]
    public enum DisplayStatus : int
    {
        Off = unchecked((int)0),
        On = unchecked((int)0x1),
        Dimmed = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.System.Power")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<EffectivePowerMode>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(PowerNotificationsContract), 65536u)]
    public enum EffectivePowerMode : int
    {
        BatterySaver = unchecked((int)0),
        BetterBattery = unchecked((int)0x1),
        Balanced = unchecked((int)0x2),
        HighPerformance = unchecked((int)0x3),
        MaxPerformance = unchecked((int)0x4),
        GameMode = unchecked((int)0x5),
        MixedReality = unchecked((int)0x6),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.System.Power")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<EnergySaverStatus>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(PowerNotificationsContract), 65536u)]
    public enum EnergySaverStatus : int
    {
        Uninitialized = unchecked((int)0),
        Disabled = unchecked((int)0x1),
        Off = unchecked((int)0x2),
        On = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.System.Power")][Guid("FA3554CC-BE1C-534C-BFF8-72DF78E9F4A4")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.System.Power.IPowerManagerStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PowerNotificationsContract), 65536u)]
    internal interface IPowerManagerStatics
    {
        BatteryStatus BatteryStatus { get; }
        DisplayStatus DisplayStatus { get; }
        global::Windows.Foundation.IAsyncOperation<EffectivePowerMode> EffectivePowerMode { get; }
        EnergySaverStatus EnergySaverStatus { get; }
        PowerSourceKind PowerSourceKind { get; }
        PowerSupplyStatus PowerSupplyStatus { get; }
        int RemainingChargePercent { get; }
        global::System.TimeSpan RemainingDischargeTime { get; }
        SystemSuspendStatus SystemSuspendStatus { get; }
        UserPresenceStatus UserPresenceStatus { get; }
        event global::System.EventHandler<object> BatteryStatusChanged;
        event global::System.EventHandler<object> DisplayStatusChanged;
        event global::System.EventHandler<object> EffectivePowerModeChanged;
        event global::System.EventHandler<object> EnergySaverStatusChanged;
        event global::System.EventHandler<object> PowerSourceKindChanged;
        event global::System.EventHandler<object> PowerSupplyStatusChanged;
        event global::System.EventHandler<object> RemainingChargePercentChanged;
        event global::System.EventHandler<object> RemainingDischargeTimeChanged;
        event global::System.EventHandler<object> SystemIdleStatusChanged;
        event global::System.EventHandler<object> SystemSuspendStatusChanged;
        event global::System.EventHandler<object> UserPresenceStatusChanged;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.System.Power")][Guid("61F3CC25-65B4-5DEF-9C9B-990CEF3B0833")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.System.Power.IPowerManagerStatics2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PowerNotificationsContract), 131072u)]
    internal interface IPowerManagerStatics2
    {
        EffectivePowerMode EffectivePowerMode2 { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.System.Power")][global::Windows.Foundation.Metadata.ContractVersion(typeof(PowerNotificationsContract), 65536u)]
    public static class PowerManager
    {

        public static I As<I>() => ActivationFactory.Get("Microsoft.Windows.System.Power.PowerManager").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics;
        private static IObjectReference _objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics = ActivationFactory.Get("Microsoft.Windows.System.Power.PowerManager", global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.IID);
                }
            }
        }

        public static event global::System.EventHandler<object> BatteryStatusChanged
        {
            add => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.Get_BatteryStatusChanged2(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics, _objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics).Subscribe(value);
            remove => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.Get_BatteryStatusChanged2(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics, _objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics).Unsubscribe(value);
        }

        public static event global::System.EventHandler<object> DisplayStatusChanged
        {
            add => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.Get_DisplayStatusChanged2(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics, _objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics).Subscribe(value);
            remove => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.Get_DisplayStatusChanged2(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics, _objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics).Unsubscribe(value);
        }

        public static event global::System.EventHandler<object> EffectivePowerModeChanged
        {
            add => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.Get_EffectivePowerModeChanged2(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics, _objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics).Subscribe(value);
            remove => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.Get_EffectivePowerModeChanged2(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics, _objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics).Unsubscribe(value);
        }

        public static event global::System.EventHandler<object> EnergySaverStatusChanged
        {
            add => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.Get_EnergySaverStatusChanged2(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics, _objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics).Subscribe(value);
            remove => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.Get_EnergySaverStatusChanged2(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics, _objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics).Unsubscribe(value);
        }

        public static event global::System.EventHandler<object> PowerSourceKindChanged
        {
            add => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.Get_PowerSourceKindChanged2(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics, _objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics).Subscribe(value);
            remove => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.Get_PowerSourceKindChanged2(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics, _objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics).Unsubscribe(value);
        }

        public static event global::System.EventHandler<object> PowerSupplyStatusChanged
        {
            add => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.Get_PowerSupplyStatusChanged2(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics, _objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics).Subscribe(value);
            remove => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.Get_PowerSupplyStatusChanged2(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics, _objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics).Unsubscribe(value);
        }

        public static event global::System.EventHandler<object> RemainingChargePercentChanged
        {
            add => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.Get_RemainingChargePercentChanged2(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics, _objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics).Subscribe(value);
            remove => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.Get_RemainingChargePercentChanged2(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics, _objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics).Unsubscribe(value);
        }

        public static event global::System.EventHandler<object> RemainingDischargeTimeChanged
        {
            add => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.Get_RemainingDischargeTimeChanged2(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics, _objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics).Subscribe(value);
            remove => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.Get_RemainingDischargeTimeChanged2(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics, _objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics).Unsubscribe(value);
        }

        public static event global::System.EventHandler<object> SystemIdleStatusChanged
        {
            add => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.Get_SystemIdleStatusChanged2(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics, _objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics).Subscribe(value);
            remove => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.Get_SystemIdleStatusChanged2(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics, _objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics).Unsubscribe(value);
        }

        public static event global::System.EventHandler<object> SystemSuspendStatusChanged
        {
            add => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.Get_SystemSuspendStatusChanged2(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics, _objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics).Subscribe(value);
            remove => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.Get_SystemSuspendStatusChanged2(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics, _objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics).Unsubscribe(value);
        }

        public static event global::System.EventHandler<object> UserPresenceStatusChanged
        {
            add => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.Get_UserPresenceStatusChanged2(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics, _objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics).Subscribe(value);
            remove => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.Get_UserPresenceStatusChanged2(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics, _objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics).Unsubscribe(value);
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics2;
        private static IObjectReference _objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics2
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics2;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics2 = ActivationFactory.Get("Microsoft.Windows.System.Power.PowerManager", global::ABI.Microsoft.Windows.System.Power.IPowerManagerStatics2Methods.IID);
                }
            }
        }

        public static BatteryStatus BatteryStatus => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.get_BatteryStatus(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics);

        public static DisplayStatus DisplayStatus => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.get_DisplayStatus(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics);

        public static global::Windows.Foundation.IAsyncOperation<EffectivePowerMode> EffectivePowerMode => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.get_EffectivePowerMode(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics);

        public static EffectivePowerMode EffectivePowerMode2 => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStatics2Methods.get_EffectivePowerMode2(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics2);

        public static EnergySaverStatus EnergySaverStatus => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.get_EnergySaverStatus(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics);

        public static PowerSourceKind PowerSourceKind => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.get_PowerSourceKind(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics);

        public static PowerSupplyStatus PowerSupplyStatus => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.get_PowerSupplyStatus(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics);

        public static int RemainingChargePercent => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.get_RemainingChargePercent(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics);

        public static global::System.TimeSpan RemainingDischargeTime => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.get_RemainingDischargeTime(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics);

        public static SystemSuspendStatus SystemSuspendStatus => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.get_SystemSuspendStatus(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics);

        public static UserPresenceStatus UserPresenceStatus => global::ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods.get_UserPresenceStatus(_objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics);
    }
    [global::Windows.Foundation.Metadata.ContractVersion(131072u)]
    public enum PowerNotificationsContract
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.System.Power")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<PowerSourceKind>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(PowerNotificationsContract), 65536u)]
    public enum PowerSourceKind : int
    {
        AC = unchecked((int)0),
        DC = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.System.Power")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<PowerSupplyStatus>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(PowerNotificationsContract), 65536u)]
    public enum PowerSupplyStatus : int
    {
        NotPresent = unchecked((int)0),
        Inadequate = unchecked((int)0x1),
        Adequate = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.System.Power")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<SystemSuspendStatus>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(PowerNotificationsContract), 65536u)]
    public enum SystemSuspendStatus : int
    {
        Uninitialized = unchecked((int)0),
        Entering = unchecked((int)0x1),
        AutoResume = unchecked((int)0x2),
        ManualResume = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.System.Power")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<UserPresenceStatus>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(PowerNotificationsContract), 65536u)]
    public enum UserPresenceStatus : int
    {
        Present = unchecked((int)0),
        Absent = unchecked((int)0x1),
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.Windows.System.Power
{
    internal static class IPowerManagerStaticsMethods
    {

        internal static unsafe global::Microsoft.Windows.System.Power.BatteryStatus get_BatteryStatus(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.System.Power.BatteryStatus __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.System.Power.BatteryStatus*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.Windows.System.Power.DisplayStatus get_DisplayStatus(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.System.Power.DisplayStatus __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.System.Power.DisplayStatus*, int>**)ThisPtr)[24](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.System.Power.EffectivePowerMode> get_EffectivePowerMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[29](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Windows_System_Power_EffectivePowerMode.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.System.Power.EffectivePowerMode>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.System.Power.EffectivePowerMode>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Windows.System.Power.EnergySaverStatus get_EnergySaverStatus(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.System.Power.EnergySaverStatus __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.System.Power.EnergySaverStatus*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.Windows.System.Power.PowerSourceKind get_PowerSourceKind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.System.Power.PowerSourceKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.System.Power.PowerSourceKind*, int>**)ThisPtr)[21](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.Windows.System.Power.PowerSupplyStatus get_PowerSupplyStatus(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.System.Power.PowerSupplyStatus __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.System.Power.PowerSupplyStatus*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe int get_RemainingChargePercent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[15](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::System.TimeSpan get_RemainingDischargeTime(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.TimeSpan __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.TimeSpan*, int>**)ThisPtr)[18](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.TimeSpan.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.TimeSpan.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Windows.System.Power.SystemSuspendStatus get_SystemSuspendStatus(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.System.Power.SystemSuspendStatus __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.System.Power.SystemSuspendStatus*, int>**)ThisPtr)[35](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.Windows.System.Power.UserPresenceStatus get_UserPresenceStatus(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.System.Power.UserPresenceStatus __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.System.Power.UserPresenceStatus*, int>**)ThisPtr)[32](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _BatteryStatusChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> MakeBatteryStatusChangedTable()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_EventHandler_1_object.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref _BatteryStatusChanged_, new(), null);
            return _BatteryStatusChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _BatteryStatusChanged => _BatteryStatusChanged_ ?? MakeBatteryStatusChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>> Get_BatteryStatusChanged2(IObjectReference _obj, object _thisObj)
        {
            return _BatteryStatusChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return  new global::ABI.WinRT.Interop.EventHandlerEventSource<object>(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[10],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[11],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _DisplayStatusChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> MakeDisplayStatusChangedTable()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_EventHandler_1_object.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref _DisplayStatusChanged_, new(), null);
            return _DisplayStatusChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _DisplayStatusChanged => _DisplayStatusChanged_ ?? MakeDisplayStatusChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>> Get_DisplayStatusChanged2(IObjectReference _obj, object _thisObj)
        {
            return _DisplayStatusChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return  new global::ABI.WinRT.Interop.EventHandlerEventSource<object>(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[25],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[26],
                1);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _EffectivePowerModeChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> MakeEffectivePowerModeChangedTable()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_EventHandler_1_object.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref _EffectivePowerModeChanged_, new(), null);
            return _EffectivePowerModeChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _EffectivePowerModeChanged => _EffectivePowerModeChanged_ ?? MakeEffectivePowerModeChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>> Get_EffectivePowerModeChanged2(IObjectReference _obj, object _thisObj)
        {
            return _EffectivePowerModeChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return  new global::ABI.WinRT.Interop.EventHandlerEventSource<object>(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[30],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[31],
                2);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _EnergySaverStatusChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> MakeEnergySaverStatusChangedTable()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_EventHandler_1_object.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref _EnergySaverStatusChanged_, new(), null);
            return _EnergySaverStatusChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _EnergySaverStatusChanged => _EnergySaverStatusChanged_ ?? MakeEnergySaverStatusChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>> Get_EnergySaverStatusChanged2(IObjectReference _obj, object _thisObj)
        {
            return _EnergySaverStatusChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return  new global::ABI.WinRT.Interop.EventHandlerEventSource<object>(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[7],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[8],
                3);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _PowerSourceKindChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> MakePowerSourceKindChangedTable()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_EventHandler_1_object.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref _PowerSourceKindChanged_, new(), null);
            return _PowerSourceKindChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _PowerSourceKindChanged => _PowerSourceKindChanged_ ?? MakePowerSourceKindChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>> Get_PowerSourceKindChanged2(IObjectReference _obj, object _thisObj)
        {
            return _PowerSourceKindChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return  new global::ABI.WinRT.Interop.EventHandlerEventSource<object>(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[22],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[23],
                4);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _PowerSupplyStatusChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> MakePowerSupplyStatusChangedTable()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_EventHandler_1_object.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref _PowerSupplyStatusChanged_, new(), null);
            return _PowerSupplyStatusChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _PowerSupplyStatusChanged => _PowerSupplyStatusChanged_ ?? MakePowerSupplyStatusChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>> Get_PowerSupplyStatusChanged2(IObjectReference _obj, object _thisObj)
        {
            return _PowerSupplyStatusChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return  new global::ABI.WinRT.Interop.EventHandlerEventSource<object>(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[13],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[14],
                5);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _RemainingChargePercentChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> MakeRemainingChargePercentChangedTable()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_EventHandler_1_object.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref _RemainingChargePercentChanged_, new(), null);
            return _RemainingChargePercentChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _RemainingChargePercentChanged => _RemainingChargePercentChanged_ ?? MakeRemainingChargePercentChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>> Get_RemainingChargePercentChanged2(IObjectReference _obj, object _thisObj)
        {
            return _RemainingChargePercentChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return  new global::ABI.WinRT.Interop.EventHandlerEventSource<object>(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[16],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[17],
                6);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _RemainingDischargeTimeChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> MakeRemainingDischargeTimeChangedTable()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_EventHandler_1_object.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref _RemainingDischargeTimeChanged_, new(), null);
            return _RemainingDischargeTimeChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _RemainingDischargeTimeChanged => _RemainingDischargeTimeChanged_ ?? MakeRemainingDischargeTimeChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>> Get_RemainingDischargeTimeChanged2(IObjectReference _obj, object _thisObj)
        {
            return _RemainingDischargeTimeChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return  new global::ABI.WinRT.Interop.EventHandlerEventSource<object>(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[19],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[20],
                7);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _SystemIdleStatusChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> MakeSystemIdleStatusChangedTable()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_EventHandler_1_object.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref _SystemIdleStatusChanged_, new(), null);
            return _SystemIdleStatusChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _SystemIdleStatusChanged => _SystemIdleStatusChanged_ ?? MakeSystemIdleStatusChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>> Get_SystemIdleStatusChanged2(IObjectReference _obj, object _thisObj)
        {
            return _SystemIdleStatusChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return  new global::ABI.WinRT.Interop.EventHandlerEventSource<object>(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[27],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[28],
                8);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _SystemSuspendStatusChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> MakeSystemSuspendStatusChangedTable()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_EventHandler_1_object.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref _SystemSuspendStatusChanged_, new(), null);
            return _SystemSuspendStatusChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _SystemSuspendStatusChanged => _SystemSuspendStatusChanged_ ?? MakeSystemSuspendStatusChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>> Get_SystemSuspendStatusChanged2(IObjectReference _obj, object _thisObj)
        {
            return _SystemSuspendStatusChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return  new global::ABI.WinRT.Interop.EventHandlerEventSource<object>(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[36],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[37],
                9);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _UserPresenceStatusChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> MakeUserPresenceStatusChangedTable()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_EventHandler_1_object.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref _UserPresenceStatusChanged_, new(), null);
            return _UserPresenceStatusChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _UserPresenceStatusChanged => _UserPresenceStatusChanged_ ?? MakeUserPresenceStatusChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>> Get_UserPresenceStatusChanged2(IObjectReference _obj, object _thisObj)
        {
            return _UserPresenceStatusChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return  new global::ABI.WinRT.Interop.EventHandlerEventSource<object>(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[33],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[34],
                10);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xCC, 0x54, 0x35, 0xFA, 0x1C, 0xBE, 0x4C, 0x53, 0xBF, 0xF8, 0x72, 0xDF, 0x78, 0xE9, 0xF4, 0xA4 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("FA3554CC-BE1C-534C-BFF8-72DF78E9F4A4")]
    internal interface IPowerManagerStatics : global::Microsoft.Windows.System.Power.IPowerManagerStatics
    {
    }
    internal static class IPowerManagerStatics2Methods
    {

        internal static unsafe global::Microsoft.Windows.System.Power.EffectivePowerMode get_EffectivePowerMode2(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.System.Power.EffectivePowerMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.System.Power.EffectivePowerMode*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x25, 0xCC, 0xF3, 0x61, 0xB4, 0x65, 0xEF, 0x5D, 0x9C, 0x9B, 0x99, 0xC, 0xEF, 0x3B, 0x8, 0x33 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("61F3CC25-65B4-5DEF-9C9B-990CEF3B0833")]
    internal interface IPowerManagerStatics2 : global::Microsoft.Windows.System.Power.IPowerManagerStatics2
    {
    }
}
#pragma warning restore CA1416
