//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.UI.Xaml.Controls.AnimatedVisuals
{
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedAcceptVisualSource))]
    [global::ABI.Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedAcceptVisualSourceRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    public sealed class AnimatedAcceptVisualSource : global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource, global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<AnimatedAcceptVisualSource>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource => _inner;
        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2 => ___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2 ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2();



        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedAcceptVisualSource;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedAcceptVisualSource
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedAcceptVisualSource;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedAcceptVisualSource = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedAcceptVisualSource");
                }
            }
        }

        public AnimatedAcceptVisualSource() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedAcceptVisualSource, global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSourceMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static AnimatedAcceptVisualSource FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<AnimatedAcceptVisualSource>.FromAbi(thisPtr);
        }

        internal AnimatedAcceptVisualSource(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSourceMethods.IID);

        }


        public static bool operator ==(AnimatedAcceptVisualSource x, AnimatedAcceptVisualSource y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(AnimatedAcceptVisualSource x, AnimatedAcceptVisualSource y) => !(x == y);
        public bool Equals(AnimatedAcceptVisualSource other) => this == other;
        public override bool Equals(object obj) => obj is AnimatedAcceptVisualSource that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(global::Microsoft.UI.Composition.Compositor compositor, out object diagnostics) => global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSourceMethods.TryCreateAnimatedVisual(_objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource, compositor, out diagnostics);

        public void SetColorProperty(string propertyName, global::Windows.UI.Color value) => global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2Methods.SetColorProperty(_objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2, propertyName, value);

        public global::System.Collections.Generic.IReadOnlyDictionary<string, double> Markers => global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2Methods.get_Markers(_objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedBackVisualSource))]
    [global::ABI.Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedBackVisualSourceRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    public sealed class AnimatedBackVisualSource : global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource, global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<AnimatedBackVisualSource>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource => _inner;
        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2 => ___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2 ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2();



        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedBackVisualSource;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedBackVisualSource
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedBackVisualSource;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedBackVisualSource = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedBackVisualSource");
                }
            }
        }

        public AnimatedBackVisualSource() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedBackVisualSource, global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSourceMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static AnimatedBackVisualSource FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<AnimatedBackVisualSource>.FromAbi(thisPtr);
        }

        internal AnimatedBackVisualSource(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSourceMethods.IID);

        }


        public static bool operator ==(AnimatedBackVisualSource x, AnimatedBackVisualSource y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(AnimatedBackVisualSource x, AnimatedBackVisualSource y) => !(x == y);
        public bool Equals(AnimatedBackVisualSource other) => this == other;
        public override bool Equals(object obj) => obj is AnimatedBackVisualSource that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(global::Microsoft.UI.Composition.Compositor compositor, out object diagnostics) => global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSourceMethods.TryCreateAnimatedVisual(_objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource, compositor, out diagnostics);

        public void SetColorProperty(string propertyName, global::Windows.UI.Color value) => global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2Methods.SetColorProperty(_objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2, propertyName, value);

        public global::System.Collections.Generic.IReadOnlyDictionary<string, double> Markers => global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2Methods.get_Markers(_objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronDownSmallVisualSource))]
    [global::ABI.Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronDownSmallVisualSourceRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    public sealed class AnimatedChevronDownSmallVisualSource : global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource, global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<AnimatedChevronDownSmallVisualSource>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource => _inner;
        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2 => ___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2 ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2();



        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedChevronDownSmallVisualSource;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedChevronDownSmallVisualSource
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedChevronDownSmallVisualSource;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedChevronDownSmallVisualSource = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronDownSmallVisualSource");
                }
            }
        }

        public AnimatedChevronDownSmallVisualSource() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedChevronDownSmallVisualSource, global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSourceMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static AnimatedChevronDownSmallVisualSource FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<AnimatedChevronDownSmallVisualSource>.FromAbi(thisPtr);
        }

        internal AnimatedChevronDownSmallVisualSource(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSourceMethods.IID);

        }


        public static bool operator ==(AnimatedChevronDownSmallVisualSource x, AnimatedChevronDownSmallVisualSource y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(AnimatedChevronDownSmallVisualSource x, AnimatedChevronDownSmallVisualSource y) => !(x == y);
        public bool Equals(AnimatedChevronDownSmallVisualSource other) => this == other;
        public override bool Equals(object obj) => obj is AnimatedChevronDownSmallVisualSource that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(global::Microsoft.UI.Composition.Compositor compositor, out object diagnostics) => global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSourceMethods.TryCreateAnimatedVisual(_objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource, compositor, out diagnostics);

        public void SetColorProperty(string propertyName, global::Windows.UI.Color value) => global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2Methods.SetColorProperty(_objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2, propertyName, value);

        public global::System.Collections.Generic.IReadOnlyDictionary<string, double> Markers => global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2Methods.get_Markers(_objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronRightDownSmallVisualSource))]
    [global::ABI.Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronRightDownSmallVisualSourceRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    public sealed class AnimatedChevronRightDownSmallVisualSource : global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource, global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<AnimatedChevronRightDownSmallVisualSource>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource => _inner;
        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2 => ___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2 ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2();



        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedChevronRightDownSmallVisualSource;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedChevronRightDownSmallVisualSource
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedChevronRightDownSmallVisualSource;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedChevronRightDownSmallVisualSource = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronRightDownSmallVisualSource");
                }
            }
        }

        public AnimatedChevronRightDownSmallVisualSource() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedChevronRightDownSmallVisualSource, global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSourceMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static AnimatedChevronRightDownSmallVisualSource FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<AnimatedChevronRightDownSmallVisualSource>.FromAbi(thisPtr);
        }

        internal AnimatedChevronRightDownSmallVisualSource(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSourceMethods.IID);

        }


        public static bool operator ==(AnimatedChevronRightDownSmallVisualSource x, AnimatedChevronRightDownSmallVisualSource y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(AnimatedChevronRightDownSmallVisualSource x, AnimatedChevronRightDownSmallVisualSource y) => !(x == y);
        public bool Equals(AnimatedChevronRightDownSmallVisualSource other) => this == other;
        public override bool Equals(object obj) => obj is AnimatedChevronRightDownSmallVisualSource that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(global::Microsoft.UI.Composition.Compositor compositor, out object diagnostics) => global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSourceMethods.TryCreateAnimatedVisual(_objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource, compositor, out diagnostics);

        public void SetColorProperty(string propertyName, global::Windows.UI.Color value) => global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2Methods.SetColorProperty(_objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2, propertyName, value);

        public global::System.Collections.Generic.IReadOnlyDictionary<string, double> Markers => global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2Methods.get_Markers(_objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronUpDownSmallVisualSource))]
    [global::ABI.Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronUpDownSmallVisualSourceRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    public sealed class AnimatedChevronUpDownSmallVisualSource : global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource, global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<AnimatedChevronUpDownSmallVisualSource>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource => _inner;
        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2 => ___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2 ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2();



        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedChevronUpDownSmallVisualSource;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedChevronUpDownSmallVisualSource
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedChevronUpDownSmallVisualSource;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedChevronUpDownSmallVisualSource = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronUpDownSmallVisualSource");
                }
            }
        }

        public AnimatedChevronUpDownSmallVisualSource() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedChevronUpDownSmallVisualSource, global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSourceMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static AnimatedChevronUpDownSmallVisualSource FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<AnimatedChevronUpDownSmallVisualSource>.FromAbi(thisPtr);
        }

        internal AnimatedChevronUpDownSmallVisualSource(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSourceMethods.IID);

        }


        public static bool operator ==(AnimatedChevronUpDownSmallVisualSource x, AnimatedChevronUpDownSmallVisualSource y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(AnimatedChevronUpDownSmallVisualSource x, AnimatedChevronUpDownSmallVisualSource y) => !(x == y);
        public bool Equals(AnimatedChevronUpDownSmallVisualSource other) => this == other;
        public override bool Equals(object obj) => obj is AnimatedChevronUpDownSmallVisualSource that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(global::Microsoft.UI.Composition.Compositor compositor, out object diagnostics) => global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSourceMethods.TryCreateAnimatedVisual(_objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource, compositor, out diagnostics);

        public void SetColorProperty(string propertyName, global::Windows.UI.Color value) => global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2Methods.SetColorProperty(_objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2, propertyName, value);

        public global::System.Collections.Generic.IReadOnlyDictionary<string, double> Markers => global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2Methods.get_Markers(_objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedFindVisualSource))]
    [global::ABI.Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedFindVisualSourceRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    public sealed class AnimatedFindVisualSource : global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource, global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<AnimatedFindVisualSource>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource => _inner;
        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2 => ___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2 ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2();



        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedFindVisualSource;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedFindVisualSource
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedFindVisualSource;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedFindVisualSource = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedFindVisualSource");
                }
            }
        }

        public AnimatedFindVisualSource() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedFindVisualSource, global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSourceMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static AnimatedFindVisualSource FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<AnimatedFindVisualSource>.FromAbi(thisPtr);
        }

        internal AnimatedFindVisualSource(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSourceMethods.IID);

        }


        public static bool operator ==(AnimatedFindVisualSource x, AnimatedFindVisualSource y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(AnimatedFindVisualSource x, AnimatedFindVisualSource y) => !(x == y);
        public bool Equals(AnimatedFindVisualSource other) => this == other;
        public override bool Equals(object obj) => obj is AnimatedFindVisualSource that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(global::Microsoft.UI.Composition.Compositor compositor, out object diagnostics) => global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSourceMethods.TryCreateAnimatedVisual(_objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource, compositor, out diagnostics);

        public void SetColorProperty(string propertyName, global::Windows.UI.Color value) => global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2Methods.SetColorProperty(_objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2, propertyName, value);

        public global::System.Collections.Generic.IReadOnlyDictionary<string, double> Markers => global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2Methods.get_Markers(_objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedGlobalNavigationButtonVisualSource))]
    [global::ABI.Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedGlobalNavigationButtonVisualSourceRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    public sealed class AnimatedGlobalNavigationButtonVisualSource : global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource, global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<AnimatedGlobalNavigationButtonVisualSource>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource => _inner;
        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2 => ___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2 ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2();



        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedGlobalNavigationButtonVisualSource;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedGlobalNavigationButtonVisualSource
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedGlobalNavigationButtonVisualSource;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedGlobalNavigationButtonVisualSource = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedGlobalNavigationButtonVisualSource");
                }
            }
        }

        public AnimatedGlobalNavigationButtonVisualSource() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedGlobalNavigationButtonVisualSource, global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSourceMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static AnimatedGlobalNavigationButtonVisualSource FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<AnimatedGlobalNavigationButtonVisualSource>.FromAbi(thisPtr);
        }

        internal AnimatedGlobalNavigationButtonVisualSource(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSourceMethods.IID);

        }


        public static bool operator ==(AnimatedGlobalNavigationButtonVisualSource x, AnimatedGlobalNavigationButtonVisualSource y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(AnimatedGlobalNavigationButtonVisualSource x, AnimatedGlobalNavigationButtonVisualSource y) => !(x == y);
        public bool Equals(AnimatedGlobalNavigationButtonVisualSource other) => this == other;
        public override bool Equals(object obj) => obj is AnimatedGlobalNavigationButtonVisualSource that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(global::Microsoft.UI.Composition.Compositor compositor, out object diagnostics) => global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSourceMethods.TryCreateAnimatedVisual(_objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource, compositor, out diagnostics);

        public void SetColorProperty(string propertyName, global::Windows.UI.Color value) => global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2Methods.SetColorProperty(_objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2, propertyName, value);

        public global::System.Collections.Generic.IReadOnlyDictionary<string, double> Markers => global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2Methods.get_Markers(_objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedSettingsVisualSource))]
    [global::ABI.Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedSettingsVisualSourceRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    public sealed class AnimatedSettingsVisualSource : global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource, global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<AnimatedSettingsVisualSource>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource => _inner;
        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2 => ___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2 ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2();



        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedSettingsVisualSource;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedSettingsVisualSource
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedSettingsVisualSource;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedSettingsVisualSource = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedSettingsVisualSource");
                }
            }
        }

        public AnimatedSettingsVisualSource() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Controls_AnimatedVisuals_AnimatedSettingsVisualSource, global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSourceMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static AnimatedSettingsVisualSource FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<AnimatedSettingsVisualSource>.FromAbi(thisPtr);
        }

        internal AnimatedSettingsVisualSource(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSourceMethods.IID);

        }


        public static bool operator ==(AnimatedSettingsVisualSource x, AnimatedSettingsVisualSource y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(AnimatedSettingsVisualSource x, AnimatedSettingsVisualSource y) => !(x == y);
        public bool Equals(AnimatedSettingsVisualSource other) => this == other;
        public override bool Equals(object obj) => obj is AnimatedSettingsVisualSource that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(global::Microsoft.UI.Composition.Compositor compositor, out object diagnostics) => global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSourceMethods.TryCreateAnimatedVisual(_objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource, compositor, out diagnostics);

        public void SetColorProperty(string propertyName, global::Windows.UI.Color value) => global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2Methods.SetColorProperty(_objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2, propertyName, value);

        public global::System.Collections.Generic.IReadOnlyDictionary<string, double> Markers => global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2Methods.get_Markers(_objRef_global__Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.UI.Xaml.Controls.AnimatedVisuals
{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct AnimatedAcceptVisualSource
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedAcceptVisualSource obj) => obj is null ? null : MarshalInterface<global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource>.CreateMarshaler(obj);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedAcceptVisualSource obj) => MarshalInterface<global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSourceMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedAcceptVisualSource FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedAcceptVisualSource.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedAcceptVisualSource obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedAcceptVisualSource>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedAcceptVisualSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedAcceptVisualSource>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedAcceptVisualSource>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedAcceptVisualSource[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedAcceptVisualSource>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedAcceptVisualSource[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedAcceptVisualSource>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedAcceptVisualSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedAcceptVisualSource>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedAcceptVisualSource>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedAcceptVisualSource>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class AnimatedAcceptVisualSourceRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedAcceptVisualSource(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct AnimatedBackVisualSource
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedBackVisualSource obj) => obj is null ? null : MarshalInterface<global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource>.CreateMarshaler(obj);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedBackVisualSource obj) => MarshalInterface<global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSourceMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedBackVisualSource FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedBackVisualSource.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedBackVisualSource obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedBackVisualSource>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedBackVisualSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedBackVisualSource>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedBackVisualSource>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedBackVisualSource[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedBackVisualSource>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedBackVisualSource[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedBackVisualSource>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedBackVisualSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedBackVisualSource>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedBackVisualSource>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedBackVisualSource>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class AnimatedBackVisualSourceRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedBackVisualSource(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct AnimatedChevronDownSmallVisualSource
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronDownSmallVisualSource obj) => obj is null ? null : MarshalInterface<global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource>.CreateMarshaler(obj);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronDownSmallVisualSource obj) => MarshalInterface<global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSourceMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronDownSmallVisualSource FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronDownSmallVisualSource.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronDownSmallVisualSource obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronDownSmallVisualSource>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronDownSmallVisualSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronDownSmallVisualSource>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronDownSmallVisualSource>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronDownSmallVisualSource[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronDownSmallVisualSource>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronDownSmallVisualSource[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronDownSmallVisualSource>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronDownSmallVisualSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronDownSmallVisualSource>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronDownSmallVisualSource>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronDownSmallVisualSource>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class AnimatedChevronDownSmallVisualSourceRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronDownSmallVisualSource(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct AnimatedChevronRightDownSmallVisualSource
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronRightDownSmallVisualSource obj) => obj is null ? null : MarshalInterface<global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource>.CreateMarshaler(obj);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronRightDownSmallVisualSource obj) => MarshalInterface<global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSourceMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronRightDownSmallVisualSource FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronRightDownSmallVisualSource.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronRightDownSmallVisualSource obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronRightDownSmallVisualSource>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronRightDownSmallVisualSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronRightDownSmallVisualSource>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronRightDownSmallVisualSource>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronRightDownSmallVisualSource[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronRightDownSmallVisualSource>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronRightDownSmallVisualSource[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronRightDownSmallVisualSource>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronRightDownSmallVisualSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronRightDownSmallVisualSource>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronRightDownSmallVisualSource>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronRightDownSmallVisualSource>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class AnimatedChevronRightDownSmallVisualSourceRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronRightDownSmallVisualSource(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct AnimatedChevronUpDownSmallVisualSource
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronUpDownSmallVisualSource obj) => obj is null ? null : MarshalInterface<global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource>.CreateMarshaler(obj);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronUpDownSmallVisualSource obj) => MarshalInterface<global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSourceMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronUpDownSmallVisualSource FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronUpDownSmallVisualSource.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronUpDownSmallVisualSource obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronUpDownSmallVisualSource>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronUpDownSmallVisualSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronUpDownSmallVisualSource>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronUpDownSmallVisualSource>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronUpDownSmallVisualSource[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronUpDownSmallVisualSource>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronUpDownSmallVisualSource[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronUpDownSmallVisualSource>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronUpDownSmallVisualSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronUpDownSmallVisualSource>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronUpDownSmallVisualSource>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronUpDownSmallVisualSource>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class AnimatedChevronUpDownSmallVisualSourceRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronUpDownSmallVisualSource(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct AnimatedFindVisualSource
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedFindVisualSource obj) => obj is null ? null : MarshalInterface<global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource>.CreateMarshaler(obj);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedFindVisualSource obj) => MarshalInterface<global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSourceMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedFindVisualSource FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedFindVisualSource.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedFindVisualSource obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedFindVisualSource>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedFindVisualSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedFindVisualSource>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedFindVisualSource>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedFindVisualSource[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedFindVisualSource>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedFindVisualSource[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedFindVisualSource>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedFindVisualSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedFindVisualSource>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedFindVisualSource>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedFindVisualSource>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class AnimatedFindVisualSourceRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedFindVisualSource(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct AnimatedGlobalNavigationButtonVisualSource
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedGlobalNavigationButtonVisualSource obj) => obj is null ? null : MarshalInterface<global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource>.CreateMarshaler(obj);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedGlobalNavigationButtonVisualSource obj) => MarshalInterface<global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSourceMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedGlobalNavigationButtonVisualSource FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedGlobalNavigationButtonVisualSource.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedGlobalNavigationButtonVisualSource obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedGlobalNavigationButtonVisualSource>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedGlobalNavigationButtonVisualSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedGlobalNavigationButtonVisualSource>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedGlobalNavigationButtonVisualSource>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedGlobalNavigationButtonVisualSource[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedGlobalNavigationButtonVisualSource>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedGlobalNavigationButtonVisualSource[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedGlobalNavigationButtonVisualSource>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedGlobalNavigationButtonVisualSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedGlobalNavigationButtonVisualSource>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedGlobalNavigationButtonVisualSource>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedGlobalNavigationButtonVisualSource>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class AnimatedGlobalNavigationButtonVisualSourceRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedGlobalNavigationButtonVisualSource(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct AnimatedSettingsVisualSource
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedSettingsVisualSource obj) => obj is null ? null : MarshalInterface<global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource>.CreateMarshaler(obj);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedSettingsVisualSource obj) => MarshalInterface<global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.IAnimatedVisualSourceMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedSettingsVisualSource FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedSettingsVisualSource.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedSettingsVisualSource obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedSettingsVisualSource>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedSettingsVisualSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedSettingsVisualSource>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedSettingsVisualSource>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedSettingsVisualSource[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedSettingsVisualSource>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedSettingsVisualSource[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedSettingsVisualSource>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedSettingsVisualSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedSettingsVisualSource>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedSettingsVisualSource>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedSettingsVisualSource>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class AnimatedSettingsVisualSourceRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedSettingsVisualSource(inspectable.ObjRef);
    }
}
#pragma warning restore CA1416
