//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.UI
{
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.ClosableNotifierHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.ClosableNotifierHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    public delegate void ClosableNotifierHandler();
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.ColorHelper))]
    [global::ABI.Microsoft.UI.ColorHelperRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IColorHelper))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class ColorHelper : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ColorHelper>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_IColorHelper => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.ColorHelper").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_IColorHelperStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_IColorHelperStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_IColorHelperStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_IColorHelperStatics = ActivationFactory.Get("Microsoft.UI.ColorHelper", global::ABI.Microsoft.UI.IColorHelperStaticsMethods.IID);
                }
            }
        }

        public static global::Windows.UI.Color FromArgb(byte a, byte r, byte g, byte b) => global::ABI.Microsoft.UI.IColorHelperStaticsMethods.FromArgb(_objRef_global__Microsoft_UI_IColorHelperStatics, a, r, g, b);

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_IColorHelperStatics2;
        private static IObjectReference _objRef_global__Microsoft_UI_IColorHelperStatics2
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_IColorHelperStatics2;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_IColorHelperStatics2 = ActivationFactory.Get("Microsoft.UI.ColorHelper", global::ABI.Microsoft.UI.IColorHelperStatics2Methods.IID);
                }
            }
        }

        public static string ToDisplayName(global::Windows.UI.Color color) => global::ABI.Microsoft.UI.IColorHelperStatics2Methods.ToDisplayName(_objRef_global__Microsoft_UI_IColorHelperStatics2, color);

        public static ColorHelper FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ColorHelper>.FromAbi(thisPtr);
        }

        internal ColorHelper(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.IColorHelperMethods.IID);

        }


        public static bool operator ==(ColorHelper x, ColorHelper y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ColorHelper x, ColorHelper y) => !(x == y);
        public bool Equals(ColorHelper other) => this == other;
        public override bool Equals(object obj) => obj is ColorHelper that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Colors))]
    [global::ABI.Microsoft.UI.ColorsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IColors))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class Colors : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<Colors>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_IColors => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Colors").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_IColorsStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_IColorsStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_IColorsStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_IColorsStatics = ActivationFactory.Get("Microsoft.UI.Colors", global::ABI.Microsoft.UI.IColorsStaticsMethods.IID);
                }
            }
        }

        public static global::Windows.UI.Color AliceBlue => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_AliceBlue(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color AntiqueWhite => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_AntiqueWhite(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Aqua => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Aqua(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Aquamarine => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Aquamarine(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Azure => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Azure(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Beige => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Beige(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Bisque => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Bisque(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Black => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Black(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color BlanchedAlmond => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_BlanchedAlmond(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Blue => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Blue(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color BlueViolet => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_BlueViolet(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Brown => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Brown(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color BurlyWood => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_BurlyWood(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color CadetBlue => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_CadetBlue(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Chartreuse => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Chartreuse(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Chocolate => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Chocolate(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Coral => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Coral(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color CornflowerBlue => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_CornflowerBlue(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Cornsilk => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Cornsilk(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Crimson => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Crimson(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Cyan => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Cyan(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color DarkBlue => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_DarkBlue(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color DarkCyan => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_DarkCyan(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color DarkGoldenrod => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_DarkGoldenrod(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color DarkGray => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_DarkGray(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color DarkGreen => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_DarkGreen(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color DarkKhaki => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_DarkKhaki(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color DarkMagenta => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_DarkMagenta(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color DarkOliveGreen => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_DarkOliveGreen(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color DarkOrange => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_DarkOrange(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color DarkOrchid => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_DarkOrchid(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color DarkRed => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_DarkRed(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color DarkSalmon => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_DarkSalmon(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color DarkSeaGreen => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_DarkSeaGreen(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color DarkSlateBlue => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_DarkSlateBlue(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color DarkSlateGray => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_DarkSlateGray(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color DarkTurquoise => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_DarkTurquoise(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color DarkViolet => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_DarkViolet(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color DeepPink => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_DeepPink(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color DeepSkyBlue => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_DeepSkyBlue(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color DimGray => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_DimGray(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color DodgerBlue => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_DodgerBlue(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Firebrick => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Firebrick(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color FloralWhite => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_FloralWhite(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color ForestGreen => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_ForestGreen(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Fuchsia => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Fuchsia(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Gainsboro => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Gainsboro(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color GhostWhite => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_GhostWhite(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Gold => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Gold(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Goldenrod => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Goldenrod(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Gray => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Gray(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Green => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Green(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color GreenYellow => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_GreenYellow(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Honeydew => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Honeydew(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color HotPink => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_HotPink(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color IndianRed => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_IndianRed(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Indigo => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Indigo(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Ivory => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Ivory(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Khaki => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Khaki(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Lavender => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Lavender(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color LavenderBlush => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_LavenderBlush(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color LawnGreen => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_LawnGreen(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color LemonChiffon => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_LemonChiffon(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color LightBlue => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_LightBlue(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color LightCoral => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_LightCoral(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color LightCyan => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_LightCyan(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color LightGoldenrodYellow => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_LightGoldenrodYellow(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color LightGray => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_LightGray(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color LightGreen => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_LightGreen(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color LightPink => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_LightPink(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color LightSalmon => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_LightSalmon(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color LightSeaGreen => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_LightSeaGreen(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color LightSkyBlue => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_LightSkyBlue(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color LightSlateGray => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_LightSlateGray(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color LightSteelBlue => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_LightSteelBlue(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color LightYellow => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_LightYellow(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Lime => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Lime(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color LimeGreen => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_LimeGreen(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Linen => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Linen(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Magenta => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Magenta(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Maroon => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Maroon(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color MediumAquamarine => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_MediumAquamarine(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color MediumBlue => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_MediumBlue(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color MediumOrchid => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_MediumOrchid(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color MediumPurple => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_MediumPurple(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color MediumSeaGreen => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_MediumSeaGreen(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color MediumSlateBlue => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_MediumSlateBlue(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color MediumSpringGreen => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_MediumSpringGreen(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color MediumTurquoise => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_MediumTurquoise(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color MediumVioletRed => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_MediumVioletRed(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color MidnightBlue => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_MidnightBlue(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color MintCream => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_MintCream(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color MistyRose => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_MistyRose(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Moccasin => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Moccasin(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color NavajoWhite => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_NavajoWhite(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Navy => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Navy(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color OldLace => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_OldLace(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Olive => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Olive(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color OliveDrab => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_OliveDrab(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Orange => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Orange(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color OrangeRed => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_OrangeRed(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Orchid => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Orchid(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color PaleGoldenrod => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_PaleGoldenrod(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color PaleGreen => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_PaleGreen(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color PaleTurquoise => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_PaleTurquoise(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color PaleVioletRed => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_PaleVioletRed(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color PapayaWhip => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_PapayaWhip(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color PeachPuff => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_PeachPuff(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Peru => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Peru(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Pink => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Pink(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Plum => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Plum(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color PowderBlue => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_PowderBlue(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Purple => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Purple(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Red => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Red(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color RosyBrown => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_RosyBrown(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color RoyalBlue => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_RoyalBlue(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color SaddleBrown => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_SaddleBrown(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Salmon => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Salmon(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color SandyBrown => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_SandyBrown(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color SeaGreen => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_SeaGreen(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color SeaShell => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_SeaShell(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Sienna => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Sienna(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Silver => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Silver(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color SkyBlue => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_SkyBlue(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color SlateBlue => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_SlateBlue(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color SlateGray => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_SlateGray(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Snow => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Snow(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color SpringGreen => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_SpringGreen(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color SteelBlue => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_SteelBlue(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Tan => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Tan(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Teal => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Teal(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Thistle => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Thistle(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Tomato => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Tomato(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Transparent => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Transparent(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Turquoise => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Turquoise(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Violet => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Violet(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Wheat => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Wheat(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color White => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_White(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color WhiteSmoke => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_WhiteSmoke(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color Yellow => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_Yellow(_objRef_global__Microsoft_UI_IColorsStatics);

        public static global::Windows.UI.Color YellowGreen => global::ABI.Microsoft.UI.IColorsStaticsMethods.get_YellowGreen(_objRef_global__Microsoft_UI_IColorsStatics);

        public static Colors FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<Colors>.FromAbi(thisPtr);
        }

        internal Colors(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.IColorsMethods.IID);

        }


        public static bool operator ==(Colors x, Colors y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(Colors x, Colors y) => !(x == y);
        public bool Equals(Colors other) => this == other;
        public override bool Equals(object obj) => obj is Colors that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI", "struct(Microsoft.UI.DisplayId;u8)")][global::WinRT.WindowsRuntimeHelperType][global::WinRT.WinRTExposedType(typeof(global::WinRT.StructTypeDetails<DisplayId, DisplayId>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public struct DisplayId: IEquatable<DisplayId>
    {
        public ulong Value;

        public DisplayId(ulong _Value)
        {
            Value = _Value; 
        }

        public static bool operator ==(DisplayId x, DisplayId y) => x.Value == y.Value;
        public static bool operator !=(DisplayId x, DisplayId y) => !(x == y);
        public bool Equals(DisplayId other) => this == other;
        public override bool Equals(object obj) => obj is DisplayId that && this == that;
        public override int GetHashCode() => Value.GetHashCode();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("2989E93B-ED0F-5E79-90F2-EAC592FC6E6A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.IClosableNotifier))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    public interface IClosableNotifier
    {
        bool IsClosed { get; }
        event ClosableNotifierHandler Closed;
        event ClosableNotifierHandler FrameworkClosed;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("3ADDDCCD-3949-585B-A566-CCB8350DD221")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.IColorHelper))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IColorHelper
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("1D1D85A1-EB63-538A-84F0-019210BC406B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.IColorHelperStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IColorHelperStatics
    {
        global::Windows.UI.Color FromArgb(byte a, byte r, byte g, byte b);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("982A2D93-0EC4-56B7-9C20-0B5C77949066")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.IColorHelperStatics2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65542u)]
    internal interface IColorHelperStatics2
    {
        string ToDisplayName(global::Windows.UI.Color color);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("8CF15863-8411-5AFD-946C-328E04DA2F2F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.IColors))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IColors
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("8620A5B0-015A-57AC-A3F3-895D0B1269AE")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.IColorsStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IColorsStatics
    {
        global::Windows.UI.Color AliceBlue { get; }
        global::Windows.UI.Color AntiqueWhite { get; }
        global::Windows.UI.Color Aqua { get; }
        global::Windows.UI.Color Aquamarine { get; }
        global::Windows.UI.Color Azure { get; }
        global::Windows.UI.Color Beige { get; }
        global::Windows.UI.Color Bisque { get; }
        global::Windows.UI.Color Black { get; }
        global::Windows.UI.Color BlanchedAlmond { get; }
        global::Windows.UI.Color Blue { get; }
        global::Windows.UI.Color BlueViolet { get; }
        global::Windows.UI.Color Brown { get; }
        global::Windows.UI.Color BurlyWood { get; }
        global::Windows.UI.Color CadetBlue { get; }
        global::Windows.UI.Color Chartreuse { get; }
        global::Windows.UI.Color Chocolate { get; }
        global::Windows.UI.Color Coral { get; }
        global::Windows.UI.Color CornflowerBlue { get; }
        global::Windows.UI.Color Cornsilk { get; }
        global::Windows.UI.Color Crimson { get; }
        global::Windows.UI.Color Cyan { get; }
        global::Windows.UI.Color DarkBlue { get; }
        global::Windows.UI.Color DarkCyan { get; }
        global::Windows.UI.Color DarkGoldenrod { get; }
        global::Windows.UI.Color DarkGray { get; }
        global::Windows.UI.Color DarkGreen { get; }
        global::Windows.UI.Color DarkKhaki { get; }
        global::Windows.UI.Color DarkMagenta { get; }
        global::Windows.UI.Color DarkOliveGreen { get; }
        global::Windows.UI.Color DarkOrange { get; }
        global::Windows.UI.Color DarkOrchid { get; }
        global::Windows.UI.Color DarkRed { get; }
        global::Windows.UI.Color DarkSalmon { get; }
        global::Windows.UI.Color DarkSeaGreen { get; }
        global::Windows.UI.Color DarkSlateBlue { get; }
        global::Windows.UI.Color DarkSlateGray { get; }
        global::Windows.UI.Color DarkTurquoise { get; }
        global::Windows.UI.Color DarkViolet { get; }
        global::Windows.UI.Color DeepPink { get; }
        global::Windows.UI.Color DeepSkyBlue { get; }
        global::Windows.UI.Color DimGray { get; }
        global::Windows.UI.Color DodgerBlue { get; }
        global::Windows.UI.Color Firebrick { get; }
        global::Windows.UI.Color FloralWhite { get; }
        global::Windows.UI.Color ForestGreen { get; }
        global::Windows.UI.Color Fuchsia { get; }
        global::Windows.UI.Color Gainsboro { get; }
        global::Windows.UI.Color GhostWhite { get; }
        global::Windows.UI.Color Gold { get; }
        global::Windows.UI.Color Goldenrod { get; }
        global::Windows.UI.Color Gray { get; }
        global::Windows.UI.Color Green { get; }
        global::Windows.UI.Color GreenYellow { get; }
        global::Windows.UI.Color Honeydew { get; }
        global::Windows.UI.Color HotPink { get; }
        global::Windows.UI.Color IndianRed { get; }
        global::Windows.UI.Color Indigo { get; }
        global::Windows.UI.Color Ivory { get; }
        global::Windows.UI.Color Khaki { get; }
        global::Windows.UI.Color Lavender { get; }
        global::Windows.UI.Color LavenderBlush { get; }
        global::Windows.UI.Color LawnGreen { get; }
        global::Windows.UI.Color LemonChiffon { get; }
        global::Windows.UI.Color LightBlue { get; }
        global::Windows.UI.Color LightCoral { get; }
        global::Windows.UI.Color LightCyan { get; }
        global::Windows.UI.Color LightGoldenrodYellow { get; }
        global::Windows.UI.Color LightGray { get; }
        global::Windows.UI.Color LightGreen { get; }
        global::Windows.UI.Color LightPink { get; }
        global::Windows.UI.Color LightSalmon { get; }
        global::Windows.UI.Color LightSeaGreen { get; }
        global::Windows.UI.Color LightSkyBlue { get; }
        global::Windows.UI.Color LightSlateGray { get; }
        global::Windows.UI.Color LightSteelBlue { get; }
        global::Windows.UI.Color LightYellow { get; }
        global::Windows.UI.Color Lime { get; }
        global::Windows.UI.Color LimeGreen { get; }
        global::Windows.UI.Color Linen { get; }
        global::Windows.UI.Color Magenta { get; }
        global::Windows.UI.Color Maroon { get; }
        global::Windows.UI.Color MediumAquamarine { get; }
        global::Windows.UI.Color MediumBlue { get; }
        global::Windows.UI.Color MediumOrchid { get; }
        global::Windows.UI.Color MediumPurple { get; }
        global::Windows.UI.Color MediumSeaGreen { get; }
        global::Windows.UI.Color MediumSlateBlue { get; }
        global::Windows.UI.Color MediumSpringGreen { get; }
        global::Windows.UI.Color MediumTurquoise { get; }
        global::Windows.UI.Color MediumVioletRed { get; }
        global::Windows.UI.Color MidnightBlue { get; }
        global::Windows.UI.Color MintCream { get; }
        global::Windows.UI.Color MistyRose { get; }
        global::Windows.UI.Color Moccasin { get; }
        global::Windows.UI.Color NavajoWhite { get; }
        global::Windows.UI.Color Navy { get; }
        global::Windows.UI.Color OldLace { get; }
        global::Windows.UI.Color Olive { get; }
        global::Windows.UI.Color OliveDrab { get; }
        global::Windows.UI.Color Orange { get; }
        global::Windows.UI.Color OrangeRed { get; }
        global::Windows.UI.Color Orchid { get; }
        global::Windows.UI.Color PaleGoldenrod { get; }
        global::Windows.UI.Color PaleGreen { get; }
        global::Windows.UI.Color PaleTurquoise { get; }
        global::Windows.UI.Color PaleVioletRed { get; }
        global::Windows.UI.Color PapayaWhip { get; }
        global::Windows.UI.Color PeachPuff { get; }
        global::Windows.UI.Color Peru { get; }
        global::Windows.UI.Color Pink { get; }
        global::Windows.UI.Color Plum { get; }
        global::Windows.UI.Color PowderBlue { get; }
        global::Windows.UI.Color Purple { get; }
        global::Windows.UI.Color Red { get; }
        global::Windows.UI.Color RosyBrown { get; }
        global::Windows.UI.Color RoyalBlue { get; }
        global::Windows.UI.Color SaddleBrown { get; }
        global::Windows.UI.Color Salmon { get; }
        global::Windows.UI.Color SandyBrown { get; }
        global::Windows.UI.Color SeaGreen { get; }
        global::Windows.UI.Color SeaShell { get; }
        global::Windows.UI.Color Sienna { get; }
        global::Windows.UI.Color Silver { get; }
        global::Windows.UI.Color SkyBlue { get; }
        global::Windows.UI.Color SlateBlue { get; }
        global::Windows.UI.Color SlateGray { get; }
        global::Windows.UI.Color Snow { get; }
        global::Windows.UI.Color SpringGreen { get; }
        global::Windows.UI.Color SteelBlue { get; }
        global::Windows.UI.Color Tan { get; }
        global::Windows.UI.Color Teal { get; }
        global::Windows.UI.Color Thistle { get; }
        global::Windows.UI.Color Tomato { get; }
        global::Windows.UI.Color Transparent { get; }
        global::Windows.UI.Color Turquoise { get; }
        global::Windows.UI.Color Violet { get; }
        global::Windows.UI.Color Wheat { get; }
        global::Windows.UI.Color White { get; }
        global::Windows.UI.Color WhiteSmoke { get; }
        global::Windows.UI.Color Yellow { get; }
        global::Windows.UI.Color YellowGreen { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI", "struct(Microsoft.UI.IconId;u8)")][global::WinRT.WindowsRuntimeHelperType][global::WinRT.WinRTExposedType(typeof(global::WinRT.StructTypeDetails<IconId, IconId>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public struct IconId: IEquatable<IconId>
    {
        public ulong Value;

        public IconId(ulong _Value)
        {
            Value = _Value; 
        }

        public static bool operator ==(IconId x, IconId y) => x.Value == y.Value;
        public static bool operator !=(IconId x, IconId y) => !(x == y);
        public bool Equals(IconId other) => this == other;
        public override bool Equals(object obj) => obj is IconId that && this == that;
        public override int GetHashCode() => Value.GetHashCode();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI", "struct(Microsoft.UI.WindowId;u8)")][global::WinRT.WindowsRuntimeHelperType][global::WinRT.WinRTExposedType(typeof(global::WinRT.StructTypeDetails<WindowId, WindowId>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public struct WindowId: IEquatable<WindowId>
    {
        public ulong Value;

        public WindowId(ulong _Value)
        {
            Value = _Value; 
        }

        public static bool operator ==(WindowId x, WindowId y) => x.Value == y.Value;
        public static bool operator !=(WindowId x, WindowId y) => !(x == y);
        public bool Equals(WindowId other) => this == other;
        public override bool Equals(object obj) => obj is WindowId that && this == that;
        public override int GetHashCode() => Value.GetHashCode();
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.UI
{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("478CEC68-EA8E-52FC-87E2-C819DE000F92")]
    public static class ClosableNotifierHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x68, 0xEC, 0x8C, 0x47, 0x8E, 0xEA, 0xFC, 0x52, 0x87, 0xE2, 0xC8, 0x19, 0xDE, 0x0, 0xF, 0x92 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe ClosableNotifierHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(ClosableNotifierHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.ClosableNotifierHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.ClosableNotifierHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.ClosableNotifierHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.ClosableNotifierHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.ClosableNotifierHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.ClosableNotifierHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.ClosableNotifierHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.ClosableNotifierHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke()
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr));
                global::System.GC.KeepAlive(_nativeDelegate);
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.ClosableNotifierHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.ClosableNotifierHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.ClosableNotifierHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.ClosableNotifierHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.ClosableNotifierHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.ClosableNotifierHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.ClosableNotifierHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.ClosableNotifierHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.ClosableNotifierHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.ClosableNotifierHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.ClosableNotifierHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.ClosableNotifierHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.ClosableNotifierHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.ClosableNotifierHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.ClosableNotifierHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.ClosableNotifierHandler>(thisPtr).Invoke()
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class ClosableNotifierHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.ClosableNotifierHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = ClosableNotifierHandler.IID,
                Vtable = ClosableNotifierHandler.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ColorHelper
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.ColorHelper obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.ColorHelper>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.IColorHelperMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.ColorHelper obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.IColorHelperMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.ColorHelper FromAbi(IntPtr thisPtr) => global::Microsoft.UI.ColorHelper.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.ColorHelper obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.ColorHelper>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.ColorHelper[] array) => MarshalInterfaceHelper<global::Microsoft.UI.ColorHelper>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.ColorHelper>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.ColorHelper[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.ColorHelper>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.ColorHelper[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.ColorHelper>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.ColorHelper[] array) => MarshalInterfaceHelper<global::Microsoft.UI.ColorHelper>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.ColorHelper>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.ColorHelper>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ColorHelperRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.ColorHelper(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct Colors
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Colors obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Colors>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.IColorsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Colors obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.IColorsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Colors FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Colors.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Colors obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Colors>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Colors[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Colors>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Colors>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Colors[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Colors>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Colors[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Colors>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Colors[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Colors>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Colors>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Colors>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ColorsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Colors(inspectable.ObjRef);
    }
    public static class IClosableNotifierMethods
    {

        public static unsafe bool get_IsClosed(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.ClosableNotifierHandler>> _Closed_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.ClosableNotifierHandler>> MakeClosedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Closed_, new(), null);
            return _Closed_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.ClosableNotifierHandler>> _Closed => _Closed_ ?? MakeClosedTable();

        public static unsafe (Action<global::Microsoft.UI.ClosableNotifierHandler>, Action<global::Microsoft.UI.ClosableNotifierHandler>) Get_Closed(IObjectReference _obj, object _thisObj)
        {
            var eventSource = Get_Closed2(_obj, _thisObj);
            return (eventSource.Subscribe, eventSource.Unsubscribe);
        }

        public static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.ClosableNotifierHandler> Get_Closed2(IObjectReference _obj, object _thisObj)
        {
            return _Closed.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_ClosableNotifierHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[7],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[8],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.ClosableNotifierHandler>> _FrameworkClosed_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.ClosableNotifierHandler>> MakeFrameworkClosedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _FrameworkClosed_, new(), null);
            return _FrameworkClosed_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.ClosableNotifierHandler>> _FrameworkClosed => _FrameworkClosed_ ?? MakeFrameworkClosedTable();

        public static unsafe (Action<global::Microsoft.UI.ClosableNotifierHandler>, Action<global::Microsoft.UI.ClosableNotifierHandler>) Get_FrameworkClosed(IObjectReference _obj, object _thisObj)
        {
            var eventSource = Get_FrameworkClosed2(_obj, _thisObj);
            return (eventSource.Subscribe, eventSource.Unsubscribe);
        }

        public static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.ClosableNotifierHandler> Get_FrameworkClosed2(IObjectReference _obj, object _thisObj)
        {
            return _FrameworkClosed.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_ClosableNotifierHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[9],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[10],
                1);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3B, 0xE9, 0x89, 0x29, 0xF, 0xED, 0x79, 0x5E, 0x90, 0xF2, 0xEA, 0xC5, 0x92, 0xFC, 0x6E, 0x6A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IClosableNotifier.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("2989E93B-ED0F-5E79-90F2-EAC592FC6E6A")]
    internal unsafe interface IClosableNotifier : global::Microsoft.UI.IClosableNotifier
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IClosableNotifier()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IClosableNotifier), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 5);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_IsClosed_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_add_Closed_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_remove_Closed_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_add_FrameworkClosed_3;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>*)AbiToProjectionVftablePtr)[10] = &Do_Abi_remove_FrameworkClosed_4;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_IsClosed_0(IntPtr thisPtr, byte* value)
        {

            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.IClosableNotifier>(thisPtr).IsClosed;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.IClosableNotifier, global::WinRT.EventRegistrationTokenTable<global::Microsoft.UI.ClosableNotifierHandler>> _Closed_tokenTables;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.IClosableNotifier, global::WinRT.EventRegistrationTokenTable<global::Microsoft.UI.ClosableNotifierHandler>> MakeClosedTable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _Closed_tokenTables, new(), null);
            return _Closed_tokenTables;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.IClosableNotifier, global::WinRT.EventRegistrationTokenTable<global::Microsoft.UI.ClosableNotifierHandler>> _Closed_TokenTables => _Closed_tokenTables ?? MakeClosedTable();

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_add_Closed_1(IntPtr thisPtr, IntPtr handler, global::WinRT.EventRegistrationToken* token)
        {

            *token = default;
            try
            {
                var __this = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.IClosableNotifier>(thisPtr);
                var __handler = ClosableNotifierHandler.FromAbi(handler);
                *token = _Closed_TokenTables.GetOrCreateValue(__this).AddEventHandler(__handler);
                __this.Closed += __handler;
                return 0;
            }
            catch (Exception __ex)
            {
                return __ex.HResult;
            }
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_remove_Closed_2(IntPtr thisPtr, global::WinRT.EventRegistrationToken token)
        {
            try
            {
                var __this = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.IClosableNotifier>(thisPtr);
                if(__this != null && _Closed_TokenTables.TryGetValue(__this, out var __table) && __table.RemoveEventHandler(token, out var __handler))
                {
                    __this.Closed -= __handler;
                }
                return 0;
            }
            catch (Exception __ex)
            {
                return __ex.HResult;
            }
        }
        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.IClosableNotifier, global::WinRT.EventRegistrationTokenTable<global::Microsoft.UI.ClosableNotifierHandler>> _FrameworkClosed_tokenTables;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.IClosableNotifier, global::WinRT.EventRegistrationTokenTable<global::Microsoft.UI.ClosableNotifierHandler>> MakeFrameworkClosedTable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _FrameworkClosed_tokenTables, new(), null);
            return _FrameworkClosed_tokenTables;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.IClosableNotifier, global::WinRT.EventRegistrationTokenTable<global::Microsoft.UI.ClosableNotifierHandler>> _FrameworkClosed_TokenTables => _FrameworkClosed_tokenTables ?? MakeFrameworkClosedTable();

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_add_FrameworkClosed_3(IntPtr thisPtr, IntPtr handler, global::WinRT.EventRegistrationToken* token)
        {

            *token = default;
            try
            {
                var __this = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.IClosableNotifier>(thisPtr);
                var __handler = ClosableNotifierHandler.FromAbi(handler);
                *token = _FrameworkClosed_TokenTables.GetOrCreateValue(__this).AddEventHandler(__handler);
                __this.FrameworkClosed += __handler;
                return 0;
            }
            catch (Exception __ex)
            {
                return __ex.HResult;
            }
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_remove_FrameworkClosed_4(IntPtr thisPtr, global::WinRT.EventRegistrationToken token)
        {
            try
            {
                var __this = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.IClosableNotifier>(thisPtr);
                if(__this != null && _FrameworkClosed_TokenTables.TryGetValue(__this, out var __table) && __table.RemoveEventHandler(token, out var __handler))
                {
                    __this.FrameworkClosed -= __handler;
                }
                return 0;
            }
            catch (Exception __ex)
            {
                return __ex.HResult;
            }
        }

        unsafe bool global::Microsoft.UI.IClosableNotifier.IsClosed
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.IClosableNotifier).TypeHandle));
                return global::ABI.Microsoft.UI.IClosableNotifierMethods.get_IsClosed(_obj);
            }
        }

        event global::Microsoft.UI.ClosableNotifierHandler global::Microsoft.UI.IClosableNotifier.Closed
        {
            add 
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.IClosableNotifier).TypeHandle));
                global::ABI.Microsoft.UI.IClosableNotifierMethods.Get_Closed2(_obj, (IWinRTObject)this).Subscribe(value);
            }
            remove
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.IClosableNotifier).TypeHandle));
                global::ABI.Microsoft.UI.IClosableNotifierMethods.Get_Closed2(_obj, (IWinRTObject)this).Unsubscribe(value);
            }
        }

        event global::Microsoft.UI.ClosableNotifierHandler global::Microsoft.UI.IClosableNotifier.FrameworkClosed
        {
            add 
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.IClosableNotifier).TypeHandle));
                global::ABI.Microsoft.UI.IClosableNotifierMethods.Get_FrameworkClosed2(_obj, (IWinRTObject)this).Subscribe(value);
            }
            remove
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.IClosableNotifier).TypeHandle));
                global::ABI.Microsoft.UI.IClosableNotifierMethods.Get_FrameworkClosed2(_obj, (IWinRTObject)this).Unsubscribe(value);
            }
        }
    }

    internal static class IColorHelperMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xCD, 0xDC, 0xDD, 0x3A, 0x49, 0x39, 0x5B, 0x58, 0xA5, 0x66, 0xCC, 0xB8, 0x35, 0xD, 0xD2, 0x21 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("3ADDDCCD-3949-585B-A566-CCB8350DD221")]
    internal interface IColorHelper : global::Microsoft.UI.IColorHelper
    {
    }
    internal static class IColorHelperStaticsMethods
    {


        internal static unsafe global::Windows.UI.Color FromArgb(IObjectReference _obj, byte a, byte r, byte g, byte b)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, byte, byte, byte, global::Windows.UI.Color*, int>**)ThisPtr)[6](ThisPtr, a, r, g, b, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA1, 0x85, 0x1D, 0x1D, 0x63, 0xEB, 0x8A, 0x53, 0x84, 0xF0, 0x1, 0x92, 0x10, 0xBC, 0x40, 0x6B };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("1D1D85A1-EB63-538A-84F0-019210BC406B")]
    internal interface IColorHelperStatics : global::Microsoft.UI.IColorHelperStatics
    {
    }
    internal static class IColorHelperStatics2Methods
    {


        internal static unsafe string ToDisplayName(IObjectReference _obj, global::Windows.UI.Color color)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color, IntPtr*, int>**)ThisPtr)[6](ThisPtr, color, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x93, 0x2D, 0x2A, 0x98, 0xC4, 0xE, 0xB7, 0x56, 0x9C, 0x20, 0xB, 0x5C, 0x77, 0x94, 0x90, 0x66 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("982A2D93-0EC4-56B7-9C20-0B5C77949066")]
    internal interface IColorHelperStatics2 : global::Microsoft.UI.IColorHelperStatics2
    {
    }
    internal static class IColorsMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x63, 0x58, 0xF1, 0x8C, 0x11, 0x84, 0xFD, 0x5A, 0x94, 0x6C, 0x32, 0x8E, 0x4, 0xDA, 0x2F, 0x2F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8CF15863-8411-5AFD-946C-328E04DA2F2F")]
    internal interface IColors : global::Microsoft.UI.IColors
    {
    }
    internal static class IColorsStaticsMethods
    {

        internal static unsafe global::Windows.UI.Color get_AliceBlue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_AntiqueWhite(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Aqua(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Aquamarine(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Azure(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Beige(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Bisque(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Black(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_BlanchedAlmond(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Blue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[15](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_BlueViolet(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[16](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Brown(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[17](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_BurlyWood(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[18](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_CadetBlue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[19](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Chartreuse(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[20](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Chocolate(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[21](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Coral(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[22](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_CornflowerBlue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[23](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Cornsilk(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[24](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Crimson(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[25](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Cyan(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[26](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_DarkBlue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[27](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_DarkCyan(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[28](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_DarkGoldenrod(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[29](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_DarkGray(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[30](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_DarkGreen(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[31](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_DarkKhaki(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[32](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_DarkMagenta(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[33](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_DarkOliveGreen(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[34](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_DarkOrange(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[35](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_DarkOrchid(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[36](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_DarkRed(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[37](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_DarkSalmon(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[38](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_DarkSeaGreen(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[39](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_DarkSlateBlue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[40](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_DarkSlateGray(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[41](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_DarkTurquoise(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[42](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_DarkViolet(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[43](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_DeepPink(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[44](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_DeepSkyBlue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[45](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_DimGray(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[46](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_DodgerBlue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[47](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Firebrick(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[48](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_FloralWhite(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[49](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_ForestGreen(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[50](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Fuchsia(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[51](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Gainsboro(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[52](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_GhostWhite(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[53](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Gold(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[54](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Goldenrod(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[55](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Gray(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[56](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Green(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[57](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_GreenYellow(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[58](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Honeydew(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[59](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_HotPink(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[60](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_IndianRed(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[61](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Indigo(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[62](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Ivory(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[63](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Khaki(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[64](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Lavender(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[65](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_LavenderBlush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[66](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_LawnGreen(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[67](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_LemonChiffon(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[68](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_LightBlue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[69](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_LightCoral(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[70](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_LightCyan(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[71](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_LightGoldenrodYellow(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[72](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_LightGray(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[74](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_LightGreen(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[73](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_LightPink(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[75](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_LightSalmon(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[76](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_LightSeaGreen(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[77](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_LightSkyBlue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[78](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_LightSlateGray(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[79](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_LightSteelBlue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[80](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_LightYellow(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[81](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Lime(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[82](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_LimeGreen(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[83](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Linen(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[84](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Magenta(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[85](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Maroon(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[86](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_MediumAquamarine(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[87](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_MediumBlue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[88](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_MediumOrchid(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[89](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_MediumPurple(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[90](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_MediumSeaGreen(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[91](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_MediumSlateBlue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[92](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_MediumSpringGreen(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[93](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_MediumTurquoise(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[94](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_MediumVioletRed(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[95](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_MidnightBlue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[96](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_MintCream(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[97](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_MistyRose(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[98](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Moccasin(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[99](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_NavajoWhite(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[100](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Navy(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[101](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_OldLace(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[102](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Olive(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[103](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_OliveDrab(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[104](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Orange(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[105](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_OrangeRed(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[106](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Orchid(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[107](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_PaleGoldenrod(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[108](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_PaleGreen(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[109](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_PaleTurquoise(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[110](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_PaleVioletRed(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[111](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_PapayaWhip(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[112](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_PeachPuff(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[113](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Peru(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[114](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Pink(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[115](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Plum(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[116](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_PowderBlue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[117](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Purple(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[118](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Red(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[119](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_RosyBrown(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[120](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_RoyalBlue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[121](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_SaddleBrown(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[122](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Salmon(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[123](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_SandyBrown(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[124](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_SeaGreen(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[125](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_SeaShell(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[126](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Sienna(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[127](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Silver(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[128](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_SkyBlue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[129](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_SlateBlue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[130](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_SlateGray(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[131](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Snow(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[132](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_SpringGreen(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[133](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_SteelBlue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[134](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Tan(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[135](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Teal(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[136](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Thistle(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[137](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Tomato(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[138](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Transparent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[139](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Turquoise(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[140](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Violet(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[141](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Wheat(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[142](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_White(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[143](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_WhiteSmoke(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[144](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_Yellow(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[145](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Color get_YellowGreen(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[146](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB0, 0xA5, 0x20, 0x86, 0x5A, 0x1, 0xAC, 0x57, 0xA3, 0xF3, 0x89, 0x5D, 0xB, 0x12, 0x69, 0xAE };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8620A5B0-015A-57AC-A3F3-895D0B1269AE")]
    internal interface IColorsStatics : global::Microsoft.UI.IColorsStatics
    {
    }
}
#pragma warning restore CA1416
