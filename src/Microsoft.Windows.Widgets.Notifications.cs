//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.Windows.Widgets.Notifications
{
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Widgets")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<AnnouncementActionKind>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Windows.Widgets.WidgetContract), 327680u)]
    public enum AnnouncementActionKind : int
    {
        Shown = unchecked((int)0),
        Engaged = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Widgets")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<AnnouncementTextColor>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Windows.Widgets.WidgetContract), 327680u)]
    public enum AnnouncementTextColor : int
    {
        Default = unchecked((int)0),
        Dark = unchecked((int)0x1),
        Light = unchecked((int)0x2),
        Accent = unchecked((int)0x3),
        Good = unchecked((int)0x4),
        Warning = unchecked((int)0x5),
        Attention = unchecked((int)0x6),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Widgets")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Widgets.Notifications.FeedAnnouncement))]
    [global::ABI.Microsoft.Windows.Widgets.Notifications.FeedAnnouncementRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IFeedAnnouncement))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Windows.Widgets.WidgetContract), 327680u)]
    public sealed class FeedAnnouncement : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<FeedAnnouncement>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncement => _inner;


        private static class _IFeedAnnouncementFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, string id, string primaryText, string secondaryText, global::System.Uri lightModeIcon, global::System.Uri darkModeIcon)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __lightModeIcon = default;
                ObjectReferenceValue __darkModeIcon = default;
                IntPtr __retval = default;
                try
                {
                    __lightModeIcon = global::ABI.System.Uri.CreateMarshaler2(lightModeIcon);
                    __darkModeIcon = global::ABI.System.Uri.CreateMarshaler2(darkModeIcon);
                    MarshalString.Pinnable __id = new(id);
                    MarshalString.Pinnable __primaryText = new(primaryText);
                    MarshalString.Pinnable __secondaryText = new(secondaryText);
                    fixed(void* ___id = __id, ___primaryText = __primaryText, ___secondaryText = __secondaryText)
                    {
                        global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __id), MarshalString.GetAbi(ref __primaryText), MarshalString.GetAbi(ref __secondaryText), MarshalInspectable<object>.GetAbi(__lightModeIcon), MarshalInspectable<object>.GetAbi(__darkModeIcon), &__retval));
                        global::System.GC.KeepAlive(_obj);
                        return __retval;
                    }
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__lightModeIcon);
                    MarshalInspectable<object>.DisposeMarshaler(__darkModeIcon);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncementFactory;
        private static IObjectReference _objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncementFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncementFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncementFactory = ActivationFactory.Get("Microsoft.Windows.Widgets.Notifications.FeedAnnouncement", global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementFactoryMethods.IID);
                }
            }
        }

        public FeedAnnouncement(string id, string primaryText, string secondaryText, global::System.Uri lightModeIcon, global::System.Uri darkModeIcon) 
        { 
        IntPtr ptr = (_IFeedAnnouncementFactoryMethods.CreateInstance(_objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncementFactory, id, primaryText, secondaryText, lightModeIcon, darkModeIcon)); 
        try 
        { 
        _inner = ComWrappersSupport.GetObjectReferenceForInterface(ptr, global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementMethods.IID, false); 

        } 
        finally 
        { 
        MarshalInspectable<object>.DisposeAbi(ptr); 
        }

        ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
        ComWrappersHelper.Init(_inner, false);
        }

        public static FeedAnnouncement FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<FeedAnnouncement>.FromAbi(thisPtr);
        }

        internal FeedAnnouncement(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementMethods.IID);

        }


        public static bool operator ==(FeedAnnouncement x, FeedAnnouncement y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(FeedAnnouncement x, FeedAnnouncement y) => !(x == y);
        public bool Equals(FeedAnnouncement other) => this == other;
        public override bool Equals(object obj) => obj is FeedAnnouncement that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public string CustomAccessibilityText
        {
            get => global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementMethods.get_CustomAccessibilityText(_objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncement);
            set => global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementMethods.set_CustomAccessibilityText(_objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncement, value);
        }

        public global::System.Uri DarkModeIconUri
        {
            get => global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementMethods.get_DarkModeIconUri(_objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncement);
            set => global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementMethods.set_DarkModeIconUri(_objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncement, value);
        }

        public global::System.TimeSpan Duration
        {
            get => global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementMethods.get_Duration(_objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncement);
            set => global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementMethods.set_Duration(_objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncement, value);
        }

        public global::System.DateTimeOffset ExpirationTime
        {
            get => global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementMethods.get_ExpirationTime(_objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncement);
            set => global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementMethods.set_ExpirationTime(_objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncement, value);
        }

        public string Id
        {
            get => global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementMethods.get_Id(_objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncement);
            set => global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementMethods.set_Id(_objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncement, value);
        }

        public bool IsSecondaryTextSubtle
        {
            get => global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementMethods.get_IsSecondaryTextSubtle(_objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncement);
            set => global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementMethods.set_IsSecondaryTextSubtle(_objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncement, value);
        }

        public global::System.Uri LightModeIconUri
        {
            get => global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementMethods.get_LightModeIconUri(_objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncement);
            set => global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementMethods.set_LightModeIconUri(_objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncement, value);
        }

        public string PrimaryText
        {
            get => global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementMethods.get_PrimaryText(_objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncement);
            set => global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementMethods.set_PrimaryText(_objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncement, value);
        }

        public AnnouncementTextColor PrimaryTextColor
        {
            get => global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementMethods.get_PrimaryTextColor(_objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncement);
            set => global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementMethods.set_PrimaryTextColor(_objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncement, value);
        }

        public string SecondaryText
        {
            get => global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementMethods.get_SecondaryText(_objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncement);
            set => global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementMethods.set_SecondaryText(_objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncement, value);
        }

        public AnnouncementTextColor SecondaryTextColor
        {
            get => global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementMethods.get_SecondaryTextColor(_objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncement);
            set => global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementMethods.set_SecondaryTextColor(_objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncement, value);
        }

        public bool ShowBadgeIfUserNotEngaged
        {
            get => global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementMethods.get_ShowBadgeIfUserNotEngaged(_objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncement);
            set => global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementMethods.set_ShowBadgeIfUserNotEngaged(_objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncement, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Widgets")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Widgets.Notifications.FeedAnnouncementInvokedArgs))]
    [global::ABI.Microsoft.Windows.Widgets.Notifications.FeedAnnouncementInvokedArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IFeedAnnouncementInvokedArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Windows.Widgets.WidgetContract), 327680u)]
    public sealed class FeedAnnouncementInvokedArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<FeedAnnouncementInvokedArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncementInvokedArgs => _inner;


        public static FeedAnnouncementInvokedArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<FeedAnnouncementInvokedArgs>.FromAbi(thisPtr);
        }

        internal FeedAnnouncementInvokedArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementInvokedArgsMethods.IID);

        }


        public static bool operator ==(FeedAnnouncementInvokedArgs x, FeedAnnouncementInvokedArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(FeedAnnouncementInvokedArgs x, FeedAnnouncementInvokedArgs y) => !(x == y);
        public bool Equals(FeedAnnouncementInvokedArgs other) => this == other;
        public override bool Equals(object obj) => obj is FeedAnnouncementInvokedArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public AnnouncementActionKind ActionKind => global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementInvokedArgsMethods.get_ActionKind(_objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncementInvokedArgs);

        public string AnnouncementId => global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementInvokedArgsMethods.get_AnnouncementId(_objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncementInvokedArgs);

        public string FeedDefinitionId => global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementInvokedArgsMethods.get_FeedDefinitionId(_objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncementInvokedArgs);

        public string FeedProviderDefinitionId => global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementInvokedArgsMethods.get_FeedProviderDefinitionId(_objRef_global__Microsoft_Windows_Widgets_Notifications_IFeedAnnouncementInvokedArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Widgets")][Guid("B88E8C2C-D251-5344-ACC2-8CF9BA07EC15")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncement))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Windows.Widgets.WidgetContract), 327680u)]
    internal interface IFeedAnnouncement
    {
        string CustomAccessibilityText { get; set; }
        global::System.Uri DarkModeIconUri { get; set; }
        global::System.TimeSpan Duration { get; set; }
        global::System.DateTimeOffset ExpirationTime { get; set; }
        string Id { get; set; }
        bool IsSecondaryTextSubtle { get; set; }
        global::System.Uri LightModeIconUri { get; set; }
        string PrimaryText { get; set; }
        AnnouncementTextColor PrimaryTextColor { get; set; }
        string SecondaryText { get; set; }
        AnnouncementTextColor SecondaryTextColor { get; set; }
        bool ShowBadgeIfUserNotEngaged { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Widgets")][Guid("22074243-46D8-5AF2-8715-1C76D1CB774C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Windows.Widgets.WidgetContract), 327680u)]
    internal interface IFeedAnnouncementFactory
    {
        FeedAnnouncement CreateInstance(string id, string primaryText, string secondaryText, global::System.Uri lightModeIcon, global::System.Uri darkModeIcon);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Widgets")][Guid("70A48D98-323D-5F19-A1E1-B63FE36EDBF2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementInvokedArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Windows.Widgets.WidgetContract), 327680u)]
    internal interface IFeedAnnouncementInvokedArgs
    {
        AnnouncementActionKind ActionKind { get; }
        string AnnouncementId { get; }
        string FeedDefinitionId { get; }
        string FeedProviderDefinitionId { get; }
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.Windows.Widgets.Notifications
{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct FeedAnnouncement
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncement obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncement>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncement obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncement FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncement.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncement obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncement>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncement[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncement>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncement>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncement[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncement>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncement[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncement>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncement[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncement>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncement>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncement>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class FeedAnnouncementRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncement(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct FeedAnnouncementInvokedArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncementInvokedArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncementInvokedArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementInvokedArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncementInvokedArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementInvokedArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncementInvokedArgs FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncementInvokedArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncementInvokedArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncementInvokedArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncementInvokedArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncementInvokedArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncementInvokedArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncementInvokedArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncementInvokedArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncementInvokedArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncementInvokedArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncementInvokedArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncementInvokedArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncementInvokedArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncementInvokedArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class FeedAnnouncementInvokedArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncementInvokedArgs(inspectable.ObjRef);
    }
    internal static class IFeedAnnouncementMethods
    {

        internal static unsafe string get_CustomAccessibilityText(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[20](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_CustomAccessibilityText(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[21](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::System.Uri get_DarkModeIconUri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.Uri.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.Uri.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_DarkModeIconUri(IObjectReference _obj, global::System.Uri value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.System.Uri.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[15](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.TimeSpan get_Duration(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.TimeSpan __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.TimeSpan*, int>**)ThisPtr)[28](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.TimeSpan.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.TimeSpan.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Duration(IObjectReference _obj, global::System.TimeSpan value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.TimeSpan.Marshaler __value = default;
            try
            {
                __value = global::ABI.System.TimeSpan.CreateMarshaler(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.TimeSpan, int>**)ThisPtr)[29](ThisPtr, global::ABI.System.TimeSpan.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                global::ABI.System.TimeSpan.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.DateTimeOffset get_ExpirationTime(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.DateTimeOffset __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.DateTimeOffset*, int>**)ThisPtr)[26](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.DateTimeOffset.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.DateTimeOffset.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ExpirationTime(IObjectReference _obj, global::System.DateTimeOffset value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.DateTimeOffset.Marshaler __value = default;
            try
            {
                __value = global::ABI.System.DateTimeOffset.CreateMarshaler(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.DateTimeOffset, int>**)ThisPtr)[27](ThisPtr, global::ABI.System.DateTimeOffset.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                global::ABI.System.DateTimeOffset.DisposeMarshaler(__value);
            }
        }

        internal static unsafe string get_Id(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Id(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe bool get_IsSecondaryTextSubtle(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[22](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsSecondaryTextSubtle(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[23](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::System.Uri get_LightModeIconUri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.Uri.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.Uri.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_LightModeIconUri(IObjectReference _obj, global::System.Uri value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.System.Uri.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[13](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe string get_PrimaryText(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_PrimaryText(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::Microsoft.Windows.Widgets.Notifications.AnnouncementTextColor get_PrimaryTextColor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.Widgets.Notifications.AnnouncementTextColor __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.Widgets.Notifications.AnnouncementTextColor*, int>**)ThisPtr)[16](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_PrimaryTextColor(IObjectReference _obj, global::Microsoft.Windows.Widgets.Notifications.AnnouncementTextColor value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.Widgets.Notifications.AnnouncementTextColor, int>**)ThisPtr)[17](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe string get_SecondaryText(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SecondaryText(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::Microsoft.Windows.Widgets.Notifications.AnnouncementTextColor get_SecondaryTextColor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.Widgets.Notifications.AnnouncementTextColor __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.Widgets.Notifications.AnnouncementTextColor*, int>**)ThisPtr)[18](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_SecondaryTextColor(IObjectReference _obj, global::Microsoft.Windows.Widgets.Notifications.AnnouncementTextColor value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.Widgets.Notifications.AnnouncementTextColor, int>**)ThisPtr)[19](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_ShowBadgeIfUserNotEngaged(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[24](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_ShowBadgeIfUserNotEngaged(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[25](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x2C, 0x8C, 0x8E, 0xB8, 0x51, 0xD2, 0x44, 0x53, 0xAC, 0xC2, 0x8C, 0xF9, 0xBA, 0x7, 0xEC, 0x15 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B88E8C2C-D251-5344-ACC2-8CF9BA07EC15")]
    internal interface IFeedAnnouncement : global::Microsoft.Windows.Widgets.Notifications.IFeedAnnouncement
    {
    }
    internal static class IFeedAnnouncementFactoryMethods
    {


        internal static unsafe global::Microsoft.Windows.Widgets.Notifications.FeedAnnouncement CreateInstance(IObjectReference _obj, string id, string primaryText, string secondaryText, global::System.Uri lightModeIcon, global::System.Uri darkModeIcon)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __lightModeIcon = default;
            ObjectReferenceValue __darkModeIcon = default;
            IntPtr __retval = default;
            try
            {
                __lightModeIcon = global::ABI.System.Uri.CreateMarshaler2(lightModeIcon);
                __darkModeIcon = global::ABI.System.Uri.CreateMarshaler2(darkModeIcon);
                MarshalString.Pinnable __id = new(id);
                MarshalString.Pinnable __primaryText = new(primaryText);
                MarshalString.Pinnable __secondaryText = new(secondaryText);
                fixed(void* ___id = __id, ___primaryText = __primaryText, ___secondaryText = __secondaryText)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __id), MarshalString.GetAbi(ref __primaryText), MarshalString.GetAbi(ref __secondaryText), MarshalInspectable<object>.GetAbi(__lightModeIcon), MarshalInspectable<object>.GetAbi(__darkModeIcon), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.Windows.Widgets.Notifications.FeedAnnouncement.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__lightModeIcon);
                MarshalInspectable<object>.DisposeMarshaler(__darkModeIcon);
                global::ABI.Microsoft.Windows.Widgets.Notifications.FeedAnnouncement.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x43, 0x42, 0x7, 0x22, 0xD8, 0x46, 0xF2, 0x5A, 0x87, 0x15, 0x1C, 0x76, 0xD1, 0xCB, 0x77, 0x4C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("22074243-46D8-5AF2-8715-1C76D1CB774C")]
    internal interface IFeedAnnouncementFactory : global::Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementFactory
    {
    }
    internal static class IFeedAnnouncementInvokedArgsMethods
    {

        internal static unsafe global::Microsoft.Windows.Widgets.Notifications.AnnouncementActionKind get_ActionKind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.Widgets.Notifications.AnnouncementActionKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.Widgets.Notifications.AnnouncementActionKind*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe string get_AnnouncementId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_FeedDefinitionId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_FeedProviderDefinitionId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x98, 0x8D, 0xA4, 0x70, 0x3D, 0x32, 0x19, 0x5F, 0xA1, 0xE1, 0xB6, 0x3F, 0xE3, 0x6E, 0xDB, 0xF2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("70A48D98-323D-5F19-A1E1-B63FE36EDBF2")]
    internal interface IFeedAnnouncementInvokedArgs : global::Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementInvokedArgs
    {
    }
}
#pragma warning restore CA1416
