//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.UI.Dispatching
{
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Dispatching.DispatcherExitDeferral))]
    [global::ABI.Microsoft.UI.Dispatching.DispatcherExitDeferralRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDispatcherExitDeferral))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    public sealed class DispatcherExitDeferral : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DispatcherExitDeferral>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Dispatching_IDispatcherExitDeferral => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Dispatching_DispatcherExitDeferral;
        private static IObjectReference _objRef_global__Microsoft_UI_Dispatching_DispatcherExitDeferral
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Dispatching_DispatcherExitDeferral;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Dispatching_DispatcherExitDeferral = ActivationFactory.Get("Microsoft.UI.Dispatching.DispatcherExitDeferral");
                }
            }
        }

        public DispatcherExitDeferral() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Dispatching_DispatcherExitDeferral, global::ABI.Microsoft.UI.Dispatching.IDispatcherExitDeferralMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static DispatcherExitDeferral FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DispatcherExitDeferral>.FromAbi(thisPtr);
        }

        internal DispatcherExitDeferral(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Dispatching.IDispatcherExitDeferralMethods.IID);

        }


        public static bool operator ==(DispatcherExitDeferral x, DispatcherExitDeferral y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DispatcherExitDeferral x, DispatcherExitDeferral y) => !(x == y);
        public bool Equals(DispatcherExitDeferral other) => this == other;
        public override bool Equals(object obj) => obj is DispatcherExitDeferral that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void Complete() => global::ABI.Microsoft.UI.Dispatching.IDispatcherExitDeferralMethods.Complete(_objRef_global__Microsoft_UI_Dispatching_IDispatcherExitDeferral);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Dispatching.DispatcherQueue))]
    [global::ABI.Microsoft.UI.Dispatching.DispatcherQueueRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDispatcherQueue))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class DispatcherQueue : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DispatcherQueue>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue => _inner;
        private volatile IObjectReference ___objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue2;
        private IObjectReference Make___objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Dispatching.IDispatcherQueue2Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue2;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue2 => ___objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue2 ?? Make___objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue2();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue3;
        private IObjectReference Make___objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue3()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue3, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Dispatching.IDispatcherQueue3Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue3;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue3 => ___objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue3 ?? Make___objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue3();



        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Dispatching.DispatcherQueue").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueStatics = ActivationFactory.Get("Microsoft.UI.Dispatching.DispatcherQueue", global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueStaticsMethods.IID);
                }
            }
        }

        public static DispatcherQueue GetForCurrentThread() => global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueStaticsMethods.GetForCurrentThread(_objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueStatics);

        public static DispatcherQueue FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DispatcherQueue>.FromAbi(thisPtr);
        }

        internal DispatcherQueue(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueMethods.IID);

        }


        public static bool operator ==(DispatcherQueue x, DispatcherQueue y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DispatcherQueue x, DispatcherQueue y) => !(x == y);
        public bool Equals(DispatcherQueue other) => this == other;
        public override bool Equals(object obj) => obj is DispatcherQueue that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public DispatcherQueueTimer CreateTimer() => global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueMethods.CreateTimer(_objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue);

        public bool TryEnqueue(DispatcherQueueHandler callback) => global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueMethods.TryEnqueue(_objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue, callback);

        public bool TryEnqueue(DispatcherQueuePriority priority, DispatcherQueueHandler callback) => global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueMethods.TryEnqueue(_objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue, priority, callback);

        public event global::Windows.Foundation.TypedEventHandler<DispatcherQueue, object> ShutdownCompleted
        {
            add => global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueMethods.Get_ShutdownCompleted2(_objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueMethods.Get_ShutdownCompleted2(_objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<DispatcherQueue, DispatcherQueueShutdownStartingEventArgs> ShutdownStarting
        {
            add => global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueMethods.Get_ShutdownStarting2(_objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueMethods.Get_ShutdownStarting2(_objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue, (IWinRTObject)this).Unsubscribe(value);
        }

        public void EnqueueEventLoopExit() => global::ABI.Microsoft.UI.Dispatching.IDispatcherQueue3Methods.EnqueueEventLoopExit(_objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue3);

        public void EnsureSystemDispatcherQueue() => global::ABI.Microsoft.UI.Dispatching.IDispatcherQueue3Methods.EnsureSystemDispatcherQueue(_objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue3);

        public void RunEventLoop() => global::ABI.Microsoft.UI.Dispatching.IDispatcherQueue3Methods.RunEventLoop(_objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue3);

        public void RunEventLoop(DispatcherRunOptions options, DispatcherExitDeferral deferral) => global::ABI.Microsoft.UI.Dispatching.IDispatcherQueue3Methods.RunEventLoop(_objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue3, options, deferral);

        public event global::Windows.Foundation.TypedEventHandler<DispatcherQueue, object> FrameworkShutdownCompleted
        {
            add => global::ABI.Microsoft.UI.Dispatching.IDispatcherQueue3Methods.Get_FrameworkShutdownCompleted2(_objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue3, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Dispatching.IDispatcherQueue3Methods.Get_FrameworkShutdownCompleted2(_objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue3, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<DispatcherQueue, DispatcherQueueShutdownStartingEventArgs> FrameworkShutdownStarting
        {
            add => global::ABI.Microsoft.UI.Dispatching.IDispatcherQueue3Methods.Get_FrameworkShutdownStarting2(_objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue3, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Dispatching.IDispatcherQueue3Methods.Get_FrameworkShutdownStarting2(_objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue3, (IWinRTObject)this).Unsubscribe(value);
        }

        public bool HasThreadAccess => global::ABI.Microsoft.UI.Dispatching.IDispatcherQueue2Methods.get_HasThreadAccess(_objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue2);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Dispatching.DispatcherQueueController))]
    [global::ABI.Microsoft.UI.Dispatching.DispatcherQueueControllerRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDispatcherQueueController))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class DispatcherQueueController : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DispatcherQueueController>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueController => _inner;
        private volatile IObjectReference ___objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueController2;
        private IObjectReference Make___objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueController2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueController2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueController2Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueController2;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueController2 => ___objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueController2 ?? Make___objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueController2();



        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Dispatching.DispatcherQueueController").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueControllerStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueControllerStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueControllerStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueControllerStatics = ActivationFactory.Get("Microsoft.UI.Dispatching.DispatcherQueueController", global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueControllerStaticsMethods.IID);
                }
            }
        }

        public static DispatcherQueueController CreateOnDedicatedThread() => global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueControllerStaticsMethods.CreateOnDedicatedThread(_objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueControllerStatics);

        public static DispatcherQueueController CreateOnCurrentThread() => global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueControllerStaticsMethods.CreateOnCurrentThread(_objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueControllerStatics);

        public static DispatcherQueueController FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DispatcherQueueController>.FromAbi(thisPtr);
        }

        internal DispatcherQueueController(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueControllerMethods.IID);

        }


        public static bool operator ==(DispatcherQueueController x, DispatcherQueueController y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DispatcherQueueController x, DispatcherQueueController y) => !(x == y);
        public bool Equals(DispatcherQueueController other) => this == other;
        public override bool Equals(object obj) => obj is DispatcherQueueController that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.IAsyncAction ShutdownQueueAsync() => global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueControllerMethods.ShutdownQueueAsync(_objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueController);

        public void ShutdownQueue() => global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueController2Methods.ShutdownQueue(_objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueController2);

        public DispatcherQueue DispatcherQueue => global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueControllerMethods.get_DispatcherQueue(_objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueController);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Dispatching.DispatcherQueueHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Dispatching.DispatcherQueueHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public delegate void DispatcherQueueHandler();
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<DispatcherQueuePriority>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public enum DispatcherQueuePriority : int
    {
        Low = unchecked((int)0xfffffff6),
        Normal = unchecked((int)0),
        High = unchecked((int)0xa),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs))]
    [global::ABI.Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDispatcherQueueShutdownStartingEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class DispatcherQueueShutdownStartingEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DispatcherQueueShutdownStartingEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueShutdownStartingEventArgs => _inner;


        public static DispatcherQueueShutdownStartingEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DispatcherQueueShutdownStartingEventArgs>.FromAbi(thisPtr);
        }

        internal DispatcherQueueShutdownStartingEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueShutdownStartingEventArgsMethods.IID);

        }


        public static bool operator ==(DispatcherQueueShutdownStartingEventArgs x, DispatcherQueueShutdownStartingEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DispatcherQueueShutdownStartingEventArgs x, DispatcherQueueShutdownStartingEventArgs y) => !(x == y);
        public bool Equals(DispatcherQueueShutdownStartingEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is DispatcherQueueShutdownStartingEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.Deferral GetDeferral() => global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueShutdownStartingEventArgsMethods.GetDeferral(_objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueShutdownStartingEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Dispatching.DispatcherQueueTimer))]
    [global::ABI.Microsoft.UI.Dispatching.DispatcherQueueTimerRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDispatcherQueueTimer))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class DispatcherQueueTimer : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DispatcherQueueTimer>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueTimer => _inner;


        public static DispatcherQueueTimer FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DispatcherQueueTimer>.FromAbi(thisPtr);
        }

        internal DispatcherQueueTimer(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueTimerMethods.IID);

        }


        public static bool operator ==(DispatcherQueueTimer x, DispatcherQueueTimer y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DispatcherQueueTimer x, DispatcherQueueTimer y) => !(x == y);
        public bool Equals(DispatcherQueueTimer other) => this == other;
        public override bool Equals(object obj) => obj is DispatcherQueueTimer that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void Start() => global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueTimerMethods.Start(_objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueTimer);

        public void Stop() => global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueTimerMethods.Stop(_objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueTimer);

        public event global::Windows.Foundation.TypedEventHandler<DispatcherQueueTimer, object> Tick
        {
            add => global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueTimerMethods.Get_Tick2(_objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueTimer, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueTimerMethods.Get_Tick2(_objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueTimer, (IWinRTObject)this).Unsubscribe(value);
        }

        public global::System.TimeSpan Interval
        {
            get => global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueTimerMethods.get_Interval(_objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueTimer);
            set => global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueTimerMethods.set_Interval(_objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueTimer, value);
        }

        public bool IsRepeating
        {
            get => global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueTimerMethods.get_IsRepeating(_objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueTimer);
            set => global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueTimerMethods.set_IsRepeating(_objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueTimer, value);
        }

        public bool IsRunning => global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueTimerMethods.get_IsRunning(_objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueTimer);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [FlagsAttribute]
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<DispatcherRunOptions>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    public enum DispatcherRunOptions : uint
    {
        None = unchecked((uint)0),
        ContinueOnQuit = unchecked((uint)0x1),
        QuitOnlyLocalLoop = unchecked((uint)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("910B5AAC-3310-563E-8418-F3005579729E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Dispatching.IDispatcherExitDeferral))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    internal interface IDispatcherExitDeferral
    {
        void Complete();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("F6EBF8FA-BE1C-5BF6-A467-73DA28738AE8")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Dispatching.IDispatcherQueue))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IDispatcherQueue
    {
        DispatcherQueueTimer CreateTimer();
        [global::Windows.Foundation.Metadata.Overload(@"TryEnqueue")]
        bool TryEnqueue(DispatcherQueueHandler callback);
        [global::Windows.Foundation.Metadata.Overload(@"TryEnqueueWithPriority")]
        bool TryEnqueue(DispatcherQueuePriority priority, DispatcherQueueHandler callback);
        event global::Windows.Foundation.TypedEventHandler<DispatcherQueue, object> ShutdownCompleted;
        event global::Windows.Foundation.TypedEventHandler<DispatcherQueue, DispatcherQueueShutdownStartingEventArgs> ShutdownStarting;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("0CF48751-F1AC-59B8-BA52-6CE7A1444D6F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Dispatching.IDispatcherQueue2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IDispatcherQueue2
    {
        bool HasThreadAccess { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("14A7A175-5C27-5A35-B079-21960CF764A8")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Dispatching.IDispatcherQueue3))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    internal interface IDispatcherQueue3
    {
        void EnqueueEventLoopExit();
        void EnsureSystemDispatcherQueue();
        [global::Windows.Foundation.Metadata.Overload(@"RunEventLoop")]
        void RunEventLoop();
        [global::Windows.Foundation.Metadata.Overload(@"RunEventLoopWithOptions")]
        void RunEventLoop(DispatcherRunOptions options, DispatcherExitDeferral deferral);
        event global::Windows.Foundation.TypedEventHandler<DispatcherQueue, object> FrameworkShutdownCompleted;
        event global::Windows.Foundation.TypedEventHandler<DispatcherQueue, DispatcherQueueShutdownStartingEventArgs> FrameworkShutdownStarting;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("BCE8178D-2183-584C-9E5B-F9366F6AE484")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueController))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IDispatcherQueueController
    {
        global::Windows.Foundation.IAsyncAction ShutdownQueueAsync();
        DispatcherQueue DispatcherQueue { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("4C68EE2A-1CB1-5591-A3A2-9B590B8F8B9A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueController2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    internal interface IDispatcherQueueController2
    {
        void ShutdownQueue();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("F18D6145-722B-593D-BCF2-A61E713F0037")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueControllerStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IDispatcherQueueControllerStatics
    {
        DispatcherQueueController CreateOnDedicatedThread();
        DispatcherQueueController CreateOnCurrentThread();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("32519BE5-072B-5660-A70E-8835C9B8157D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueShutdownStartingEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IDispatcherQueueShutdownStartingEventArgs
    {
        global::Windows.Foundation.Deferral GetDeferral();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("CD3382EA-A455-5124-B63A-CA40D34CA23C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IDispatcherQueueStatics
    {
        DispatcherQueue GetForCurrentThread();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("AD4D63FD-88FE-541F-AC11-BF2DC1ED2CE5")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueTimer))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IDispatcherQueueTimer
    {
        void Start();
        void Stop();
        global::System.TimeSpan Interval { get; set; }
        bool IsRepeating { get; set; }
        bool IsRunning { get; }
        event global::Windows.Foundation.TypedEventHandler<DispatcherQueueTimer, object> Tick;
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.UI.Dispatching
{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DispatcherExitDeferral
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Dispatching.DispatcherExitDeferral obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Dispatching.DispatcherExitDeferral>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Dispatching.IDispatcherExitDeferralMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Dispatching.DispatcherExitDeferral obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Dispatching.IDispatcherExitDeferralMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Dispatching.DispatcherExitDeferral FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Dispatching.DispatcherExitDeferral.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Dispatching.DispatcherExitDeferral obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherExitDeferral>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Dispatching.DispatcherExitDeferral[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherExitDeferral>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherExitDeferral>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Dispatching.DispatcherExitDeferral[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherExitDeferral>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Dispatching.DispatcherExitDeferral[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherExitDeferral>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Dispatching.DispatcherExitDeferral[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherExitDeferral>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherExitDeferral>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherExitDeferral>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DispatcherExitDeferralRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Dispatching.DispatcherExitDeferral(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DispatcherQueue
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Dispatching.DispatcherQueue obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Dispatching.DispatcherQueue>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Dispatching.DispatcherQueue obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Dispatching.DispatcherQueue FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Dispatching.DispatcherQueue.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Dispatching.DispatcherQueue obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueue>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Dispatching.DispatcherQueue[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueue>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueue>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Dispatching.DispatcherQueue[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueue>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Dispatching.DispatcherQueue[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueue>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Dispatching.DispatcherQueue[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueue>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueue>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueue>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DispatcherQueueRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Dispatching.DispatcherQueue(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DispatcherQueueController
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Dispatching.DispatcherQueueController obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Dispatching.DispatcherQueueController>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueControllerMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Dispatching.DispatcherQueueController obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueControllerMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Dispatching.DispatcherQueueController FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Dispatching.DispatcherQueueController.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Dispatching.DispatcherQueueController obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueController>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Dispatching.DispatcherQueueController[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueController>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueController>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Dispatching.DispatcherQueueController[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueController>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Dispatching.DispatcherQueueController[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueController>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Dispatching.DispatcherQueueController[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueController>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueController>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueController>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DispatcherQueueControllerRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Dispatching.DispatcherQueueController(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("2E0872A9-4E29-5F14-B688-FB96D5F9D5F8")]
    public static class DispatcherQueueHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA9, 0x72, 0x8, 0x2E, 0x29, 0x4E, 0x14, 0x5F, 0xB6, 0x88, 0xFB, 0x96, 0xD5, 0xF9, 0xD5, 0xF8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe DispatcherQueueHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(DispatcherQueueHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Dispatching.DispatcherQueueHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Dispatching.DispatcherQueueHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Dispatching.DispatcherQueueHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Dispatching.DispatcherQueueHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Dispatching.DispatcherQueueHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.Dispatching.DispatcherQueueHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Dispatching.DispatcherQueueHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke()
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr));
                global::System.GC.KeepAlive(_nativeDelegate);
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Dispatching.DispatcherQueueHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Dispatching.DispatcherQueueHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Dispatching.DispatcherQueueHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Dispatching.DispatcherQueueHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Dispatching.DispatcherQueueHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Dispatching.DispatcherQueueHandler>(thisPtr).Invoke()
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class DispatcherQueueHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Dispatching.DispatcherQueueHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = DispatcherQueueHandler.IID,
                Vtable = DispatcherQueueHandler.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DispatcherQueueShutdownStartingEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueShutdownStartingEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueShutdownStartingEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DispatcherQueueShutdownStartingEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DispatcherQueueTimer
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Dispatching.DispatcherQueueTimer obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Dispatching.DispatcherQueueTimer>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueTimerMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Dispatching.DispatcherQueueTimer obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Dispatching.IDispatcherQueueTimerMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Dispatching.DispatcherQueueTimer FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Dispatching.DispatcherQueueTimer.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Dispatching.DispatcherQueueTimer obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueTimer>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Dispatching.DispatcherQueueTimer[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueTimer>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueTimer>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Dispatching.DispatcherQueueTimer[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueTimer>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Dispatching.DispatcherQueueTimer[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueTimer>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Dispatching.DispatcherQueueTimer[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueTimer>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueTimer>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Dispatching.DispatcherQueueTimer>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DispatcherQueueTimerRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Dispatching.DispatcherQueueTimer(inspectable.ObjRef);
    }
    internal static class IDispatcherExitDeferralMethods
    {


        internal static unsafe void Complete(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[6](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xAC, 0x5A, 0xB, 0x91, 0x10, 0x33, 0x3E, 0x56, 0x84, 0x18, 0xF3, 0x0, 0x55, 0x79, 0x72, 0x9E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("910B5AAC-3310-563E-8418-F3005579729E")]
    internal interface IDispatcherExitDeferral : global::Microsoft.UI.Dispatching.IDispatcherExitDeferral
    {
    }
    internal static class IDispatcherQueueMethods
    {


        internal static unsafe global::Microsoft.UI.Dispatching.DispatcherQueueTimer CreateTimer(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Dispatching.DispatcherQueueTimer.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Dispatching.DispatcherQueueTimer.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool TryEnqueue(IObjectReference _obj, global::Microsoft.UI.Dispatching.DispatcherQueueHandler callback)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __callback = default;
            byte __retval = default;
            try
            {
                __callback = DispatcherQueueHandler.CreateMarshaler2(callback);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__callback), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__callback);
            }
        }

        internal static unsafe bool TryEnqueue(IObjectReference _obj, global::Microsoft.UI.Dispatching.DispatcherQueuePriority priority, global::Microsoft.UI.Dispatching.DispatcherQueueHandler callback)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __callback = default;
            byte __retval = default;
            try
            {
                __callback = DispatcherQueueHandler.CreateMarshaler2(callback);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Dispatching.DispatcherQueuePriority, IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, priority, MarshalInspectable<object>.GetAbi(__callback), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__callback);
            }
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Dispatching.DispatcherQueue, object>>> _ShutdownCompleted_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Dispatching.DispatcherQueue, object>>> MakeShutdownCompletedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ShutdownCompleted_, new(), null);
            return _ShutdownCompleted_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Dispatching.DispatcherQueue, object>>> _ShutdownCompleted => _ShutdownCompleted_ ?? MakeShutdownCompletedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Dispatching.DispatcherQueue, object>> Get_ShutdownCompleted2(IObjectReference _obj, object _thisObj)
        {
            return _ShutdownCompleted.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Dispatching_DispatcherQueue__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[11],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[12],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Dispatching.DispatcherQueue, global::Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs>>> _ShutdownStarting_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Dispatching.DispatcherQueue, global::Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs>>> MakeShutdownStartingTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ShutdownStarting_, new(), null);
            return _ShutdownStarting_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Dispatching.DispatcherQueue, global::Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs>>> _ShutdownStarting => _ShutdownStarting_ ?? MakeShutdownStartingTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Dispatching.DispatcherQueue, global::Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs>> Get_ShutdownStarting2(IObjectReference _obj, object _thisObj)
        {
            return _ShutdownStarting.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Dispatching_DispatcherQueue__global__Microsoft_UI_Dispatching_DispatcherQueueShutdownStartingEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[9],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[10],
                1);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFA, 0xF8, 0xEB, 0xF6, 0x1C, 0xBE, 0xF6, 0x5B, 0xA4, 0x67, 0x73, 0xDA, 0x28, 0x73, 0x8A, 0xE8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F6EBF8FA-BE1C-5BF6-A467-73DA28738AE8")]
    internal interface IDispatcherQueue : global::Microsoft.UI.Dispatching.IDispatcherQueue
    {
    }
    internal static class IDispatcherQueue2Methods
    {

        internal static unsafe bool get_HasThreadAccess(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x51, 0x87, 0xF4, 0xC, 0xAC, 0xF1, 0xB8, 0x59, 0xBA, 0x52, 0x6C, 0xE7, 0xA1, 0x44, 0x4D, 0x6F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("0CF48751-F1AC-59B8-BA52-6CE7A1444D6F")]
    internal interface IDispatcherQueue2 : global::Microsoft.UI.Dispatching.IDispatcherQueue2
    {
    }
    internal static class IDispatcherQueue3Methods
    {


        internal static unsafe void EnqueueEventLoopExit(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[6](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void EnsureSystemDispatcherQueue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[7](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void RunEventLoop(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[8](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void RunEventLoop(IObjectReference _obj, global::Microsoft.UI.Dispatching.DispatcherRunOptions options, global::Microsoft.UI.Dispatching.DispatcherExitDeferral deferral)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __deferral = default;
            try
            {
                __deferral = global::ABI.Microsoft.UI.Dispatching.DispatcherExitDeferral.CreateMarshaler2(deferral);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Dispatching.DispatcherRunOptions, IntPtr, int>**)ThisPtr)[9](ThisPtr, options, MarshalInspectable<object>.GetAbi(__deferral)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__deferral);
            }
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Dispatching.DispatcherQueue, object>>> _FrameworkShutdownCompleted_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Dispatching.DispatcherQueue, object>>> MakeFrameworkShutdownCompletedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _FrameworkShutdownCompleted_, new(), null);
            return _FrameworkShutdownCompleted_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Dispatching.DispatcherQueue, object>>> _FrameworkShutdownCompleted => _FrameworkShutdownCompleted_ ?? MakeFrameworkShutdownCompletedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Dispatching.DispatcherQueue, object>> Get_FrameworkShutdownCompleted2(IObjectReference _obj, object _thisObj)
        {
            return _FrameworkShutdownCompleted.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Dispatching_DispatcherQueue__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[12],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[13],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Dispatching.DispatcherQueue, global::Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs>>> _FrameworkShutdownStarting_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Dispatching.DispatcherQueue, global::Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs>>> MakeFrameworkShutdownStartingTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _FrameworkShutdownStarting_, new(), null);
            return _FrameworkShutdownStarting_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Dispatching.DispatcherQueue, global::Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs>>> _FrameworkShutdownStarting => _FrameworkShutdownStarting_ ?? MakeFrameworkShutdownStartingTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Dispatching.DispatcherQueue, global::Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs>> Get_FrameworkShutdownStarting2(IObjectReference _obj, object _thisObj)
        {
            return _FrameworkShutdownStarting.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Dispatching_DispatcherQueue__global__Microsoft_UI_Dispatching_DispatcherQueueShutdownStartingEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[10],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[11],
                1);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x75, 0xA1, 0xA7, 0x14, 0x27, 0x5C, 0x35, 0x5A, 0xB0, 0x79, 0x21, 0x96, 0xC, 0xF7, 0x64, 0xA8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("14A7A175-5C27-5A35-B079-21960CF764A8")]
    internal interface IDispatcherQueue3 : global::Microsoft.UI.Dispatching.IDispatcherQueue3
    {
    }
    internal static class IDispatcherQueueControllerMethods
    {


        internal static unsafe global::Windows.Foundation.IAsyncAction ShutdownQueueAsync(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Windows.Foundation.IAsyncAction>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncAction>.DisposeAbi(__retval);
            }
        }
        internal static unsafe global::Microsoft.UI.Dispatching.DispatcherQueue get_DispatcherQueue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Dispatching.DispatcherQueue.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Dispatching.DispatcherQueue.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x8D, 0x17, 0xE8, 0xBC, 0x83, 0x21, 0x4C, 0x58, 0x9E, 0x5B, 0xF9, 0x36, 0x6F, 0x6A, 0xE4, 0x84 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("BCE8178D-2183-584C-9E5B-F9366F6AE484")]
    internal interface IDispatcherQueueController : global::Microsoft.UI.Dispatching.IDispatcherQueueController
    {
    }
    internal static class IDispatcherQueueController2Methods
    {


        internal static unsafe void ShutdownQueue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[6](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x2A, 0xEE, 0x68, 0x4C, 0xB1, 0x1C, 0x91, 0x55, 0xA3, 0xA2, 0x9B, 0x59, 0xB, 0x8F, 0x8B, 0x9A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4C68EE2A-1CB1-5591-A3A2-9B590B8F8B9A")]
    internal interface IDispatcherQueueController2 : global::Microsoft.UI.Dispatching.IDispatcherQueueController2
    {
    }
    internal static class IDispatcherQueueControllerStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Dispatching.DispatcherQueueController CreateOnDedicatedThread(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Dispatching.DispatcherQueueController.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Dispatching.DispatcherQueueController.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Dispatching.DispatcherQueueController CreateOnCurrentThread(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Dispatching.DispatcherQueueController.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Dispatching.DispatcherQueueController.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x45, 0x61, 0x8D, 0xF1, 0x2B, 0x72, 0x3D, 0x59, 0xBC, 0xF2, 0xA6, 0x1E, 0x71, 0x3F, 0x0, 0x37 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F18D6145-722B-593D-BCF2-A61E713F0037")]
    internal interface IDispatcherQueueControllerStatics : global::Microsoft.UI.Dispatching.IDispatcherQueueControllerStatics
    {
    }
    internal static class IDispatcherQueueShutdownStartingEventArgsMethods
    {


        internal static unsafe global::Windows.Foundation.Deferral GetDeferral(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Foundation.Deferral.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Foundation.Deferral.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE5, 0x9B, 0x51, 0x32, 0x2B, 0x7, 0x60, 0x56, 0xA7, 0xE, 0x88, 0x35, 0xC9, 0xB8, 0x15, 0x7D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("32519BE5-072B-5660-A70E-8835C9B8157D")]
    internal interface IDispatcherQueueShutdownStartingEventArgs : global::Microsoft.UI.Dispatching.IDispatcherQueueShutdownStartingEventArgs
    {
    }
    internal static class IDispatcherQueueStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Dispatching.DispatcherQueue GetForCurrentThread(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Dispatching.DispatcherQueue.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Dispatching.DispatcherQueue.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xEA, 0x82, 0x33, 0xCD, 0x55, 0xA4, 0x24, 0x51, 0xB6, 0x3A, 0xCA, 0x40, 0xD3, 0x4C, 0xA2, 0x3C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("CD3382EA-A455-5124-B63A-CA40D34CA23C")]
    internal interface IDispatcherQueueStatics : global::Microsoft.UI.Dispatching.IDispatcherQueueStatics
    {
    }
    internal static class IDispatcherQueueTimerMethods
    {


        internal static unsafe void Start(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[11](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void Stop(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[12](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }
        internal static unsafe global::System.TimeSpan get_Interval(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.TimeSpan __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.TimeSpan*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.TimeSpan.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.TimeSpan.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Interval(IObjectReference _obj, global::System.TimeSpan value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.TimeSpan.Marshaler __value = default;
            try
            {
                __value = global::ABI.System.TimeSpan.CreateMarshaler(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.TimeSpan, int>**)ThisPtr)[7](ThisPtr, global::ABI.System.TimeSpan.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                global::ABI.System.TimeSpan.DisposeMarshaler(__value);
            }
        }

        internal static unsafe bool get_IsRepeating(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsRepeating(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[10](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsRunning(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Dispatching.DispatcherQueueTimer, object>>> _Tick_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Dispatching.DispatcherQueueTimer, object>>> MakeTickTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Tick_, new(), null);
            return _Tick_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Dispatching.DispatcherQueueTimer, object>>> _Tick => _Tick_ ?? MakeTickTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Dispatching.DispatcherQueueTimer, object>> Get_Tick2(IObjectReference _obj, object _thisObj)
        {
            return _Tick.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Dispatching_DispatcherQueueTimer__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[13],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[14],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFD, 0x63, 0x4D, 0xAD, 0xFE, 0x88, 0x1F, 0x54, 0xAC, 0x11, 0xBF, 0x2D, 0xC1, 0xED, 0x2C, 0xE5 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("AD4D63FD-88FE-541F-AC11-BF2DC1ED2CE5")]
    internal interface IDispatcherQueueTimer : global::Microsoft.UI.Dispatching.IDispatcherQueueTimer
    {
    }
}
#pragma warning restore CA1416
