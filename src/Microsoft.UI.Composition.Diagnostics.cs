//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.UI.Composition.Diagnostics
{
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Composition.Diagnostics.CompositionDebugHeatMaps))]
    [global::ABI.Microsoft.UI.Composition.Diagnostics.CompositionDebugHeatMapsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICompositionDebugHeatMaps))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class CompositionDebugHeatMaps : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CompositionDebugHeatMaps>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Composition_Diagnostics_ICompositionDebugHeatMaps => _inner;


        public static CompositionDebugHeatMaps FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CompositionDebugHeatMaps>.FromAbi(thisPtr);
        }

        internal CompositionDebugHeatMaps(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Composition.Diagnostics.ICompositionDebugHeatMapsMethods.IID);

        }


        public static bool operator ==(CompositionDebugHeatMaps x, CompositionDebugHeatMaps y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CompositionDebugHeatMaps x, CompositionDebugHeatMaps y) => !(x == y);
        public bool Equals(CompositionDebugHeatMaps other) => this == other;
        public override bool Equals(object obj) => obj is CompositionDebugHeatMaps that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void Hide(global::Microsoft.UI.Composition.Visual subtree) => global::ABI.Microsoft.UI.Composition.Diagnostics.ICompositionDebugHeatMapsMethods.Hide(_objRef_global__Microsoft_UI_Composition_Diagnostics_ICompositionDebugHeatMaps, subtree);

        public void ShowMemoryUsage(global::Microsoft.UI.Composition.Visual subtree) => global::ABI.Microsoft.UI.Composition.Diagnostics.ICompositionDebugHeatMapsMethods.ShowMemoryUsage(_objRef_global__Microsoft_UI_Composition_Diagnostics_ICompositionDebugHeatMaps, subtree);

        public void ShowOverdraw(global::Microsoft.UI.Composition.Visual subtree, CompositionDebugOverdrawContentKinds contentKinds) => global::ABI.Microsoft.UI.Composition.Diagnostics.ICompositionDebugHeatMapsMethods.ShowOverdraw(_objRef_global__Microsoft_UI_Composition_Diagnostics_ICompositionDebugHeatMaps, subtree, contentKinds);

        public void ShowRedraw(global::Microsoft.UI.Composition.Visual subtree) => global::ABI.Microsoft.UI.Composition.Diagnostics.ICompositionDebugHeatMapsMethods.ShowRedraw(_objRef_global__Microsoft_UI_Composition_Diagnostics_ICompositionDebugHeatMaps, subtree);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [FlagsAttribute]
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CompositionDebugOverdrawContentKinds>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public enum CompositionDebugOverdrawContentKinds : uint
    {
        None = unchecked((uint)0),
        OffscreenRendered = unchecked((uint)0x1),
        Colors = unchecked((uint)0x2),
        Effects = unchecked((uint)0x4),
        Shadows = unchecked((uint)0x8),
        Lights = unchecked((uint)0x10),
        Surfaces = unchecked((uint)0x20),
        SwapChains = unchecked((uint)0x40),
        All = unchecked((uint)0xffffffff),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Composition.Diagnostics.CompositionDebugSettings))]
    [global::ABI.Microsoft.UI.Composition.Diagnostics.CompositionDebugSettingsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICompositionDebugSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class CompositionDebugSettings : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CompositionDebugSettings>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Composition_Diagnostics_ICompositionDebugSettings => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Composition.Diagnostics.CompositionDebugSettings").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Composition_Diagnostics_ICompositionDebugSettingsStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Composition_Diagnostics_ICompositionDebugSettingsStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Composition_Diagnostics_ICompositionDebugSettingsStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Composition_Diagnostics_ICompositionDebugSettingsStatics = ActivationFactory.Get("Microsoft.UI.Composition.Diagnostics.CompositionDebugSettings", global::ABI.Microsoft.UI.Composition.Diagnostics.ICompositionDebugSettingsStaticsMethods.IID);
                }
            }
        }

        public static CompositionDebugSettings TryGetSettings(global::Microsoft.UI.Composition.Compositor compositor) => global::ABI.Microsoft.UI.Composition.Diagnostics.ICompositionDebugSettingsStaticsMethods.TryGetSettings(_objRef_global__Microsoft_UI_Composition_Diagnostics_ICompositionDebugSettingsStatics, compositor);

        public static CompositionDebugSettings FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CompositionDebugSettings>.FromAbi(thisPtr);
        }

        internal CompositionDebugSettings(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Composition.Diagnostics.ICompositionDebugSettingsMethods.IID);

        }


        public static bool operator ==(CompositionDebugSettings x, CompositionDebugSettings y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CompositionDebugSettings x, CompositionDebugSettings y) => !(x == y);
        public bool Equals(CompositionDebugSettings other) => this == other;
        public override bool Equals(object obj) => obj is CompositionDebugSettings that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public CompositionDebugHeatMaps HeatMaps => global::ABI.Microsoft.UI.Composition.Diagnostics.ICompositionDebugSettingsMethods.get_HeatMaps(_objRef_global__Microsoft_UI_Composition_Diagnostics_ICompositionDebugSettings);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("815016B8-F645-5C55-87B5-FE2167282B6F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Composition.Diagnostics.ICompositionDebugHeatMaps))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface ICompositionDebugHeatMaps
    {
        void Hide(global::Microsoft.UI.Composition.Visual subtree);
        void ShowMemoryUsage(global::Microsoft.UI.Composition.Visual subtree);
        void ShowOverdraw(global::Microsoft.UI.Composition.Visual subtree, CompositionDebugOverdrawContentKinds contentKinds);
        void ShowRedraw(global::Microsoft.UI.Composition.Visual subtree);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("F4C0C0F6-7F5F-5014-A0D6-C8C7EEECACE6")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Composition.Diagnostics.ICompositionDebugSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface ICompositionDebugSettings
    {
        CompositionDebugHeatMaps HeatMaps { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("B56F8AAB-2B8C-51AA-B974-10E5C517F50E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Composition.Diagnostics.ICompositionDebugSettingsStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface ICompositionDebugSettingsStatics
    {
        CompositionDebugSettings TryGetSettings(global::Microsoft.UI.Composition.Compositor compositor);
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.UI.Composition.Diagnostics
{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CompositionDebugHeatMaps
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Composition.Diagnostics.CompositionDebugHeatMaps obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Composition.Diagnostics.CompositionDebugHeatMaps>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Composition.Diagnostics.ICompositionDebugHeatMapsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Composition.Diagnostics.CompositionDebugHeatMaps obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Composition.Diagnostics.ICompositionDebugHeatMapsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Composition.Diagnostics.CompositionDebugHeatMaps FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Composition.Diagnostics.CompositionDebugHeatMaps.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Composition.Diagnostics.CompositionDebugHeatMaps obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Composition.Diagnostics.CompositionDebugHeatMaps>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Composition.Diagnostics.CompositionDebugHeatMaps[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Composition.Diagnostics.CompositionDebugHeatMaps>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Composition.Diagnostics.CompositionDebugHeatMaps>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Composition.Diagnostics.CompositionDebugHeatMaps[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Composition.Diagnostics.CompositionDebugHeatMaps>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Composition.Diagnostics.CompositionDebugHeatMaps[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Composition.Diagnostics.CompositionDebugHeatMaps>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Composition.Diagnostics.CompositionDebugHeatMaps[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Composition.Diagnostics.CompositionDebugHeatMaps>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Composition.Diagnostics.CompositionDebugHeatMaps>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Composition.Diagnostics.CompositionDebugHeatMaps>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CompositionDebugHeatMapsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Composition.Diagnostics.CompositionDebugHeatMaps(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CompositionDebugSettings
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Composition.Diagnostics.CompositionDebugSettings obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Composition.Diagnostics.CompositionDebugSettings>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Composition.Diagnostics.ICompositionDebugSettingsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Composition.Diagnostics.CompositionDebugSettings obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Composition.Diagnostics.ICompositionDebugSettingsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Composition.Diagnostics.CompositionDebugSettings FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Composition.Diagnostics.CompositionDebugSettings.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Composition.Diagnostics.CompositionDebugSettings obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Composition.Diagnostics.CompositionDebugSettings>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Composition.Diagnostics.CompositionDebugSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Composition.Diagnostics.CompositionDebugSettings>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Composition.Diagnostics.CompositionDebugSettings>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Composition.Diagnostics.CompositionDebugSettings[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Composition.Diagnostics.CompositionDebugSettings>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Composition.Diagnostics.CompositionDebugSettings[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Composition.Diagnostics.CompositionDebugSettings>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Composition.Diagnostics.CompositionDebugSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Composition.Diagnostics.CompositionDebugSettings>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Composition.Diagnostics.CompositionDebugSettings>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Composition.Diagnostics.CompositionDebugSettings>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CompositionDebugSettingsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Composition.Diagnostics.CompositionDebugSettings(inspectable.ObjRef);
    }
    internal static class ICompositionDebugHeatMapsMethods
    {


        internal static unsafe void Hide(IObjectReference _obj, global::Microsoft.UI.Composition.Visual subtree)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __subtree = default;
            try
            {
                __subtree = global::ABI.Microsoft.UI.Composition.Visual.CreateMarshaler2(subtree);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__subtree)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__subtree);
            }
        }

        internal static unsafe void ShowMemoryUsage(IObjectReference _obj, global::Microsoft.UI.Composition.Visual subtree)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __subtree = default;
            try
            {
                __subtree = global::ABI.Microsoft.UI.Composition.Visual.CreateMarshaler2(subtree);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__subtree)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__subtree);
            }
        }

        internal static unsafe void ShowOverdraw(IObjectReference _obj, global::Microsoft.UI.Composition.Visual subtree, global::Microsoft.UI.Composition.Diagnostics.CompositionDebugOverdrawContentKinds contentKinds)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __subtree = default;
            try
            {
                __subtree = global::ABI.Microsoft.UI.Composition.Visual.CreateMarshaler2(subtree);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Microsoft.UI.Composition.Diagnostics.CompositionDebugOverdrawContentKinds, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__subtree), contentKinds));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__subtree);
            }
        }

        internal static unsafe void ShowRedraw(IObjectReference _obj, global::Microsoft.UI.Composition.Visual subtree)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __subtree = default;
            try
            {
                __subtree = global::ABI.Microsoft.UI.Composition.Visual.CreateMarshaler2(subtree);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__subtree)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__subtree);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB8, 0x16, 0x50, 0x81, 0x45, 0xF6, 0x55, 0x5C, 0x87, 0xB5, 0xFE, 0x21, 0x67, 0x28, 0x2B, 0x6F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("815016B8-F645-5C55-87B5-FE2167282B6F")]
    internal interface ICompositionDebugHeatMaps : global::Microsoft.UI.Composition.Diagnostics.ICompositionDebugHeatMaps
    {
    }
    internal static class ICompositionDebugSettingsMethods
    {

        internal static unsafe global::Microsoft.UI.Composition.Diagnostics.CompositionDebugHeatMaps get_HeatMaps(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Composition.Diagnostics.CompositionDebugHeatMaps.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Composition.Diagnostics.CompositionDebugHeatMaps.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF6, 0xC0, 0xC0, 0xF4, 0x5F, 0x7F, 0x14, 0x50, 0xA0, 0xD6, 0xC8, 0xC7, 0xEE, 0xEC, 0xAC, 0xE6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F4C0C0F6-7F5F-5014-A0D6-C8C7EEECACE6")]
    internal interface ICompositionDebugSettings : global::Microsoft.UI.Composition.Diagnostics.ICompositionDebugSettings
    {
    }
    internal static class ICompositionDebugSettingsStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Composition.Diagnostics.CompositionDebugSettings TryGetSettings(IObjectReference _obj, global::Microsoft.UI.Composition.Compositor compositor)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __compositor = default;
            IntPtr __retval = default;
            try
            {
                __compositor = global::ABI.Microsoft.UI.Composition.Compositor.CreateMarshaler2(compositor);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__compositor), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Composition.Diagnostics.CompositionDebugSettings.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__compositor);
                global::ABI.Microsoft.UI.Composition.Diagnostics.CompositionDebugSettings.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xAB, 0x8A, 0x6F, 0xB5, 0x8C, 0x2B, 0xAA, 0x51, 0xB9, 0x74, 0x10, 0xE5, 0xC5, 0x17, 0xF5, 0xE };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B56F8AAB-2B8C-51AA-B974-10E5C517F50E")]
    internal interface ICompositionDebugSettingsStatics : global::Microsoft.UI.Composition.Diagnostics.ICompositionDebugSettingsStatics
    {
    }
}
#pragma warning restore CA1416
