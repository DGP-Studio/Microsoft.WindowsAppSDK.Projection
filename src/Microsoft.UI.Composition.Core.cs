//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.UI.Composition.Core
{
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Composition.Core.CompositorController))]
    [global::ABI.Microsoft.UI.Composition.Core.CompositorControllerRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICompositorController))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class CompositorController : global::System.IDisposable, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CompositorController>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Composition_Core_ICompositorController => _inner;
        private volatile IObjectReference ___objRef_global__System_IDisposable;
        private IObjectReference Make___objRef_global__System_IDisposable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_IDisposable, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.IDisposableMethods.IID), null);
            return ___objRef_global__System_IDisposable;
        }
        private IObjectReference _objRef_global__System_IDisposable => ___objRef_global__System_IDisposable ?? Make___objRef_global__System_IDisposable();



        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Composition_Core_CompositorController;
        private static IObjectReference _objRef_global__Microsoft_UI_Composition_Core_CompositorController
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Composition_Core_CompositorController;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Composition_Core_CompositorController = ActivationFactory.Get("Microsoft.UI.Composition.Core.CompositorController");
                }
            }
        }

        public CompositorController() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Composition_Core_CompositorController, global::ABI.Microsoft.UI.Composition.Core.ICompositorControllerMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static CompositorController FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CompositorController>.FromAbi(thisPtr);
        }

        internal CompositorController(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Composition.Core.ICompositorControllerMethods.IID);

        }


        public static bool operator ==(CompositorController x, CompositorController y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CompositorController x, CompositorController y) => !(x == y);
        public bool Equals(CompositorController other) => this == other;
        public override bool Equals(object obj) => obj is CompositorController that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void Commit() => global::ABI.Microsoft.UI.Composition.Core.ICompositorControllerMethods.Commit(_objRef_global__Microsoft_UI_Composition_Core_ICompositorController);

        public global::Windows.Foundation.IAsyncAction EnsurePreviousCommitCompletedAsync() => global::ABI.Microsoft.UI.Composition.Core.ICompositorControllerMethods.EnsurePreviousCommitCompletedAsync(_objRef_global__Microsoft_UI_Composition_Core_ICompositorController);

        public event global::Windows.Foundation.TypedEventHandler<CompositorController, object> CommitNeeded
        {
            add => global::ABI.Microsoft.UI.Composition.Core.ICompositorControllerMethods.Get_CommitNeeded2(_objRef_global__Microsoft_UI_Composition_Core_ICompositorController, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Composition.Core.ICompositorControllerMethods.Get_CommitNeeded2(_objRef_global__Microsoft_UI_Composition_Core_ICompositorController, (IWinRTObject)this).Unsubscribe(value);
        }

        public void Dispose() => global::ABI.System.IDisposableMethods.Dispose(_objRef_global__System_IDisposable);

        public global::Microsoft.UI.Composition.Compositor Compositor => global::ABI.Microsoft.UI.Composition.Core.ICompositorControllerMethods.get_Compositor(_objRef_global__Microsoft_UI_Composition_Core_ICompositorController);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("CC107CDC-558F-5D1A-96A5-A735AC04386B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Composition.Core.ICompositorController))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface ICompositorController
    {
        void Commit();
        global::Windows.Foundation.IAsyncAction EnsurePreviousCommitCompletedAsync();
        global::Microsoft.UI.Composition.Compositor Compositor { get; }
        event global::Windows.Foundation.TypedEventHandler<CompositorController, object> CommitNeeded;
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.UI.Composition.Core
{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CompositorController
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Composition.Core.CompositorController obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Composition.Core.CompositorController>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Composition.Core.ICompositorControllerMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Composition.Core.CompositorController obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Composition.Core.ICompositorControllerMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Composition.Core.CompositorController FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Composition.Core.CompositorController.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Composition.Core.CompositorController obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Composition.Core.CompositorController>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Composition.Core.CompositorController[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Composition.Core.CompositorController>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Composition.Core.CompositorController>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Composition.Core.CompositorController[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Composition.Core.CompositorController>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Composition.Core.CompositorController[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Composition.Core.CompositorController>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Composition.Core.CompositorController[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Composition.Core.CompositorController>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Composition.Core.CompositorController>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Composition.Core.CompositorController>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CompositorControllerRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Composition.Core.CompositorController(inspectable.ObjRef);
    }
    internal static class ICompositorControllerMethods
    {


        internal static unsafe void Commit(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[7](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.Foundation.IAsyncAction EnsurePreviousCommitCompletedAsync(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Windows.Foundation.IAsyncAction>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncAction>.DisposeAbi(__retval);
            }
        }
        internal static unsafe global::Microsoft.UI.Composition.Compositor get_Compositor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Composition.Compositor.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Composition.Compositor.DisposeAbi(__retval);
            }
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Composition.Core.CompositorController, object>>> _CommitNeeded_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Composition.Core.CompositorController, object>>> MakeCommitNeededTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _CommitNeeded_, new(), null);
            return _CommitNeeded_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Composition.Core.CompositorController, object>>> _CommitNeeded => _CommitNeeded_ ?? MakeCommitNeededTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Composition.Core.CompositorController, object>> Get_CommitNeeded2(IObjectReference _obj, object _thisObj)
        {
            return _CommitNeeded.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Composition_Core_CompositorController__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[9],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[10],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xDC, 0x7C, 0x10, 0xCC, 0x8F, 0x55, 0x1A, 0x5D, 0x96, 0xA5, 0xA7, 0x35, 0xAC, 0x4, 0x38, 0x6B };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("CC107CDC-558F-5D1A-96A5-A735AC04386B")]
    internal interface ICompositorController : global::Microsoft.UI.Composition.Core.ICompositorController
    {
    }
}
#pragma warning restore CA1416
