//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.UI.Input
{
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.CharacterReceivedEventArgs))]
    [global::ABI.Microsoft.UI.Input.CharacterReceivedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICharacterReceivedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    public sealed class CharacterReceivedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CharacterReceivedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_ICharacterReceivedEventArgs => _inner;


        public static CharacterReceivedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CharacterReceivedEventArgs>.FromAbi(thisPtr);
        }

        internal CharacterReceivedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.ICharacterReceivedEventArgsMethods.IID);

        }


        public static bool operator ==(CharacterReceivedEventArgs x, CharacterReceivedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CharacterReceivedEventArgs x, CharacterReceivedEventArgs y) => !(x == y);
        public bool Equals(CharacterReceivedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CharacterReceivedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Input.ICharacterReceivedEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Input_ICharacterReceivedEventArgs);
            set => global::ABI.Microsoft.UI.Input.ICharacterReceivedEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Input_ICharacterReceivedEventArgs, value);
        }

        public uint KeyCode => global::ABI.Microsoft.UI.Input.ICharacterReceivedEventArgsMethods.get_KeyCode(_objRef_global__Microsoft_UI_Input_ICharacterReceivedEventArgs);

        public PhysicalKeyStatus KeyStatus => global::ABI.Microsoft.UI.Input.ICharacterReceivedEventArgsMethods.get_KeyStatus(_objRef_global__Microsoft_UI_Input_ICharacterReceivedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.ContextMenuKeyEventArgs))]
    [global::ABI.Microsoft.UI.Input.ContextMenuKeyEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IContextMenuKeyEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    public sealed class ContextMenuKeyEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ContextMenuKeyEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IContextMenuKeyEventArgs => _inner;


        public static ContextMenuKeyEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ContextMenuKeyEventArgs>.FromAbi(thisPtr);
        }

        internal ContextMenuKeyEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IContextMenuKeyEventArgsMethods.IID);

        }


        public static bool operator ==(ContextMenuKeyEventArgs x, ContextMenuKeyEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ContextMenuKeyEventArgs x, ContextMenuKeyEventArgs y) => !(x == y);
        public bool Equals(ContextMenuKeyEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is ContextMenuKeyEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Input.IContextMenuKeyEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Input_IContextMenuKeyEventArgs);
            set => global::ABI.Microsoft.UI.Input.IContextMenuKeyEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Input_IContextMenuKeyEventArgs, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI", "struct(Microsoft.UI.Input.CrossSlideThresholds;f4;f4;f4;f4)")][global::WinRT.WindowsRuntimeHelperType][global::WinRT.WinRTExposedType(typeof(global::WinRT.StructTypeDetails<CrossSlideThresholds, CrossSlideThresholds>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public struct CrossSlideThresholds: IEquatable<CrossSlideThresholds>
    {
        public float SelectionStart;
        public float SpeedBumpStart;
        public float SpeedBumpEnd;
        public float RearrangeStart;

        public CrossSlideThresholds(float _SelectionStart, float _SpeedBumpStart, float _SpeedBumpEnd, float _RearrangeStart)
        {
            SelectionStart = _SelectionStart; SpeedBumpStart = _SpeedBumpStart; SpeedBumpEnd = _SpeedBumpEnd; RearrangeStart = _RearrangeStart; 
        }

        public static bool operator ==(CrossSlideThresholds x, CrossSlideThresholds y) => x.SelectionStart == y.SelectionStart && x.SpeedBumpStart == y.SpeedBumpStart && x.SpeedBumpEnd == y.SpeedBumpEnd && x.RearrangeStart == y.RearrangeStart;
        public static bool operator !=(CrossSlideThresholds x, CrossSlideThresholds y) => !(x == y);
        public bool Equals(CrossSlideThresholds other) => this == other;
        public override bool Equals(object obj) => obj is CrossSlideThresholds that && this == that;
        public override int GetHashCode() => SelectionStart.GetHashCode() ^ SpeedBumpStart.GetHashCode() ^ SpeedBumpEnd.GetHashCode() ^ RearrangeStart.GetHashCode();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.CrossSlidingEventArgs))]
    [global::ABI.Microsoft.UI.Input.CrossSlidingEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICrossSlidingEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class CrossSlidingEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CrossSlidingEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_ICrossSlidingEventArgs => _inner;


        public static CrossSlidingEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CrossSlidingEventArgs>.FromAbi(thisPtr);
        }

        internal CrossSlidingEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.ICrossSlidingEventArgsMethods.IID);

        }


        public static bool operator ==(CrossSlidingEventArgs x, CrossSlidingEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CrossSlidingEventArgs x, CrossSlidingEventArgs y) => !(x == y);
        public bool Equals(CrossSlidingEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CrossSlidingEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public CrossSlidingState CrossSlidingState => global::ABI.Microsoft.UI.Input.ICrossSlidingEventArgsMethods.get_CrossSlidingState(_objRef_global__Microsoft_UI_Input_ICrossSlidingEventArgs);

        public PointerDeviceType PointerDeviceType => global::ABI.Microsoft.UI.Input.ICrossSlidingEventArgsMethods.get_PointerDeviceType(_objRef_global__Microsoft_UI_Input_ICrossSlidingEventArgs);

        public global::Windows.Foundation.Point Position => global::ABI.Microsoft.UI.Input.ICrossSlidingEventArgsMethods.get_Position(_objRef_global__Microsoft_UI_Input_ICrossSlidingEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CrossSlidingState>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public enum CrossSlidingState : int
    {
        Started = unchecked((int)0),
        Dragging = unchecked((int)0x1),
        Selecting = unchecked((int)0x2),
        SelectSpeedBumping = unchecked((int)0x3),
        SpeedBumping = unchecked((int)0x4),
        Rearranging = unchecked((int)0x5),
        Completed = unchecked((int)0x6),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.DraggingEventArgs))]
    [global::ABI.Microsoft.UI.Input.DraggingEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDraggingEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class DraggingEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DraggingEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IDraggingEventArgs => _inner;


        public static DraggingEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DraggingEventArgs>.FromAbi(thisPtr);
        }

        internal DraggingEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IDraggingEventArgsMethods.IID);

        }


        public static bool operator ==(DraggingEventArgs x, DraggingEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DraggingEventArgs x, DraggingEventArgs y) => !(x == y);
        public bool Equals(DraggingEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is DraggingEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public DraggingState DraggingState => global::ABI.Microsoft.UI.Input.IDraggingEventArgsMethods.get_DraggingState(_objRef_global__Microsoft_UI_Input_IDraggingEventArgs);

        public PointerDeviceType PointerDeviceType => global::ABI.Microsoft.UI.Input.IDraggingEventArgsMethods.get_PointerDeviceType(_objRef_global__Microsoft_UI_Input_IDraggingEventArgs);

        public global::Windows.Foundation.Point Position => global::ABI.Microsoft.UI.Input.IDraggingEventArgsMethods.get_Position(_objRef_global__Microsoft_UI_Input_IDraggingEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<DraggingState>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public enum DraggingState : int
    {
        Started = unchecked((int)0),
        Continuing = unchecked((int)0x1),
        Completed = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.EnteredMoveSizeEventArgs))]
    [global::ABI.Microsoft.UI.Input.EnteredMoveSizeEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IEnteredMoveSizeEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65542u)]
    public sealed class EnteredMoveSizeEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<EnteredMoveSizeEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IEnteredMoveSizeEventArgs => _inner;


        public static EnteredMoveSizeEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<EnteredMoveSizeEventArgs>.FromAbi(thisPtr);
        }

        internal EnteredMoveSizeEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IEnteredMoveSizeEventArgsMethods.IID);

        }


        public static bool operator ==(EnteredMoveSizeEventArgs x, EnteredMoveSizeEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(EnteredMoveSizeEventArgs x, EnteredMoveSizeEventArgs y) => !(x == y);
        public bool Equals(EnteredMoveSizeEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is EnteredMoveSizeEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public MoveSizeOperation MoveSizeOperation => global::ABI.Microsoft.UI.Input.IEnteredMoveSizeEventArgsMethods.get_MoveSizeOperation(_objRef_global__Microsoft_UI_Input_IEnteredMoveSizeEventArgs);

        public global::Windows.Graphics.PointInt32 PointerScreenPoint => global::ABI.Microsoft.UI.Input.IEnteredMoveSizeEventArgsMethods.get_PointerScreenPoint(_objRef_global__Microsoft_UI_Input_IEnteredMoveSizeEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.EnteringMoveSizeEventArgs))]
    [global::ABI.Microsoft.UI.Input.EnteringMoveSizeEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IEnteringMoveSizeEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65542u)]
    public sealed class EnteringMoveSizeEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<EnteringMoveSizeEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IEnteringMoveSizeEventArgs => _inner;


        public static EnteringMoveSizeEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<EnteringMoveSizeEventArgs>.FromAbi(thisPtr);
        }

        internal EnteringMoveSizeEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IEnteringMoveSizeEventArgsMethods.IID);

        }


        public static bool operator ==(EnteringMoveSizeEventArgs x, EnteringMoveSizeEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(EnteringMoveSizeEventArgs x, EnteringMoveSizeEventArgs y) => !(x == y);
        public bool Equals(EnteringMoveSizeEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is EnteringMoveSizeEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public MoveSizeOperation MoveSizeOperation => global::ABI.Microsoft.UI.Input.IEnteringMoveSizeEventArgsMethods.get_MoveSizeOperation(_objRef_global__Microsoft_UI_Input_IEnteringMoveSizeEventArgs);

        public global::Microsoft.UI.WindowId MoveSizeWindowId
        {
            get => global::ABI.Microsoft.UI.Input.IEnteringMoveSizeEventArgsMethods.get_MoveSizeWindowId(_objRef_global__Microsoft_UI_Input_IEnteringMoveSizeEventArgs);
            set => global::ABI.Microsoft.UI.Input.IEnteringMoveSizeEventArgsMethods.set_MoveSizeWindowId(_objRef_global__Microsoft_UI_Input_IEnteringMoveSizeEventArgs, value);
        }

        public global::Windows.Graphics.PointInt32 PointerScreenPoint => global::ABI.Microsoft.UI.Input.IEnteringMoveSizeEventArgsMethods.get_PointerScreenPoint(_objRef_global__Microsoft_UI_Input_IEnteringMoveSizeEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.ExitedMoveSizeEventArgs))]
    [global::ABI.Microsoft.UI.Input.ExitedMoveSizeEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IExitedMoveSizeEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65542u)]
    public sealed class ExitedMoveSizeEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ExitedMoveSizeEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IExitedMoveSizeEventArgs => _inner;


        public static ExitedMoveSizeEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ExitedMoveSizeEventArgs>.FromAbi(thisPtr);
        }

        internal ExitedMoveSizeEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IExitedMoveSizeEventArgsMethods.IID);

        }


        public static bool operator ==(ExitedMoveSizeEventArgs x, ExitedMoveSizeEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ExitedMoveSizeEventArgs x, ExitedMoveSizeEventArgs y) => !(x == y);
        public bool Equals(ExitedMoveSizeEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is ExitedMoveSizeEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public MoveSizeOperation MoveSizeOperation => global::ABI.Microsoft.UI.Input.IExitedMoveSizeEventArgsMethods.get_MoveSizeOperation(_objRef_global__Microsoft_UI_Input_IExitedMoveSizeEventArgs);

        public global::Windows.Graphics.PointInt32 PointerScreenPoint => global::ABI.Microsoft.UI.Input.IExitedMoveSizeEventArgsMethods.get_PointerScreenPoint(_objRef_global__Microsoft_UI_Input_IExitedMoveSizeEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.FocusChangedEventArgs))]
    [global::ABI.Microsoft.UI.Input.FocusChangedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IFocusChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    public sealed class FocusChangedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<FocusChangedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IFocusChangedEventArgs => _inner;


        public static FocusChangedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<FocusChangedEventArgs>.FromAbi(thisPtr);
        }

        internal FocusChangedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IFocusChangedEventArgsMethods.IID);

        }


        public static bool operator ==(FocusChangedEventArgs x, FocusChangedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(FocusChangedEventArgs x, FocusChangedEventArgs y) => !(x == y);
        public bool Equals(FocusChangedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is FocusChangedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Input.IFocusChangedEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Input_IFocusChangedEventArgs);
            set => global::ABI.Microsoft.UI.Input.IFocusChangedEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Input_IFocusChangedEventArgs, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<FocusNavigationReason>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65541u)]
    public enum FocusNavigationReason : int
    {
        Programmatic = unchecked((int)0),
        Restore = unchecked((int)0x1),
        First = unchecked((int)0x2),
        Last = unchecked((int)0x3),
        Left = unchecked((int)0x4),
        Up = unchecked((int)0x5),
        Right = unchecked((int)0x6),
        Down = unchecked((int)0x7),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.FocusNavigationRequest))]
    [global::ABI.Microsoft.UI.Input.FocusNavigationRequestRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IFocusNavigationRequest))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65541u)]
    public sealed class FocusNavigationRequest : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<FocusNavigationRequest>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IFocusNavigationRequest => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Input.FocusNavigationRequest").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Input_IFocusNavigationRequestStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Input_IFocusNavigationRequestStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Input_IFocusNavigationRequestStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Input_IFocusNavigationRequestStatics = ActivationFactory.Get("Microsoft.UI.Input.FocusNavigationRequest", global::ABI.Microsoft.UI.Input.IFocusNavigationRequestStaticsMethods.IID);
                }
            }
        }

        public static FocusNavigationRequest Create(FocusNavigationReason reason) => global::ABI.Microsoft.UI.Input.IFocusNavigationRequestStaticsMethods.Create(_objRef_global__Microsoft_UI_Input_IFocusNavigationRequestStatics, reason);

        public static FocusNavigationRequest Create(FocusNavigationReason reason, global::Windows.Foundation.Rect hintRect) => global::ABI.Microsoft.UI.Input.IFocusNavigationRequestStaticsMethods.Create(_objRef_global__Microsoft_UI_Input_IFocusNavigationRequestStatics, reason, hintRect);

        public static FocusNavigationRequest Create(FocusNavigationReason reason, global::Windows.Foundation.Rect hintRect, Guid correlationId) => global::ABI.Microsoft.UI.Input.IFocusNavigationRequestStaticsMethods.Create(_objRef_global__Microsoft_UI_Input_IFocusNavigationRequestStatics, reason, hintRect, correlationId);

        public static FocusNavigationRequest FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<FocusNavigationRequest>.FromAbi(thisPtr);
        }

        internal FocusNavigationRequest(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IFocusNavigationRequestMethods.IID);

        }


        public static bool operator ==(FocusNavigationRequest x, FocusNavigationRequest y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(FocusNavigationRequest x, FocusNavigationRequest y) => !(x == y);
        public bool Equals(FocusNavigationRequest other) => this == other;
        public override bool Equals(object obj) => obj is FocusNavigationRequest that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public Guid CorrelationId => global::ABI.Microsoft.UI.Input.IFocusNavigationRequestMethods.get_CorrelationId(_objRef_global__Microsoft_UI_Input_IFocusNavigationRequest);

        public global::System.Nullable<global::Windows.Foundation.Rect> HintRect => global::ABI.Microsoft.UI.Input.IFocusNavigationRequestMethods.get_HintRect(_objRef_global__Microsoft_UI_Input_IFocusNavigationRequest);

        public FocusNavigationReason Reason => global::ABI.Microsoft.UI.Input.IFocusNavigationRequestMethods.get_Reason(_objRef_global__Microsoft_UI_Input_IFocusNavigationRequest);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.FocusNavigationRequestEventArgs))]
    [global::ABI.Microsoft.UI.Input.FocusNavigationRequestEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IFocusNavigationRequestEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65541u)]
    public sealed class FocusNavigationRequestEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<FocusNavigationRequestEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IFocusNavigationRequestEventArgs => _inner;


        public static FocusNavigationRequestEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<FocusNavigationRequestEventArgs>.FromAbi(thisPtr);
        }

        internal FocusNavigationRequestEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IFocusNavigationRequestEventArgsMethods.IID);

        }


        public static bool operator ==(FocusNavigationRequestEventArgs x, FocusNavigationRequestEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(FocusNavigationRequestEventArgs x, FocusNavigationRequestEventArgs y) => !(x == y);
        public bool Equals(FocusNavigationRequestEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is FocusNavigationRequestEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public FocusNavigationRequest Request => global::ABI.Microsoft.UI.Input.IFocusNavigationRequestEventArgsMethods.get_Request(_objRef_global__Microsoft_UI_Input_IFocusNavigationRequestEventArgs);

        public FocusNavigationResult Result
        {
            get => global::ABI.Microsoft.UI.Input.IFocusNavigationRequestEventArgsMethods.get_Result(_objRef_global__Microsoft_UI_Input_IFocusNavigationRequestEventArgs);
            set => global::ABI.Microsoft.UI.Input.IFocusNavigationRequestEventArgsMethods.set_Result(_objRef_global__Microsoft_UI_Input_IFocusNavigationRequestEventArgs, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<FocusNavigationResult>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65541u)]
    public enum FocusNavigationResult : int
    {
        NotMoved = unchecked((int)0),
        Moved = unchecked((int)0x1),
        NoFocusableElements = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.GestureRecognizer))]
    [global::ABI.Microsoft.UI.Input.GestureRecognizerRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IGestureRecognizer))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class GestureRecognizer : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<GestureRecognizer>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IGestureRecognizer => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Input_GestureRecognizer;
        private static IObjectReference _objRef_global__Microsoft_UI_Input_GestureRecognizer
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Input_GestureRecognizer;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Input_GestureRecognizer = ActivationFactory.Get("Microsoft.UI.Input.GestureRecognizer");
                }
            }
        }

        public GestureRecognizer() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Input_GestureRecognizer, global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static GestureRecognizer FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<GestureRecognizer>.FromAbi(thisPtr);
        }

        internal GestureRecognizer(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.IID);

        }


        public static bool operator ==(GestureRecognizer x, GestureRecognizer y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(GestureRecognizer x, GestureRecognizer y) => !(x == y);
        public bool Equals(GestureRecognizer other) => this == other;
        public override bool Equals(object obj) => obj is GestureRecognizer that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool CanBeDoubleTap(PointerPoint value) => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.CanBeDoubleTap(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, value);

        public void CompleteGesture() => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.CompleteGesture(_objRef_global__Microsoft_UI_Input_IGestureRecognizer);

        public void ProcessDownEvent(PointerPoint value) => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.ProcessDownEvent(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, value);

        public void ProcessMoveEvents(global::System.Collections.Generic.IList<PointerPoint> value) => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.ProcessMoveEvents(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, value);

        public void ProcessMouseWheelEvent(PointerPoint value, bool isShiftKeyDown, bool isControlKeyDown) => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.ProcessMouseWheelEvent(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, value, isShiftKeyDown, isControlKeyDown);

        public void ProcessInertia() => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.ProcessInertia(_objRef_global__Microsoft_UI_Input_IGestureRecognizer);

        public void ProcessUpEvent(PointerPoint value) => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.ProcessUpEvent(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, value);

        public event global::Windows.Foundation.TypedEventHandler<GestureRecognizer, CrossSlidingEventArgs> CrossSliding
        {
            add => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.Get_CrossSliding2(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.Get_CrossSliding2(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<GestureRecognizer, DraggingEventArgs> Dragging
        {
            add => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.Get_Dragging2(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.Get_Dragging2(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<GestureRecognizer, HoldingEventArgs> Holding
        {
            add => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.Get_Holding2(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.Get_Holding2(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<GestureRecognizer, ManipulationCompletedEventArgs> ManipulationCompleted
        {
            add => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.Get_ManipulationCompleted2(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.Get_ManipulationCompleted2(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<GestureRecognizer, ManipulationInertiaStartingEventArgs> ManipulationInertiaStarting
        {
            add => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.Get_ManipulationInertiaStarting2(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.Get_ManipulationInertiaStarting2(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<GestureRecognizer, ManipulationStartedEventArgs> ManipulationStarted
        {
            add => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.Get_ManipulationStarted2(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.Get_ManipulationStarted2(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<GestureRecognizer, ManipulationUpdatedEventArgs> ManipulationUpdated
        {
            add => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.Get_ManipulationUpdated2(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.Get_ManipulationUpdated2(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<GestureRecognizer, RightTappedEventArgs> RightTapped
        {
            add => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.Get_RightTapped2(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.Get_RightTapped2(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<GestureRecognizer, TappedEventArgs> Tapped
        {
            add => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.Get_Tapped2(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.Get_Tapped2(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, (IWinRTObject)this).Unsubscribe(value);
        }

        public bool AutoProcessInertia
        {
            get => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.get_AutoProcessInertia(_objRef_global__Microsoft_UI_Input_IGestureRecognizer);
            set => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.set_AutoProcessInertia(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, value);
        }

        public bool CrossSlideExact
        {
            get => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.get_CrossSlideExact(_objRef_global__Microsoft_UI_Input_IGestureRecognizer);
            set => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.set_CrossSlideExact(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, value);
        }

        public bool CrossSlideHorizontally
        {
            get => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.get_CrossSlideHorizontally(_objRef_global__Microsoft_UI_Input_IGestureRecognizer);
            set => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.set_CrossSlideHorizontally(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, value);
        }

        public CrossSlideThresholds CrossSlideThresholds
        {
            get => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.get_CrossSlideThresholds(_objRef_global__Microsoft_UI_Input_IGestureRecognizer);
            set => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.set_CrossSlideThresholds(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, value);
        }

        public GestureSettings GestureSettings
        {
            get => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.get_GestureSettings(_objRef_global__Microsoft_UI_Input_IGestureRecognizer);
            set => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.set_GestureSettings(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, value);
        }

        public float InertiaExpansion
        {
            get => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.get_InertiaExpansion(_objRef_global__Microsoft_UI_Input_IGestureRecognizer);
            set => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.set_InertiaExpansion(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, value);
        }

        public float InertiaExpansionDeceleration
        {
            get => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.get_InertiaExpansionDeceleration(_objRef_global__Microsoft_UI_Input_IGestureRecognizer);
            set => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.set_InertiaExpansionDeceleration(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, value);
        }

        public float InertiaRotationAngle
        {
            get => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.get_InertiaRotationAngle(_objRef_global__Microsoft_UI_Input_IGestureRecognizer);
            set => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.set_InertiaRotationAngle(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, value);
        }

        public float InertiaRotationDeceleration
        {
            get => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.get_InertiaRotationDeceleration(_objRef_global__Microsoft_UI_Input_IGestureRecognizer);
            set => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.set_InertiaRotationDeceleration(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, value);
        }

        public float InertiaTranslationDeceleration
        {
            get => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.get_InertiaTranslationDeceleration(_objRef_global__Microsoft_UI_Input_IGestureRecognizer);
            set => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.set_InertiaTranslationDeceleration(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, value);
        }

        public float InertiaTranslationDisplacement
        {
            get => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.get_InertiaTranslationDisplacement(_objRef_global__Microsoft_UI_Input_IGestureRecognizer);
            set => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.set_InertiaTranslationDisplacement(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, value);
        }

        public bool IsActive => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.get_IsActive(_objRef_global__Microsoft_UI_Input_IGestureRecognizer);

        public bool IsInertial => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.get_IsInertial(_objRef_global__Microsoft_UI_Input_IGestureRecognizer);

        public bool ManipulationExact
        {
            get => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.get_ManipulationExact(_objRef_global__Microsoft_UI_Input_IGestureRecognizer);
            set => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.set_ManipulationExact(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, value);
        }

        public MouseWheelParameters MouseWheelParameters => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.get_MouseWheelParameters(_objRef_global__Microsoft_UI_Input_IGestureRecognizer);

        public global::Windows.Foundation.Point PivotCenter
        {
            get => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.get_PivotCenter(_objRef_global__Microsoft_UI_Input_IGestureRecognizer);
            set => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.set_PivotCenter(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, value);
        }

        public float PivotRadius
        {
            get => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.get_PivotRadius(_objRef_global__Microsoft_UI_Input_IGestureRecognizer);
            set => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.set_PivotRadius(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, value);
        }

        public bool ShowGestureFeedback
        {
            get => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.get_ShowGestureFeedback(_objRef_global__Microsoft_UI_Input_IGestureRecognizer);
            set => global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.set_ShowGestureFeedback(_objRef_global__Microsoft_UI_Input_IGestureRecognizer, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [FlagsAttribute]
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<GestureSettings>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public enum GestureSettings : uint
    {
        None = unchecked((uint)0),
        Tap = unchecked((uint)0x1),
        DoubleTap = unchecked((uint)0x2),
        Hold = unchecked((uint)0x4),
        HoldWithMouse = unchecked((uint)0x8),
        RightTap = unchecked((uint)0x10),
        Drag = unchecked((uint)0x20),
        ManipulationTranslateX = unchecked((uint)0x40),
        ManipulationTranslateY = unchecked((uint)0x80),
        ManipulationTranslateRailsX = unchecked((uint)0x100),
        ManipulationTranslateRailsY = unchecked((uint)0x200),
        ManipulationRotate = unchecked((uint)0x400),
        ManipulationScale = unchecked((uint)0x800),
        ManipulationTranslateInertia = unchecked((uint)0x1000),
        ManipulationRotateInertia = unchecked((uint)0x2000),
        ManipulationScaleInertia = unchecked((uint)0x4000),
        CrossSlide = unchecked((uint)0x8000),
        ManipulationMultipleFingerPanning = unchecked((uint)0x10000),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.HoldingEventArgs))]
    [global::ABI.Microsoft.UI.Input.HoldingEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IHoldingEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class HoldingEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<HoldingEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IHoldingEventArgs => _inner;


        public static HoldingEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<HoldingEventArgs>.FromAbi(thisPtr);
        }

        internal HoldingEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IHoldingEventArgsMethods.IID);

        }


        public static bool operator ==(HoldingEventArgs x, HoldingEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(HoldingEventArgs x, HoldingEventArgs y) => !(x == y);
        public bool Equals(HoldingEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is HoldingEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public HoldingState HoldingState => global::ABI.Microsoft.UI.Input.IHoldingEventArgsMethods.get_HoldingState(_objRef_global__Microsoft_UI_Input_IHoldingEventArgs);

        public PointerDeviceType PointerDeviceType => global::ABI.Microsoft.UI.Input.IHoldingEventArgsMethods.get_PointerDeviceType(_objRef_global__Microsoft_UI_Input_IHoldingEventArgs);

        public global::Windows.Foundation.Point Position => global::ABI.Microsoft.UI.Input.IHoldingEventArgsMethods.get_Position(_objRef_global__Microsoft_UI_Input_IHoldingEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<HoldingState>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public enum HoldingState : int
    {
        Started = unchecked((int)0),
        Completed = unchecked((int)0x1),
        Canceled = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("36122718-9263-592B-8D87-8F86543FFC95")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.ICharacterReceivedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    internal interface ICharacterReceivedEventArgs
    {
        bool Handled { get; set; }
        uint KeyCode { get; }
        PhysicalKeyStatus KeyStatus { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("F6025762-9426-541A-B647-037ABDBECEFC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IContextMenuKeyEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    internal interface IContextMenuKeyEventArgs
    {
        bool Handled { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("7679641F-BA9F-543C-A7C8-6229A98F89EF")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.ICrossSlidingEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface ICrossSlidingEventArgs
    {
        CrossSlidingState CrossSlidingState { get; }
        PointerDeviceType PointerDeviceType { get; }
        global::Windows.Foundation.Point Position { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("3EFB1B75-3D3B-550E-963D-0828CA76128A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IDraggingEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IDraggingEventArgs
    {
        DraggingState DraggingState { get; }
        PointerDeviceType PointerDeviceType { get; }
        global::Windows.Foundation.Point Position { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("698D28FE-D325-59E0-9834-B10FC2F7BA67")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IEnteredMoveSizeEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65542u)]
    internal interface IEnteredMoveSizeEventArgs
    {
        MoveSizeOperation MoveSizeOperation { get; }
        global::Windows.Graphics.PointInt32 PointerScreenPoint { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("47C083B2-402B-51EC-8836-D48679FEA695")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IEnteringMoveSizeEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65542u)]
    internal interface IEnteringMoveSizeEventArgs
    {
        MoveSizeOperation MoveSizeOperation { get; }
        global::Microsoft.UI.WindowId MoveSizeWindowId { get; set; }
        global::Windows.Graphics.PointInt32 PointerScreenPoint { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("DF12A46E-DAEE-5DAC-A678-D7D5E4D0893A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IExitedMoveSizeEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65542u)]
    internal interface IExitedMoveSizeEventArgs
    {
        MoveSizeOperation MoveSizeOperation { get; }
        global::Windows.Graphics.PointInt32 PointerScreenPoint { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("A039B115-DBDF-594C-9B86-DA6AA05C9FA2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IFocusChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    internal interface IFocusChangedEventArgs
    {
        bool Handled { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("6D84BB83-9C84-5112-85E9-8919ACF97262")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IFocusNavigationRequest))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65541u)]
    internal interface IFocusNavigationRequest
    {
        Guid CorrelationId { get; }
        global::System.Nullable<global::Windows.Foundation.Rect> HintRect { get; }
        FocusNavigationReason Reason { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("35A63426-E271-59F9-A231-0D190314B415")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IFocusNavigationRequestEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65541u)]
    internal interface IFocusNavigationRequestEventArgs
    {
        FocusNavigationRequest Request { get; }
        FocusNavigationResult Result { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("8C4D2ED8-3A63-519E-A827-F57E263BD1FF")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IFocusNavigationRequestStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65541u)]
    internal interface IFocusNavigationRequestStatics
    {
        [global::Windows.Foundation.Metadata.Overload(@"Create")]
        FocusNavigationRequest Create(FocusNavigationReason reason);
        [global::Windows.Foundation.Metadata.Overload(@"CreateWithHintRect")]
        FocusNavigationRequest Create(FocusNavigationReason reason, global::Windows.Foundation.Rect hintRect);
        [global::Windows.Foundation.Metadata.Overload(@"CreateWithHintRectAndId")]
        FocusNavigationRequest Create(FocusNavigationReason reason, global::Windows.Foundation.Rect hintRect, Guid correlationId);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("CDA89AFC-6BD0-595C-BA37-545FCE5BF016")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IGestureRecognizer))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IGestureRecognizer
    {
        bool CanBeDoubleTap(PointerPoint value);
        void CompleteGesture();
        void ProcessDownEvent(PointerPoint value);
        void ProcessMoveEvents(global::System.Collections.Generic.IList<PointerPoint> value);
        void ProcessMouseWheelEvent(PointerPoint value, bool isShiftKeyDown, bool isControlKeyDown);
        void ProcessInertia();
        void ProcessUpEvent(PointerPoint value);
        bool AutoProcessInertia { get; set; }
        bool CrossSlideExact { get; set; }
        bool CrossSlideHorizontally { get; set; }
        CrossSlideThresholds CrossSlideThresholds { get; set; }
        GestureSettings GestureSettings { get; set; }
        float InertiaExpansion { get; set; }
        float InertiaExpansionDeceleration { get; set; }
        float InertiaRotationAngle { get; set; }
        float InertiaRotationDeceleration { get; set; }
        float InertiaTranslationDeceleration { get; set; }
        float InertiaTranslationDisplacement { get; set; }
        bool IsActive { get; }
        bool IsInertial { get; }
        bool ManipulationExact { get; set; }
        MouseWheelParameters MouseWheelParameters { get; }
        global::Windows.Foundation.Point PivotCenter { get; set; }
        float PivotRadius { get; set; }
        bool ShowGestureFeedback { get; set; }
        event global::Windows.Foundation.TypedEventHandler<GestureRecognizer, CrossSlidingEventArgs> CrossSliding;
        event global::Windows.Foundation.TypedEventHandler<GestureRecognizer, DraggingEventArgs> Dragging;
        event global::Windows.Foundation.TypedEventHandler<GestureRecognizer, HoldingEventArgs> Holding;
        event global::Windows.Foundation.TypedEventHandler<GestureRecognizer, ManipulationCompletedEventArgs> ManipulationCompleted;
        event global::Windows.Foundation.TypedEventHandler<GestureRecognizer, ManipulationInertiaStartingEventArgs> ManipulationInertiaStarting;
        event global::Windows.Foundation.TypedEventHandler<GestureRecognizer, ManipulationStartedEventArgs> ManipulationStarted;
        event global::Windows.Foundation.TypedEventHandler<GestureRecognizer, ManipulationUpdatedEventArgs> ManipulationUpdated;
        event global::Windows.Foundation.TypedEventHandler<GestureRecognizer, RightTappedEventArgs> RightTapped;
        event global::Windows.Foundation.TypedEventHandler<GestureRecognizer, TappedEventArgs> Tapped;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("8E449E85-D223-533C-B0B2-BF7C6D10C2DB")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IHoldingEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IHoldingEventArgs
    {
        HoldingState HoldingState { get; }
        PointerDeviceType PointerDeviceType { get; }
        global::Windows.Foundation.Point Position { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("3B818627-6CE7-5E0D-A0F5-6684FD1AEC78")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputActivationListener))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65537u)]
    internal interface IInputActivationListener
    {
        InputActivationState State { get; }
        event global::Windows.Foundation.TypedEventHandler<InputActivationListener, InputActivationListenerActivationChangedEventArgs> InputActivationChanged;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("7978526B-00B6-5303-8F7D-55BEF36DA786")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputActivationListenerActivationChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65537u)]
    internal interface IInputActivationListenerActivationChangedEventArgs
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("C4249843-F053-5C99-9D51-720ADE94224D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputActivationListenerStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65537u)]
    internal interface IInputActivationListenerStatics
    {
        InputActivationListener GetForWindowId(global::Microsoft.UI.WindowId windowId);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("7EA26120-9636-5292-A7B1-56544AC51A22")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputActivationListenerStatics2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    internal interface IInputActivationListenerStatics2
    {
        InputActivationListener GetForIsland(global::Microsoft.UI.Content.ContentIsland island);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("359B15F9-19C2-5714-8432-75176826406B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputCursor))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IInputCursor
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("2F47647B-4BE0-53E9-BE7E-C38D5459DB6B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputCursorFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IInputCursorFactory
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("92F6A552-099F-55FB-8C31-E450284C9643")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputCursorStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65537u)]
    internal interface IInputCursorStatics
    {
        InputCursor CreateFromCoreCursor(global::Windows.UI.Core.CoreCursor cursor);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("5486F042-7E1A-5DC8-8041-E47B609A5BA1")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputCustomCursor))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65537u)]
    internal interface IInputCustomCursor
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("6F402882-66E0-57D3-89D0-AA5E2FF917BC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputCustomCursorFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65537u)]
    internal interface IInputCustomCursorFactory
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("F40EA93B-0ED7-5B3A-BFE2-14E2B5AD88A3")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputDesktopNamedResourceCursor))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65537u)]
    internal interface IInputDesktopNamedResourceCursor
    {
        string ModuleName { get; }
        string ResourceName { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("E8B6D5AA-898B-5E69-B01F-383A0943E3E4")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputDesktopNamedResourceCursorStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65537u)]
    internal interface IInputDesktopNamedResourceCursorStatics
    {
        InputDesktopNamedResourceCursor Create(string resourceName);
        InputDesktopNamedResourceCursor CreateFromModule(string moduleName, string resourceName);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("1DF2777F-7C90-58FC-A7A3-D5736C6510FD")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputDesktopResourceCursor))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IInputDesktopResourceCursor
    {
        string ModuleName { get; }
        uint ResourceId { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("F440DC37-A0B6-56EB-BCEC-B024F2233D47")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputDesktopResourceCursorStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IInputDesktopResourceCursorStatics
    {
        InputDesktopResourceCursor Create(uint resourceId);
        InputDesktopResourceCursor CreateFromModule(string moduleName, uint resourceId);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("8DFDC26C-8B8D-515D-8DDD-4685B3A540E9")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputFocusController))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    internal interface IInputFocusController
    {
        bool TrySetFocus();
        bool HasFocus { get; }
        event global::Windows.Foundation.TypedEventHandler<InputFocusController, FocusChangedEventArgs> GotFocus;
        event global::Windows.Foundation.TypedEventHandler<InputFocusController, FocusChangedEventArgs> LostFocus;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("5165077C-CD4B-501D-B386-B50682360185")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputFocusController2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65541u)]
    internal interface IInputFocusController2
    {
        FocusNavigationResult DepartFocus(FocusNavigationRequest request);
        event global::Windows.Foundation.TypedEventHandler<InputFocusController, FocusNavigationRequestEventArgs> NavigateFocusRequested;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("AEB311DA-DA9B-5A1B-92F4-83DDDE933E00")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputFocusControllerStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    internal interface IInputFocusControllerStatics
    {
        InputFocusController GetForIsland(global::Microsoft.UI.Content.ContentIsland island);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("53C2A147-932C-5486-A9C6-F6C5A9C65956")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputFocusNavigationHost))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65541u)]
    internal interface IInputFocusNavigationHost
    {
        FocusNavigationResult NavigateFocus(FocusNavigationRequest request);
        bool ContainsFocus { get; }
        event global::Windows.Foundation.TypedEventHandler<InputFocusNavigationHost, FocusNavigationRequestEventArgs> DepartFocusRequested;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("C9C62CD1-73DB-5AA9-B89D-143509DB8F37")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputFocusNavigationHostStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65541u)]
    internal interface IInputFocusNavigationHostStatics
    {
        InputFocusNavigationHost GetForSiteBridge(global::Microsoft.UI.Content.IContentSiteBridge site);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("82505F60-EF7B-55D8-8362-8CC2840266A1")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputFocusNavigationHostStatics2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65543u)]
    internal interface IInputFocusNavigationHostStatics2
    {
        InputFocusNavigationHost GetForSiteLink(global::Microsoft.UI.Content.IContentSiteLink contentSiteLink);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("ED61B906-16AD-5DF7-A550-5E6F7D2229F7")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputKeyboardSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IInputKeyboardSource
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("79D1C9B6-B3C9-5EC2-8A5B-707088787F78")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputKeyboardSource2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    internal interface IInputKeyboardSource2
    {
        VirtualKeyStates GetCurrentKeyState(global::Windows.System.VirtualKey virtualKey);
        VirtualKeyStates GetKeyState(global::Windows.System.VirtualKey virtualKey);
        event global::Windows.Foundation.TypedEventHandler<InputKeyboardSource, CharacterReceivedEventArgs> CharacterReceived;
        event global::Windows.Foundation.TypedEventHandler<InputKeyboardSource, ContextMenuKeyEventArgs> ContextMenuKey;
        event global::Windows.Foundation.TypedEventHandler<InputKeyboardSource, KeyEventArgs> KeyDown;
        event global::Windows.Foundation.TypedEventHandler<InputKeyboardSource, KeyEventArgs> KeyUp;
        event global::Windows.Foundation.TypedEventHandler<InputKeyboardSource, KeyEventArgs> SystemKeyDown;
        event global::Windows.Foundation.TypedEventHandler<InputKeyboardSource, KeyEventArgs> SystemKeyUp;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("F4E1563D-8C2E-5BCD-B784-47ADEAA3CD7E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputKeyboardSourceStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IInputKeyboardSourceStatics
    {
        global::Windows.UI.Core.CoreVirtualKeyStates GetKeyStateForCurrentThread(global::Windows.System.VirtualKey virtualKey);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("8857518C-2899-5F11-9B64-0AD83234824B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputKeyboardSourceStatics2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    internal interface IInputKeyboardSourceStatics2
    {
        InputKeyboardSource GetForIsland(global::Microsoft.UI.Content.ContentIsland island);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("34B960C5-A5AE-52AF-8566-6D2D55FF52D1")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputKeyboardSourceStatics3))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65543u)]
    [global::Windows.Foundation.Metadata.Experimental]
    internal interface IInputKeyboardSourceStatics3
    {
        InputKeyboardSource GetForWindowId(global::Microsoft.UI.WindowId windowId);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("E8A39502-A860-502F-8C10-3646D43AECF1")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputLightDismissAction))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IInputLightDismissAction
    {
        event global::Windows.Foundation.TypedEventHandler<InputLightDismissAction, InputLightDismissEventArgs> Dismissed;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("ED9B8DEF-6496-5169-984D-D44B4E690623")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputLightDismissActionStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IInputLightDismissActionStatics
    {
        InputLightDismissAction GetForWindowId(global::Microsoft.UI.WindowId windowId);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("C499A8A8-7182-5179-A28C-EAB3F369B6F9")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputLightDismissActionStatics2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65543u)]
    [global::Windows.Foundation.Metadata.Experimental]
    internal interface IInputLightDismissActionStatics2
    {
        InputLightDismissAction GetForIsland(global::Microsoft.UI.Content.ContentIsland content);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("078660EE-07CA-5808-B982-E6E899CF098C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputLightDismissEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IInputLightDismissEventArgs
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("471732B4-3D07-5104-B192-EBACF71E86DF")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputNonClientPointerSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    internal interface IInputNonClientPointerSource
    {
        void ClearAllRegionRects();
        void ClearRegionRects(NonClientRegionKind region);
        global::Windows.Graphics.RectInt32[] GetRegionRects(NonClientRegionKind region);
        void SetRegionRects(NonClientRegionKind region, global::Windows.Graphics.RectInt32[] rects);
        global::Microsoft.UI.Dispatching.DispatcherQueue DispatcherQueue { get; }
        event global::Windows.Foundation.TypedEventHandler<InputNonClientPointerSource, NonClientCaptionTappedEventArgs> CaptionTapped;
        event global::Windows.Foundation.TypedEventHandler<InputNonClientPointerSource, NonClientPointerEventArgs> PointerEntered;
        event global::Windows.Foundation.TypedEventHandler<InputNonClientPointerSource, NonClientPointerEventArgs> PointerExited;
        event global::Windows.Foundation.TypedEventHandler<InputNonClientPointerSource, NonClientPointerEventArgs> PointerMoved;
        event global::Windows.Foundation.TypedEventHandler<InputNonClientPointerSource, NonClientPointerEventArgs> PointerPressed;
        event global::Windows.Foundation.TypedEventHandler<InputNonClientPointerSource, NonClientPointerEventArgs> PointerReleased;
        event global::Windows.Foundation.TypedEventHandler<InputNonClientPointerSource, NonClientRegionsChangedEventArgs> RegionsChanged;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("DD2B10C4-7DE6-5C1D-B438-06DDC994058F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputNonClientPointerSource2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65542u)]
    internal interface IInputNonClientPointerSource2
    {
        event global::Windows.Foundation.TypedEventHandler<InputNonClientPointerSource, EnteredMoveSizeEventArgs> EnteredMoveSize;
        event global::Windows.Foundation.TypedEventHandler<InputNonClientPointerSource, EnteringMoveSizeEventArgs> EnteringMoveSize;
        event global::Windows.Foundation.TypedEventHandler<InputNonClientPointerSource, ExitedMoveSizeEventArgs> ExitedMoveSize;
        event global::Windows.Foundation.TypedEventHandler<InputNonClientPointerSource, WindowRectChangedEventArgs> WindowRectChanged;
        event global::Windows.Foundation.TypedEventHandler<InputNonClientPointerSource, WindowRectChangingEventArgs> WindowRectChanging;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("7D0B775C-1903-5DC7-BD2F-7A4B31F0CFF2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputNonClientPointerSourceStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    internal interface IInputNonClientPointerSourceStatics
    {
        InputNonClientPointerSource GetForWindowId(global::Microsoft.UI.WindowId windowId);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("42EDBC88-D386-544D-B1B8-68617FE68282")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputObject))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IInputObject
    {
        global::Microsoft.UI.Dispatching.DispatcherQueue DispatcherQueue { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("F7786BC2-B0B8-5961-9A57-AE199D452106")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputObjectFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IInputObjectFactory
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("6A6C2764-C3F4-5BE5-8447-C9A98766C240")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputPointerSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IInputPointerSource
    {
        InputCursor Cursor { get; set; }
        InputPointerSourceDeviceKinds DeviceKinds { get; }
        event global::Windows.Foundation.TypedEventHandler<InputPointerSource, PointerEventArgs> PointerCaptureLost;
        event global::Windows.Foundation.TypedEventHandler<InputPointerSource, PointerEventArgs> PointerEntered;
        event global::Windows.Foundation.TypedEventHandler<InputPointerSource, PointerEventArgs> PointerExited;
        event global::Windows.Foundation.TypedEventHandler<InputPointerSource, PointerEventArgs> PointerMoved;
        event global::Windows.Foundation.TypedEventHandler<InputPointerSource, PointerEventArgs> PointerPressed;
        event global::Windows.Foundation.TypedEventHandler<InputPointerSource, PointerEventArgs> PointerReleased;
        event global::Windows.Foundation.TypedEventHandler<InputPointerSource, PointerEventArgs> PointerRoutedAway;
        event global::Windows.Foundation.TypedEventHandler<InputPointerSource, PointerEventArgs> PointerRoutedReleased;
        event global::Windows.Foundation.TypedEventHandler<InputPointerSource, PointerEventArgs> PointerRoutedTo;
        event global::Windows.Foundation.TypedEventHandler<InputPointerSource, PointerEventArgs> PointerWheelChanged;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("58757E6E-DA80-5AD2-A088-B90E8E407379")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputPointerSource2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65543u)]
    [global::Windows.Foundation.Metadata.Experimental]
    internal interface IInputPointerSource2
    {
        bool TrySetDeviceKinds(InputPointerSourceDeviceKinds DeviceKinds);
        InputPointerActivationBehavior ActivationBehavior { get; set; }
        event global::Windows.Foundation.TypedEventHandler<InputPointerSource, PointerEventArgs> DirectManipulationHitTest;
        event global::Windows.Foundation.TypedEventHandler<InputPointerSource, TouchHitTestingEventArgs> TouchHitTesting;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("E8A19FD1-A914-533F-9B0F-6BF0065E6781")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputPointerSourceStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    internal interface IInputPointerSourceStatics
    {
        InputPointerSource GetForIsland(global::Microsoft.UI.Content.ContentIsland island);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("76B37B4A-DE02-531A-A9D2-185186159D31")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputPointerSourceStatics2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65543u)]
    [global::Windows.Foundation.Metadata.Experimental]
    internal interface IInputPointerSourceStatics2
    {
        InputPointerSource GetForVisual(global::Microsoft.UI.Composition.Visual visual);
        InputPointerSource GetForWindowId(global::Microsoft.UI.WindowId windowId);
        void RemoveForVisual(global::Microsoft.UI.Composition.Visual visual);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("2F327FEB-B7E7-5E37-A0CC-37DCABE76588")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputPreTranslateKeyboardSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    internal interface IInputPreTranslateKeyboardSource
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("23D584D2-AF8C-5A8A-806F-2BA9C5B1A5EC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputPreTranslateKeyboardSourceStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    internal interface IInputPreTranslateKeyboardSourceStatics
    {
        InputPreTranslateKeyboardSource GetForIsland(global::Microsoft.UI.Content.ContentIsland island);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("59F538E7-C500-59AB-8B54-0BC6100FD49E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputSystemCursor))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IInputSystemCursor
    {
        InputSystemCursorShape CursorShape { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("D3860BB6-698A-5814-AEDD-C2FA8BBA5A02")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IInputSystemCursorStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IInputSystemCursorStatics
    {
        InputSystemCursor Create(InputSystemCursorShape type);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("40D5BB74-977E-5194-8039-9F6C44427BBB")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IKeyEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    internal interface IKeyEventArgs
    {
        bool Handled { get; set; }
        PhysicalKeyStatus KeyStatus { get; }
        ulong Timestamp { get; }
        global::Windows.System.VirtualKey VirtualKey { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("0E0249D4-46E4-5559-AEE3-FA45CE2A7F56")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IManipulationCompletedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IManipulationCompletedEventArgs
    {
        ManipulationDelta Cumulative { get; }
        PointerDeviceType PointerDeviceType { get; }
        global::Windows.Foundation.Point Position { get; }
        ManipulationVelocities Velocities { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("ACF9EF71-6E15-56AB-9260-F0D3CE5F66E8")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IManipulationInertiaStartingEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IManipulationInertiaStartingEventArgs
    {
        ManipulationDelta Cumulative { get; }
        ManipulationDelta Delta { get; }
        PointerDeviceType PointerDeviceType { get; }
        global::Windows.Foundation.Point Position { get; }
        ManipulationVelocities Velocities { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("4A616613-EEF1-5F1B-A768-0775478D49D4")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IManipulationStartedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IManipulationStartedEventArgs
    {
        ManipulationDelta Cumulative { get; }
        PointerDeviceType PointerDeviceType { get; }
        global::Windows.Foundation.Point Position { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("406E1961-0C98-5FC0-B3D8-116492EF0053")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IManipulationUpdatedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IManipulationUpdatedEventArgs
    {
        ManipulationDelta Cumulative { get; }
        ManipulationDelta Delta { get; }
        PointerDeviceType PointerDeviceType { get; }
        global::Windows.Foundation.Point Position { get; }
        ManipulationVelocities Velocities { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("6D98BE40-1D56-51D1-AA0D-F325439CD009")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IMouseWheelParameters))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IMouseWheelParameters
    {
        global::Windows.Foundation.Point CharTranslation { get; set; }
        float DeltaRotationAngle { get; set; }
        float DeltaScale { get; set; }
        global::Windows.Foundation.Point PageTranslation { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("3D173531-991F-5753-B7E0-14A121C3CD2D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.INonClientCaptionTappedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    internal interface INonClientCaptionTappedEventArgs
    {
        global::Windows.Foundation.Point Point { get; }
        PointerDeviceType PointerDeviceType { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("A5B44AEC-B797-505A-A129-AE4E5271C73C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.INonClientPointerEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    internal interface INonClientPointerEventArgs
    {
        bool IsPointInRegion { get; }
        global::Windows.Foundation.Point Point { get; }
        PointerDeviceType PointerDeviceType { get; }
        NonClientRegionKind RegionKind { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("FE97EE95-1824-51B2-B8EB-10FF0665CE23")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.INonClientRegionsChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    internal interface INonClientRegionsChangedEventArgs
    {
        NonClientRegionKind[] ChangedRegions { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("865B188C-2ED5-5DF8-829F-AC0701D5C51A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IPointerEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IPointerEventArgs
    {
        global::System.Collections.Generic.IList<PointerPoint> GetIntermediatePoints();
        global::System.Collections.Generic.IList<PointerPoint> GetIntermediateTransformedPoints(IPointerPointTransform transform);
        PointerPoint CurrentPoint { get; }
        bool Handled { get; set; }
        global::Windows.System.VirtualKeyModifiers KeyModifiers { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("0D430EE6-252C-59A4-B2A2-D44264DC6A40")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IPointerPoint))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IPointerPoint
    {
        PointerPoint GetTransformedPoint(IPointerPointTransform transform);
        uint FrameId { get; }
        bool IsInContact { get; }
        PointerDeviceType PointerDeviceType { get; }
        uint PointerId { get; }
        global::Windows.Foundation.Point Position { get; }
        PointerPointProperties Properties { get; }
        ulong Timestamp { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("D760ED77-4B10-57A5-B3CC-D9BF3413E996")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IPointerPointProperties))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IPointerPointProperties
    {
        global::Windows.Foundation.Rect ContactRect { get; }
        bool IsBarrelButtonPressed { get; }
        bool IsCanceled { get; }
        bool IsEraser { get; }
        bool IsHorizontalMouseWheel { get; }
        bool IsInRange { get; }
        bool IsInverted { get; }
        bool IsLeftButtonPressed { get; }
        bool IsMiddleButtonPressed { get; }
        bool IsPrimary { get; }
        bool IsRightButtonPressed { get; }
        bool IsXButton1Pressed { get; }
        bool IsXButton2Pressed { get; }
        int MouseWheelDelta { get; }
        float Orientation { get; }
        PointerUpdateKind PointerUpdateKind { get; }
        float Pressure { get; }
        bool TouchConfidence { get; }
        float Twist { get; }
        float XTilt { get; }
        float YTilt { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("DB4791BC-994D-54C7-92EF-66EA1DE9B43C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IPointerPointTransform))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public interface IPointerPointTransform
    {
        bool TryTransform(global::Windows.Foundation.Point inPoint, out global::Windows.Foundation.Point outPoint);
        bool TryTransformBounds(global::Windows.Foundation.Rect inRect, out global::Windows.Foundation.Rect outRect);
        IPointerPointTransform Inverse { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("12C100EC-2100-565F-A60C-F1187F438828")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IPointerPredictor))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IPointerPredictor
    {
        PointerPoint[] GetPredictedPoints(PointerPoint point);
        global::System.TimeSpan PredictionTime { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("78A8EF30-3E5C-55CD-8F85-65AC09B1A987")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IPointerPredictorStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IPointerPredictorStatics
    {
        PointerPredictor CreateForInputPointerSource(InputPointerSource inputPointerSource);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("8FF73B39-887E-50A4-8500-77953039DCB4")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IRightTappedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface IRightTappedEventArgs
    {
        PointerDeviceType PointerDeviceType { get; }
        global::Windows.Foundation.Point Position { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("C3A01BB5-6076-5E0F-871A-9D94A6A8F82B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.ITappedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    internal interface ITappedEventArgs
    {
        PointerDeviceType PointerDeviceType { get; }
        global::Windows.Foundation.Point Position { get; }
        uint TapCount { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("C2196F0C-60ED-5B5D-B919-AA7357E0A25C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.ITouchHitTestingEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65543u)]
    [global::Windows.Foundation.Metadata.Experimental]
    internal interface ITouchHitTestingEventArgs
    {
        ProximityEvaluation GetProximityEvaluation();
        void SetProximityEvaluation(ProximityEvaluation proximityEvaluation);
        ProximityEvaluation EvaluateProximityToRect(global::Windows.Foundation.Rect controlBoundingBox);
        ProximityEvaluation EvaluateProximityToPolygon(global::Windows.Foundation.Point[] controlVertices);
        global::Windows.Foundation.Rect BoundingBox { get; }
        bool Handled { get; set; }
        global::Windows.Foundation.Point Point { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("8A885D28-D2D9-5DDA-9848-CDF247771037")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IWindowRectChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65542u)]
    internal interface IWindowRectChangedEventArgs
    {
        MoveSizeOperation MoveSizeOperation { get; }
        global::Windows.Graphics.RectInt32 NewWindowRect { get; }
        global::Windows.Graphics.RectInt32 OldWindowRect { get; }
        global::Windows.Graphics.PointInt32 PointerScreenPoint { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("DB13ED3C-DEBC-5855-8D70-5936FD813457")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.IWindowRectChangingEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65542u)]
    internal interface IWindowRectChangingEventArgs
    {
        bool AllowRectChange { get; set; }
        MoveSizeOperation MoveSizeOperation { get; }
        global::Windows.Graphics.RectInt32 NewWindowRect { get; set; }
        global::Windows.Graphics.RectInt32 OldWindowRect { get; }
        global::Windows.Graphics.PointInt32 PointerScreenPoint { get; }
        bool ShowWindow { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.InputActivationListener))]
    [global::ABI.Microsoft.UI.Input.InputActivationListenerRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IInputActivationListener))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65537u)]
    public sealed class InputActivationListener : InputObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<InputActivationListener>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IInputActivationListener => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Input.InputActivationListener").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Input_IInputActivationListenerStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputActivationListenerStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Input_IInputActivationListenerStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Input_IInputActivationListenerStatics = ActivationFactory.Get("Microsoft.UI.Input.InputActivationListener", global::ABI.Microsoft.UI.Input.IInputActivationListenerStaticsMethods.IID);
                }
            }
        }

        public static InputActivationListener GetForWindowId(global::Microsoft.UI.WindowId windowId) => global::ABI.Microsoft.UI.Input.IInputActivationListenerStaticsMethods.GetForWindowId(_objRef_global__Microsoft_UI_Input_IInputActivationListenerStatics, windowId);

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Input_IInputActivationListenerStatics2;
        private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputActivationListenerStatics2
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Input_IInputActivationListenerStatics2;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Input_IInputActivationListenerStatics2 = ActivationFactory.Get("Microsoft.UI.Input.InputActivationListener", global::ABI.Microsoft.UI.Input.IInputActivationListenerStatics2Methods.IID);
                }
            }
        }

        public static InputActivationListener GetForIsland(global::Microsoft.UI.Content.ContentIsland island) => global::ABI.Microsoft.UI.Input.IInputActivationListenerStatics2Methods.GetForIsland(_objRef_global__Microsoft_UI_Input_IInputActivationListenerStatics2, island);

        public static new InputActivationListener FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<InputActivationListener>.FromAbi(thisPtr);
        }

        internal InputActivationListener(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IInputActivationListenerMethods.IID);

        }


        public static bool operator ==(InputActivationListener x, InputActivationListener y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(InputActivationListener x, InputActivationListener y) => !(x == y);
        public bool Equals(InputActivationListener other) => this == other;
        public override bool Equals(object obj) => obj is InputActivationListener that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public event global::Windows.Foundation.TypedEventHandler<InputActivationListener, InputActivationListenerActivationChangedEventArgs> InputActivationChanged
        {
            add => global::ABI.Microsoft.UI.Input.IInputActivationListenerMethods.Get_InputActivationChanged2(_objRef_global__Microsoft_UI_Input_IInputActivationListener, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputActivationListenerMethods.Get_InputActivationChanged2(_objRef_global__Microsoft_UI_Input_IInputActivationListener, (IWinRTObject)this).Unsubscribe(value);
        }

        public InputActivationState State => global::ABI.Microsoft.UI.Input.IInputActivationListenerMethods.get_State(_objRef_global__Microsoft_UI_Input_IInputActivationListener);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.InputActivationListenerActivationChangedEventArgs))]
    [global::ABI.Microsoft.UI.Input.InputActivationListenerActivationChangedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IInputActivationListenerActivationChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65537u)]
    public sealed class InputActivationListenerActivationChangedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<InputActivationListenerActivationChangedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IInputActivationListenerActivationChangedEventArgs => _inner;


        public static InputActivationListenerActivationChangedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<InputActivationListenerActivationChangedEventArgs>.FromAbi(thisPtr);
        }

        internal InputActivationListenerActivationChangedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IInputActivationListenerActivationChangedEventArgsMethods.IID);

        }


        public static bool operator ==(InputActivationListenerActivationChangedEventArgs x, InputActivationListenerActivationChangedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(InputActivationListenerActivationChangedEventArgs x, InputActivationListenerActivationChangedEventArgs y) => !(x == y);
        public bool Equals(InputActivationListenerActivationChangedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is InputActivationListenerActivationChangedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<InputActivationState>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65537u)]
    public enum InputActivationState : int
    {
        None = unchecked((int)0),
        Deactivated = unchecked((int)0x1),
        Activated = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.InputCursor))]
    [global::ABI.Microsoft.UI.Input.InputCursorRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IInputCursor))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public class InputCursor : global::System.IDisposable, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<InputCursor>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Input_IInputCursor;
        private IObjectReference Make___objRef_global__Microsoft_UI_Input_IInputCursor()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Input_IInputCursor, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Input.IInputCursorMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Input_IInputCursor;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Input_IInputCursor => ___objRef_global__Microsoft_UI_Input_IInputCursor ?? Make___objRef_global__Microsoft_UI_Input_IInputCursor();

        private volatile IObjectReference ___objRef_global__System_IDisposable;
        private IObjectReference Make___objRef_global__System_IDisposable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_IDisposable, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.IDisposableMethods.IID), null);
            return ___objRef_global__System_IDisposable;
        }
        private IObjectReference _objRef_global__System_IDisposable => ___objRef_global__System_IDisposable ?? Make___objRef_global__System_IDisposable();



        private static class _IInputCursorFactoryMethods
        {}

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Input_IInputCursorFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputCursorFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Input_IInputCursorFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Input_IInputCursorFactory = ActivationFactory.Get("Microsoft.UI.Input.InputCursor", global::ABI.Microsoft.UI.Input.IInputCursorFactoryMethods.IID);
                }
            }
        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Input.InputCursor").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Input_IInputCursorStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputCursorStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Input_IInputCursorStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Input_IInputCursorStatics = ActivationFactory.Get("Microsoft.UI.Input.InputCursor", global::ABI.Microsoft.UI.Input.IInputCursorStaticsMethods.IID);
                }
            }
        }

        public static InputCursor CreateFromCoreCursor(global::Windows.UI.Core.CoreCursor cursor) => global::ABI.Microsoft.UI.Input.IInputCursorStaticsMethods.CreateFromCoreCursor(_objRef_global__Microsoft_UI_Input_IInputCursorStatics, cursor);

        public static InputCursor FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<InputCursor>.FromAbi(thisPtr);
        }

        protected internal InputCursor(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IInputCursorMethods.IID);

        }


        public static bool operator ==(InputCursor x, InputCursor y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(InputCursor x, InputCursor y) => !(x == y);
        public bool Equals(InputCursor other) => this == other;
        public override bool Equals(object obj) => obj is InputCursor that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected InputCursor(global::WinRT.DerivedComposed _)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(InputCursor);
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void Dispose() => global::ABI.System.IDisposableMethods.Dispose(_objRef_global__System_IDisposable);

        protected virtual bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.InputCustomCursor))]
    [global::ABI.Microsoft.UI.Input.InputCustomCursorRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IInputCustomCursor))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65537u)]
    public class InputCustomCursor : InputCursor, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<InputCustomCursor>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Input_IInputCustomCursor;
        private IObjectReference Make___objRef_global__Microsoft_UI_Input_IInputCustomCursor()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Input_IInputCustomCursor, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Input.IInputCustomCursorMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Input_IInputCustomCursor;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Input_IInputCustomCursor => ___objRef_global__Microsoft_UI_Input_IInputCustomCursor ?? Make___objRef_global__Microsoft_UI_Input_IInputCustomCursor();



        private static class _IInputCustomCursorFactoryMethods
        {}

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Input_IInputCustomCursorFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputCustomCursorFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Input_IInputCustomCursorFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Input_IInputCustomCursorFactory = ActivationFactory.Get("Microsoft.UI.Input.InputCustomCursor", global::ABI.Microsoft.UI.Input.IInputCustomCursorFactoryMethods.IID);
                }
            }
        }

        public static new InputCustomCursor FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<InputCustomCursor>.FromAbi(thisPtr);
        }

        protected internal InputCustomCursor(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IInputCustomCursorMethods.IID);

        }


        public static bool operator ==(InputCustomCursor x, InputCustomCursor y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(InputCustomCursor x, InputCustomCursor y) => !(x == y);
        public bool Equals(InputCustomCursor other) => this == other;
        public override bool Equals(object obj) => obj is InputCustomCursor that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected InputCustomCursor(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(InputCustomCursor);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.InputDesktopNamedResourceCursor))]
    [global::ABI.Microsoft.UI.Input.InputDesktopNamedResourceCursorRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IInputDesktopNamedResourceCursor))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65537u)]
    public sealed class InputDesktopNamedResourceCursor : InputCursor, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<InputDesktopNamedResourceCursor>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IInputDesktopNamedResourceCursor => _inner;


        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Input.InputDesktopNamedResourceCursor").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Input_IInputDesktopNamedResourceCursorStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputDesktopNamedResourceCursorStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Input_IInputDesktopNamedResourceCursorStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Input_IInputDesktopNamedResourceCursorStatics = ActivationFactory.Get("Microsoft.UI.Input.InputDesktopNamedResourceCursor", global::ABI.Microsoft.UI.Input.IInputDesktopNamedResourceCursorStaticsMethods.IID);
                }
            }
        }

        public static InputDesktopNamedResourceCursor Create(string resourceName) => global::ABI.Microsoft.UI.Input.IInputDesktopNamedResourceCursorStaticsMethods.Create(_objRef_global__Microsoft_UI_Input_IInputDesktopNamedResourceCursorStatics, resourceName);

        public static InputDesktopNamedResourceCursor CreateFromModule(string moduleName, string resourceName) => global::ABI.Microsoft.UI.Input.IInputDesktopNamedResourceCursorStaticsMethods.CreateFromModule(_objRef_global__Microsoft_UI_Input_IInputDesktopNamedResourceCursorStatics, moduleName, resourceName);

        public static new InputDesktopNamedResourceCursor FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<InputDesktopNamedResourceCursor>.FromAbi(thisPtr);
        }

        internal InputDesktopNamedResourceCursor(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IInputDesktopNamedResourceCursorMethods.IID);

        }


        public static bool operator ==(InputDesktopNamedResourceCursor x, InputDesktopNamedResourceCursor y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(InputDesktopNamedResourceCursor x, InputDesktopNamedResourceCursor y) => !(x == y);
        public bool Equals(InputDesktopNamedResourceCursor other) => this == other;
        public override bool Equals(object obj) => obj is InputDesktopNamedResourceCursor that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public string ModuleName => global::ABI.Microsoft.UI.Input.IInputDesktopNamedResourceCursorMethods.get_ModuleName(_objRef_global__Microsoft_UI_Input_IInputDesktopNamedResourceCursor);

        public string ResourceName => global::ABI.Microsoft.UI.Input.IInputDesktopNamedResourceCursorMethods.get_ResourceName(_objRef_global__Microsoft_UI_Input_IInputDesktopNamedResourceCursor);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.InputDesktopResourceCursor))]
    [global::ABI.Microsoft.UI.Input.InputDesktopResourceCursorRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IInputDesktopResourceCursor))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class InputDesktopResourceCursor : InputCursor, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<InputDesktopResourceCursor>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IInputDesktopResourceCursor => _inner;


        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Input.InputDesktopResourceCursor").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Input_IInputDesktopResourceCursorStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputDesktopResourceCursorStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Input_IInputDesktopResourceCursorStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Input_IInputDesktopResourceCursorStatics = ActivationFactory.Get("Microsoft.UI.Input.InputDesktopResourceCursor", global::ABI.Microsoft.UI.Input.IInputDesktopResourceCursorStaticsMethods.IID);
                }
            }
        }

        public static InputDesktopResourceCursor Create(uint resourceId) => global::ABI.Microsoft.UI.Input.IInputDesktopResourceCursorStaticsMethods.Create(_objRef_global__Microsoft_UI_Input_IInputDesktopResourceCursorStatics, resourceId);

        public static InputDesktopResourceCursor CreateFromModule(string moduleName, uint resourceId) => global::ABI.Microsoft.UI.Input.IInputDesktopResourceCursorStaticsMethods.CreateFromModule(_objRef_global__Microsoft_UI_Input_IInputDesktopResourceCursorStatics, moduleName, resourceId);

        public static new InputDesktopResourceCursor FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<InputDesktopResourceCursor>.FromAbi(thisPtr);
        }

        internal InputDesktopResourceCursor(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IInputDesktopResourceCursorMethods.IID);

        }


        public static bool operator ==(InputDesktopResourceCursor x, InputDesktopResourceCursor y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(InputDesktopResourceCursor x, InputDesktopResourceCursor y) => !(x == y);
        public bool Equals(InputDesktopResourceCursor other) => this == other;
        public override bool Equals(object obj) => obj is InputDesktopResourceCursor that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public string ModuleName => global::ABI.Microsoft.UI.Input.IInputDesktopResourceCursorMethods.get_ModuleName(_objRef_global__Microsoft_UI_Input_IInputDesktopResourceCursor);

        public uint ResourceId => global::ABI.Microsoft.UI.Input.IInputDesktopResourceCursorMethods.get_ResourceId(_objRef_global__Microsoft_UI_Input_IInputDesktopResourceCursor);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.InputFocusController))]
    [global::ABI.Microsoft.UI.Input.InputFocusControllerRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IInputFocusController))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    public sealed class InputFocusController : InputObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<InputFocusController>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IInputFocusController => _inner;
        private volatile IObjectReference ___objRef_global__Microsoft_UI_Input_IInputFocusController2;
        private IObjectReference Make___objRef_global__Microsoft_UI_Input_IInputFocusController2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Input_IInputFocusController2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Input.IInputFocusController2Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Input_IInputFocusController2;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Input_IInputFocusController2 => ___objRef_global__Microsoft_UI_Input_IInputFocusController2 ?? Make___objRef_global__Microsoft_UI_Input_IInputFocusController2();



        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Input.InputFocusController").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Input_IInputFocusControllerStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputFocusControllerStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Input_IInputFocusControllerStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Input_IInputFocusControllerStatics = ActivationFactory.Get("Microsoft.UI.Input.InputFocusController", global::ABI.Microsoft.UI.Input.IInputFocusControllerStaticsMethods.IID);
                }
            }
        }

        public static InputFocusController GetForIsland(global::Microsoft.UI.Content.ContentIsland island) => global::ABI.Microsoft.UI.Input.IInputFocusControllerStaticsMethods.GetForIsland(_objRef_global__Microsoft_UI_Input_IInputFocusControllerStatics, island);

        public static new InputFocusController FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<InputFocusController>.FromAbi(thisPtr);
        }

        internal InputFocusController(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IInputFocusControllerMethods.IID);

        }


        public static bool operator ==(InputFocusController x, InputFocusController y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(InputFocusController x, InputFocusController y) => !(x == y);
        public bool Equals(InputFocusController other) => this == other;
        public override bool Equals(object obj) => obj is InputFocusController that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public bool TrySetFocus() => global::ABI.Microsoft.UI.Input.IInputFocusControllerMethods.TrySetFocus(_objRef_global__Microsoft_UI_Input_IInputFocusController);

        public event global::Windows.Foundation.TypedEventHandler<InputFocusController, FocusChangedEventArgs> GotFocus
        {
            add => global::ABI.Microsoft.UI.Input.IInputFocusControllerMethods.Get_GotFocus2(_objRef_global__Microsoft_UI_Input_IInputFocusController, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputFocusControllerMethods.Get_GotFocus2(_objRef_global__Microsoft_UI_Input_IInputFocusController, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<InputFocusController, FocusChangedEventArgs> LostFocus
        {
            add => global::ABI.Microsoft.UI.Input.IInputFocusControllerMethods.Get_LostFocus2(_objRef_global__Microsoft_UI_Input_IInputFocusController, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputFocusControllerMethods.Get_LostFocus2(_objRef_global__Microsoft_UI_Input_IInputFocusController, (IWinRTObject)this).Unsubscribe(value);
        }

        public FocusNavigationResult DepartFocus(FocusNavigationRequest request) => global::ABI.Microsoft.UI.Input.IInputFocusController2Methods.DepartFocus(_objRef_global__Microsoft_UI_Input_IInputFocusController2, request);

        public event global::Windows.Foundation.TypedEventHandler<InputFocusController, FocusNavigationRequestEventArgs> NavigateFocusRequested
        {
            add => global::ABI.Microsoft.UI.Input.IInputFocusController2Methods.Get_NavigateFocusRequested2(_objRef_global__Microsoft_UI_Input_IInputFocusController2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputFocusController2Methods.Get_NavigateFocusRequested2(_objRef_global__Microsoft_UI_Input_IInputFocusController2, (IWinRTObject)this).Unsubscribe(value);
        }

        public bool HasFocus => global::ABI.Microsoft.UI.Input.IInputFocusControllerMethods.get_HasFocus(_objRef_global__Microsoft_UI_Input_IInputFocusController);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.InputFocusNavigationHost))]
    [global::ABI.Microsoft.UI.Input.InputFocusNavigationHostRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IInputFocusNavigationHost))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65541u)]
    public sealed class InputFocusNavigationHost : InputObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<InputFocusNavigationHost>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IInputFocusNavigationHost => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Input.InputFocusNavigationHost").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Input_IInputFocusNavigationHostStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputFocusNavigationHostStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Input_IInputFocusNavigationHostStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Input_IInputFocusNavigationHostStatics = ActivationFactory.Get("Microsoft.UI.Input.InputFocusNavigationHost", global::ABI.Microsoft.UI.Input.IInputFocusNavigationHostStaticsMethods.IID);
                }
            }
        }

        public static InputFocusNavigationHost GetForSiteBridge(global::Microsoft.UI.Content.IContentSiteBridge site) => global::ABI.Microsoft.UI.Input.IInputFocusNavigationHostStaticsMethods.GetForSiteBridge(_objRef_global__Microsoft_UI_Input_IInputFocusNavigationHostStatics, site);

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Input_IInputFocusNavigationHostStatics2;
        private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputFocusNavigationHostStatics2
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Input_IInputFocusNavigationHostStatics2;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Input_IInputFocusNavigationHostStatics2 = ActivationFactory.Get("Microsoft.UI.Input.InputFocusNavigationHost", global::ABI.Microsoft.UI.Input.IInputFocusNavigationHostStatics2Methods.IID);
                }
            }
        }

        public static InputFocusNavigationHost GetForSiteLink(global::Microsoft.UI.Content.IContentSiteLink contentSiteLink) => global::ABI.Microsoft.UI.Input.IInputFocusNavigationHostStatics2Methods.GetForSiteLink(_objRef_global__Microsoft_UI_Input_IInputFocusNavigationHostStatics2, contentSiteLink);

        public static new InputFocusNavigationHost FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<InputFocusNavigationHost>.FromAbi(thisPtr);
        }

        internal InputFocusNavigationHost(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IInputFocusNavigationHostMethods.IID);

        }


        public static bool operator ==(InputFocusNavigationHost x, InputFocusNavigationHost y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(InputFocusNavigationHost x, InputFocusNavigationHost y) => !(x == y);
        public bool Equals(InputFocusNavigationHost other) => this == other;
        public override bool Equals(object obj) => obj is InputFocusNavigationHost that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public FocusNavigationResult NavigateFocus(FocusNavigationRequest request) => global::ABI.Microsoft.UI.Input.IInputFocusNavigationHostMethods.NavigateFocus(_objRef_global__Microsoft_UI_Input_IInputFocusNavigationHost, request);

        public event global::Windows.Foundation.TypedEventHandler<InputFocusNavigationHost, FocusNavigationRequestEventArgs> DepartFocusRequested
        {
            add => global::ABI.Microsoft.UI.Input.IInputFocusNavigationHostMethods.Get_DepartFocusRequested2(_objRef_global__Microsoft_UI_Input_IInputFocusNavigationHost, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputFocusNavigationHostMethods.Get_DepartFocusRequested2(_objRef_global__Microsoft_UI_Input_IInputFocusNavigationHost, (IWinRTObject)this).Unsubscribe(value);
        }

        public bool ContainsFocus => global::ABI.Microsoft.UI.Input.IInputFocusNavigationHostMethods.get_ContainsFocus(_objRef_global__Microsoft_UI_Input_IInputFocusNavigationHost);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.InputKeyboardSource))]
    [global::ABI.Microsoft.UI.Input.InputKeyboardSourceRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IInputKeyboardSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class InputKeyboardSource : InputObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<InputKeyboardSource>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IInputKeyboardSource => _inner;
        private volatile IObjectReference ___objRef_global__Microsoft_UI_Input_IInputKeyboardSource2;
        private IObjectReference Make___objRef_global__Microsoft_UI_Input_IInputKeyboardSource2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Input_IInputKeyboardSource2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Input.IInputKeyboardSource2Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Input_IInputKeyboardSource2;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Input_IInputKeyboardSource2 => ___objRef_global__Microsoft_UI_Input_IInputKeyboardSource2 ?? Make___objRef_global__Microsoft_UI_Input_IInputKeyboardSource2();



        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Input.InputKeyboardSource").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Input_IInputKeyboardSourceStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputKeyboardSourceStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Input_IInputKeyboardSourceStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Input_IInputKeyboardSourceStatics = ActivationFactory.Get("Microsoft.UI.Input.InputKeyboardSource", global::ABI.Microsoft.UI.Input.IInputKeyboardSourceStaticsMethods.IID);
                }
            }
        }

        public static global::Windows.UI.Core.CoreVirtualKeyStates GetKeyStateForCurrentThread(global::Windows.System.VirtualKey virtualKey) => global::ABI.Microsoft.UI.Input.IInputKeyboardSourceStaticsMethods.GetKeyStateForCurrentThread(_objRef_global__Microsoft_UI_Input_IInputKeyboardSourceStatics, virtualKey);

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Input_IInputKeyboardSourceStatics2;
        private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputKeyboardSourceStatics2
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Input_IInputKeyboardSourceStatics2;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Input_IInputKeyboardSourceStatics2 = ActivationFactory.Get("Microsoft.UI.Input.InputKeyboardSource", global::ABI.Microsoft.UI.Input.IInputKeyboardSourceStatics2Methods.IID);
                }
            }
        }

        public static InputKeyboardSource GetForIsland(global::Microsoft.UI.Content.ContentIsland island) => global::ABI.Microsoft.UI.Input.IInputKeyboardSourceStatics2Methods.GetForIsland(_objRef_global__Microsoft_UI_Input_IInputKeyboardSourceStatics2, island);

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Input_IInputKeyboardSourceStatics3;
        private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputKeyboardSourceStatics3
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Input_IInputKeyboardSourceStatics3;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Input_IInputKeyboardSourceStatics3 = ActivationFactory.Get("Microsoft.UI.Input.InputKeyboardSource", global::ABI.Microsoft.UI.Input.IInputKeyboardSourceStatics3Methods.IID);
                }
            }
        }

        public static InputKeyboardSource GetForWindowId(global::Microsoft.UI.WindowId windowId) => global::ABI.Microsoft.UI.Input.IInputKeyboardSourceStatics3Methods.GetForWindowId(_objRef_global__Microsoft_UI_Input_IInputKeyboardSourceStatics3, windowId);

        public static new InputKeyboardSource FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<InputKeyboardSource>.FromAbi(thisPtr);
        }

        internal InputKeyboardSource(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IInputKeyboardSourceMethods.IID);

        }


        public static bool operator ==(InputKeyboardSource x, InputKeyboardSource y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(InputKeyboardSource x, InputKeyboardSource y) => !(x == y);
        public bool Equals(InputKeyboardSource other) => this == other;
        public override bool Equals(object obj) => obj is InputKeyboardSource that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public VirtualKeyStates GetCurrentKeyState(global::Windows.System.VirtualKey virtualKey) => global::ABI.Microsoft.UI.Input.IInputKeyboardSource2Methods.GetCurrentKeyState(_objRef_global__Microsoft_UI_Input_IInputKeyboardSource2, virtualKey);

        public VirtualKeyStates GetKeyState(global::Windows.System.VirtualKey virtualKey) => global::ABI.Microsoft.UI.Input.IInputKeyboardSource2Methods.GetKeyState(_objRef_global__Microsoft_UI_Input_IInputKeyboardSource2, virtualKey);

        public event global::Windows.Foundation.TypedEventHandler<InputKeyboardSource, CharacterReceivedEventArgs> CharacterReceived
        {
            add => global::ABI.Microsoft.UI.Input.IInputKeyboardSource2Methods.Get_CharacterReceived2(_objRef_global__Microsoft_UI_Input_IInputKeyboardSource2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputKeyboardSource2Methods.Get_CharacterReceived2(_objRef_global__Microsoft_UI_Input_IInputKeyboardSource2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<InputKeyboardSource, ContextMenuKeyEventArgs> ContextMenuKey
        {
            add => global::ABI.Microsoft.UI.Input.IInputKeyboardSource2Methods.Get_ContextMenuKey2(_objRef_global__Microsoft_UI_Input_IInputKeyboardSource2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputKeyboardSource2Methods.Get_ContextMenuKey2(_objRef_global__Microsoft_UI_Input_IInputKeyboardSource2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<InputKeyboardSource, KeyEventArgs> KeyDown
        {
            add => global::ABI.Microsoft.UI.Input.IInputKeyboardSource2Methods.Get_KeyDown2(_objRef_global__Microsoft_UI_Input_IInputKeyboardSource2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputKeyboardSource2Methods.Get_KeyDown2(_objRef_global__Microsoft_UI_Input_IInputKeyboardSource2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<InputKeyboardSource, KeyEventArgs> KeyUp
        {
            add => global::ABI.Microsoft.UI.Input.IInputKeyboardSource2Methods.Get_KeyUp2(_objRef_global__Microsoft_UI_Input_IInputKeyboardSource2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputKeyboardSource2Methods.Get_KeyUp2(_objRef_global__Microsoft_UI_Input_IInputKeyboardSource2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<InputKeyboardSource, KeyEventArgs> SystemKeyDown
        {
            add => global::ABI.Microsoft.UI.Input.IInputKeyboardSource2Methods.Get_SystemKeyDown2(_objRef_global__Microsoft_UI_Input_IInputKeyboardSource2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputKeyboardSource2Methods.Get_SystemKeyDown2(_objRef_global__Microsoft_UI_Input_IInputKeyboardSource2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<InputKeyboardSource, KeyEventArgs> SystemKeyUp
        {
            add => global::ABI.Microsoft.UI.Input.IInputKeyboardSource2Methods.Get_SystemKeyUp2(_objRef_global__Microsoft_UI_Input_IInputKeyboardSource2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputKeyboardSource2Methods.Get_SystemKeyUp2(_objRef_global__Microsoft_UI_Input_IInputKeyboardSource2, (IWinRTObject)this).Unsubscribe(value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<InputLayoutPolicy>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65543u)]
    [global::Windows.Foundation.Metadata.Experimental]
    public enum InputLayoutPolicy : int
    {
        LeftToRight = unchecked((int)0),
        RightToLeft = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.InputLightDismissAction))]
    [global::ABI.Microsoft.UI.Input.InputLightDismissActionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IInputLightDismissAction))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class InputLightDismissAction : InputObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<InputLightDismissAction>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IInputLightDismissAction => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Input.InputLightDismissAction").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Input_IInputLightDismissActionStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputLightDismissActionStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Input_IInputLightDismissActionStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Input_IInputLightDismissActionStatics = ActivationFactory.Get("Microsoft.UI.Input.InputLightDismissAction", global::ABI.Microsoft.UI.Input.IInputLightDismissActionStaticsMethods.IID);
                }
            }
        }

        public static InputLightDismissAction GetForWindowId(global::Microsoft.UI.WindowId windowId) => global::ABI.Microsoft.UI.Input.IInputLightDismissActionStaticsMethods.GetForWindowId(_objRef_global__Microsoft_UI_Input_IInputLightDismissActionStatics, windowId);

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Input_IInputLightDismissActionStatics2;
        private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputLightDismissActionStatics2
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Input_IInputLightDismissActionStatics2;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Input_IInputLightDismissActionStatics2 = ActivationFactory.Get("Microsoft.UI.Input.InputLightDismissAction", global::ABI.Microsoft.UI.Input.IInputLightDismissActionStatics2Methods.IID);
                }
            }
        }

        public static InputLightDismissAction GetForIsland(global::Microsoft.UI.Content.ContentIsland content) => global::ABI.Microsoft.UI.Input.IInputLightDismissActionStatics2Methods.GetForIsland(_objRef_global__Microsoft_UI_Input_IInputLightDismissActionStatics2, content);

        public static new InputLightDismissAction FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<InputLightDismissAction>.FromAbi(thisPtr);
        }

        internal InputLightDismissAction(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IInputLightDismissActionMethods.IID);

        }


        public static bool operator ==(InputLightDismissAction x, InputLightDismissAction y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(InputLightDismissAction x, InputLightDismissAction y) => !(x == y);
        public bool Equals(InputLightDismissAction other) => this == other;
        public override bool Equals(object obj) => obj is InputLightDismissAction that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public event global::Windows.Foundation.TypedEventHandler<InputLightDismissAction, InputLightDismissEventArgs> Dismissed
        {
            add => global::ABI.Microsoft.UI.Input.IInputLightDismissActionMethods.Get_Dismissed2(_objRef_global__Microsoft_UI_Input_IInputLightDismissAction, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputLightDismissActionMethods.Get_Dismissed2(_objRef_global__Microsoft_UI_Input_IInputLightDismissAction, (IWinRTObject)this).Unsubscribe(value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.InputLightDismissEventArgs))]
    [global::ABI.Microsoft.UI.Input.InputLightDismissEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IInputLightDismissEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class InputLightDismissEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<InputLightDismissEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IInputLightDismissEventArgs => _inner;


        public static InputLightDismissEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<InputLightDismissEventArgs>.FromAbi(thisPtr);
        }

        internal InputLightDismissEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IInputLightDismissEventArgsMethods.IID);

        }


        public static bool operator ==(InputLightDismissEventArgs x, InputLightDismissEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(InputLightDismissEventArgs x, InputLightDismissEventArgs y) => !(x == y);
        public bool Equals(InputLightDismissEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is InputLightDismissEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.InputNonClientPointerSource))]
    [global::ABI.Microsoft.UI.Input.InputNonClientPointerSourceRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IInputNonClientPointerSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    public sealed class InputNonClientPointerSource : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<InputNonClientPointerSource>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource => _inner;
        private volatile IObjectReference ___objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource2;
        private IObjectReference Make___objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Input.IInputNonClientPointerSource2Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource2;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource2 => ___objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource2 ?? Make___objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource2();



        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Input.InputNonClientPointerSource").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Input_IInputNonClientPointerSourceStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputNonClientPointerSourceStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Input_IInputNonClientPointerSourceStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Input_IInputNonClientPointerSourceStatics = ActivationFactory.Get("Microsoft.UI.Input.InputNonClientPointerSource", global::ABI.Microsoft.UI.Input.IInputNonClientPointerSourceStaticsMethods.IID);
                }
            }
        }

        public static InputNonClientPointerSource GetForWindowId(global::Microsoft.UI.WindowId windowId) => global::ABI.Microsoft.UI.Input.IInputNonClientPointerSourceStaticsMethods.GetForWindowId(_objRef_global__Microsoft_UI_Input_IInputNonClientPointerSourceStatics, windowId);

        public static InputNonClientPointerSource FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<InputNonClientPointerSource>.FromAbi(thisPtr);
        }

        internal InputNonClientPointerSource(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IInputNonClientPointerSourceMethods.IID);

        }


        public static bool operator ==(InputNonClientPointerSource x, InputNonClientPointerSource y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(InputNonClientPointerSource x, InputNonClientPointerSource y) => !(x == y);
        public bool Equals(InputNonClientPointerSource other) => this == other;
        public override bool Equals(object obj) => obj is InputNonClientPointerSource that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void ClearAllRegionRects() => global::ABI.Microsoft.UI.Input.IInputNonClientPointerSourceMethods.ClearAllRegionRects(_objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource);

        public void ClearRegionRects(NonClientRegionKind region) => global::ABI.Microsoft.UI.Input.IInputNonClientPointerSourceMethods.ClearRegionRects(_objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource, region);

        public global::Windows.Graphics.RectInt32[] GetRegionRects(NonClientRegionKind region) => global::ABI.Microsoft.UI.Input.IInputNonClientPointerSourceMethods.GetRegionRects(_objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource, region);

        public void SetRegionRects(NonClientRegionKind region, global::Windows.Graphics.RectInt32[] rects) => global::ABI.Microsoft.UI.Input.IInputNonClientPointerSourceMethods.SetRegionRects(_objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource, region, rects);

        public event global::Windows.Foundation.TypedEventHandler<InputNonClientPointerSource, NonClientCaptionTappedEventArgs> CaptionTapped
        {
            add => global::ABI.Microsoft.UI.Input.IInputNonClientPointerSourceMethods.Get_CaptionTapped2(_objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputNonClientPointerSourceMethods.Get_CaptionTapped2(_objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<InputNonClientPointerSource, NonClientPointerEventArgs> PointerEntered
        {
            add => global::ABI.Microsoft.UI.Input.IInputNonClientPointerSourceMethods.Get_PointerEntered2(_objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputNonClientPointerSourceMethods.Get_PointerEntered2(_objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<InputNonClientPointerSource, NonClientPointerEventArgs> PointerExited
        {
            add => global::ABI.Microsoft.UI.Input.IInputNonClientPointerSourceMethods.Get_PointerExited2(_objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputNonClientPointerSourceMethods.Get_PointerExited2(_objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<InputNonClientPointerSource, NonClientPointerEventArgs> PointerMoved
        {
            add => global::ABI.Microsoft.UI.Input.IInputNonClientPointerSourceMethods.Get_PointerMoved2(_objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputNonClientPointerSourceMethods.Get_PointerMoved2(_objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<InputNonClientPointerSource, NonClientPointerEventArgs> PointerPressed
        {
            add => global::ABI.Microsoft.UI.Input.IInputNonClientPointerSourceMethods.Get_PointerPressed2(_objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputNonClientPointerSourceMethods.Get_PointerPressed2(_objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<InputNonClientPointerSource, NonClientPointerEventArgs> PointerReleased
        {
            add => global::ABI.Microsoft.UI.Input.IInputNonClientPointerSourceMethods.Get_PointerReleased2(_objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputNonClientPointerSourceMethods.Get_PointerReleased2(_objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<InputNonClientPointerSource, NonClientRegionsChangedEventArgs> RegionsChanged
        {
            add => global::ABI.Microsoft.UI.Input.IInputNonClientPointerSourceMethods.Get_RegionsChanged2(_objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputNonClientPointerSourceMethods.Get_RegionsChanged2(_objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<InputNonClientPointerSource, EnteredMoveSizeEventArgs> EnteredMoveSize
        {
            add => global::ABI.Microsoft.UI.Input.IInputNonClientPointerSource2Methods.Get_EnteredMoveSize2(_objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputNonClientPointerSource2Methods.Get_EnteredMoveSize2(_objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<InputNonClientPointerSource, EnteringMoveSizeEventArgs> EnteringMoveSize
        {
            add => global::ABI.Microsoft.UI.Input.IInputNonClientPointerSource2Methods.Get_EnteringMoveSize2(_objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputNonClientPointerSource2Methods.Get_EnteringMoveSize2(_objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<InputNonClientPointerSource, ExitedMoveSizeEventArgs> ExitedMoveSize
        {
            add => global::ABI.Microsoft.UI.Input.IInputNonClientPointerSource2Methods.Get_ExitedMoveSize2(_objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputNonClientPointerSource2Methods.Get_ExitedMoveSize2(_objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<InputNonClientPointerSource, WindowRectChangedEventArgs> WindowRectChanged
        {
            add => global::ABI.Microsoft.UI.Input.IInputNonClientPointerSource2Methods.Get_WindowRectChanged2(_objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputNonClientPointerSource2Methods.Get_WindowRectChanged2(_objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<InputNonClientPointerSource, WindowRectChangingEventArgs> WindowRectChanging
        {
            add => global::ABI.Microsoft.UI.Input.IInputNonClientPointerSource2Methods.Get_WindowRectChanging2(_objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputNonClientPointerSource2Methods.Get_WindowRectChanging2(_objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource2, (IWinRTObject)this).Unsubscribe(value);
        }

        public global::Microsoft.UI.Dispatching.DispatcherQueue DispatcherQueue => global::ABI.Microsoft.UI.Input.IInputNonClientPointerSourceMethods.get_DispatcherQueue(_objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.InputObject))]
    [global::ABI.Microsoft.UI.Input.InputObjectRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IInputObject))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public class InputObject : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<InputObject>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Input_IInputObject;
        private IObjectReference Make___objRef_global__Microsoft_UI_Input_IInputObject()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Input_IInputObject, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Input.IInputObjectMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Input_IInputObject;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Input_IInputObject => ___objRef_global__Microsoft_UI_Input_IInputObject ?? Make___objRef_global__Microsoft_UI_Input_IInputObject();



        private static class _IInputObjectFactoryMethods
        {}

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Input_IInputObjectFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputObjectFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Input_IInputObjectFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Input_IInputObjectFactory = ActivationFactory.Get("Microsoft.UI.Input.InputObject", global::ABI.Microsoft.UI.Input.IInputObjectFactoryMethods.IID);
                }
            }
        }

        public static InputObject FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<InputObject>.FromAbi(thisPtr);
        }

        protected internal InputObject(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IInputObjectMethods.IID);

        }


        public static bool operator ==(InputObject x, InputObject y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(InputObject x, InputObject y) => !(x == y);
        public bool Equals(InputObject other) => this == other;
        public override bool Equals(object obj) => obj is InputObject that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected InputObject(global::WinRT.DerivedComposed _)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(InputObject);
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Microsoft.UI.Dispatching.DispatcherQueue DispatcherQueue => global::ABI.Microsoft.UI.Input.IInputObjectMethods.get_DispatcherQueue(_objRef_global__Microsoft_UI_Input_IInputObject);

        protected virtual bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<InputPointerActivationBehavior>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65543u)]
    [global::Windows.Foundation.Metadata.Experimental]
    public enum InputPointerActivationBehavior : int
    {
        Default = unchecked((int)0),
        Activate = unchecked((int)0x1),
        NoActivate = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.InputPointerSource))]
    [global::ABI.Microsoft.UI.Input.InputPointerSourceRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IInputPointerSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class InputPointerSource : InputObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<InputPointerSource>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IInputPointerSource => _inner;
        private volatile IObjectReference ___objRef_global__Microsoft_UI_Input_IInputPointerSource2;
        private IObjectReference Make___objRef_global__Microsoft_UI_Input_IInputPointerSource2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Input_IInputPointerSource2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Input.IInputPointerSource2Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Input_IInputPointerSource2;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Input_IInputPointerSource2 => ___objRef_global__Microsoft_UI_Input_IInputPointerSource2 ?? Make___objRef_global__Microsoft_UI_Input_IInputPointerSource2();



        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Input.InputPointerSource").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Input_IInputPointerSourceStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputPointerSourceStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Input_IInputPointerSourceStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Input_IInputPointerSourceStatics = ActivationFactory.Get("Microsoft.UI.Input.InputPointerSource", global::ABI.Microsoft.UI.Input.IInputPointerSourceStaticsMethods.IID);
                }
            }
        }

        public static InputPointerSource GetForIsland(global::Microsoft.UI.Content.ContentIsland island) => global::ABI.Microsoft.UI.Input.IInputPointerSourceStaticsMethods.GetForIsland(_objRef_global__Microsoft_UI_Input_IInputPointerSourceStatics, island);

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Input_IInputPointerSourceStatics2;
        private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputPointerSourceStatics2
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Input_IInputPointerSourceStatics2;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Input_IInputPointerSourceStatics2 = ActivationFactory.Get("Microsoft.UI.Input.InputPointerSource", global::ABI.Microsoft.UI.Input.IInputPointerSourceStatics2Methods.IID);
                }
            }
        }

        public static InputPointerSource GetForVisual(global::Microsoft.UI.Composition.Visual visual) => global::ABI.Microsoft.UI.Input.IInputPointerSourceStatics2Methods.GetForVisual(_objRef_global__Microsoft_UI_Input_IInputPointerSourceStatics2, visual);

        public static InputPointerSource GetForWindowId(global::Microsoft.UI.WindowId windowId) => global::ABI.Microsoft.UI.Input.IInputPointerSourceStatics2Methods.GetForWindowId(_objRef_global__Microsoft_UI_Input_IInputPointerSourceStatics2, windowId);

        public static void RemoveForVisual(global::Microsoft.UI.Composition.Visual visual) => global::ABI.Microsoft.UI.Input.IInputPointerSourceStatics2Methods.RemoveForVisual(_objRef_global__Microsoft_UI_Input_IInputPointerSourceStatics2, visual);

        public static new InputPointerSource FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<InputPointerSource>.FromAbi(thisPtr);
        }

        internal InputPointerSource(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IInputPointerSourceMethods.IID);

        }


        public static bool operator ==(InputPointerSource x, InputPointerSource y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(InputPointerSource x, InputPointerSource y) => !(x == y);
        public bool Equals(InputPointerSource other) => this == other;
        public override bool Equals(object obj) => obj is InputPointerSource that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public event global::Windows.Foundation.TypedEventHandler<InputPointerSource, PointerEventArgs> PointerCaptureLost
        {
            add => global::ABI.Microsoft.UI.Input.IInputPointerSourceMethods.Get_PointerCaptureLost2(_objRef_global__Microsoft_UI_Input_IInputPointerSource, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputPointerSourceMethods.Get_PointerCaptureLost2(_objRef_global__Microsoft_UI_Input_IInputPointerSource, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<InputPointerSource, PointerEventArgs> PointerEntered
        {
            add => global::ABI.Microsoft.UI.Input.IInputPointerSourceMethods.Get_PointerEntered2(_objRef_global__Microsoft_UI_Input_IInputPointerSource, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputPointerSourceMethods.Get_PointerEntered2(_objRef_global__Microsoft_UI_Input_IInputPointerSource, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<InputPointerSource, PointerEventArgs> PointerExited
        {
            add => global::ABI.Microsoft.UI.Input.IInputPointerSourceMethods.Get_PointerExited2(_objRef_global__Microsoft_UI_Input_IInputPointerSource, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputPointerSourceMethods.Get_PointerExited2(_objRef_global__Microsoft_UI_Input_IInputPointerSource, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<InputPointerSource, PointerEventArgs> PointerMoved
        {
            add => global::ABI.Microsoft.UI.Input.IInputPointerSourceMethods.Get_PointerMoved2(_objRef_global__Microsoft_UI_Input_IInputPointerSource, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputPointerSourceMethods.Get_PointerMoved2(_objRef_global__Microsoft_UI_Input_IInputPointerSource, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<InputPointerSource, PointerEventArgs> PointerPressed
        {
            add => global::ABI.Microsoft.UI.Input.IInputPointerSourceMethods.Get_PointerPressed2(_objRef_global__Microsoft_UI_Input_IInputPointerSource, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputPointerSourceMethods.Get_PointerPressed2(_objRef_global__Microsoft_UI_Input_IInputPointerSource, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<InputPointerSource, PointerEventArgs> PointerReleased
        {
            add => global::ABI.Microsoft.UI.Input.IInputPointerSourceMethods.Get_PointerReleased2(_objRef_global__Microsoft_UI_Input_IInputPointerSource, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputPointerSourceMethods.Get_PointerReleased2(_objRef_global__Microsoft_UI_Input_IInputPointerSource, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<InputPointerSource, PointerEventArgs> PointerRoutedAway
        {
            add => global::ABI.Microsoft.UI.Input.IInputPointerSourceMethods.Get_PointerRoutedAway2(_objRef_global__Microsoft_UI_Input_IInputPointerSource, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputPointerSourceMethods.Get_PointerRoutedAway2(_objRef_global__Microsoft_UI_Input_IInputPointerSource, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<InputPointerSource, PointerEventArgs> PointerRoutedReleased
        {
            add => global::ABI.Microsoft.UI.Input.IInputPointerSourceMethods.Get_PointerRoutedReleased2(_objRef_global__Microsoft_UI_Input_IInputPointerSource, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputPointerSourceMethods.Get_PointerRoutedReleased2(_objRef_global__Microsoft_UI_Input_IInputPointerSource, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<InputPointerSource, PointerEventArgs> PointerRoutedTo
        {
            add => global::ABI.Microsoft.UI.Input.IInputPointerSourceMethods.Get_PointerRoutedTo2(_objRef_global__Microsoft_UI_Input_IInputPointerSource, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputPointerSourceMethods.Get_PointerRoutedTo2(_objRef_global__Microsoft_UI_Input_IInputPointerSource, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<InputPointerSource, PointerEventArgs> PointerWheelChanged
        {
            add => global::ABI.Microsoft.UI.Input.IInputPointerSourceMethods.Get_PointerWheelChanged2(_objRef_global__Microsoft_UI_Input_IInputPointerSource, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputPointerSourceMethods.Get_PointerWheelChanged2(_objRef_global__Microsoft_UI_Input_IInputPointerSource, (IWinRTObject)this).Unsubscribe(value);
        }

        public bool TrySetDeviceKinds(InputPointerSourceDeviceKinds DeviceKinds) => global::ABI.Microsoft.UI.Input.IInputPointerSource2Methods.TrySetDeviceKinds(_objRef_global__Microsoft_UI_Input_IInputPointerSource2, DeviceKinds);

        public event global::Windows.Foundation.TypedEventHandler<InputPointerSource, PointerEventArgs> DirectManipulationHitTest
        {
            add => global::ABI.Microsoft.UI.Input.IInputPointerSource2Methods.Get_DirectManipulationHitTest2(_objRef_global__Microsoft_UI_Input_IInputPointerSource2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputPointerSource2Methods.Get_DirectManipulationHitTest2(_objRef_global__Microsoft_UI_Input_IInputPointerSource2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<InputPointerSource, TouchHitTestingEventArgs> TouchHitTesting
        {
            add => global::ABI.Microsoft.UI.Input.IInputPointerSource2Methods.Get_TouchHitTesting2(_objRef_global__Microsoft_UI_Input_IInputPointerSource2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.IInputPointerSource2Methods.Get_TouchHitTesting2(_objRef_global__Microsoft_UI_Input_IInputPointerSource2, (IWinRTObject)this).Unsubscribe(value);
        }

        public InputPointerActivationBehavior ActivationBehavior
        {
            get => global::ABI.Microsoft.UI.Input.IInputPointerSource2Methods.get_ActivationBehavior(_objRef_global__Microsoft_UI_Input_IInputPointerSource2);
            set => global::ABI.Microsoft.UI.Input.IInputPointerSource2Methods.set_ActivationBehavior(_objRef_global__Microsoft_UI_Input_IInputPointerSource2, value);
        }

        public InputCursor Cursor
        {
            get => global::ABI.Microsoft.UI.Input.IInputPointerSourceMethods.get_Cursor(_objRef_global__Microsoft_UI_Input_IInputPointerSource);
            set => global::ABI.Microsoft.UI.Input.IInputPointerSourceMethods.set_Cursor(_objRef_global__Microsoft_UI_Input_IInputPointerSource, value);
        }

        public InputPointerSourceDeviceKinds DeviceKinds => global::ABI.Microsoft.UI.Input.IInputPointerSourceMethods.get_DeviceKinds(_objRef_global__Microsoft_UI_Input_IInputPointerSource);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [FlagsAttribute]
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<InputPointerSourceDeviceKinds>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public enum InputPointerSourceDeviceKinds : uint
    {
        None = unchecked((uint)0),
        Touch = unchecked((uint)0x1),
        Pen = unchecked((uint)0x2),
        Mouse = unchecked((uint)0x4),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.InputPreTranslateKeyboardSource))]
    [global::ABI.Microsoft.UI.Input.InputPreTranslateKeyboardSourceRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IInputPreTranslateKeyboardSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    public sealed class InputPreTranslateKeyboardSource : InputObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<InputPreTranslateKeyboardSource>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IInputPreTranslateKeyboardSource => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Input.InputPreTranslateKeyboardSource").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Input_IInputPreTranslateKeyboardSourceStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputPreTranslateKeyboardSourceStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Input_IInputPreTranslateKeyboardSourceStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Input_IInputPreTranslateKeyboardSourceStatics = ActivationFactory.Get("Microsoft.UI.Input.InputPreTranslateKeyboardSource", global::ABI.Microsoft.UI.Input.IInputPreTranslateKeyboardSourceStaticsMethods.IID);
                }
            }
        }

        public static InputPreTranslateKeyboardSource GetForIsland(global::Microsoft.UI.Content.ContentIsland island) => global::ABI.Microsoft.UI.Input.IInputPreTranslateKeyboardSourceStaticsMethods.GetForIsland(_objRef_global__Microsoft_UI_Input_IInputPreTranslateKeyboardSourceStatics, island);

        public static new InputPreTranslateKeyboardSource FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<InputPreTranslateKeyboardSource>.FromAbi(thisPtr);
        }

        internal InputPreTranslateKeyboardSource(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IInputPreTranslateKeyboardSourceMethods.IID);

        }


        public static bool operator ==(InputPreTranslateKeyboardSource x, InputPreTranslateKeyboardSource y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(InputPreTranslateKeyboardSource x, InputPreTranslateKeyboardSource y) => !(x == y);
        public bool Equals(InputPreTranslateKeyboardSource other) => this == other;
        public override bool Equals(object obj) => obj is InputPreTranslateKeyboardSource that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.InputSystemCursor))]
    [global::ABI.Microsoft.UI.Input.InputSystemCursorRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IInputSystemCursor))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class InputSystemCursor : InputCursor, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<InputSystemCursor>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IInputSystemCursor => _inner;


        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Input.InputSystemCursor").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Input_IInputSystemCursorStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputSystemCursorStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Input_IInputSystemCursorStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Input_IInputSystemCursorStatics = ActivationFactory.Get("Microsoft.UI.Input.InputSystemCursor", global::ABI.Microsoft.UI.Input.IInputSystemCursorStaticsMethods.IID);
                }
            }
        }

        public static InputSystemCursor Create(InputSystemCursorShape type) => global::ABI.Microsoft.UI.Input.IInputSystemCursorStaticsMethods.Create(_objRef_global__Microsoft_UI_Input_IInputSystemCursorStatics, type);

        public static new InputSystemCursor FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<InputSystemCursor>.FromAbi(thisPtr);
        }

        internal InputSystemCursor(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IInputSystemCursorMethods.IID);

        }


        public static bool operator ==(InputSystemCursor x, InputSystemCursor y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(InputSystemCursor x, InputSystemCursor y) => !(x == y);
        public bool Equals(InputSystemCursor other) => this == other;
        public override bool Equals(object obj) => obj is InputSystemCursor that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public InputSystemCursorShape CursorShape => global::ABI.Microsoft.UI.Input.IInputSystemCursorMethods.get_CursorShape(_objRef_global__Microsoft_UI_Input_IInputSystemCursor);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<InputSystemCursorShape>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public enum InputSystemCursorShape : int
    {
        Arrow = unchecked((int)0),
        Cross = unchecked((int)0x1),
        Hand = unchecked((int)0x3),
        Help = unchecked((int)0x4),
        IBeam = unchecked((int)0x5),
        SizeAll = unchecked((int)0x6),
        SizeNortheastSouthwest = unchecked((int)0x7),
        SizeNorthSouth = unchecked((int)0x8),
        SizeNorthwestSoutheast = unchecked((int)0x9),
        SizeWestEast = unchecked((int)0xa),
        UniversalNo = unchecked((int)0xb),
        UpArrow = unchecked((int)0xc),
        Wait = unchecked((int)0xd),
        Pin = unchecked((int)0xe),
        Person = unchecked((int)0xf),
        AppStarting = unchecked((int)0x10),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.KeyEventArgs))]
    [global::ABI.Microsoft.UI.Input.KeyEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IKeyEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    public sealed class KeyEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<KeyEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IKeyEventArgs => _inner;


        public static KeyEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<KeyEventArgs>.FromAbi(thisPtr);
        }

        internal KeyEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IKeyEventArgsMethods.IID);

        }


        public static bool operator ==(KeyEventArgs x, KeyEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(KeyEventArgs x, KeyEventArgs y) => !(x == y);
        public bool Equals(KeyEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is KeyEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Input.IKeyEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Input_IKeyEventArgs);
            set => global::ABI.Microsoft.UI.Input.IKeyEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Input_IKeyEventArgs, value);
        }

        public PhysicalKeyStatus KeyStatus => global::ABI.Microsoft.UI.Input.IKeyEventArgsMethods.get_KeyStatus(_objRef_global__Microsoft_UI_Input_IKeyEventArgs);

        public ulong Timestamp => global::ABI.Microsoft.UI.Input.IKeyEventArgsMethods.get_Timestamp(_objRef_global__Microsoft_UI_Input_IKeyEventArgs);

        public global::Windows.System.VirtualKey VirtualKey => global::ABI.Microsoft.UI.Input.IKeyEventArgsMethods.get_VirtualKey(_objRef_global__Microsoft_UI_Input_IKeyEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.ManipulationCompletedEventArgs))]
    [global::ABI.Microsoft.UI.Input.ManipulationCompletedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IManipulationCompletedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class ManipulationCompletedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ManipulationCompletedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IManipulationCompletedEventArgs => _inner;


        public static ManipulationCompletedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ManipulationCompletedEventArgs>.FromAbi(thisPtr);
        }

        internal ManipulationCompletedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IManipulationCompletedEventArgsMethods.IID);

        }


        public static bool operator ==(ManipulationCompletedEventArgs x, ManipulationCompletedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ManipulationCompletedEventArgs x, ManipulationCompletedEventArgs y) => !(x == y);
        public bool Equals(ManipulationCompletedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is ManipulationCompletedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public ManipulationDelta Cumulative => global::ABI.Microsoft.UI.Input.IManipulationCompletedEventArgsMethods.get_Cumulative(_objRef_global__Microsoft_UI_Input_IManipulationCompletedEventArgs);

        public PointerDeviceType PointerDeviceType => global::ABI.Microsoft.UI.Input.IManipulationCompletedEventArgsMethods.get_PointerDeviceType(_objRef_global__Microsoft_UI_Input_IManipulationCompletedEventArgs);

        public global::Windows.Foundation.Point Position => global::ABI.Microsoft.UI.Input.IManipulationCompletedEventArgsMethods.get_Position(_objRef_global__Microsoft_UI_Input_IManipulationCompletedEventArgs);

        public ManipulationVelocities Velocities => global::ABI.Microsoft.UI.Input.IManipulationCompletedEventArgsMethods.get_Velocities(_objRef_global__Microsoft_UI_Input_IManipulationCompletedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI", "struct(Microsoft.UI.Input.ManipulationDelta;struct(Windows.Foundation.Point;f4;f4);f4;f4;f4)")][global::WinRT.WindowsRuntimeHelperType][global::WinRT.WinRTExposedType(typeof(global::WinRT.StructTypeDetails<ManipulationDelta, ManipulationDelta>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public struct ManipulationDelta: IEquatable<ManipulationDelta>
    {
        public global::Windows.Foundation.Point Translation;
        public float Scale;
        public float Rotation;
        public float Expansion;

        public ManipulationDelta(global::Windows.Foundation.Point _Translation, float _Scale, float _Rotation, float _Expansion)
        {
            Translation = _Translation; Scale = _Scale; Rotation = _Rotation; Expansion = _Expansion; 
        }

        public static bool operator ==(ManipulationDelta x, ManipulationDelta y) => x.Translation == y.Translation && x.Scale == y.Scale && x.Rotation == y.Rotation && x.Expansion == y.Expansion;
        public static bool operator !=(ManipulationDelta x, ManipulationDelta y) => !(x == y);
        public bool Equals(ManipulationDelta other) => this == other;
        public override bool Equals(object obj) => obj is ManipulationDelta that && this == that;
        public override int GetHashCode() => Translation.GetHashCode() ^ Scale.GetHashCode() ^ Rotation.GetHashCode() ^ Expansion.GetHashCode();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.ManipulationInertiaStartingEventArgs))]
    [global::ABI.Microsoft.UI.Input.ManipulationInertiaStartingEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IManipulationInertiaStartingEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class ManipulationInertiaStartingEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ManipulationInertiaStartingEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IManipulationInertiaStartingEventArgs => _inner;


        public static ManipulationInertiaStartingEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ManipulationInertiaStartingEventArgs>.FromAbi(thisPtr);
        }

        internal ManipulationInertiaStartingEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IManipulationInertiaStartingEventArgsMethods.IID);

        }


        public static bool operator ==(ManipulationInertiaStartingEventArgs x, ManipulationInertiaStartingEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ManipulationInertiaStartingEventArgs x, ManipulationInertiaStartingEventArgs y) => !(x == y);
        public bool Equals(ManipulationInertiaStartingEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is ManipulationInertiaStartingEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public ManipulationDelta Cumulative => global::ABI.Microsoft.UI.Input.IManipulationInertiaStartingEventArgsMethods.get_Cumulative(_objRef_global__Microsoft_UI_Input_IManipulationInertiaStartingEventArgs);

        public ManipulationDelta Delta => global::ABI.Microsoft.UI.Input.IManipulationInertiaStartingEventArgsMethods.get_Delta(_objRef_global__Microsoft_UI_Input_IManipulationInertiaStartingEventArgs);

        public PointerDeviceType PointerDeviceType => global::ABI.Microsoft.UI.Input.IManipulationInertiaStartingEventArgsMethods.get_PointerDeviceType(_objRef_global__Microsoft_UI_Input_IManipulationInertiaStartingEventArgs);

        public global::Windows.Foundation.Point Position => global::ABI.Microsoft.UI.Input.IManipulationInertiaStartingEventArgsMethods.get_Position(_objRef_global__Microsoft_UI_Input_IManipulationInertiaStartingEventArgs);

        public ManipulationVelocities Velocities => global::ABI.Microsoft.UI.Input.IManipulationInertiaStartingEventArgsMethods.get_Velocities(_objRef_global__Microsoft_UI_Input_IManipulationInertiaStartingEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.ManipulationStartedEventArgs))]
    [global::ABI.Microsoft.UI.Input.ManipulationStartedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IManipulationStartedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class ManipulationStartedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ManipulationStartedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IManipulationStartedEventArgs => _inner;


        public static ManipulationStartedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ManipulationStartedEventArgs>.FromAbi(thisPtr);
        }

        internal ManipulationStartedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IManipulationStartedEventArgsMethods.IID);

        }


        public static bool operator ==(ManipulationStartedEventArgs x, ManipulationStartedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ManipulationStartedEventArgs x, ManipulationStartedEventArgs y) => !(x == y);
        public bool Equals(ManipulationStartedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is ManipulationStartedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public ManipulationDelta Cumulative => global::ABI.Microsoft.UI.Input.IManipulationStartedEventArgsMethods.get_Cumulative(_objRef_global__Microsoft_UI_Input_IManipulationStartedEventArgs);

        public PointerDeviceType PointerDeviceType => global::ABI.Microsoft.UI.Input.IManipulationStartedEventArgsMethods.get_PointerDeviceType(_objRef_global__Microsoft_UI_Input_IManipulationStartedEventArgs);

        public global::Windows.Foundation.Point Position => global::ABI.Microsoft.UI.Input.IManipulationStartedEventArgsMethods.get_Position(_objRef_global__Microsoft_UI_Input_IManipulationStartedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.ManipulationUpdatedEventArgs))]
    [global::ABI.Microsoft.UI.Input.ManipulationUpdatedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IManipulationUpdatedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class ManipulationUpdatedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ManipulationUpdatedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IManipulationUpdatedEventArgs => _inner;


        public static ManipulationUpdatedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ManipulationUpdatedEventArgs>.FromAbi(thisPtr);
        }

        internal ManipulationUpdatedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IManipulationUpdatedEventArgsMethods.IID);

        }


        public static bool operator ==(ManipulationUpdatedEventArgs x, ManipulationUpdatedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ManipulationUpdatedEventArgs x, ManipulationUpdatedEventArgs y) => !(x == y);
        public bool Equals(ManipulationUpdatedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is ManipulationUpdatedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public ManipulationDelta Cumulative => global::ABI.Microsoft.UI.Input.IManipulationUpdatedEventArgsMethods.get_Cumulative(_objRef_global__Microsoft_UI_Input_IManipulationUpdatedEventArgs);

        public ManipulationDelta Delta => global::ABI.Microsoft.UI.Input.IManipulationUpdatedEventArgsMethods.get_Delta(_objRef_global__Microsoft_UI_Input_IManipulationUpdatedEventArgs);

        public PointerDeviceType PointerDeviceType => global::ABI.Microsoft.UI.Input.IManipulationUpdatedEventArgsMethods.get_PointerDeviceType(_objRef_global__Microsoft_UI_Input_IManipulationUpdatedEventArgs);

        public global::Windows.Foundation.Point Position => global::ABI.Microsoft.UI.Input.IManipulationUpdatedEventArgsMethods.get_Position(_objRef_global__Microsoft_UI_Input_IManipulationUpdatedEventArgs);

        public ManipulationVelocities Velocities => global::ABI.Microsoft.UI.Input.IManipulationUpdatedEventArgsMethods.get_Velocities(_objRef_global__Microsoft_UI_Input_IManipulationUpdatedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI", "struct(Microsoft.UI.Input.ManipulationVelocities;struct(Windows.Foundation.Point;f4;f4);f4;f4)")][global::WinRT.WindowsRuntimeHelperType][global::WinRT.WinRTExposedType(typeof(global::WinRT.StructTypeDetails<ManipulationVelocities, ManipulationVelocities>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public struct ManipulationVelocities: IEquatable<ManipulationVelocities>
    {
        public global::Windows.Foundation.Point Linear;
        public float Angular;
        public float Expansion;

        public ManipulationVelocities(global::Windows.Foundation.Point _Linear, float _Angular, float _Expansion)
        {
            Linear = _Linear; Angular = _Angular; Expansion = _Expansion; 
        }

        public static bool operator ==(ManipulationVelocities x, ManipulationVelocities y) => x.Linear == y.Linear && x.Angular == y.Angular && x.Expansion == y.Expansion;
        public static bool operator !=(ManipulationVelocities x, ManipulationVelocities y) => !(x == y);
        public bool Equals(ManipulationVelocities other) => this == other;
        public override bool Equals(object obj) => obj is ManipulationVelocities that && this == that;
        public override int GetHashCode() => Linear.GetHashCode() ^ Angular.GetHashCode() ^ Expansion.GetHashCode();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.MouseWheelParameters))]
    [global::ABI.Microsoft.UI.Input.MouseWheelParametersRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IMouseWheelParameters))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class MouseWheelParameters : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<MouseWheelParameters>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IMouseWheelParameters => _inner;


        public static MouseWheelParameters FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<MouseWheelParameters>.FromAbi(thisPtr);
        }

        internal MouseWheelParameters(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IMouseWheelParametersMethods.IID);

        }


        public static bool operator ==(MouseWheelParameters x, MouseWheelParameters y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(MouseWheelParameters x, MouseWheelParameters y) => !(x == y);
        public bool Equals(MouseWheelParameters other) => this == other;
        public override bool Equals(object obj) => obj is MouseWheelParameters that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.Point CharTranslation
        {
            get => global::ABI.Microsoft.UI.Input.IMouseWheelParametersMethods.get_CharTranslation(_objRef_global__Microsoft_UI_Input_IMouseWheelParameters);
            set => global::ABI.Microsoft.UI.Input.IMouseWheelParametersMethods.set_CharTranslation(_objRef_global__Microsoft_UI_Input_IMouseWheelParameters, value);
        }

        public float DeltaRotationAngle
        {
            get => global::ABI.Microsoft.UI.Input.IMouseWheelParametersMethods.get_DeltaRotationAngle(_objRef_global__Microsoft_UI_Input_IMouseWheelParameters);
            set => global::ABI.Microsoft.UI.Input.IMouseWheelParametersMethods.set_DeltaRotationAngle(_objRef_global__Microsoft_UI_Input_IMouseWheelParameters, value);
        }

        public float DeltaScale
        {
            get => global::ABI.Microsoft.UI.Input.IMouseWheelParametersMethods.get_DeltaScale(_objRef_global__Microsoft_UI_Input_IMouseWheelParameters);
            set => global::ABI.Microsoft.UI.Input.IMouseWheelParametersMethods.set_DeltaScale(_objRef_global__Microsoft_UI_Input_IMouseWheelParameters, value);
        }

        public global::Windows.Foundation.Point PageTranslation
        {
            get => global::ABI.Microsoft.UI.Input.IMouseWheelParametersMethods.get_PageTranslation(_objRef_global__Microsoft_UI_Input_IMouseWheelParameters);
            set => global::ABI.Microsoft.UI.Input.IMouseWheelParametersMethods.set_PageTranslation(_objRef_global__Microsoft_UI_Input_IMouseWheelParameters, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<MoveSizeOperation>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65542u)]
    public enum MoveSizeOperation : int
    {
        Move = unchecked((int)0),
        SizeBottom = unchecked((int)0x1),
        SizeBottomLeft = unchecked((int)0x2),
        SizeBottomRight = unchecked((int)0x3),
        SizeLeft = unchecked((int)0x4),
        SizeRight = unchecked((int)0x5),
        SizeTop = unchecked((int)0x6),
        SizeTopLeft = unchecked((int)0x7),
        SizeTopRight = unchecked((int)0x8),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.NonClientCaptionTappedEventArgs))]
    [global::ABI.Microsoft.UI.Input.NonClientCaptionTappedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(INonClientCaptionTappedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    public sealed class NonClientCaptionTappedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<NonClientCaptionTappedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_INonClientCaptionTappedEventArgs => _inner;


        public static NonClientCaptionTappedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<NonClientCaptionTappedEventArgs>.FromAbi(thisPtr);
        }

        internal NonClientCaptionTappedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.INonClientCaptionTappedEventArgsMethods.IID);

        }


        public static bool operator ==(NonClientCaptionTappedEventArgs x, NonClientCaptionTappedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(NonClientCaptionTappedEventArgs x, NonClientCaptionTappedEventArgs y) => !(x == y);
        public bool Equals(NonClientCaptionTappedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is NonClientCaptionTappedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.Point Point => global::ABI.Microsoft.UI.Input.INonClientCaptionTappedEventArgsMethods.get_Point(_objRef_global__Microsoft_UI_Input_INonClientCaptionTappedEventArgs);

        public PointerDeviceType PointerDeviceType => global::ABI.Microsoft.UI.Input.INonClientCaptionTappedEventArgsMethods.get_PointerDeviceType(_objRef_global__Microsoft_UI_Input_INonClientCaptionTappedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.NonClientPointerEventArgs))]
    [global::ABI.Microsoft.UI.Input.NonClientPointerEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(INonClientPointerEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    public sealed class NonClientPointerEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<NonClientPointerEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_INonClientPointerEventArgs => _inner;


        public static NonClientPointerEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<NonClientPointerEventArgs>.FromAbi(thisPtr);
        }

        internal NonClientPointerEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.INonClientPointerEventArgsMethods.IID);

        }


        public static bool operator ==(NonClientPointerEventArgs x, NonClientPointerEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(NonClientPointerEventArgs x, NonClientPointerEventArgs y) => !(x == y);
        public bool Equals(NonClientPointerEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is NonClientPointerEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool IsPointInRegion => global::ABI.Microsoft.UI.Input.INonClientPointerEventArgsMethods.get_IsPointInRegion(_objRef_global__Microsoft_UI_Input_INonClientPointerEventArgs);

        public global::Windows.Foundation.Point Point => global::ABI.Microsoft.UI.Input.INonClientPointerEventArgsMethods.get_Point(_objRef_global__Microsoft_UI_Input_INonClientPointerEventArgs);

        public PointerDeviceType PointerDeviceType => global::ABI.Microsoft.UI.Input.INonClientPointerEventArgsMethods.get_PointerDeviceType(_objRef_global__Microsoft_UI_Input_INonClientPointerEventArgs);

        public NonClientRegionKind RegionKind => global::ABI.Microsoft.UI.Input.INonClientPointerEventArgsMethods.get_RegionKind(_objRef_global__Microsoft_UI_Input_INonClientPointerEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<NonClientRegionKind>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    public enum NonClientRegionKind : int
    {
        Close = unchecked((int)0),
        Maximize = unchecked((int)0x1),
        Minimize = unchecked((int)0x2),
        Icon = unchecked((int)0x3),
        Caption = unchecked((int)0x4),
        TopBorder = unchecked((int)0x5),
        LeftBorder = unchecked((int)0x6),
        BottomBorder = unchecked((int)0x7),
        RightBorder = unchecked((int)0x8),
        Passthrough = unchecked((int)0x9),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.NonClientRegionsChangedEventArgs))]
    [global::ABI.Microsoft.UI.Input.NonClientRegionsChangedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(INonClientRegionsChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    public sealed class NonClientRegionsChangedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<NonClientRegionsChangedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_INonClientRegionsChangedEventArgs => _inner;


        public static NonClientRegionsChangedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<NonClientRegionsChangedEventArgs>.FromAbi(thisPtr);
        }

        internal NonClientRegionsChangedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.INonClientRegionsChangedEventArgsMethods.IID);

        }


        public static bool operator ==(NonClientRegionsChangedEventArgs x, NonClientRegionsChangedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(NonClientRegionsChangedEventArgs x, NonClientRegionsChangedEventArgs y) => !(x == y);
        public bool Equals(NonClientRegionsChangedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is NonClientRegionsChangedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public NonClientRegionKind[] ChangedRegions => global::ABI.Microsoft.UI.Input.INonClientRegionsChangedEventArgsMethods.get_ChangedRegions(_objRef_global__Microsoft_UI_Input_INonClientRegionsChangedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI", "struct(Microsoft.UI.Input.PhysicalKeyStatus;u4;u4;b1;b1;b1;b1)")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.PhysicalKeyStatus))][global::WinRT.WinRTExposedType(typeof(global::WinRT.StructTypeDetails<PhysicalKeyStatus, global::ABI.Microsoft.UI.Input.PhysicalKeyStatus>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    public struct PhysicalKeyStatus: IEquatable<PhysicalKeyStatus>
    {
        public uint RepeatCount;
        public uint ScanCode;
        public bool IsExtendedKey;
        public bool IsMenuKeyDown;
        public bool WasKeyDown;
        public bool IsKeyReleased;

        public PhysicalKeyStatus(uint _RepeatCount, uint _ScanCode, bool _IsExtendedKey, bool _IsMenuKeyDown, bool _WasKeyDown, bool _IsKeyReleased)
        {
            RepeatCount = _RepeatCount; ScanCode = _ScanCode; IsExtendedKey = _IsExtendedKey; IsMenuKeyDown = _IsMenuKeyDown; WasKeyDown = _WasKeyDown; IsKeyReleased = _IsKeyReleased; 
        }

        public static bool operator ==(PhysicalKeyStatus x, PhysicalKeyStatus y) => x.RepeatCount == y.RepeatCount && x.ScanCode == y.ScanCode && x.IsExtendedKey == y.IsExtendedKey && x.IsMenuKeyDown == y.IsMenuKeyDown && x.WasKeyDown == y.WasKeyDown && x.IsKeyReleased == y.IsKeyReleased;
        public static bool operator !=(PhysicalKeyStatus x, PhysicalKeyStatus y) => !(x == y);
        public bool Equals(PhysicalKeyStatus other) => this == other;
        public override bool Equals(object obj) => obj is PhysicalKeyStatus that && this == that;
        public override int GetHashCode() => RepeatCount.GetHashCode() ^ ScanCode.GetHashCode() ^ IsExtendedKey.GetHashCode() ^ IsMenuKeyDown.GetHashCode() ^ WasKeyDown.GetHashCode() ^ IsKeyReleased.GetHashCode();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<PointerDeviceType>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public enum PointerDeviceType : int
    {
        Touch = unchecked((int)0),
        Pen = unchecked((int)0x1),
        Mouse = unchecked((int)0x2),
        Touchpad = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.PointerEventArgs))]
    [global::ABI.Microsoft.UI.Input.PointerEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPointerEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class PointerEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PointerEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IPointerEventArgs => _inner;


        public static PointerEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PointerEventArgs>.FromAbi(thisPtr);
        }

        internal PointerEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IPointerEventArgsMethods.IID);

        }


        public static bool operator ==(PointerEventArgs x, PointerEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PointerEventArgs x, PointerEventArgs y) => !(x == y);
        public bool Equals(PointerEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is PointerEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::System.Collections.Generic.IList<PointerPoint> GetIntermediatePoints() => global::ABI.Microsoft.UI.Input.IPointerEventArgsMethods.GetIntermediatePoints(_objRef_global__Microsoft_UI_Input_IPointerEventArgs);

        public global::System.Collections.Generic.IList<PointerPoint> GetIntermediateTransformedPoints(IPointerPointTransform transform) => global::ABI.Microsoft.UI.Input.IPointerEventArgsMethods.GetIntermediateTransformedPoints(_objRef_global__Microsoft_UI_Input_IPointerEventArgs, transform);

        public PointerPoint CurrentPoint => global::ABI.Microsoft.UI.Input.IPointerEventArgsMethods.get_CurrentPoint(_objRef_global__Microsoft_UI_Input_IPointerEventArgs);

        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Input.IPointerEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Input_IPointerEventArgs);
            set => global::ABI.Microsoft.UI.Input.IPointerEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Input_IPointerEventArgs, value);
        }

        public global::Windows.System.VirtualKeyModifiers KeyModifiers => global::ABI.Microsoft.UI.Input.IPointerEventArgsMethods.get_KeyModifiers(_objRef_global__Microsoft_UI_Input_IPointerEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.PointerPoint))]
    [global::ABI.Microsoft.UI.Input.PointerPointRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPointerPoint))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class PointerPoint : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PointerPoint>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IPointerPoint => _inner;


        public static PointerPoint FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PointerPoint>.FromAbi(thisPtr);
        }

        internal PointerPoint(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IPointerPointMethods.IID);

        }


        public static bool operator ==(PointerPoint x, PointerPoint y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PointerPoint x, PointerPoint y) => !(x == y);
        public bool Equals(PointerPoint other) => this == other;
        public override bool Equals(object obj) => obj is PointerPoint that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public PointerPoint GetTransformedPoint(IPointerPointTransform transform) => global::ABI.Microsoft.UI.Input.IPointerPointMethods.GetTransformedPoint(_objRef_global__Microsoft_UI_Input_IPointerPoint, transform);

        public uint FrameId => global::ABI.Microsoft.UI.Input.IPointerPointMethods.get_FrameId(_objRef_global__Microsoft_UI_Input_IPointerPoint);

        public bool IsInContact => global::ABI.Microsoft.UI.Input.IPointerPointMethods.get_IsInContact(_objRef_global__Microsoft_UI_Input_IPointerPoint);

        public PointerDeviceType PointerDeviceType => global::ABI.Microsoft.UI.Input.IPointerPointMethods.get_PointerDeviceType(_objRef_global__Microsoft_UI_Input_IPointerPoint);

        public uint PointerId => global::ABI.Microsoft.UI.Input.IPointerPointMethods.get_PointerId(_objRef_global__Microsoft_UI_Input_IPointerPoint);

        public global::Windows.Foundation.Point Position => global::ABI.Microsoft.UI.Input.IPointerPointMethods.get_Position(_objRef_global__Microsoft_UI_Input_IPointerPoint);

        public PointerPointProperties Properties => global::ABI.Microsoft.UI.Input.IPointerPointMethods.get_Properties(_objRef_global__Microsoft_UI_Input_IPointerPoint);

        public ulong Timestamp => global::ABI.Microsoft.UI.Input.IPointerPointMethods.get_Timestamp(_objRef_global__Microsoft_UI_Input_IPointerPoint);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.PointerPointProperties))]
    [global::ABI.Microsoft.UI.Input.PointerPointPropertiesRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPointerPointProperties))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class PointerPointProperties : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PointerPointProperties>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IPointerPointProperties => _inner;


        public static PointerPointProperties FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PointerPointProperties>.FromAbi(thisPtr);
        }

        internal PointerPointProperties(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IPointerPointPropertiesMethods.IID);

        }


        public static bool operator ==(PointerPointProperties x, PointerPointProperties y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PointerPointProperties x, PointerPointProperties y) => !(x == y);
        public bool Equals(PointerPointProperties other) => this == other;
        public override bool Equals(object obj) => obj is PointerPointProperties that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.Rect ContactRect => global::ABI.Microsoft.UI.Input.IPointerPointPropertiesMethods.get_ContactRect(_objRef_global__Microsoft_UI_Input_IPointerPointProperties);

        public bool IsBarrelButtonPressed => global::ABI.Microsoft.UI.Input.IPointerPointPropertiesMethods.get_IsBarrelButtonPressed(_objRef_global__Microsoft_UI_Input_IPointerPointProperties);

        public bool IsCanceled => global::ABI.Microsoft.UI.Input.IPointerPointPropertiesMethods.get_IsCanceled(_objRef_global__Microsoft_UI_Input_IPointerPointProperties);

        public bool IsEraser => global::ABI.Microsoft.UI.Input.IPointerPointPropertiesMethods.get_IsEraser(_objRef_global__Microsoft_UI_Input_IPointerPointProperties);

        public bool IsHorizontalMouseWheel => global::ABI.Microsoft.UI.Input.IPointerPointPropertiesMethods.get_IsHorizontalMouseWheel(_objRef_global__Microsoft_UI_Input_IPointerPointProperties);

        public bool IsInRange => global::ABI.Microsoft.UI.Input.IPointerPointPropertiesMethods.get_IsInRange(_objRef_global__Microsoft_UI_Input_IPointerPointProperties);

        public bool IsInverted => global::ABI.Microsoft.UI.Input.IPointerPointPropertiesMethods.get_IsInverted(_objRef_global__Microsoft_UI_Input_IPointerPointProperties);

        public bool IsLeftButtonPressed => global::ABI.Microsoft.UI.Input.IPointerPointPropertiesMethods.get_IsLeftButtonPressed(_objRef_global__Microsoft_UI_Input_IPointerPointProperties);

        public bool IsMiddleButtonPressed => global::ABI.Microsoft.UI.Input.IPointerPointPropertiesMethods.get_IsMiddleButtonPressed(_objRef_global__Microsoft_UI_Input_IPointerPointProperties);

        public bool IsPrimary => global::ABI.Microsoft.UI.Input.IPointerPointPropertiesMethods.get_IsPrimary(_objRef_global__Microsoft_UI_Input_IPointerPointProperties);

        public bool IsRightButtonPressed => global::ABI.Microsoft.UI.Input.IPointerPointPropertiesMethods.get_IsRightButtonPressed(_objRef_global__Microsoft_UI_Input_IPointerPointProperties);

        public bool IsXButton1Pressed => global::ABI.Microsoft.UI.Input.IPointerPointPropertiesMethods.get_IsXButton1Pressed(_objRef_global__Microsoft_UI_Input_IPointerPointProperties);

        public bool IsXButton2Pressed => global::ABI.Microsoft.UI.Input.IPointerPointPropertiesMethods.get_IsXButton2Pressed(_objRef_global__Microsoft_UI_Input_IPointerPointProperties);

        public int MouseWheelDelta => global::ABI.Microsoft.UI.Input.IPointerPointPropertiesMethods.get_MouseWheelDelta(_objRef_global__Microsoft_UI_Input_IPointerPointProperties);

        public float Orientation => global::ABI.Microsoft.UI.Input.IPointerPointPropertiesMethods.get_Orientation(_objRef_global__Microsoft_UI_Input_IPointerPointProperties);

        public PointerUpdateKind PointerUpdateKind => global::ABI.Microsoft.UI.Input.IPointerPointPropertiesMethods.get_PointerUpdateKind(_objRef_global__Microsoft_UI_Input_IPointerPointProperties);

        public float Pressure => global::ABI.Microsoft.UI.Input.IPointerPointPropertiesMethods.get_Pressure(_objRef_global__Microsoft_UI_Input_IPointerPointProperties);

        public bool TouchConfidence => global::ABI.Microsoft.UI.Input.IPointerPointPropertiesMethods.get_TouchConfidence(_objRef_global__Microsoft_UI_Input_IPointerPointProperties);

        public float Twist => global::ABI.Microsoft.UI.Input.IPointerPointPropertiesMethods.get_Twist(_objRef_global__Microsoft_UI_Input_IPointerPointProperties);

        public float XTilt => global::ABI.Microsoft.UI.Input.IPointerPointPropertiesMethods.get_XTilt(_objRef_global__Microsoft_UI_Input_IPointerPointProperties);

        public float YTilt => global::ABI.Microsoft.UI.Input.IPointerPointPropertiesMethods.get_YTilt(_objRef_global__Microsoft_UI_Input_IPointerPointProperties);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.PointerPredictor))]
    [global::ABI.Microsoft.UI.Input.PointerPredictorRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPointerPredictor))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class PointerPredictor : global::System.IDisposable, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PointerPredictor>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IPointerPredictor => _inner;
        private volatile IObjectReference ___objRef_global__System_IDisposable;
        private IObjectReference Make___objRef_global__System_IDisposable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_IDisposable, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.IDisposableMethods.IID), null);
            return ___objRef_global__System_IDisposable;
        }
        private IObjectReference _objRef_global__System_IDisposable => ___objRef_global__System_IDisposable ?? Make___objRef_global__System_IDisposable();



        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Input.PointerPredictor").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Input_IPointerPredictorStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Input_IPointerPredictorStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Input_IPointerPredictorStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Input_IPointerPredictorStatics = ActivationFactory.Get("Microsoft.UI.Input.PointerPredictor", global::ABI.Microsoft.UI.Input.IPointerPredictorStaticsMethods.IID);
                }
            }
        }

        public static PointerPredictor CreateForInputPointerSource(InputPointerSource inputPointerSource) => global::ABI.Microsoft.UI.Input.IPointerPredictorStaticsMethods.CreateForInputPointerSource(_objRef_global__Microsoft_UI_Input_IPointerPredictorStatics, inputPointerSource);

        public static PointerPredictor FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PointerPredictor>.FromAbi(thisPtr);
        }

        internal PointerPredictor(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IPointerPredictorMethods.IID);

        }


        public static bool operator ==(PointerPredictor x, PointerPredictor y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PointerPredictor x, PointerPredictor y) => !(x == y);
        public bool Equals(PointerPredictor other) => this == other;
        public override bool Equals(object obj) => obj is PointerPredictor that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public PointerPoint[] GetPredictedPoints(PointerPoint point) => global::ABI.Microsoft.UI.Input.IPointerPredictorMethods.GetPredictedPoints(_objRef_global__Microsoft_UI_Input_IPointerPredictor, point);

        public void Dispose() => global::ABI.System.IDisposableMethods.Dispose(_objRef_global__System_IDisposable);

        public global::System.TimeSpan PredictionTime
        {
            get => global::ABI.Microsoft.UI.Input.IPointerPredictorMethods.get_PredictionTime(_objRef_global__Microsoft_UI_Input_IPointerPredictor);
            set => global::ABI.Microsoft.UI.Input.IPointerPredictorMethods.set_PredictionTime(_objRef_global__Microsoft_UI_Input_IPointerPredictor, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<PointerUpdateKind>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public enum PointerUpdateKind : int
    {
        Other = unchecked((int)0),
        LeftButtonPressed = unchecked((int)0x1),
        LeftButtonReleased = unchecked((int)0x2),
        RightButtonPressed = unchecked((int)0x3),
        RightButtonReleased = unchecked((int)0x4),
        MiddleButtonPressed = unchecked((int)0x5),
        MiddleButtonReleased = unchecked((int)0x6),
        XButton1Pressed = unchecked((int)0x7),
        XButton1Released = unchecked((int)0x8),
        XButton2Pressed = unchecked((int)0x9),
        XButton2Released = unchecked((int)0xa),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI", "struct(Microsoft.UI.Input.ProximityEvaluation;i4;struct(Windows.Foundation.Point;f4;f4))")][global::WinRT.WindowsRuntimeHelperType][global::WinRT.WinRTExposedType(typeof(global::WinRT.StructTypeDetails<ProximityEvaluation, ProximityEvaluation>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65543u)]
    [global::Windows.Foundation.Metadata.Experimental]
    public struct ProximityEvaluation: IEquatable<ProximityEvaluation>
    {
        public int Score;
        public global::Windows.Foundation.Point AdjustedPoint;

        public ProximityEvaluation(int _Score, global::Windows.Foundation.Point _AdjustedPoint)
        {
            Score = _Score; AdjustedPoint = _AdjustedPoint; 
        }

        public static bool operator ==(ProximityEvaluation x, ProximityEvaluation y) => x.Score == y.Score && x.AdjustedPoint == y.AdjustedPoint;
        public static bool operator !=(ProximityEvaluation x, ProximityEvaluation y) => !(x == y);
        public bool Equals(ProximityEvaluation other) => this == other;
        public override bool Equals(object obj) => obj is ProximityEvaluation that && this == that;
        public override int GetHashCode() => Score.GetHashCode() ^ AdjustedPoint.GetHashCode();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.RightTappedEventArgs))]
    [global::ABI.Microsoft.UI.Input.RightTappedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IRightTappedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class RightTappedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<RightTappedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IRightTappedEventArgs => _inner;


        public static RightTappedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<RightTappedEventArgs>.FromAbi(thisPtr);
        }

        internal RightTappedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IRightTappedEventArgsMethods.IID);

        }


        public static bool operator ==(RightTappedEventArgs x, RightTappedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(RightTappedEventArgs x, RightTappedEventArgs y) => !(x == y);
        public bool Equals(RightTappedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is RightTappedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public PointerDeviceType PointerDeviceType => global::ABI.Microsoft.UI.Input.IRightTappedEventArgsMethods.get_PointerDeviceType(_objRef_global__Microsoft_UI_Input_IRightTappedEventArgs);

        public global::Windows.Foundation.Point Position => global::ABI.Microsoft.UI.Input.IRightTappedEventArgsMethods.get_Position(_objRef_global__Microsoft_UI_Input_IRightTappedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.TappedEventArgs))]
    [global::ABI.Microsoft.UI.Input.TappedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ITappedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65536u)]
    public sealed class TappedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<TappedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_ITappedEventArgs => _inner;


        public static TappedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<TappedEventArgs>.FromAbi(thisPtr);
        }

        internal TappedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.ITappedEventArgsMethods.IID);

        }


        public static bool operator ==(TappedEventArgs x, TappedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(TappedEventArgs x, TappedEventArgs y) => !(x == y);
        public bool Equals(TappedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is TappedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public PointerDeviceType PointerDeviceType => global::ABI.Microsoft.UI.Input.ITappedEventArgsMethods.get_PointerDeviceType(_objRef_global__Microsoft_UI_Input_ITappedEventArgs);

        public global::Windows.Foundation.Point Position => global::ABI.Microsoft.UI.Input.ITappedEventArgsMethods.get_Position(_objRef_global__Microsoft_UI_Input_ITappedEventArgs);

        public uint TapCount => global::ABI.Microsoft.UI.Input.ITappedEventArgsMethods.get_TapCount(_objRef_global__Microsoft_UI_Input_ITappedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.TouchHitTestingEventArgs))]
    [global::ABI.Microsoft.UI.Input.TouchHitTestingEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ITouchHitTestingEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65543u)]
    [global::Windows.Foundation.Metadata.Experimental]
    public sealed class TouchHitTestingEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<TouchHitTestingEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_ITouchHitTestingEventArgs => _inner;


        public static TouchHitTestingEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<TouchHitTestingEventArgs>.FromAbi(thisPtr);
        }

        internal TouchHitTestingEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.ITouchHitTestingEventArgsMethods.IID);

        }


        public static bool operator ==(TouchHitTestingEventArgs x, TouchHitTestingEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(TouchHitTestingEventArgs x, TouchHitTestingEventArgs y) => !(x == y);
        public bool Equals(TouchHitTestingEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is TouchHitTestingEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public ProximityEvaluation GetProximityEvaluation() => global::ABI.Microsoft.UI.Input.ITouchHitTestingEventArgsMethods.GetProximityEvaluation(_objRef_global__Microsoft_UI_Input_ITouchHitTestingEventArgs);

        public void SetProximityEvaluation(ProximityEvaluation proximityEvaluation) => global::ABI.Microsoft.UI.Input.ITouchHitTestingEventArgsMethods.SetProximityEvaluation(_objRef_global__Microsoft_UI_Input_ITouchHitTestingEventArgs, proximityEvaluation);

        public ProximityEvaluation EvaluateProximityToRect(global::Windows.Foundation.Rect controlBoundingBox) => global::ABI.Microsoft.UI.Input.ITouchHitTestingEventArgsMethods.EvaluateProximityToRect(_objRef_global__Microsoft_UI_Input_ITouchHitTestingEventArgs, controlBoundingBox);

        public ProximityEvaluation EvaluateProximityToPolygon(global::Windows.Foundation.Point[] controlVertices) => global::ABI.Microsoft.UI.Input.ITouchHitTestingEventArgsMethods.EvaluateProximityToPolygon(_objRef_global__Microsoft_UI_Input_ITouchHitTestingEventArgs, controlVertices);

        public global::Windows.Foundation.Rect BoundingBox => global::ABI.Microsoft.UI.Input.ITouchHitTestingEventArgsMethods.get_BoundingBox(_objRef_global__Microsoft_UI_Input_ITouchHitTestingEventArgs);

        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Input.ITouchHitTestingEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Input_ITouchHitTestingEventArgs);
            set => global::ABI.Microsoft.UI.Input.ITouchHitTestingEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Input_ITouchHitTestingEventArgs, value);
        }

        public global::Windows.Foundation.Point Point => global::ABI.Microsoft.UI.Input.ITouchHitTestingEventArgsMethods.get_Point(_objRef_global__Microsoft_UI_Input_ITouchHitTestingEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [FlagsAttribute]
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<VirtualKeyStates>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    public enum VirtualKeyStates : uint
    {
        None = unchecked((uint)0),
        Down = unchecked((uint)0x1),
        Locked = unchecked((uint)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.WindowRectChangedEventArgs))]
    [global::ABI.Microsoft.UI.Input.WindowRectChangedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IWindowRectChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65542u)]
    public sealed class WindowRectChangedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<WindowRectChangedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IWindowRectChangedEventArgs => _inner;


        public static WindowRectChangedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<WindowRectChangedEventArgs>.FromAbi(thisPtr);
        }

        internal WindowRectChangedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IWindowRectChangedEventArgsMethods.IID);

        }


        public static bool operator ==(WindowRectChangedEventArgs x, WindowRectChangedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(WindowRectChangedEventArgs x, WindowRectChangedEventArgs y) => !(x == y);
        public bool Equals(WindowRectChangedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is WindowRectChangedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public MoveSizeOperation MoveSizeOperation => global::ABI.Microsoft.UI.Input.IWindowRectChangedEventArgsMethods.get_MoveSizeOperation(_objRef_global__Microsoft_UI_Input_IWindowRectChangedEventArgs);

        public global::Windows.Graphics.RectInt32 NewWindowRect => global::ABI.Microsoft.UI.Input.IWindowRectChangedEventArgsMethods.get_NewWindowRect(_objRef_global__Microsoft_UI_Input_IWindowRectChangedEventArgs);

        public global::Windows.Graphics.RectInt32 OldWindowRect => global::ABI.Microsoft.UI.Input.IWindowRectChangedEventArgsMethods.get_OldWindowRect(_objRef_global__Microsoft_UI_Input_IWindowRectChangedEventArgs);

        public global::Windows.Graphics.PointInt32 PointerScreenPoint => global::ABI.Microsoft.UI.Input.IWindowRectChangedEventArgsMethods.get_PointerScreenPoint(_objRef_global__Microsoft_UI_Input_IWindowRectChangedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.WindowRectChangingEventArgs))]
    [global::ABI.Microsoft.UI.Input.WindowRectChangingEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IWindowRectChangingEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65542u)]
    public sealed class WindowRectChangingEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<WindowRectChangingEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_IWindowRectChangingEventArgs => _inner;


        public static WindowRectChangingEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<WindowRectChangingEventArgs>.FromAbi(thisPtr);
        }

        internal WindowRectChangingEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.IWindowRectChangingEventArgsMethods.IID);

        }


        public static bool operator ==(WindowRectChangingEventArgs x, WindowRectChangingEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(WindowRectChangingEventArgs x, WindowRectChangingEventArgs y) => !(x == y);
        public bool Equals(WindowRectChangingEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is WindowRectChangingEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool AllowRectChange
        {
            get => global::ABI.Microsoft.UI.Input.IWindowRectChangingEventArgsMethods.get_AllowRectChange(_objRef_global__Microsoft_UI_Input_IWindowRectChangingEventArgs);
            set => global::ABI.Microsoft.UI.Input.IWindowRectChangingEventArgsMethods.set_AllowRectChange(_objRef_global__Microsoft_UI_Input_IWindowRectChangingEventArgs, value);
        }

        public MoveSizeOperation MoveSizeOperation => global::ABI.Microsoft.UI.Input.IWindowRectChangingEventArgsMethods.get_MoveSizeOperation(_objRef_global__Microsoft_UI_Input_IWindowRectChangingEventArgs);

        public global::Windows.Graphics.RectInt32 NewWindowRect
        {
            get => global::ABI.Microsoft.UI.Input.IWindowRectChangingEventArgsMethods.get_NewWindowRect(_objRef_global__Microsoft_UI_Input_IWindowRectChangingEventArgs);
            set => global::ABI.Microsoft.UI.Input.IWindowRectChangingEventArgsMethods.set_NewWindowRect(_objRef_global__Microsoft_UI_Input_IWindowRectChangingEventArgs, value);
        }

        public global::Windows.Graphics.RectInt32 OldWindowRect => global::ABI.Microsoft.UI.Input.IWindowRectChangingEventArgsMethods.get_OldWindowRect(_objRef_global__Microsoft_UI_Input_IWindowRectChangingEventArgs);

        public global::Windows.Graphics.PointInt32 PointerScreenPoint => global::ABI.Microsoft.UI.Input.IWindowRectChangingEventArgsMethods.get_PointerScreenPoint(_objRef_global__Microsoft_UI_Input_IWindowRectChangingEventArgs);

        public bool ShowWindow
        {
            get => global::ABI.Microsoft.UI.Input.IWindowRectChangingEventArgsMethods.get_ShowWindow(_objRef_global__Microsoft_UI_Input_IWindowRectChangingEventArgs);
            set => global::ABI.Microsoft.UI.Input.IWindowRectChangingEventArgsMethods.set_ShowWindow(_objRef_global__Microsoft_UI_Input_IWindowRectChangingEventArgs, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.UI.Input
{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CharacterReceivedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.CharacterReceivedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.CharacterReceivedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.ICharacterReceivedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.CharacterReceivedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.ICharacterReceivedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.CharacterReceivedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.CharacterReceivedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.CharacterReceivedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.CharacterReceivedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.CharacterReceivedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.CharacterReceivedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.CharacterReceivedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.CharacterReceivedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.CharacterReceivedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.CharacterReceivedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.CharacterReceivedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.CharacterReceivedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.CharacterReceivedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.CharacterReceivedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.CharacterReceivedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CharacterReceivedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.CharacterReceivedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ContextMenuKeyEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.ContextMenuKeyEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.ContextMenuKeyEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IContextMenuKeyEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.ContextMenuKeyEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IContextMenuKeyEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.ContextMenuKeyEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.ContextMenuKeyEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.ContextMenuKeyEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.ContextMenuKeyEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.ContextMenuKeyEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ContextMenuKeyEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ContextMenuKeyEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.ContextMenuKeyEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ContextMenuKeyEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.ContextMenuKeyEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ContextMenuKeyEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.ContextMenuKeyEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ContextMenuKeyEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.ContextMenuKeyEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ContextMenuKeyEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ContextMenuKeyEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.ContextMenuKeyEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CrossSlidingEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.CrossSlidingEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.CrossSlidingEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.ICrossSlidingEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.CrossSlidingEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.ICrossSlidingEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.CrossSlidingEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.CrossSlidingEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.CrossSlidingEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.CrossSlidingEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.CrossSlidingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.CrossSlidingEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.CrossSlidingEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.CrossSlidingEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.CrossSlidingEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.CrossSlidingEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.CrossSlidingEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.CrossSlidingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.CrossSlidingEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.CrossSlidingEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.CrossSlidingEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CrossSlidingEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.CrossSlidingEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DraggingEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.DraggingEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.DraggingEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IDraggingEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.DraggingEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IDraggingEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.DraggingEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.DraggingEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.DraggingEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.DraggingEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.DraggingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DraggingEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DraggingEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.DraggingEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DraggingEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.DraggingEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DraggingEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.DraggingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DraggingEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.DraggingEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DraggingEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DraggingEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.DraggingEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct EnteredMoveSizeEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.EnteredMoveSizeEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.EnteredMoveSizeEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IEnteredMoveSizeEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.EnteredMoveSizeEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IEnteredMoveSizeEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.EnteredMoveSizeEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.EnteredMoveSizeEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.EnteredMoveSizeEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.EnteredMoveSizeEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.EnteredMoveSizeEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.EnteredMoveSizeEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.EnteredMoveSizeEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.EnteredMoveSizeEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.EnteredMoveSizeEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.EnteredMoveSizeEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.EnteredMoveSizeEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.EnteredMoveSizeEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.EnteredMoveSizeEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.EnteredMoveSizeEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.EnteredMoveSizeEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class EnteredMoveSizeEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.EnteredMoveSizeEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct EnteringMoveSizeEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.EnteringMoveSizeEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.EnteringMoveSizeEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IEnteringMoveSizeEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.EnteringMoveSizeEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IEnteringMoveSizeEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.EnteringMoveSizeEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.EnteringMoveSizeEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.EnteringMoveSizeEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.EnteringMoveSizeEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.EnteringMoveSizeEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.EnteringMoveSizeEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.EnteringMoveSizeEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.EnteringMoveSizeEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.EnteringMoveSizeEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.EnteringMoveSizeEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.EnteringMoveSizeEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.EnteringMoveSizeEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.EnteringMoveSizeEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.EnteringMoveSizeEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.EnteringMoveSizeEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class EnteringMoveSizeEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.EnteringMoveSizeEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ExitedMoveSizeEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.ExitedMoveSizeEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.ExitedMoveSizeEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IExitedMoveSizeEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.ExitedMoveSizeEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IExitedMoveSizeEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.ExitedMoveSizeEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.ExitedMoveSizeEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.ExitedMoveSizeEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.ExitedMoveSizeEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.ExitedMoveSizeEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ExitedMoveSizeEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ExitedMoveSizeEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.ExitedMoveSizeEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ExitedMoveSizeEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.ExitedMoveSizeEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ExitedMoveSizeEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.ExitedMoveSizeEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ExitedMoveSizeEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.ExitedMoveSizeEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ExitedMoveSizeEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ExitedMoveSizeEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.ExitedMoveSizeEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct FocusChangedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.FocusChangedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.FocusChangedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IFocusChangedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.FocusChangedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IFocusChangedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.FocusChangedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.FocusChangedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.FocusChangedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.FocusChangedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.FocusChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.FocusChangedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.FocusChangedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.FocusChangedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.FocusChangedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.FocusChangedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.FocusChangedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.FocusChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.FocusChangedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.FocusChangedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.FocusChangedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class FocusChangedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.FocusChangedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct FocusNavigationRequest
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.FocusNavigationRequest obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.FocusNavigationRequest>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IFocusNavigationRequestMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.FocusNavigationRequest obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IFocusNavigationRequestMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.FocusNavigationRequest FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.FocusNavigationRequest.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.FocusNavigationRequest obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.FocusNavigationRequest>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.FocusNavigationRequest[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.FocusNavigationRequest>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.FocusNavigationRequest>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.FocusNavigationRequest[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.FocusNavigationRequest>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.FocusNavigationRequest[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.FocusNavigationRequest>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.FocusNavigationRequest[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.FocusNavigationRequest>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.FocusNavigationRequest>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.FocusNavigationRequest>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class FocusNavigationRequestRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.FocusNavigationRequest(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct FocusNavigationRequestEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.FocusNavigationRequestEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.FocusNavigationRequestEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IFocusNavigationRequestEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.FocusNavigationRequestEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IFocusNavigationRequestEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.FocusNavigationRequestEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.FocusNavigationRequestEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.FocusNavigationRequestEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.FocusNavigationRequestEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.FocusNavigationRequestEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.FocusNavigationRequestEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.FocusNavigationRequestEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.FocusNavigationRequestEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.FocusNavigationRequestEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.FocusNavigationRequestEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.FocusNavigationRequestEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.FocusNavigationRequestEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.FocusNavigationRequestEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.FocusNavigationRequestEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.FocusNavigationRequestEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class FocusNavigationRequestEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.FocusNavigationRequestEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct GestureRecognizer
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.GestureRecognizer obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.GestureRecognizer>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.GestureRecognizer obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IGestureRecognizerMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.GestureRecognizer FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.GestureRecognizer.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.GestureRecognizer obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.GestureRecognizer>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.GestureRecognizer[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.GestureRecognizer>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.GestureRecognizer>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.GestureRecognizer[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.GestureRecognizer>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.GestureRecognizer[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.GestureRecognizer>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.GestureRecognizer[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.GestureRecognizer>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.GestureRecognizer>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.GestureRecognizer>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class GestureRecognizerRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.GestureRecognizer(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct HoldingEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.HoldingEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.HoldingEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IHoldingEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.HoldingEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IHoldingEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.HoldingEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.HoldingEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.HoldingEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.HoldingEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.HoldingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.HoldingEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.HoldingEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.HoldingEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.HoldingEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.HoldingEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.HoldingEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.HoldingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.HoldingEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.HoldingEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.HoldingEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class HoldingEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.HoldingEventArgs(inspectable.ObjRef);
    }
    internal static class ICharacterReceivedEventArgsMethods
    {

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe uint get_KeyCode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Input.PhysicalKeyStatus get_KeyStatus(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            PhysicalKeyStatus __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, PhysicalKeyStatus*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return PhysicalKeyStatus.FromAbi(__retval);
            }
            finally
            {
                PhysicalKeyStatus.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x18, 0x27, 0x12, 0x36, 0x63, 0x92, 0x2B, 0x59, 0x8D, 0x87, 0x8F, 0x86, 0x54, 0x3F, 0xFC, 0x95 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("36122718-9263-592B-8D87-8F86543FFC95")]
    internal interface ICharacterReceivedEventArgs : global::Microsoft.UI.Input.ICharacterReceivedEventArgs
    {
    }
    internal static class IContextMenuKeyEventArgsMethods
    {

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x62, 0x57, 0x2, 0xF6, 0x26, 0x94, 0x1A, 0x54, 0xB6, 0x47, 0x3, 0x7A, 0xBD, 0xBE, 0xCE, 0xFC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F6025762-9426-541A-B647-037ABDBECEFC")]
    internal interface IContextMenuKeyEventArgs : global::Microsoft.UI.Input.IContextMenuKeyEventArgs
    {
    }
    internal static class ICrossSlidingEventArgsMethods
    {

        internal static unsafe global::Microsoft.UI.Input.CrossSlidingState get_CrossSlidingState(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.CrossSlidingState __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.CrossSlidingState*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Input.PointerDeviceType get_PointerDeviceType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.PointerDeviceType __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.PointerDeviceType*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.Point get_Position(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x1F, 0x64, 0x79, 0x76, 0x9F, 0xBA, 0x3C, 0x54, 0xA7, 0xC8, 0x62, 0x29, 0xA9, 0x8F, 0x89, 0xEF };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("7679641F-BA9F-543C-A7C8-6229A98F89EF")]
    internal interface ICrossSlidingEventArgs : global::Microsoft.UI.Input.ICrossSlidingEventArgs
    {
    }
    internal static class IDraggingEventArgsMethods
    {

        internal static unsafe global::Microsoft.UI.Input.DraggingState get_DraggingState(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.DraggingState __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.DraggingState*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Input.PointerDeviceType get_PointerDeviceType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.PointerDeviceType __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.PointerDeviceType*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.Point get_Position(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x75, 0x1B, 0xFB, 0x3E, 0x3B, 0x3D, 0xE, 0x55, 0x96, 0x3D, 0x8, 0x28, 0xCA, 0x76, 0x12, 0x8A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("3EFB1B75-3D3B-550E-963D-0828CA76128A")]
    internal interface IDraggingEventArgs : global::Microsoft.UI.Input.IDraggingEventArgs
    {
    }
    internal static class IEnteredMoveSizeEventArgsMethods
    {

        internal static unsafe global::Microsoft.UI.Input.MoveSizeOperation get_MoveSizeOperation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.MoveSizeOperation __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.MoveSizeOperation*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Graphics.PointInt32 get_PointerScreenPoint(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Graphics.PointInt32 __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Graphics.PointInt32*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFE, 0x28, 0x8D, 0x69, 0x25, 0xD3, 0xE0, 0x59, 0x98, 0x34, 0xB1, 0xF, 0xC2, 0xF7, 0xBA, 0x67 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("698D28FE-D325-59E0-9834-B10FC2F7BA67")]
    internal interface IEnteredMoveSizeEventArgs : global::Microsoft.UI.Input.IEnteredMoveSizeEventArgs
    {
    }
    internal static class IEnteringMoveSizeEventArgsMethods
    {

        internal static unsafe global::Microsoft.UI.Input.MoveSizeOperation get_MoveSizeOperation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.MoveSizeOperation __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.MoveSizeOperation*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.WindowId get_MoveSizeWindowId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.WindowId __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.WindowId*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_MoveSizeWindowId(IObjectReference _obj, global::Microsoft.UI.WindowId value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.WindowId, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.Graphics.PointInt32 get_PointerScreenPoint(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Graphics.PointInt32 __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Graphics.PointInt32*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB2, 0x83, 0xC0, 0x47, 0x2B, 0x40, 0xEC, 0x51, 0x88, 0x36, 0xD4, 0x86, 0x79, 0xFE, 0xA6, 0x95 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("47C083B2-402B-51EC-8836-D48679FEA695")]
    internal interface IEnteringMoveSizeEventArgs : global::Microsoft.UI.Input.IEnteringMoveSizeEventArgs
    {
    }
    internal static class IExitedMoveSizeEventArgsMethods
    {

        internal static unsafe global::Microsoft.UI.Input.MoveSizeOperation get_MoveSizeOperation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.MoveSizeOperation __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.MoveSizeOperation*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Graphics.PointInt32 get_PointerScreenPoint(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Graphics.PointInt32 __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Graphics.PointInt32*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x6E, 0xA4, 0x12, 0xDF, 0xEE, 0xDA, 0xAC, 0x5D, 0xA6, 0x78, 0xD7, 0xD5, 0xE4, 0xD0, 0x89, 0x3A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("DF12A46E-DAEE-5DAC-A678-D7D5E4D0893A")]
    internal interface IExitedMoveSizeEventArgs : global::Microsoft.UI.Input.IExitedMoveSizeEventArgs
    {
    }
    internal static class IFocusChangedEventArgsMethods
    {

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x15, 0xB1, 0x39, 0xA0, 0xDF, 0xDB, 0x4C, 0x59, 0x9B, 0x86, 0xDA, 0x6A, 0xA0, 0x5C, 0x9F, 0xA2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A039B115-DBDF-594C-9B86-DA6AA05C9FA2")]
    internal interface IFocusChangedEventArgs : global::Microsoft.UI.Input.IFocusChangedEventArgs
    {
    }
    internal static class IFocusNavigationRequestMethods
    {

        internal static unsafe Guid get_CorrelationId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            Guid __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, Guid*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::System.Nullable<global::Windows.Foundation.Rect> get_HintRect(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.Foundation.Rect>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.Foundation.Rect>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Input.FocusNavigationReason get_Reason(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.FocusNavigationReason __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.FocusNavigationReason*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x83, 0xBB, 0x84, 0x6D, 0x84, 0x9C, 0x12, 0x51, 0x85, 0xE9, 0x89, 0x19, 0xAC, 0xF9, 0x72, 0x62 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("6D84BB83-9C84-5112-85E9-8919ACF97262")]
    internal interface IFocusNavigationRequest : global::Microsoft.UI.Input.IFocusNavigationRequest
    {
    }
    internal static class IFocusNavigationRequestEventArgsMethods
    {

        internal static unsafe global::Microsoft.UI.Input.FocusNavigationRequest get_Request(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.FocusNavigationRequest.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Input.FocusNavigationRequest.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Input.FocusNavigationResult get_Result(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.FocusNavigationResult __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.FocusNavigationResult*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Result(IObjectReference _obj, global::Microsoft.UI.Input.FocusNavigationResult value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.FocusNavigationResult, int>**)ThisPtr)[8](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x26, 0x34, 0xA6, 0x35, 0x71, 0xE2, 0xF9, 0x59, 0xA2, 0x31, 0xD, 0x19, 0x3, 0x14, 0xB4, 0x15 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("35A63426-E271-59F9-A231-0D190314B415")]
    internal interface IFocusNavigationRequestEventArgs : global::Microsoft.UI.Input.IFocusNavigationRequestEventArgs
    {
    }
    internal static class IFocusNavigationRequestStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Input.FocusNavigationRequest Create(IObjectReference _obj, global::Microsoft.UI.Input.FocusNavigationReason reason)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.FocusNavigationReason, IntPtr*, int>**)ThisPtr)[6](ThisPtr, reason, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.FocusNavigationRequest.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Input.FocusNavigationRequest.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Input.FocusNavigationRequest Create(IObjectReference _obj, global::Microsoft.UI.Input.FocusNavigationReason reason, global::Windows.Foundation.Rect hintRect)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.FocusNavigationReason, global::Windows.Foundation.Rect, IntPtr*, int>**)ThisPtr)[7](ThisPtr, reason, hintRect, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.FocusNavigationRequest.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Input.FocusNavigationRequest.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Input.FocusNavigationRequest Create(IObjectReference _obj, global::Microsoft.UI.Input.FocusNavigationReason reason, global::Windows.Foundation.Rect hintRect, Guid correlationId)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.FocusNavigationReason, global::Windows.Foundation.Rect, Guid, IntPtr*, int>**)ThisPtr)[8](ThisPtr, reason, hintRect, correlationId, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.FocusNavigationRequest.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Input.FocusNavigationRequest.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD8, 0x2E, 0x4D, 0x8C, 0x63, 0x3A, 0x9E, 0x51, 0xA8, 0x27, 0xF5, 0x7E, 0x26, 0x3B, 0xD1, 0xFF };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8C4D2ED8-3A63-519E-A827-F57E263BD1FF")]
    internal interface IFocusNavigationRequestStatics : global::Microsoft.UI.Input.IFocusNavigationRequestStatics
    {
    }
    internal static class IGestureRecognizerMethods
    {


        internal static unsafe bool CanBeDoubleTap(IObjectReference _obj, global::Microsoft.UI.Input.PointerPoint value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            byte __retval = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Input.PointerPoint.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte*, int>**)ThisPtr)[39](ThisPtr, MarshalInspectable<object>.GetAbi(__value), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe void CompleteGesture(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[40](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void ProcessDownEvent(IObjectReference _obj, global::Microsoft.UI.Input.PointerPoint value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Input.PointerPoint.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[41](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe void ProcessMoveEvents(IObjectReference _obj, global::System.Collections.Generic.IList<global::Microsoft.UI.Input.PointerPoint> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Input.PointerPoint>>.CreateMarshaler2(value, global::ABI.System.Collections.Generic.IListMethods<global::Microsoft.UI.Input.PointerPoint>.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[42](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe void ProcessMouseWheelEvent(IObjectReference _obj, global::Microsoft.UI.Input.PointerPoint value, bool isShiftKeyDown, bool isControlKeyDown)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Input.PointerPoint.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte, byte, int>**)ThisPtr)[43](ThisPtr, MarshalInspectable<object>.GetAbi(__value), (byte)(isShiftKeyDown ? 1 : 0), (byte)(isControlKeyDown ? 1 : 0)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe void ProcessInertia(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[44](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void ProcessUpEvent(IObjectReference _obj, global::Microsoft.UI.Input.PointerPoint value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Input.PointerPoint.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[45](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }
        internal static unsafe bool get_AutoProcessInertia(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_AutoProcessInertia(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_CrossSlideExact(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_CrossSlideExact(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[9](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_CrossSlideHorizontally(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_CrossSlideHorizontally(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[11](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Input.CrossSlideThresholds get_CrossSlideThresholds(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.CrossSlideThresholds __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.CrossSlideThresholds*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_CrossSlideThresholds(IObjectReference _obj, global::Microsoft.UI.Input.CrossSlideThresholds value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.CrossSlideThresholds, int>**)ThisPtr)[13](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Input.GestureSettings get_GestureSettings(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.GestureSettings __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.GestureSettings*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_GestureSettings(IObjectReference _obj, global::Microsoft.UI.Input.GestureSettings value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.GestureSettings, int>**)ThisPtr)[15](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe float get_InertiaExpansion(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            float __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float*, int>**)ThisPtr)[24](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_InertiaExpansion(IObjectReference _obj, float value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float, int>**)ThisPtr)[25](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe float get_InertiaExpansionDeceleration(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            float __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float*, int>**)ThisPtr)[22](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_InertiaExpansionDeceleration(IObjectReference _obj, float value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float, int>**)ThisPtr)[23](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe float get_InertiaRotationAngle(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            float __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float*, int>**)ThisPtr)[26](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_InertiaRotationAngle(IObjectReference _obj, float value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float, int>**)ThisPtr)[27](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe float get_InertiaRotationDeceleration(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            float __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float*, int>**)ThisPtr)[28](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_InertiaRotationDeceleration(IObjectReference _obj, float value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float, int>**)ThisPtr)[29](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe float get_InertiaTranslationDeceleration(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            float __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float*, int>**)ThisPtr)[30](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_InertiaTranslationDeceleration(IObjectReference _obj, float value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float, int>**)ThisPtr)[31](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe float get_InertiaTranslationDisplacement(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            float __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float*, int>**)ThisPtr)[32](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_InertiaTranslationDisplacement(IObjectReference _obj, float value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float, int>**)ThisPtr)[33](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsActive(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[16](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_IsInertial(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[17](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_ManipulationExact(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[34](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_ManipulationExact(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[35](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Input.MouseWheelParameters get_MouseWheelParameters(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[36](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.MouseWheelParameters.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Input.MouseWheelParameters.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.Point get_PivotCenter(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[18](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_PivotCenter(IObjectReference _obj, global::Windows.Foundation.Point value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point, int>**)ThisPtr)[19](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe float get_PivotRadius(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            float __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float*, int>**)ThisPtr)[20](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_PivotRadius(IObjectReference _obj, float value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float, int>**)ThisPtr)[21](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_ShowGestureFeedback(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[37](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_ShowGestureFeedback(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[38](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.CrossSlidingEventArgs>>> _CrossSliding_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.CrossSlidingEventArgs>>> MakeCrossSlidingTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _CrossSliding_, new(), null);
            return _CrossSliding_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.CrossSlidingEventArgs>>> _CrossSliding => _CrossSliding_ ?? MakeCrossSlidingTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.CrossSlidingEventArgs>> Get_CrossSliding2(IObjectReference _obj, object _thisObj)
        {
            return _CrossSliding.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_CrossSlidingEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[62],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[63],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.DraggingEventArgs>>> _Dragging_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.DraggingEventArgs>>> MakeDraggingTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Dragging_, new(), null);
            return _Dragging_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.DraggingEventArgs>>> _Dragging => _Dragging_ ?? MakeDraggingTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.DraggingEventArgs>> Get_Dragging2(IObjectReference _obj, object _thisObj)
        {
            return _Dragging.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_DraggingEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[52],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[53],
                1);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.HoldingEventArgs>>> _Holding_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.HoldingEventArgs>>> MakeHoldingTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Holding_, new(), null);
            return _Holding_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.HoldingEventArgs>>> _Holding => _Holding_ ?? MakeHoldingTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.HoldingEventArgs>> Get_Holding2(IObjectReference _obj, object _thisObj)
        {
            return _Holding.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_HoldingEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[50],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[51],
                2);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.ManipulationCompletedEventArgs>>> _ManipulationCompleted_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.ManipulationCompletedEventArgs>>> MakeManipulationCompletedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ManipulationCompleted_, new(), null);
            return _ManipulationCompleted_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.ManipulationCompletedEventArgs>>> _ManipulationCompleted => _ManipulationCompleted_ ?? MakeManipulationCompletedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.ManipulationCompletedEventArgs>> Get_ManipulationCompleted2(IObjectReference _obj, object _thisObj)
        {
            return _ManipulationCompleted.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_ManipulationCompletedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[60],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[61],
                3);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.ManipulationInertiaStartingEventArgs>>> _ManipulationInertiaStarting_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.ManipulationInertiaStartingEventArgs>>> MakeManipulationInertiaStartingTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ManipulationInertiaStarting_, new(), null);
            return _ManipulationInertiaStarting_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.ManipulationInertiaStartingEventArgs>>> _ManipulationInertiaStarting => _ManipulationInertiaStarting_ ?? MakeManipulationInertiaStartingTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.ManipulationInertiaStartingEventArgs>> Get_ManipulationInertiaStarting2(IObjectReference _obj, object _thisObj)
        {
            return _ManipulationInertiaStarting.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_ManipulationInertiaStartingEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[58],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[59],
                4);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.ManipulationStartedEventArgs>>> _ManipulationStarted_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.ManipulationStartedEventArgs>>> MakeManipulationStartedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ManipulationStarted_, new(), null);
            return _ManipulationStarted_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.ManipulationStartedEventArgs>>> _ManipulationStarted => _ManipulationStarted_ ?? MakeManipulationStartedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.ManipulationStartedEventArgs>> Get_ManipulationStarted2(IObjectReference _obj, object _thisObj)
        {
            return _ManipulationStarted.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_ManipulationStartedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[54],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[55],
                5);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.ManipulationUpdatedEventArgs>>> _ManipulationUpdated_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.ManipulationUpdatedEventArgs>>> MakeManipulationUpdatedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ManipulationUpdated_, new(), null);
            return _ManipulationUpdated_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.ManipulationUpdatedEventArgs>>> _ManipulationUpdated => _ManipulationUpdated_ ?? MakeManipulationUpdatedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.ManipulationUpdatedEventArgs>> Get_ManipulationUpdated2(IObjectReference _obj, object _thisObj)
        {
            return _ManipulationUpdated.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_ManipulationUpdatedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[56],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[57],
                6);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.RightTappedEventArgs>>> _RightTapped_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.RightTappedEventArgs>>> MakeRightTappedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _RightTapped_, new(), null);
            return _RightTapped_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.RightTappedEventArgs>>> _RightTapped => _RightTapped_ ?? MakeRightTappedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.RightTappedEventArgs>> Get_RightTapped2(IObjectReference _obj, object _thisObj)
        {
            return _RightTapped.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_RightTappedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[48],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[49],
                7);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.TappedEventArgs>>> _Tapped_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.TappedEventArgs>>> MakeTappedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Tapped_, new(), null);
            return _Tapped_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.TappedEventArgs>>> _Tapped => _Tapped_ ?? MakeTappedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.GestureRecognizer, global::Microsoft.UI.Input.TappedEventArgs>> Get_Tapped2(IObjectReference _obj, object _thisObj)
        {
            return _Tapped.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_TappedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[46],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[47],
                8);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFC, 0x9A, 0xA8, 0xCD, 0xD0, 0x6B, 0x5C, 0x59, 0xBA, 0x37, 0x54, 0x5F, 0xCE, 0x5B, 0xF0, 0x16 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("CDA89AFC-6BD0-595C-BA37-545FCE5BF016")]
    internal interface IGestureRecognizer : global::Microsoft.UI.Input.IGestureRecognizer
    {
    }
    internal static class IHoldingEventArgsMethods
    {

        internal static unsafe global::Microsoft.UI.Input.HoldingState get_HoldingState(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.HoldingState __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.HoldingState*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Input.PointerDeviceType get_PointerDeviceType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.PointerDeviceType __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.PointerDeviceType*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.Point get_Position(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x85, 0x9E, 0x44, 0x8E, 0x23, 0xD2, 0x3C, 0x53, 0xB0, 0xB2, 0xBF, 0x7C, 0x6D, 0x10, 0xC2, 0xDB };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8E449E85-D223-533C-B0B2-BF7C6D10C2DB")]
    internal interface IHoldingEventArgs : global::Microsoft.UI.Input.IHoldingEventArgs
    {
    }
    internal static class IInputActivationListenerMethods
    {

        internal static unsafe global::Microsoft.UI.Input.InputActivationState get_State(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.InputActivationState __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.InputActivationState*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputActivationListener, global::Microsoft.UI.Input.InputActivationListenerActivationChangedEventArgs>>> _InputActivationChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputActivationListener, global::Microsoft.UI.Input.InputActivationListenerActivationChangedEventArgs>>> MakeInputActivationChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _InputActivationChanged_, new(), null);
            return _InputActivationChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputActivationListener, global::Microsoft.UI.Input.InputActivationListenerActivationChangedEventArgs>>> _InputActivationChanged => _InputActivationChanged_ ?? MakeInputActivationChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputActivationListener, global::Microsoft.UI.Input.InputActivationListenerActivationChangedEventArgs>> Get_InputActivationChanged2(IObjectReference _obj, object _thisObj)
        {
            return _InputActivationChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputActivationListener__global__Microsoft_UI_Input_InputActivationListenerActivationChangedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[7],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[8],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x27, 0x86, 0x81, 0x3B, 0xE7, 0x6C, 0xD, 0x5E, 0xA0, 0xF5, 0x66, 0x84, 0xFD, 0x1A, 0xEC, 0x78 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("3B818627-6CE7-5E0D-A0F5-6684FD1AEC78")]
    internal interface IInputActivationListener : global::Microsoft.UI.Input.IInputActivationListener
    {
    }
    internal static class IInputActivationListenerActivationChangedEventArgsMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x6B, 0x52, 0x78, 0x79, 0xB6, 0x0, 0x3, 0x53, 0x8F, 0x7D, 0x55, 0xBE, 0xF3, 0x6D, 0xA7, 0x86 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("7978526B-00B6-5303-8F7D-55BEF36DA786")]
    internal interface IInputActivationListenerActivationChangedEventArgs : global::Microsoft.UI.Input.IInputActivationListenerActivationChangedEventArgs
    {
    }
    internal static class IInputActivationListenerStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Input.InputActivationListener GetForWindowId(IObjectReference _obj, global::Microsoft.UI.WindowId windowId)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.WindowId, IntPtr*, int>**)ThisPtr)[6](ThisPtr, windowId, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.InputActivationListener.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Input.InputActivationListener.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x43, 0x98, 0x24, 0xC4, 0x53, 0xF0, 0x99, 0x5C, 0x9D, 0x51, 0x72, 0xA, 0xDE, 0x94, 0x22, 0x4D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C4249843-F053-5C99-9D51-720ADE94224D")]
    internal interface IInputActivationListenerStatics : global::Microsoft.UI.Input.IInputActivationListenerStatics
    {
    }
    internal static class IInputActivationListenerStatics2Methods
    {


        internal static unsafe global::Microsoft.UI.Input.InputActivationListener GetForIsland(IObjectReference _obj, global::Microsoft.UI.Content.ContentIsland island)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __island = default;
            IntPtr __retval = default;
            try
            {
                __island = global::ABI.Microsoft.UI.Content.ContentIsland.CreateMarshaler2(island);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__island), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.InputActivationListener.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__island);
                global::ABI.Microsoft.UI.Input.InputActivationListener.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x20, 0x61, 0xA2, 0x7E, 0x36, 0x96, 0x92, 0x52, 0xA7, 0xB1, 0x56, 0x54, 0x4A, 0xC5, 0x1A, 0x22 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("7EA26120-9636-5292-A7B1-56544AC51A22")]
    internal interface IInputActivationListenerStatics2 : global::Microsoft.UI.Input.IInputActivationListenerStatics2
    {
    }
    internal static class IInputCursorMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF9, 0x15, 0x9B, 0x35, 0xC2, 0x19, 0x14, 0x57, 0x84, 0x32, 0x75, 0x17, 0x68, 0x26, 0x40, 0x6B };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("359B15F9-19C2-5714-8432-75176826406B")]
    internal interface IInputCursor : global::Microsoft.UI.Input.IInputCursor
    {
    }
    internal static class IInputCursorFactoryMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7B, 0x64, 0x47, 0x2F, 0xE0, 0x4B, 0xE9, 0x53, 0xBE, 0x7E, 0xC3, 0x8D, 0x54, 0x59, 0xDB, 0x6B };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2F47647B-4BE0-53E9-BE7E-C38D5459DB6B")]
    internal interface IInputCursorFactory : global::Microsoft.UI.Input.IInputCursorFactory
    {
    }
    internal static class IInputCursorStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Input.InputCursor CreateFromCoreCursor(IObjectReference _obj, global::Windows.UI.Core.CoreCursor cursor)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __cursor = default;
            IntPtr __retval = default;
            try
            {
                __cursor = global::ABI.Windows.UI.Core.CoreCursor.CreateMarshaler2(cursor);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__cursor), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.InputCursor.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__cursor);
                global::ABI.Microsoft.UI.Input.InputCursor.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x52, 0xA5, 0xF6, 0x92, 0x9F, 0x9, 0xFB, 0x55, 0x8C, 0x31, 0xE4, 0x50, 0x28, 0x4C, 0x96, 0x43 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("92F6A552-099F-55FB-8C31-E450284C9643")]
    internal interface IInputCursorStatics : global::Microsoft.UI.Input.IInputCursorStatics
    {
    }
    internal static class IInputCustomCursorMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x42, 0xF0, 0x86, 0x54, 0x1A, 0x7E, 0xC8, 0x5D, 0x80, 0x41, 0xE4, 0x7B, 0x60, 0x9A, 0x5B, 0xA1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("5486F042-7E1A-5DC8-8041-E47B609A5BA1")]
    internal interface IInputCustomCursor : global::Microsoft.UI.Input.IInputCustomCursor
    {
    }
    internal static class IInputCustomCursorFactoryMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x82, 0x28, 0x40, 0x6F, 0xE0, 0x66, 0xD3, 0x57, 0x89, 0xD0, 0xAA, 0x5E, 0x2F, 0xF9, 0x17, 0xBC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("6F402882-66E0-57D3-89D0-AA5E2FF917BC")]
    internal interface IInputCustomCursorFactory : global::Microsoft.UI.Input.IInputCustomCursorFactory
    {
    }
    internal static class IInputDesktopNamedResourceCursorMethods
    {

        internal static unsafe string get_ModuleName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_ResourceName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3B, 0xA9, 0xE, 0xF4, 0xD7, 0xE, 0x3A, 0x5B, 0xBF, 0xE2, 0x14, 0xE2, 0xB5, 0xAD, 0x88, 0xA3 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F40EA93B-0ED7-5B3A-BFE2-14E2B5AD88A3")]
    internal interface IInputDesktopNamedResourceCursor : global::Microsoft.UI.Input.IInputDesktopNamedResourceCursor
    {
    }
    internal static class IInputDesktopNamedResourceCursorStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Input.InputDesktopNamedResourceCursor Create(IObjectReference _obj, string resourceName)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __resourceName = new(resourceName);
                fixed(void* ___resourceName = __resourceName)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __resourceName), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.UI.Input.InputDesktopNamedResourceCursor.FromAbi(__retval);
                }
            }
            finally
            {
                global::ABI.Microsoft.UI.Input.InputDesktopNamedResourceCursor.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Input.InputDesktopNamedResourceCursor CreateFromModule(IObjectReference _obj, string moduleName, string resourceName)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __moduleName = new(moduleName);
                MarshalString.Pinnable __resourceName = new(resourceName);
                fixed(void* ___moduleName = __moduleName, ___resourceName = __resourceName)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __moduleName), MarshalString.GetAbi(ref __resourceName), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.UI.Input.InputDesktopNamedResourceCursor.FromAbi(__retval);
                }
            }
            finally
            {
                global::ABI.Microsoft.UI.Input.InputDesktopNamedResourceCursor.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xAA, 0xD5, 0xB6, 0xE8, 0x8B, 0x89, 0x69, 0x5E, 0xB0, 0x1F, 0x38, 0x3A, 0x9, 0x43, 0xE3, 0xE4 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E8B6D5AA-898B-5E69-B01F-383A0943E3E4")]
    internal interface IInputDesktopNamedResourceCursorStatics : global::Microsoft.UI.Input.IInputDesktopNamedResourceCursorStatics
    {
    }
    internal static class IInputDesktopResourceCursorMethods
    {

        internal static unsafe string get_ModuleName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe uint get_ResourceId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7F, 0x77, 0xF2, 0x1D, 0x90, 0x7C, 0xFC, 0x58, 0xA7, 0xA3, 0xD5, 0x73, 0x6C, 0x65, 0x10, 0xFD };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("1DF2777F-7C90-58FC-A7A3-D5736C6510FD")]
    internal interface IInputDesktopResourceCursor : global::Microsoft.UI.Input.IInputDesktopResourceCursor
    {
    }
    internal static class IInputDesktopResourceCursorStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Input.InputDesktopResourceCursor Create(IObjectReference _obj, uint resourceId)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint, IntPtr*, int>**)ThisPtr)[6](ThisPtr, resourceId, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.InputDesktopResourceCursor.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Input.InputDesktopResourceCursor.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Input.InputDesktopResourceCursor CreateFromModule(IObjectReference _obj, string moduleName, uint resourceId)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __moduleName = new(moduleName);
                fixed(void* ___moduleName = __moduleName)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, uint, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __moduleName), resourceId, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.UI.Input.InputDesktopResourceCursor.FromAbi(__retval);
                }
            }
            finally
            {
                global::ABI.Microsoft.UI.Input.InputDesktopResourceCursor.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x37, 0xDC, 0x40, 0xF4, 0xB6, 0xA0, 0xEB, 0x56, 0xBC, 0xEC, 0xB0, 0x24, 0xF2, 0x23, 0x3D, 0x47 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F440DC37-A0B6-56EB-BCEC-B024F2233D47")]
    internal interface IInputDesktopResourceCursorStatics : global::Microsoft.UI.Input.IInputDesktopResourceCursorStatics
    {
    }
    internal static class IInputFocusControllerMethods
    {


        internal static unsafe bool TrySetFocus(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe bool get_HasFocus(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputFocusController, global::Microsoft.UI.Input.FocusChangedEventArgs>>> _GotFocus_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputFocusController, global::Microsoft.UI.Input.FocusChangedEventArgs>>> MakeGotFocusTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _GotFocus_, new(), null);
            return _GotFocus_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputFocusController, global::Microsoft.UI.Input.FocusChangedEventArgs>>> _GotFocus => _GotFocus_ ?? MakeGotFocusTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputFocusController, global::Microsoft.UI.Input.FocusChangedEventArgs>> Get_GotFocus2(IObjectReference _obj, object _thisObj)
        {
            return _GotFocus.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputFocusController__global__Microsoft_UI_Input_FocusChangedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[8],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[9],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputFocusController, global::Microsoft.UI.Input.FocusChangedEventArgs>>> _LostFocus_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputFocusController, global::Microsoft.UI.Input.FocusChangedEventArgs>>> MakeLostFocusTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _LostFocus_, new(), null);
            return _LostFocus_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputFocusController, global::Microsoft.UI.Input.FocusChangedEventArgs>>> _LostFocus => _LostFocus_ ?? MakeLostFocusTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputFocusController, global::Microsoft.UI.Input.FocusChangedEventArgs>> Get_LostFocus2(IObjectReference _obj, object _thisObj)
        {
            return _LostFocus.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputFocusController__global__Microsoft_UI_Input_FocusChangedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[10],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[11],
                1);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x6C, 0xC2, 0xFD, 0x8D, 0x8D, 0x8B, 0x5D, 0x51, 0x8D, 0xDD, 0x46, 0x85, 0xB3, 0xA5, 0x40, 0xE9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8DFDC26C-8B8D-515D-8DDD-4685B3A540E9")]
    internal interface IInputFocusController : global::Microsoft.UI.Input.IInputFocusController
    {
    }
    internal static class IInputFocusController2Methods
    {


        internal static unsafe global::Microsoft.UI.Input.FocusNavigationResult DepartFocus(IObjectReference _obj, global::Microsoft.UI.Input.FocusNavigationRequest request)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __request = default;
            global::Microsoft.UI.Input.FocusNavigationResult __retval = default;
            try
            {
                __request = global::ABI.Microsoft.UI.Input.FocusNavigationRequest.CreateMarshaler2(request);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Microsoft.UI.Input.FocusNavigationResult*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__request), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__request);
            }
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputFocusController, global::Microsoft.UI.Input.FocusNavigationRequestEventArgs>>> _NavigateFocusRequested_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputFocusController, global::Microsoft.UI.Input.FocusNavigationRequestEventArgs>>> MakeNavigateFocusRequestedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _NavigateFocusRequested_, new(), null);
            return _NavigateFocusRequested_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputFocusController, global::Microsoft.UI.Input.FocusNavigationRequestEventArgs>>> _NavigateFocusRequested => _NavigateFocusRequested_ ?? MakeNavigateFocusRequestedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputFocusController, global::Microsoft.UI.Input.FocusNavigationRequestEventArgs>> Get_NavigateFocusRequested2(IObjectReference _obj, object _thisObj)
        {
            return _NavigateFocusRequested.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputFocusController__global__Microsoft_UI_Input_FocusNavigationRequestEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[7],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[8],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7C, 0x7, 0x65, 0x51, 0x4B, 0xCD, 0x1D, 0x50, 0xB3, 0x86, 0xB5, 0x6, 0x82, 0x36, 0x1, 0x85 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("5165077C-CD4B-501D-B386-B50682360185")]
    internal interface IInputFocusController2 : global::Microsoft.UI.Input.IInputFocusController2
    {
    }
    internal static class IInputFocusControllerStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Input.InputFocusController GetForIsland(IObjectReference _obj, global::Microsoft.UI.Content.ContentIsland island)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __island = default;
            IntPtr __retval = default;
            try
            {
                __island = global::ABI.Microsoft.UI.Content.ContentIsland.CreateMarshaler2(island);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__island), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.InputFocusController.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__island);
                global::ABI.Microsoft.UI.Input.InputFocusController.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xDA, 0x11, 0xB3, 0xAE, 0x9B, 0xDA, 0x1B, 0x5A, 0x92, 0xF4, 0x83, 0xDD, 0xDE, 0x93, 0x3E, 0x0 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("AEB311DA-DA9B-5A1B-92F4-83DDDE933E00")]
    internal interface IInputFocusControllerStatics : global::Microsoft.UI.Input.IInputFocusControllerStatics
    {
    }
    internal static class IInputFocusNavigationHostMethods
    {


        internal static unsafe global::Microsoft.UI.Input.FocusNavigationResult NavigateFocus(IObjectReference _obj, global::Microsoft.UI.Input.FocusNavigationRequest request)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __request = default;
            global::Microsoft.UI.Input.FocusNavigationResult __retval = default;
            try
            {
                __request = global::ABI.Microsoft.UI.Input.FocusNavigationRequest.CreateMarshaler2(request);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Microsoft.UI.Input.FocusNavigationResult*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__request), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__request);
            }
        }
        internal static unsafe bool get_ContainsFocus(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputFocusNavigationHost, global::Microsoft.UI.Input.FocusNavigationRequestEventArgs>>> _DepartFocusRequested_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputFocusNavigationHost, global::Microsoft.UI.Input.FocusNavigationRequestEventArgs>>> MakeDepartFocusRequestedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _DepartFocusRequested_, new(), null);
            return _DepartFocusRequested_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputFocusNavigationHost, global::Microsoft.UI.Input.FocusNavigationRequestEventArgs>>> _DepartFocusRequested => _DepartFocusRequested_ ?? MakeDepartFocusRequestedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputFocusNavigationHost, global::Microsoft.UI.Input.FocusNavigationRequestEventArgs>> Get_DepartFocusRequested2(IObjectReference _obj, object _thisObj)
        {
            return _DepartFocusRequested.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputFocusNavigationHost__global__Microsoft_UI_Input_FocusNavigationRequestEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[8],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[9],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x47, 0xA1, 0xC2, 0x53, 0x2C, 0x93, 0x86, 0x54, 0xA9, 0xC6, 0xF6, 0xC5, 0xA9, 0xC6, 0x59, 0x56 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("53C2A147-932C-5486-A9C6-F6C5A9C65956")]
    internal interface IInputFocusNavigationHost : global::Microsoft.UI.Input.IInputFocusNavigationHost
    {
    }
    internal static class IInputFocusNavigationHostStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Input.InputFocusNavigationHost GetForSiteBridge(IObjectReference _obj, global::Microsoft.UI.Content.IContentSiteBridge site)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __site = default;
            IntPtr __retval = default;
            try
            {
                __site = MarshalInterface<global::Microsoft.UI.Content.IContentSiteBridge>.CreateMarshaler2(site, global::ABI.Microsoft.UI.Content.IContentSiteBridgeMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__site), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.InputFocusNavigationHost.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__site);
                global::ABI.Microsoft.UI.Input.InputFocusNavigationHost.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD1, 0x2C, 0xC6, 0xC9, 0xDB, 0x73, 0xA9, 0x5A, 0xB8, 0x9D, 0x14, 0x35, 0x9, 0xDB, 0x8F, 0x37 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C9C62CD1-73DB-5AA9-B89D-143509DB8F37")]
    internal interface IInputFocusNavigationHostStatics : global::Microsoft.UI.Input.IInputFocusNavigationHostStatics
    {
    }
    internal static class IInputFocusNavigationHostStatics2Methods
    {


        internal static unsafe global::Microsoft.UI.Input.InputFocusNavigationHost GetForSiteLink(IObjectReference _obj, global::Microsoft.UI.Content.IContentSiteLink contentSiteLink)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __contentSiteLink = default;
            IntPtr __retval = default;
            try
            {
                __contentSiteLink = MarshalInterface<global::Microsoft.UI.Content.IContentSiteLink>.CreateMarshaler2(contentSiteLink, global::ABI.Microsoft.UI.Content.IContentSiteLinkMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__contentSiteLink), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.InputFocusNavigationHost.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__contentSiteLink);
                global::ABI.Microsoft.UI.Input.InputFocusNavigationHost.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x60, 0x5F, 0x50, 0x82, 0x7B, 0xEF, 0xD8, 0x55, 0x83, 0x62, 0x8C, 0xC2, 0x84, 0x2, 0x66, 0xA1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("82505F60-EF7B-55D8-8362-8CC2840266A1")]
    internal interface IInputFocusNavigationHostStatics2 : global::Microsoft.UI.Input.IInputFocusNavigationHostStatics2
    {
    }
    internal static class IInputKeyboardSourceMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x6, 0xB9, 0x61, 0xED, 0xAD, 0x16, 0xF7, 0x5D, 0xA5, 0x50, 0x5E, 0x6F, 0x7D, 0x22, 0x29, 0xF7 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("ED61B906-16AD-5DF7-A550-5E6F7D2229F7")]
    internal interface IInputKeyboardSource : global::Microsoft.UI.Input.IInputKeyboardSource
    {
    }
    internal static class IInputKeyboardSource2Methods
    {


        internal static unsafe global::Microsoft.UI.Input.VirtualKeyStates GetCurrentKeyState(IObjectReference _obj, global::Windows.System.VirtualKey virtualKey)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.VirtualKeyStates __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.System.VirtualKey, global::Microsoft.UI.Input.VirtualKeyStates*, int>**)ThisPtr)[6](ThisPtr, virtualKey, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Input.VirtualKeyStates GetKeyState(IObjectReference _obj, global::Windows.System.VirtualKey virtualKey)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.VirtualKeyStates __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.System.VirtualKey, global::Microsoft.UI.Input.VirtualKeyStates*, int>**)ThisPtr)[7](ThisPtr, virtualKey, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputKeyboardSource, global::Microsoft.UI.Input.CharacterReceivedEventArgs>>> _CharacterReceived_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputKeyboardSource, global::Microsoft.UI.Input.CharacterReceivedEventArgs>>> MakeCharacterReceivedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _CharacterReceived_, new(), null);
            return _CharacterReceived_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputKeyboardSource, global::Microsoft.UI.Input.CharacterReceivedEventArgs>>> _CharacterReceived => _CharacterReceived_ ?? MakeCharacterReceivedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputKeyboardSource, global::Microsoft.UI.Input.CharacterReceivedEventArgs>> Get_CharacterReceived2(IObjectReference _obj, object _thisObj)
        {
            return _CharacterReceived.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputKeyboardSource__global__Microsoft_UI_Input_CharacterReceivedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[8],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[9],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputKeyboardSource, global::Microsoft.UI.Input.ContextMenuKeyEventArgs>>> _ContextMenuKey_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputKeyboardSource, global::Microsoft.UI.Input.ContextMenuKeyEventArgs>>> MakeContextMenuKeyTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ContextMenuKey_, new(), null);
            return _ContextMenuKey_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputKeyboardSource, global::Microsoft.UI.Input.ContextMenuKeyEventArgs>>> _ContextMenuKey => _ContextMenuKey_ ?? MakeContextMenuKeyTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputKeyboardSource, global::Microsoft.UI.Input.ContextMenuKeyEventArgs>> Get_ContextMenuKey2(IObjectReference _obj, object _thisObj)
        {
            return _ContextMenuKey.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputKeyboardSource__global__Microsoft_UI_Input_ContextMenuKeyEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[10],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[11],
                1);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputKeyboardSource, global::Microsoft.UI.Input.KeyEventArgs>>> _KeyDown_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputKeyboardSource, global::Microsoft.UI.Input.KeyEventArgs>>> MakeKeyDownTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _KeyDown_, new(), null);
            return _KeyDown_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputKeyboardSource, global::Microsoft.UI.Input.KeyEventArgs>>> _KeyDown => _KeyDown_ ?? MakeKeyDownTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputKeyboardSource, global::Microsoft.UI.Input.KeyEventArgs>> Get_KeyDown2(IObjectReference _obj, object _thisObj)
        {
            return _KeyDown.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputKeyboardSource__global__Microsoft_UI_Input_KeyEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[12],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[13],
                2);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputKeyboardSource, global::Microsoft.UI.Input.KeyEventArgs>>> _KeyUp_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputKeyboardSource, global::Microsoft.UI.Input.KeyEventArgs>>> MakeKeyUpTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _KeyUp_, new(), null);
            return _KeyUp_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputKeyboardSource, global::Microsoft.UI.Input.KeyEventArgs>>> _KeyUp => _KeyUp_ ?? MakeKeyUpTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputKeyboardSource, global::Microsoft.UI.Input.KeyEventArgs>> Get_KeyUp2(IObjectReference _obj, object _thisObj)
        {
            return _KeyUp.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputKeyboardSource__global__Microsoft_UI_Input_KeyEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[14],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[15],
                3);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputKeyboardSource, global::Microsoft.UI.Input.KeyEventArgs>>> _SystemKeyDown_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputKeyboardSource, global::Microsoft.UI.Input.KeyEventArgs>>> MakeSystemKeyDownTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _SystemKeyDown_, new(), null);
            return _SystemKeyDown_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputKeyboardSource, global::Microsoft.UI.Input.KeyEventArgs>>> _SystemKeyDown => _SystemKeyDown_ ?? MakeSystemKeyDownTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputKeyboardSource, global::Microsoft.UI.Input.KeyEventArgs>> Get_SystemKeyDown2(IObjectReference _obj, object _thisObj)
        {
            return _SystemKeyDown.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputKeyboardSource__global__Microsoft_UI_Input_KeyEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[16],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[17],
                4);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputKeyboardSource, global::Microsoft.UI.Input.KeyEventArgs>>> _SystemKeyUp_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputKeyboardSource, global::Microsoft.UI.Input.KeyEventArgs>>> MakeSystemKeyUpTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _SystemKeyUp_, new(), null);
            return _SystemKeyUp_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputKeyboardSource, global::Microsoft.UI.Input.KeyEventArgs>>> _SystemKeyUp => _SystemKeyUp_ ?? MakeSystemKeyUpTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputKeyboardSource, global::Microsoft.UI.Input.KeyEventArgs>> Get_SystemKeyUp2(IObjectReference _obj, object _thisObj)
        {
            return _SystemKeyUp.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputKeyboardSource__global__Microsoft_UI_Input_KeyEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[18],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[19],
                5);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB6, 0xC9, 0xD1, 0x79, 0xC9, 0xB3, 0xC2, 0x5E, 0x8A, 0x5B, 0x70, 0x70, 0x88, 0x78, 0x7F, 0x78 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("79D1C9B6-B3C9-5EC2-8A5B-707088787F78")]
    internal interface IInputKeyboardSource2 : global::Microsoft.UI.Input.IInputKeyboardSource2
    {
    }
    internal static class IInputKeyboardSourceStaticsMethods
    {


        internal static unsafe global::Windows.UI.Core.CoreVirtualKeyStates GetKeyStateForCurrentThread(IObjectReference _obj, global::Windows.System.VirtualKey virtualKey)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Core.CoreVirtualKeyStates __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.System.VirtualKey, global::Windows.UI.Core.CoreVirtualKeyStates*, int>**)ThisPtr)[6](ThisPtr, virtualKey, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3D, 0x56, 0xE1, 0xF4, 0x2E, 0x8C, 0xCD, 0x5B, 0xB7, 0x84, 0x47, 0xAD, 0xEA, 0xA3, 0xCD, 0x7E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F4E1563D-8C2E-5BCD-B784-47ADEAA3CD7E")]
    internal interface IInputKeyboardSourceStatics : global::Microsoft.UI.Input.IInputKeyboardSourceStatics
    {
    }
    internal static class IInputKeyboardSourceStatics2Methods
    {


        internal static unsafe global::Microsoft.UI.Input.InputKeyboardSource GetForIsland(IObjectReference _obj, global::Microsoft.UI.Content.ContentIsland island)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __island = default;
            IntPtr __retval = default;
            try
            {
                __island = global::ABI.Microsoft.UI.Content.ContentIsland.CreateMarshaler2(island);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__island), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.InputKeyboardSource.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__island);
                global::ABI.Microsoft.UI.Input.InputKeyboardSource.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x8C, 0x51, 0x57, 0x88, 0x99, 0x28, 0x11, 0x5F, 0x9B, 0x64, 0xA, 0xD8, 0x32, 0x34, 0x82, 0x4B };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8857518C-2899-5F11-9B64-0AD83234824B")]
    internal interface IInputKeyboardSourceStatics2 : global::Microsoft.UI.Input.IInputKeyboardSourceStatics2
    {
    }
    internal static class IInputKeyboardSourceStatics3Methods
    {


        internal static unsafe global::Microsoft.UI.Input.InputKeyboardSource GetForWindowId(IObjectReference _obj, global::Microsoft.UI.WindowId windowId)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.WindowId, IntPtr*, int>**)ThisPtr)[6](ThisPtr, windowId, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.InputKeyboardSource.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Input.InputKeyboardSource.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC5, 0x60, 0xB9, 0x34, 0xAE, 0xA5, 0xAF, 0x52, 0x85, 0x66, 0x6D, 0x2D, 0x55, 0xFF, 0x52, 0xD1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("34B960C5-A5AE-52AF-8566-6D2D55FF52D1")]
    internal interface IInputKeyboardSourceStatics3 : global::Microsoft.UI.Input.IInputKeyboardSourceStatics3
    {
    }
    internal static class IInputLightDismissActionMethods
    {


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputLightDismissAction, global::Microsoft.UI.Input.InputLightDismissEventArgs>>> _Dismissed_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputLightDismissAction, global::Microsoft.UI.Input.InputLightDismissEventArgs>>> MakeDismissedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Dismissed_, new(), null);
            return _Dismissed_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputLightDismissAction, global::Microsoft.UI.Input.InputLightDismissEventArgs>>> _Dismissed => _Dismissed_ ?? MakeDismissedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputLightDismissAction, global::Microsoft.UI.Input.InputLightDismissEventArgs>> Get_Dismissed2(IObjectReference _obj, object _thisObj)
        {
            return _Dismissed.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputLightDismissAction__global__Microsoft_UI_Input_InputLightDismissEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[6],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[7],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x2, 0x95, 0xA3, 0xE8, 0x60, 0xA8, 0x2F, 0x50, 0x8C, 0x10, 0x36, 0x46, 0xD4, 0x3A, 0xEC, 0xF1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E8A39502-A860-502F-8C10-3646D43AECF1")]
    internal interface IInputLightDismissAction : global::Microsoft.UI.Input.IInputLightDismissAction
    {
    }
    internal static class IInputLightDismissActionStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Input.InputLightDismissAction GetForWindowId(IObjectReference _obj, global::Microsoft.UI.WindowId windowId)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.WindowId, IntPtr*, int>**)ThisPtr)[6](ThisPtr, windowId, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.InputLightDismissAction.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Input.InputLightDismissAction.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xEF, 0x8D, 0x9B, 0xED, 0x96, 0x64, 0x69, 0x51, 0x98, 0x4D, 0xD4, 0x4B, 0x4E, 0x69, 0x6, 0x23 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("ED9B8DEF-6496-5169-984D-D44B4E690623")]
    internal interface IInputLightDismissActionStatics : global::Microsoft.UI.Input.IInputLightDismissActionStatics
    {
    }
    internal static class IInputLightDismissActionStatics2Methods
    {


        internal static unsafe global::Microsoft.UI.Input.InputLightDismissAction GetForIsland(IObjectReference _obj, global::Microsoft.UI.Content.ContentIsland content)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __content = default;
            IntPtr __retval = default;
            try
            {
                __content = global::ABI.Microsoft.UI.Content.ContentIsland.CreateMarshaler2(content);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__content), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.InputLightDismissAction.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__content);
                global::ABI.Microsoft.UI.Input.InputLightDismissAction.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA8, 0xA8, 0x99, 0xC4, 0x82, 0x71, 0x79, 0x51, 0xA2, 0x8C, 0xEA, 0xB3, 0xF3, 0x69, 0xB6, 0xF9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C499A8A8-7182-5179-A28C-EAB3F369B6F9")]
    internal interface IInputLightDismissActionStatics2 : global::Microsoft.UI.Input.IInputLightDismissActionStatics2
    {
    }
    internal static class IInputLightDismissEventArgsMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xEE, 0x60, 0x86, 0x7, 0xCA, 0x7, 0x8, 0x58, 0xB9, 0x82, 0xE6, 0xE8, 0x99, 0xCF, 0x9, 0x8C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("078660EE-07CA-5808-B982-E6E899CF098C")]
    internal interface IInputLightDismissEventArgs : global::Microsoft.UI.Input.IInputLightDismissEventArgs
    {
    }
    internal static class IInputNonClientPointerSourceMethods
    {


        internal static unsafe void ClearAllRegionRects(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[7](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void ClearRegionRects(IObjectReference _obj, global::Microsoft.UI.Input.NonClientRegionKind region)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.NonClientRegionKind, int>**)ThisPtr)[8](ThisPtr, region));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.Graphics.RectInt32[] GetRegionRects(IObjectReference _obj, global::Microsoft.UI.Input.NonClientRegionKind region)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval_length = default;
            IntPtr __retval_data = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.NonClientRegionKind, int*, IntPtr*, int>**)ThisPtr)[9](ThisPtr, region, &__retval_length, &__retval_data));
                global::System.GC.KeepAlive(_obj);
                return MarshalBlittable<global::Windows.Graphics.RectInt32>.FromAbiArray((__retval_length, __retval_data));
            }
            finally
            {
                MarshalBlittable<global::Windows.Graphics.RectInt32>.DisposeAbiArray((__retval_length, __retval_data));
            }
        }

        internal static unsafe void SetRegionRects(IObjectReference _obj, global::Microsoft.UI.Input.NonClientRegionKind region, global::Windows.Graphics.RectInt32[] rects)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalBlittable<global::Windows.Graphics.RectInt32>.MarshalerArray __rects = default;
            int __rects_length = default;
            IntPtr __rects_data = default;
            try
            {
                __rects = MarshalBlittable<global::Windows.Graphics.RectInt32>.CreateMarshalerArray(rects);
                (__rects_length, __rects_data) = MarshalBlittable<global::Windows.Graphics.RectInt32>.GetAbiArray(__rects);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.NonClientRegionKind, int, IntPtr, int>**)ThisPtr)[10](ThisPtr, region, __rects_length, __rects_data));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalBlittable<global::Windows.Graphics.RectInt32>.DisposeMarshalerArray(__rects);
            }
        }
        internal static unsafe global::Microsoft.UI.Dispatching.DispatcherQueue get_DispatcherQueue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Dispatching.DispatcherQueue.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Dispatching.DispatcherQueue.DisposeAbi(__retval);
            }
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.NonClientCaptionTappedEventArgs>>> _CaptionTapped_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.NonClientCaptionTappedEventArgs>>> MakeCaptionTappedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _CaptionTapped_, new(), null);
            return _CaptionTapped_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.NonClientCaptionTappedEventArgs>>> _CaptionTapped => _CaptionTapped_ ?? MakeCaptionTappedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.NonClientCaptionTappedEventArgs>> Get_CaptionTapped2(IObjectReference _obj, object _thisObj)
        {
            return _CaptionTapped.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_NonClientCaptionTappedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[11],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[12],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.NonClientPointerEventArgs>>> _PointerEntered_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.NonClientPointerEventArgs>>> MakePointerEnteredTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _PointerEntered_, new(), null);
            return _PointerEntered_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.NonClientPointerEventArgs>>> _PointerEntered => _PointerEntered_ ?? MakePointerEnteredTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.NonClientPointerEventArgs>> Get_PointerEntered2(IObjectReference _obj, object _thisObj)
        {
            return _PointerEntered.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_NonClientPointerEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[13],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[14],
                1);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.NonClientPointerEventArgs>>> _PointerExited_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.NonClientPointerEventArgs>>> MakePointerExitedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _PointerExited_, new(), null);
            return _PointerExited_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.NonClientPointerEventArgs>>> _PointerExited => _PointerExited_ ?? MakePointerExitedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.NonClientPointerEventArgs>> Get_PointerExited2(IObjectReference _obj, object _thisObj)
        {
            return _PointerExited.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_NonClientPointerEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[15],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[16],
                2);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.NonClientPointerEventArgs>>> _PointerMoved_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.NonClientPointerEventArgs>>> MakePointerMovedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _PointerMoved_, new(), null);
            return _PointerMoved_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.NonClientPointerEventArgs>>> _PointerMoved => _PointerMoved_ ?? MakePointerMovedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.NonClientPointerEventArgs>> Get_PointerMoved2(IObjectReference _obj, object _thisObj)
        {
            return _PointerMoved.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_NonClientPointerEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[17],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[18],
                3);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.NonClientPointerEventArgs>>> _PointerPressed_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.NonClientPointerEventArgs>>> MakePointerPressedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _PointerPressed_, new(), null);
            return _PointerPressed_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.NonClientPointerEventArgs>>> _PointerPressed => _PointerPressed_ ?? MakePointerPressedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.NonClientPointerEventArgs>> Get_PointerPressed2(IObjectReference _obj, object _thisObj)
        {
            return _PointerPressed.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_NonClientPointerEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[19],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[20],
                4);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.NonClientPointerEventArgs>>> _PointerReleased_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.NonClientPointerEventArgs>>> MakePointerReleasedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _PointerReleased_, new(), null);
            return _PointerReleased_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.NonClientPointerEventArgs>>> _PointerReleased => _PointerReleased_ ?? MakePointerReleasedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.NonClientPointerEventArgs>> Get_PointerReleased2(IObjectReference _obj, object _thisObj)
        {
            return _PointerReleased.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_NonClientPointerEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[21],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[22],
                5);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.NonClientRegionsChangedEventArgs>>> _RegionsChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.NonClientRegionsChangedEventArgs>>> MakeRegionsChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _RegionsChanged_, new(), null);
            return _RegionsChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.NonClientRegionsChangedEventArgs>>> _RegionsChanged => _RegionsChanged_ ?? MakeRegionsChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.NonClientRegionsChangedEventArgs>> Get_RegionsChanged2(IObjectReference _obj, object _thisObj)
        {
            return _RegionsChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_NonClientRegionsChangedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[23],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[24],
                6);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB4, 0x32, 0x17, 0x47, 0x7, 0x3D, 0x4, 0x51, 0xB1, 0x92, 0xEB, 0xAC, 0xF7, 0x1E, 0x86, 0xDF };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("471732B4-3D07-5104-B192-EBACF71E86DF")]
    internal interface IInputNonClientPointerSource : global::Microsoft.UI.Input.IInputNonClientPointerSource
    {
    }
    internal static class IInputNonClientPointerSource2Methods
    {


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.EnteredMoveSizeEventArgs>>> _EnteredMoveSize_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.EnteredMoveSizeEventArgs>>> MakeEnteredMoveSizeTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _EnteredMoveSize_, new(), null);
            return _EnteredMoveSize_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.EnteredMoveSizeEventArgs>>> _EnteredMoveSize => _EnteredMoveSize_ ?? MakeEnteredMoveSizeTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.EnteredMoveSizeEventArgs>> Get_EnteredMoveSize2(IObjectReference _obj, object _thisObj)
        {
            return _EnteredMoveSize.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_EnteredMoveSizeEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[8],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[9],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.EnteringMoveSizeEventArgs>>> _EnteringMoveSize_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.EnteringMoveSizeEventArgs>>> MakeEnteringMoveSizeTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _EnteringMoveSize_, new(), null);
            return _EnteringMoveSize_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.EnteringMoveSizeEventArgs>>> _EnteringMoveSize => _EnteringMoveSize_ ?? MakeEnteringMoveSizeTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.EnteringMoveSizeEventArgs>> Get_EnteringMoveSize2(IObjectReference _obj, object _thisObj)
        {
            return _EnteringMoveSize.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_EnteringMoveSizeEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[6],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[7],
                1);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.ExitedMoveSizeEventArgs>>> _ExitedMoveSize_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.ExitedMoveSizeEventArgs>>> MakeExitedMoveSizeTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ExitedMoveSize_, new(), null);
            return _ExitedMoveSize_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.ExitedMoveSizeEventArgs>>> _ExitedMoveSize => _ExitedMoveSize_ ?? MakeExitedMoveSizeTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.ExitedMoveSizeEventArgs>> Get_ExitedMoveSize2(IObjectReference _obj, object _thisObj)
        {
            return _ExitedMoveSize.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_ExitedMoveSizeEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[14],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[15],
                2);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.WindowRectChangedEventArgs>>> _WindowRectChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.WindowRectChangedEventArgs>>> MakeWindowRectChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _WindowRectChanged_, new(), null);
            return _WindowRectChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.WindowRectChangedEventArgs>>> _WindowRectChanged => _WindowRectChanged_ ?? MakeWindowRectChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.WindowRectChangedEventArgs>> Get_WindowRectChanged2(IObjectReference _obj, object _thisObj)
        {
            return _WindowRectChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_WindowRectChangedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[12],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[13],
                3);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.WindowRectChangingEventArgs>>> _WindowRectChanging_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.WindowRectChangingEventArgs>>> MakeWindowRectChangingTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _WindowRectChanging_, new(), null);
            return _WindowRectChanging_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.WindowRectChangingEventArgs>>> _WindowRectChanging => _WindowRectChanging_ ?? MakeWindowRectChangingTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputNonClientPointerSource, global::Microsoft.UI.Input.WindowRectChangingEventArgs>> Get_WindowRectChanging2(IObjectReference _obj, object _thisObj)
        {
            return _WindowRectChanging.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_WindowRectChangingEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[10],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[11],
                4);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC4, 0x10, 0x2B, 0xDD, 0xE6, 0x7D, 0x1D, 0x5C, 0xB4, 0x38, 0x6, 0xDD, 0xC9, 0x94, 0x5, 0x8F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("DD2B10C4-7DE6-5C1D-B438-06DDC994058F")]
    internal interface IInputNonClientPointerSource2 : global::Microsoft.UI.Input.IInputNonClientPointerSource2
    {
    }
    internal static class IInputNonClientPointerSourceStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Input.InputNonClientPointerSource GetForWindowId(IObjectReference _obj, global::Microsoft.UI.WindowId windowId)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.WindowId, IntPtr*, int>**)ThisPtr)[6](ThisPtr, windowId, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.InputNonClientPointerSource.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Input.InputNonClientPointerSource.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x5C, 0x77, 0xB, 0x7D, 0x3, 0x19, 0xC7, 0x5D, 0xBD, 0x2F, 0x7A, 0x4B, 0x31, 0xF0, 0xCF, 0xF2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("7D0B775C-1903-5DC7-BD2F-7A4B31F0CFF2")]
    internal interface IInputNonClientPointerSourceStatics : global::Microsoft.UI.Input.IInputNonClientPointerSourceStatics
    {
    }
    internal static class IInputObjectMethods
    {

        internal static unsafe global::Microsoft.UI.Dispatching.DispatcherQueue get_DispatcherQueue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Dispatching.DispatcherQueue.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Dispatching.DispatcherQueue.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x88, 0xBC, 0xED, 0x42, 0x86, 0xD3, 0x4D, 0x54, 0xB1, 0xB8, 0x68, 0x61, 0x7F, 0xE6, 0x82, 0x82 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("42EDBC88-D386-544D-B1B8-68617FE68282")]
    internal interface IInputObject : global::Microsoft.UI.Input.IInputObject
    {
    }
    internal static class IInputObjectFactoryMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC2, 0x6B, 0x78, 0xF7, 0xB8, 0xB0, 0x61, 0x59, 0x9A, 0x57, 0xAE, 0x19, 0x9D, 0x45, 0x21, 0x6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F7786BC2-B0B8-5961-9A57-AE199D452106")]
    internal interface IInputObjectFactory : global::Microsoft.UI.Input.IInputObjectFactory
    {
    }
    internal static class IInputPointerSourceMethods
    {

        internal static unsafe global::Microsoft.UI.Input.InputCursor get_Cursor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.InputCursor.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Input.InputCursor.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Cursor(IObjectReference _obj, global::Microsoft.UI.Input.InputCursor value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Input.InputCursor.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Input.InputPointerSourceDeviceKinds get_DeviceKinds(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.InputPointerSourceDeviceKinds __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.InputPointerSourceDeviceKinds*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> _PointerCaptureLost_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> MakePointerCaptureLostTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _PointerCaptureLost_, new(), null);
            return _PointerCaptureLost_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> _PointerCaptureLost => _PointerCaptureLost_ ?? MakePointerCaptureLostTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>> Get_PointerCaptureLost2(IObjectReference _obj, object _thisObj)
        {
            return _PointerCaptureLost.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputPointerSource__global__Microsoft_UI_Input_PointerEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[9],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[10],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> _PointerEntered_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> MakePointerEnteredTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _PointerEntered_, new(), null);
            return _PointerEntered_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> _PointerEntered => _PointerEntered_ ?? MakePointerEnteredTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>> Get_PointerEntered2(IObjectReference _obj, object _thisObj)
        {
            return _PointerEntered.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputPointerSource__global__Microsoft_UI_Input_PointerEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[11],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[12],
                1);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> _PointerExited_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> MakePointerExitedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _PointerExited_, new(), null);
            return _PointerExited_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> _PointerExited => _PointerExited_ ?? MakePointerExitedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>> Get_PointerExited2(IObjectReference _obj, object _thisObj)
        {
            return _PointerExited.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputPointerSource__global__Microsoft_UI_Input_PointerEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[13],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[14],
                2);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> _PointerMoved_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> MakePointerMovedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _PointerMoved_, new(), null);
            return _PointerMoved_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> _PointerMoved => _PointerMoved_ ?? MakePointerMovedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>> Get_PointerMoved2(IObjectReference _obj, object _thisObj)
        {
            return _PointerMoved.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputPointerSource__global__Microsoft_UI_Input_PointerEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[15],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[16],
                3);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> _PointerPressed_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> MakePointerPressedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _PointerPressed_, new(), null);
            return _PointerPressed_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> _PointerPressed => _PointerPressed_ ?? MakePointerPressedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>> Get_PointerPressed2(IObjectReference _obj, object _thisObj)
        {
            return _PointerPressed.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputPointerSource__global__Microsoft_UI_Input_PointerEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[17],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[18],
                4);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> _PointerReleased_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> MakePointerReleasedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _PointerReleased_, new(), null);
            return _PointerReleased_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> _PointerReleased => _PointerReleased_ ?? MakePointerReleasedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>> Get_PointerReleased2(IObjectReference _obj, object _thisObj)
        {
            return _PointerReleased.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputPointerSource__global__Microsoft_UI_Input_PointerEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[19],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[20],
                5);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> _PointerRoutedAway_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> MakePointerRoutedAwayTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _PointerRoutedAway_, new(), null);
            return _PointerRoutedAway_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> _PointerRoutedAway => _PointerRoutedAway_ ?? MakePointerRoutedAwayTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>> Get_PointerRoutedAway2(IObjectReference _obj, object _thisObj)
        {
            return _PointerRoutedAway.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputPointerSource__global__Microsoft_UI_Input_PointerEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[21],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[22],
                6);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> _PointerRoutedReleased_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> MakePointerRoutedReleasedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _PointerRoutedReleased_, new(), null);
            return _PointerRoutedReleased_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> _PointerRoutedReleased => _PointerRoutedReleased_ ?? MakePointerRoutedReleasedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>> Get_PointerRoutedReleased2(IObjectReference _obj, object _thisObj)
        {
            return _PointerRoutedReleased.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputPointerSource__global__Microsoft_UI_Input_PointerEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[23],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[24],
                7);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> _PointerRoutedTo_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> MakePointerRoutedToTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _PointerRoutedTo_, new(), null);
            return _PointerRoutedTo_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> _PointerRoutedTo => _PointerRoutedTo_ ?? MakePointerRoutedToTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>> Get_PointerRoutedTo2(IObjectReference _obj, object _thisObj)
        {
            return _PointerRoutedTo.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputPointerSource__global__Microsoft_UI_Input_PointerEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[25],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[26],
                8);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> _PointerWheelChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> MakePointerWheelChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _PointerWheelChanged_, new(), null);
            return _PointerWheelChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> _PointerWheelChanged => _PointerWheelChanged_ ?? MakePointerWheelChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>> Get_PointerWheelChanged2(IObjectReference _obj, object _thisObj)
        {
            return _PointerWheelChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputPointerSource__global__Microsoft_UI_Input_PointerEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[27],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[28],
                9);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x64, 0x27, 0x6C, 0x6A, 0xF4, 0xC3, 0xE5, 0x5B, 0x84, 0x47, 0xC9, 0xA9, 0x87, 0x66, 0xC2, 0x40 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("6A6C2764-C3F4-5BE5-8447-C9A98766C240")]
    internal interface IInputPointerSource : global::Microsoft.UI.Input.IInputPointerSource
    {
    }
    internal static class IInputPointerSource2Methods
    {


        internal static unsafe bool TrySetDeviceKinds(IObjectReference _obj, global::Microsoft.UI.Input.InputPointerSourceDeviceKinds DeviceKinds)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.InputPointerSourceDeviceKinds, byte*, int>**)ThisPtr)[6](ThisPtr, DeviceKinds, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe global::Microsoft.UI.Input.InputPointerActivationBehavior get_ActivationBehavior(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.InputPointerActivationBehavior __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.InputPointerActivationBehavior*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ActivationBehavior(IObjectReference _obj, global::Microsoft.UI.Input.InputPointerActivationBehavior value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.InputPointerActivationBehavior, int>**)ThisPtr)[8](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> _DirectManipulationHitTest_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> MakeDirectManipulationHitTestTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _DirectManipulationHitTest_, new(), null);
            return _DirectManipulationHitTest_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>>> _DirectManipulationHitTest => _DirectManipulationHitTest_ ?? MakeDirectManipulationHitTestTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.PointerEventArgs>> Get_DirectManipulationHitTest2(IObjectReference _obj, object _thisObj)
        {
            return _DirectManipulationHitTest.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputPointerSource__global__Microsoft_UI_Input_PointerEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[9],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[10],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.TouchHitTestingEventArgs>>> _TouchHitTesting_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.TouchHitTestingEventArgs>>> MakeTouchHitTestingTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _TouchHitTesting_, new(), null);
            return _TouchHitTesting_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.TouchHitTestingEventArgs>>> _TouchHitTesting => _TouchHitTesting_ ?? MakeTouchHitTestingTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.InputPointerSource, global::Microsoft.UI.Input.TouchHitTestingEventArgs>> Get_TouchHitTesting2(IObjectReference _obj, object _thisObj)
        {
            return _TouchHitTesting.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputPointerSource__global__Microsoft_UI_Input_TouchHitTestingEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[11],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[12],
                1);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x6E, 0x7E, 0x75, 0x58, 0x80, 0xDA, 0xD2, 0x5A, 0xA0, 0x88, 0xB9, 0xE, 0x8E, 0x40, 0x73, 0x79 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("58757E6E-DA80-5AD2-A088-B90E8E407379")]
    internal interface IInputPointerSource2 : global::Microsoft.UI.Input.IInputPointerSource2
    {
    }
    internal static class IInputPointerSourceStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Input.InputPointerSource GetForIsland(IObjectReference _obj, global::Microsoft.UI.Content.ContentIsland island)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __island = default;
            IntPtr __retval = default;
            try
            {
                __island = global::ABI.Microsoft.UI.Content.ContentIsland.CreateMarshaler2(island);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__island), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.InputPointerSource.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__island);
                global::ABI.Microsoft.UI.Input.InputPointerSource.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD1, 0x9F, 0xA1, 0xE8, 0x14, 0xA9, 0x3F, 0x53, 0x9B, 0xF, 0x6B, 0xF0, 0x6, 0x5E, 0x67, 0x81 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E8A19FD1-A914-533F-9B0F-6BF0065E6781")]
    internal interface IInputPointerSourceStatics : global::Microsoft.UI.Input.IInputPointerSourceStatics
    {
    }
    internal static class IInputPointerSourceStatics2Methods
    {


        internal static unsafe global::Microsoft.UI.Input.InputPointerSource GetForVisual(IObjectReference _obj, global::Microsoft.UI.Composition.Visual visual)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __visual = default;
            IntPtr __retval = default;
            try
            {
                __visual = global::ABI.Microsoft.UI.Composition.Visual.CreateMarshaler2(visual);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__visual), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.InputPointerSource.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__visual);
                global::ABI.Microsoft.UI.Input.InputPointerSource.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Input.InputPointerSource GetForWindowId(IObjectReference _obj, global::Microsoft.UI.WindowId windowId)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.WindowId, IntPtr*, int>**)ThisPtr)[7](ThisPtr, windowId, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.InputPointerSource.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Input.InputPointerSource.DisposeAbi(__retval);
            }
        }

        internal static unsafe void RemoveForVisual(IObjectReference _obj, global::Microsoft.UI.Composition.Visual visual)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __visual = default;
            try
            {
                __visual = global::ABI.Microsoft.UI.Composition.Visual.CreateMarshaler2(visual);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__visual)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__visual);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x4A, 0x7B, 0xB3, 0x76, 0x2, 0xDE, 0x1A, 0x53, 0xA9, 0xD2, 0x18, 0x51, 0x86, 0x15, 0x9D, 0x31 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("76B37B4A-DE02-531A-A9D2-185186159D31")]
    internal interface IInputPointerSourceStatics2 : global::Microsoft.UI.Input.IInputPointerSourceStatics2
    {
    }
    internal static class IInputPreTranslateKeyboardSourceMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xEB, 0x7F, 0x32, 0x2F, 0xE7, 0xB7, 0x37, 0x5E, 0xA0, 0xCC, 0x37, 0xDC, 0xAB, 0xE7, 0x65, 0x88 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2F327FEB-B7E7-5E37-A0CC-37DCABE76588")]
    internal interface IInputPreTranslateKeyboardSource : global::Microsoft.UI.Input.IInputPreTranslateKeyboardSource
    {
    }
    internal static class IInputPreTranslateKeyboardSourceStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Input.InputPreTranslateKeyboardSource GetForIsland(IObjectReference _obj, global::Microsoft.UI.Content.ContentIsland island)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __island = default;
            IntPtr __retval = default;
            try
            {
                __island = global::ABI.Microsoft.UI.Content.ContentIsland.CreateMarshaler2(island);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__island), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.InputPreTranslateKeyboardSource.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__island);
                global::ABI.Microsoft.UI.Input.InputPreTranslateKeyboardSource.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD2, 0x84, 0xD5, 0x23, 0x8C, 0xAF, 0x8A, 0x5A, 0x80, 0x6F, 0x2B, 0xA9, 0xC5, 0xB1, 0xA5, 0xEC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("23D584D2-AF8C-5A8A-806F-2BA9C5B1A5EC")]
    internal interface IInputPreTranslateKeyboardSourceStatics : global::Microsoft.UI.Input.IInputPreTranslateKeyboardSourceStatics
    {
    }
    internal static class IInputSystemCursorMethods
    {

        internal static unsafe global::Microsoft.UI.Input.InputSystemCursorShape get_CursorShape(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.InputSystemCursorShape __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.InputSystemCursorShape*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE7, 0x38, 0xF5, 0x59, 0x0, 0xC5, 0xAB, 0x59, 0x8B, 0x54, 0xB, 0xC6, 0x10, 0xF, 0xD4, 0x9E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("59F538E7-C500-59AB-8B54-0BC6100FD49E")]
    internal interface IInputSystemCursor : global::Microsoft.UI.Input.IInputSystemCursor
    {
    }
    internal static class IInputSystemCursorStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Input.InputSystemCursor Create(IObjectReference _obj, global::Microsoft.UI.Input.InputSystemCursorShape type)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.InputSystemCursorShape, IntPtr*, int>**)ThisPtr)[6](ThisPtr, type, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.InputSystemCursor.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Input.InputSystemCursor.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB6, 0xB, 0x86, 0xD3, 0x8A, 0x69, 0x14, 0x58, 0xAE, 0xDD, 0xC2, 0xFA, 0x8B, 0xBA, 0x5A, 0x2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D3860BB6-698A-5814-AEDD-C2FA8BBA5A02")]
    internal interface IInputSystemCursorStatics : global::Microsoft.UI.Input.IInputSystemCursorStatics
    {
    }
    internal static class IKeyEventArgsMethods
    {

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Input.PhysicalKeyStatus get_KeyStatus(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            PhysicalKeyStatus __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, PhysicalKeyStatus*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return PhysicalKeyStatus.FromAbi(__retval);
            }
            finally
            {
                PhysicalKeyStatus.DisposeAbi(__retval);
            }
        }

        internal static unsafe ulong get_Timestamp(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            ulong __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, ulong*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.System.VirtualKey get_VirtualKey(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.System.VirtualKey __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.System.VirtualKey*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x74, 0xBB, 0xD5, 0x40, 0x7E, 0x97, 0x94, 0x51, 0x80, 0x39, 0x9F, 0x6C, 0x44, 0x42, 0x7B, 0xBB };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("40D5BB74-977E-5194-8039-9F6C44427BBB")]
    internal interface IKeyEventArgs : global::Microsoft.UI.Input.IKeyEventArgs
    {
    }
    internal static class IManipulationCompletedEventArgsMethods
    {

        internal static unsafe global::Microsoft.UI.Input.ManipulationDelta get_Cumulative(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.ManipulationDelta __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.ManipulationDelta*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Input.PointerDeviceType get_PointerDeviceType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.PointerDeviceType __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.PointerDeviceType*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.Point get_Position(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Input.ManipulationVelocities get_Velocities(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.ManipulationVelocities __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.ManipulationVelocities*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD4, 0x49, 0x2, 0xE, 0xE4, 0x46, 0x59, 0x55, 0xAE, 0xE3, 0xFA, 0x45, 0xCE, 0x2A, 0x7F, 0x56 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("0E0249D4-46E4-5559-AEE3-FA45CE2A7F56")]
    internal interface IManipulationCompletedEventArgs : global::Microsoft.UI.Input.IManipulationCompletedEventArgs
    {
    }
    internal static class IManipulationInertiaStartingEventArgsMethods
    {

        internal static unsafe global::Microsoft.UI.Input.ManipulationDelta get_Cumulative(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.ManipulationDelta __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.ManipulationDelta*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Input.ManipulationDelta get_Delta(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.ManipulationDelta __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.ManipulationDelta*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Input.PointerDeviceType get_PointerDeviceType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.PointerDeviceType __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.PointerDeviceType*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.Point get_Position(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Input.ManipulationVelocities get_Velocities(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.ManipulationVelocities __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.ManipulationVelocities*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x71, 0xEF, 0xF9, 0xAC, 0x15, 0x6E, 0xAB, 0x56, 0x92, 0x60, 0xF0, 0xD3, 0xCE, 0x5F, 0x66, 0xE8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("ACF9EF71-6E15-56AB-9260-F0D3CE5F66E8")]
    internal interface IManipulationInertiaStartingEventArgs : global::Microsoft.UI.Input.IManipulationInertiaStartingEventArgs
    {
    }
    internal static class IManipulationStartedEventArgsMethods
    {

        internal static unsafe global::Microsoft.UI.Input.ManipulationDelta get_Cumulative(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.ManipulationDelta __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.ManipulationDelta*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Input.PointerDeviceType get_PointerDeviceType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.PointerDeviceType __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.PointerDeviceType*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.Point get_Position(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x13, 0x66, 0x61, 0x4A, 0xF1, 0xEE, 0x1B, 0x5F, 0xA7, 0x68, 0x7, 0x75, 0x47, 0x8D, 0x49, 0xD4 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4A616613-EEF1-5F1B-A768-0775478D49D4")]
    internal interface IManipulationStartedEventArgs : global::Microsoft.UI.Input.IManipulationStartedEventArgs
    {
    }
    internal static class IManipulationUpdatedEventArgsMethods
    {

        internal static unsafe global::Microsoft.UI.Input.ManipulationDelta get_Cumulative(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.ManipulationDelta __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.ManipulationDelta*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Input.ManipulationDelta get_Delta(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.ManipulationDelta __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.ManipulationDelta*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Input.PointerDeviceType get_PointerDeviceType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.PointerDeviceType __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.PointerDeviceType*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.Point get_Position(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Input.ManipulationVelocities get_Velocities(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.ManipulationVelocities __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.ManipulationVelocities*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x61, 0x19, 0x6E, 0x40, 0x98, 0xC, 0xC0, 0x5F, 0xB3, 0xD8, 0x11, 0x64, 0x92, 0xEF, 0x0, 0x53 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("406E1961-0C98-5FC0-B3D8-116492EF0053")]
    internal interface IManipulationUpdatedEventArgs : global::Microsoft.UI.Input.IManipulationUpdatedEventArgs
    {
    }
    internal static class IMouseWheelParametersMethods
    {

        internal static unsafe global::Windows.Foundation.Point get_CharTranslation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_CharTranslation(IObjectReference _obj, global::Windows.Foundation.Point value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe float get_DeltaRotationAngle(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            float __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_DeltaRotationAngle(IObjectReference _obj, float value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe float get_DeltaScale(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            float __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_DeltaScale(IObjectReference _obj, float value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.Foundation.Point get_PageTranslation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_PageTranslation(IObjectReference _obj, global::Windows.Foundation.Point value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point, int>**)ThisPtr)[13](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x40, 0xBE, 0x98, 0x6D, 0x56, 0x1D, 0xD1, 0x51, 0xAA, 0xD, 0xF3, 0x25, 0x43, 0x9C, 0xD0, 0x9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("6D98BE40-1D56-51D1-AA0D-F325439CD009")]
    internal interface IMouseWheelParameters : global::Microsoft.UI.Input.IMouseWheelParameters
    {
    }
    internal static class INonClientCaptionTappedEventArgsMethods
    {

        internal static unsafe global::Windows.Foundation.Point get_Point(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Input.PointerDeviceType get_PointerDeviceType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.PointerDeviceType __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.PointerDeviceType*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x31, 0x35, 0x17, 0x3D, 0x1F, 0x99, 0x53, 0x57, 0xB7, 0xE0, 0x14, 0xA1, 0x21, 0xC3, 0xCD, 0x2D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("3D173531-991F-5753-B7E0-14A121C3CD2D")]
    internal interface INonClientCaptionTappedEventArgs : global::Microsoft.UI.Input.INonClientCaptionTappedEventArgs
    {
    }
    internal static class INonClientPointerEventArgsMethods
    {

        internal static unsafe bool get_IsPointInRegion(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe global::Windows.Foundation.Point get_Point(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Input.PointerDeviceType get_PointerDeviceType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.PointerDeviceType __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.PointerDeviceType*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Input.NonClientRegionKind get_RegionKind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.NonClientRegionKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.NonClientRegionKind*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xEC, 0x4A, 0xB4, 0xA5, 0x97, 0xB7, 0x5A, 0x50, 0xA1, 0x29, 0xAE, 0x4E, 0x52, 0x71, 0xC7, 0x3C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A5B44AEC-B797-505A-A129-AE4E5271C73C")]
    internal interface INonClientPointerEventArgs : global::Microsoft.UI.Input.INonClientPointerEventArgs
    {
    }
    internal static class INonClientRegionsChangedEventArgsMethods
    {

        internal static unsafe global::Microsoft.UI.Input.NonClientRegionKind[] get_ChangedRegions(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval_length = default;
            IntPtr __retval_data = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval_length, &__retval_data));
                global::System.GC.KeepAlive(_obj);
                return MarshalNonBlittable<global::Microsoft.UI.Input.NonClientRegionKind>.FromAbiArray((__retval_length, __retval_data));
            }
            finally
            {
                MarshalNonBlittable<global::Microsoft.UI.Input.NonClientRegionKind>.DisposeAbiArray((__retval_length, __retval_data));
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x95, 0xEE, 0x97, 0xFE, 0x24, 0x18, 0xB2, 0x51, 0xB8, 0xEB, 0x10, 0xFF, 0x6, 0x65, 0xCE, 0x23 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("FE97EE95-1824-51B2-B8EB-10FF0665CE23")]
    internal interface INonClientRegionsChangedEventArgs : global::Microsoft.UI.Input.INonClientRegionsChangedEventArgs
    {
    }
    internal static class IPointerEventArgsMethods
    {


        internal static unsafe global::System.Collections.Generic.IList<global::Microsoft.UI.Input.PointerPoint> GetIntermediatePoints(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Input_PointerPoint.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Input.PointerPoint>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Input.PointerPoint>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Collections.Generic.IList<global::Microsoft.UI.Input.PointerPoint> GetIntermediateTransformedPoints(IObjectReference _obj, global::Microsoft.UI.Input.IPointerPointTransform transform)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __transform = default;
            IntPtr __retval = default;
            try
            {
                __transform = MarshalInterface<global::Microsoft.UI.Input.IPointerPointTransform>.CreateMarshaler2(transform, global::ABI.Microsoft.UI.Input.IPointerPointTransformMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, MarshalInspectable<object>.GetAbi(__transform), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Input_PointerPoint.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Input.PointerPoint>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__transform);
                MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Input.PointerPoint>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe global::Microsoft.UI.Input.PointerPoint get_CurrentPoint(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.PointerPoint.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Input.PointerPoint.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[8](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.System.VirtualKeyModifiers get_KeyModifiers(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.System.VirtualKeyModifiers __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.System.VirtualKeyModifiers*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x8C, 0x18, 0x5B, 0x86, 0xD5, 0x2E, 0xF8, 0x5D, 0x82, 0x9F, 0xAC, 0x7, 0x1, 0xD5, 0xC5, 0x1A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("865B188C-2ED5-5DF8-829F-AC0701D5C51A")]
    internal interface IPointerEventArgs : global::Microsoft.UI.Input.IPointerEventArgs
    {
    }
    internal static class IPointerPointMethods
    {


        internal static unsafe global::Microsoft.UI.Input.PointerPoint GetTransformedPoint(IObjectReference _obj, global::Microsoft.UI.Input.IPointerPointTransform transform)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __transform = default;
            IntPtr __retval = default;
            try
            {
                __transform = MarshalInterface<global::Microsoft.UI.Input.IPointerPointTransform>.CreateMarshaler2(transform, global::ABI.Microsoft.UI.Input.IPointerPointTransformMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, MarshalInspectable<object>.GetAbi(__transform), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.PointerPoint.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__transform);
                global::ABI.Microsoft.UI.Input.PointerPoint.DisposeAbi(__retval);
            }
        }
        internal static unsafe uint get_FrameId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe bool get_IsInContact(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe global::Microsoft.UI.Input.PointerDeviceType get_PointerDeviceType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.PointerDeviceType __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.PointerDeviceType*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe uint get_PointerId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.Point get_Position(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Input.PointerPointProperties get_Properties(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.PointerPointProperties.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Input.PointerPointProperties.DisposeAbi(__retval);
            }
        }

        internal static unsafe ulong get_Timestamp(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            ulong __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, ulong*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE6, 0xE, 0x43, 0xD, 0x2C, 0x25, 0xA4, 0x59, 0xB2, 0xA2, 0xD4, 0x42, 0x64, 0xDC, 0x6A, 0x40 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("0D430EE6-252C-59A4-B2A2-D44264DC6A40")]
    internal interface IPointerPoint : global::Microsoft.UI.Input.IPointerPoint
    {
    }
    internal static class IPointerPointPropertiesMethods
    {

        internal static unsafe global::Windows.Foundation.Rect get_ContactRect(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Rect __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe bool get_IsBarrelButtonPressed(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_IsCanceled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_IsEraser(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_IsHorizontalMouseWheel(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_IsInRange(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_IsInverted(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_IsLeftButtonPressed(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_IsMiddleButtonPressed(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_IsPrimary(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[15](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_IsRightButtonPressed(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[16](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_IsXButton1Pressed(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[17](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_IsXButton2Pressed(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[18](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe int get_MouseWheelDelta(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[19](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe float get_Orientation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            float __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float*, int>**)ThisPtr)[20](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Input.PointerUpdateKind get_PointerUpdateKind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.PointerUpdateKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.PointerUpdateKind*, int>**)ThisPtr)[21](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe float get_Pressure(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            float __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float*, int>**)ThisPtr)[22](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe bool get_TouchConfidence(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[23](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe float get_Twist(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            float __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float*, int>**)ThisPtr)[24](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe float get_XTilt(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            float __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float*, int>**)ThisPtr)[25](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe float get_YTilt(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            float __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float*, int>**)ThisPtr)[26](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x77, 0xED, 0x60, 0xD7, 0x10, 0x4B, 0xA5, 0x57, 0xB3, 0xCC, 0xD9, 0xBF, 0x34, 0x13, 0xE9, 0x96 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D760ED77-4B10-57A5-B3CC-D9BF3413E996")]
    internal interface IPointerPointProperties : global::Microsoft.UI.Input.IPointerPointProperties
    {
    }
    public static class IPointerPointTransformMethods
    {


        public static unsafe bool TryTransform(IObjectReference _obj, global::Windows.Foundation.Point inPoint, out global::Windows.Foundation.Point outPoint)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __outPoint = default;
            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point, global::Windows.Foundation.Point*, byte*, int>**)ThisPtr)[7](ThisPtr, inPoint, &__outPoint, &__retval));
            global::System.GC.KeepAlive(_obj);
            outPoint = __outPoint;
            return __retval != 0;
        }

        public static unsafe bool TryTransformBounds(IObjectReference _obj, global::Windows.Foundation.Rect inRect, out global::Windows.Foundation.Rect outRect)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Rect __outRect = default;
            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect, global::Windows.Foundation.Rect*, byte*, int>**)ThisPtr)[8](ThisPtr, inRect, &__outRect, &__retval));
            global::System.GC.KeepAlive(_obj);
            outRect = __outRect;
            return __retval != 0;
        }
        public static unsafe global::Microsoft.UI.Input.IPointerPointTransform get_Inverse(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Microsoft.UI.Input.IPointerPointTransform>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Microsoft.UI.Input.IPointerPointTransform>.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xBC, 0x91, 0x47, 0xDB, 0x4D, 0x99, 0xC7, 0x54, 0x92, 0xEF, 0x66, 0xEA, 0x1D, 0xE9, 0xB4, 0x3C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IPointerPointTransform.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("DB4791BC-994D-54C7-92EF-66EA1DE9B43C")]
    internal unsafe interface IPointerPointTransform : global::Microsoft.UI.Input.IPointerPointTransform
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IPointerPointTransform()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IPointerPointTransform), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 3);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_Inverse_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point, global::Windows.Foundation.Point*, byte*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_TryTransform_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect, global::Windows.Foundation.Rect*, byte*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_TryTransformBounds_2;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_TryTransform_1(IntPtr thisPtr, global::Windows.Foundation.Point inPoint, global::Windows.Foundation.Point* outPoint, byte* result)
        {

            bool __result = default;

            *outPoint = default;
            *result = default;
            global::Windows.Foundation.Point __outPoint = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Input.IPointerPointTransform>(thisPtr).TryTransform(inPoint, out __outPoint);
                *outPoint = __outPoint;
                *result = (byte)(__result ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_TryTransformBounds_2(IntPtr thisPtr, global::Windows.Foundation.Rect inRect, global::Windows.Foundation.Rect* outRect, byte* result)
        {

            bool __result = default;

            *outRect = default;
            *result = default;
            global::Windows.Foundation.Rect __outRect = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Input.IPointerPointTransform>(thisPtr).TryTransformBounds(inRect, out __outRect);
                *outRect = __outRect;
                *result = (byte)(__result ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_Inverse_0(IntPtr thisPtr, IntPtr* value)
        {

            global::Microsoft.UI.Input.IPointerPointTransform __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Input.IPointerPointTransform>(thisPtr).Inverse;
                *value = MarshalInterface<global::Microsoft.UI.Input.IPointerPointTransform>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe bool global::Microsoft.UI.Input.IPointerPointTransform.TryTransform(global::Windows.Foundation.Point inPoint, out global::Windows.Foundation.Point outPoint)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Input.IPointerPointTransform).TypeHandle));
            return global::ABI.Microsoft.UI.Input.IPointerPointTransformMethods.TryTransform(_obj, inPoint, out outPoint);
        }

        unsafe bool global::Microsoft.UI.Input.IPointerPointTransform.TryTransformBounds(global::Windows.Foundation.Rect inRect, out global::Windows.Foundation.Rect outRect)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Input.IPointerPointTransform).TypeHandle));
            return global::ABI.Microsoft.UI.Input.IPointerPointTransformMethods.TryTransformBounds(_obj, inRect, out outRect);
        }

        unsafe global::Microsoft.UI.Input.IPointerPointTransform global::Microsoft.UI.Input.IPointerPointTransform.Inverse
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Input.IPointerPointTransform).TypeHandle));
                return global::ABI.Microsoft.UI.Input.IPointerPointTransformMethods.get_Inverse(_obj);
            }
        }
    }

    internal static class IPointerPredictorMethods
    {


        internal static unsafe global::Microsoft.UI.Input.PointerPoint[] GetPredictedPoints(IObjectReference _obj, global::Microsoft.UI.Input.PointerPoint point)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __point = default;
            int __retval_length = default;
            IntPtr __retval_data = default;
            try
            {
                __point = global::ABI.Microsoft.UI.Input.PointerPoint.CreateMarshaler2(point);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int*, IntPtr*, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__point), &__retval_length, &__retval_data));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.PointerPoint.FromAbiArray((__retval_length, __retval_data));
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__point);
                global::ABI.Microsoft.UI.Input.PointerPoint.DisposeAbiArray((__retval_length, __retval_data));
            }
        }
        internal static unsafe global::System.TimeSpan get_PredictionTime(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.TimeSpan __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.TimeSpan*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.TimeSpan.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.TimeSpan.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_PredictionTime(IObjectReference _obj, global::System.TimeSpan value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.TimeSpan.Marshaler __value = default;
            try
            {
                __value = global::ABI.System.TimeSpan.CreateMarshaler(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.TimeSpan, int>**)ThisPtr)[7](ThisPtr, global::ABI.System.TimeSpan.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                global::ABI.System.TimeSpan.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xEC, 0x0, 0xC1, 0x12, 0x0, 0x21, 0x5F, 0x56, 0xA6, 0xC, 0xF1, 0x18, 0x7F, 0x43, 0x88, 0x28 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("12C100EC-2100-565F-A60C-F1187F438828")]
    internal interface IPointerPredictor : global::Microsoft.UI.Input.IPointerPredictor
    {
    }
    internal static class IPointerPredictorStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Input.PointerPredictor CreateForInputPointerSource(IObjectReference _obj, global::Microsoft.UI.Input.InputPointerSource inputPointerSource)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __inputPointerSource = default;
            IntPtr __retval = default;
            try
            {
                __inputPointerSource = global::ABI.Microsoft.UI.Input.InputPointerSource.CreateMarshaler2(inputPointerSource);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__inputPointerSource), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.PointerPredictor.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__inputPointerSource);
                global::ABI.Microsoft.UI.Input.PointerPredictor.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x30, 0xEF, 0xA8, 0x78, 0x5C, 0x3E, 0xCD, 0x55, 0x8F, 0x85, 0x65, 0xAC, 0x9, 0xB1, 0xA9, 0x87 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("78A8EF30-3E5C-55CD-8F85-65AC09B1A987")]
    internal interface IPointerPredictorStatics : global::Microsoft.UI.Input.IPointerPredictorStatics
    {
    }
    internal static class IRightTappedEventArgsMethods
    {

        internal static unsafe global::Microsoft.UI.Input.PointerDeviceType get_PointerDeviceType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.PointerDeviceType __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.PointerDeviceType*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.Point get_Position(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x39, 0x3B, 0xF7, 0x8F, 0x7E, 0x88, 0xA4, 0x50, 0x85, 0x0, 0x77, 0x95, 0x30, 0x39, 0xDC, 0xB4 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8FF73B39-887E-50A4-8500-77953039DCB4")]
    internal interface IRightTappedEventArgs : global::Microsoft.UI.Input.IRightTappedEventArgs
    {
    }
    internal static class ITappedEventArgsMethods
    {

        internal static unsafe global::Microsoft.UI.Input.PointerDeviceType get_PointerDeviceType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.PointerDeviceType __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.PointerDeviceType*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.Point get_Position(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe uint get_TapCount(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB5, 0x1B, 0xA0, 0xC3, 0x76, 0x60, 0xF, 0x5E, 0x87, 0x1A, 0x9D, 0x94, 0xA6, 0xA8, 0xF8, 0x2B };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C3A01BB5-6076-5E0F-871A-9D94A6A8F82B")]
    internal interface ITappedEventArgs : global::Microsoft.UI.Input.ITappedEventArgs
    {
    }
    internal static class ITouchHitTestingEventArgsMethods
    {


        internal static unsafe global::Microsoft.UI.Input.ProximityEvaluation GetProximityEvaluation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.ProximityEvaluation __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.ProximityEvaluation*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe void SetProximityEvaluation(IObjectReference _obj, global::Microsoft.UI.Input.ProximityEvaluation proximityEvaluation)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.ProximityEvaluation, int>**)ThisPtr)[11](ThisPtr, proximityEvaluation));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Input.ProximityEvaluation EvaluateProximityToRect(IObjectReference _obj, global::Windows.Foundation.Rect controlBoundingBox)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.ProximityEvaluation __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect, global::Microsoft.UI.Input.ProximityEvaluation*, int>**)ThisPtr)[12](ThisPtr, controlBoundingBox, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Input.ProximityEvaluation EvaluateProximityToPolygon(IObjectReference _obj, global::Windows.Foundation.Point[] controlVertices)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalBlittable<global::Windows.Foundation.Point>.MarshalerArray __controlVertices = default;
            int __controlVertices_length = default;
            IntPtr __controlVertices_data = default;
            global::Microsoft.UI.Input.ProximityEvaluation __retval = default;
            try
            {
                __controlVertices = MarshalBlittable<global::Windows.Foundation.Point>.CreateMarshalerArray(controlVertices);
                (__controlVertices_length, __controlVertices_data) = MarshalBlittable<global::Windows.Foundation.Point>.GetAbiArray(__controlVertices);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, IntPtr, global::Microsoft.UI.Input.ProximityEvaluation*, int>**)ThisPtr)[13](ThisPtr, __controlVertices_length, __controlVertices_data, &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
            finally
            {
                MarshalBlittable<global::Windows.Foundation.Point>.DisposeMarshalerArray(__controlVertices);
            }
        }
        internal static unsafe global::Windows.Foundation.Rect get_BoundingBox(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Rect __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[8](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.Foundation.Point get_Point(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC, 0x6F, 0x19, 0xC2, 0xED, 0x60, 0x5D, 0x5B, 0xB9, 0x19, 0xAA, 0x73, 0x57, 0xE0, 0xA2, 0x5C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C2196F0C-60ED-5B5D-B919-AA7357E0A25C")]
    internal interface ITouchHitTestingEventArgs : global::Microsoft.UI.Input.ITouchHitTestingEventArgs
    {
    }
    internal static class IWindowRectChangedEventArgsMethods
    {

        internal static unsafe global::Microsoft.UI.Input.MoveSizeOperation get_MoveSizeOperation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.MoveSizeOperation __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.MoveSizeOperation*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Graphics.RectInt32 get_NewWindowRect(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Graphics.RectInt32 __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Graphics.RectInt32*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Graphics.RectInt32 get_OldWindowRect(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Graphics.RectInt32 __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Graphics.RectInt32*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Graphics.PointInt32 get_PointerScreenPoint(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Graphics.PointInt32 __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Graphics.PointInt32*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x28, 0x5D, 0x88, 0x8A, 0xD9, 0xD2, 0xDA, 0x5D, 0x98, 0x48, 0xCD, 0xF2, 0x47, 0x77, 0x10, 0x37 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8A885D28-D2D9-5DDA-9848-CDF247771037")]
    internal interface IWindowRectChangedEventArgs : global::Microsoft.UI.Input.IWindowRectChangedEventArgs
    {
    }
    internal static class IWindowRectChangingEventArgsMethods
    {

        internal static unsafe bool get_AllowRectChange(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_AllowRectChange(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[12](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Input.MoveSizeOperation get_MoveSizeOperation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.MoveSizeOperation __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.MoveSizeOperation*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Graphics.RectInt32 get_NewWindowRect(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Graphics.RectInt32 __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Graphics.RectInt32*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_NewWindowRect(IObjectReference _obj, global::Windows.Graphics.RectInt32 value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Graphics.RectInt32, int>**)ThisPtr)[10](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.Graphics.RectInt32 get_OldWindowRect(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Graphics.RectInt32 __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Graphics.RectInt32*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Graphics.PointInt32 get_PointerScreenPoint(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Graphics.PointInt32 __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Graphics.PointInt32*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe bool get_ShowWindow(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_ShowWindow(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[14](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3C, 0xED, 0x13, 0xDB, 0xBC, 0xDE, 0x55, 0x58, 0x8D, 0x70, 0x59, 0x36, 0xFD, 0x81, 0x34, 0x57 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("DB13ED3C-DEBC-5855-8D70-5936FD813457")]
    internal interface IWindowRectChangingEventArgs : global::Microsoft.UI.Input.IWindowRectChangingEventArgs
    {
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct InputActivationListener
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.InputActivationListener obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.InputActivationListener>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IInputActivationListenerMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.InputActivationListener obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IInputActivationListenerMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.InputActivationListener FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.InputActivationListener.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.InputActivationListener obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.InputActivationListener>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.InputActivationListener[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputActivationListener>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputActivationListener>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.InputActivationListener[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputActivationListener>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.InputActivationListener[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputActivationListener>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.InputActivationListener[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputActivationListener>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.InputActivationListener>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputActivationListener>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class InputActivationListenerRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.InputActivationListener(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct InputActivationListenerActivationChangedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.InputActivationListenerActivationChangedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.InputActivationListenerActivationChangedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IInputActivationListenerActivationChangedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.InputActivationListenerActivationChangedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IInputActivationListenerActivationChangedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.InputActivationListenerActivationChangedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.InputActivationListenerActivationChangedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.InputActivationListenerActivationChangedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.InputActivationListenerActivationChangedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.InputActivationListenerActivationChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputActivationListenerActivationChangedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputActivationListenerActivationChangedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.InputActivationListenerActivationChangedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputActivationListenerActivationChangedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.InputActivationListenerActivationChangedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputActivationListenerActivationChangedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.InputActivationListenerActivationChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputActivationListenerActivationChangedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.InputActivationListenerActivationChangedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputActivationListenerActivationChangedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class InputActivationListenerActivationChangedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.InputActivationListenerActivationChangedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct InputCursor
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.InputCursor obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.InputCursor>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IInputCursorMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.InputCursor obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IInputCursorMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.InputCursor FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.InputCursor.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.InputCursor obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.InputCursor>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.InputCursor[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputCursor>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputCursor>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.InputCursor[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputCursor>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.InputCursor[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputCursor>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.InputCursor[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputCursor>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.InputCursor>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputCursor>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class InputCursorRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.InputCursor(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct InputCustomCursor
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.InputCustomCursor obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.InputCustomCursor>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IInputCustomCursorMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.InputCustomCursor obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IInputCustomCursorMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.InputCustomCursor FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.InputCustomCursor.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.InputCustomCursor obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.InputCustomCursor>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.InputCustomCursor[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputCustomCursor>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputCustomCursor>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.InputCustomCursor[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputCustomCursor>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.InputCustomCursor[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputCustomCursor>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.InputCustomCursor[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputCustomCursor>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.InputCustomCursor>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputCustomCursor>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class InputCustomCursorRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.InputCustomCursor(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct InputDesktopNamedResourceCursor
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.InputDesktopNamedResourceCursor obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.InputDesktopNamedResourceCursor>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IInputDesktopNamedResourceCursorMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.InputDesktopNamedResourceCursor obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IInputDesktopNamedResourceCursorMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.InputDesktopNamedResourceCursor FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.InputDesktopNamedResourceCursor.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.InputDesktopNamedResourceCursor obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.InputDesktopNamedResourceCursor>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.InputDesktopNamedResourceCursor[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputDesktopNamedResourceCursor>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputDesktopNamedResourceCursor>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.InputDesktopNamedResourceCursor[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputDesktopNamedResourceCursor>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.InputDesktopNamedResourceCursor[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputDesktopNamedResourceCursor>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.InputDesktopNamedResourceCursor[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputDesktopNamedResourceCursor>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.InputDesktopNamedResourceCursor>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputDesktopNamedResourceCursor>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class InputDesktopNamedResourceCursorRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.InputDesktopNamedResourceCursor(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct InputDesktopResourceCursor
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.InputDesktopResourceCursor obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.InputDesktopResourceCursor>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IInputDesktopResourceCursorMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.InputDesktopResourceCursor obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IInputDesktopResourceCursorMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.InputDesktopResourceCursor FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.InputDesktopResourceCursor.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.InputDesktopResourceCursor obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.InputDesktopResourceCursor>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.InputDesktopResourceCursor[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputDesktopResourceCursor>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputDesktopResourceCursor>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.InputDesktopResourceCursor[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputDesktopResourceCursor>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.InputDesktopResourceCursor[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputDesktopResourceCursor>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.InputDesktopResourceCursor[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputDesktopResourceCursor>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.InputDesktopResourceCursor>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputDesktopResourceCursor>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class InputDesktopResourceCursorRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.InputDesktopResourceCursor(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct InputFocusController
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.InputFocusController obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.InputFocusController>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IInputFocusControllerMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.InputFocusController obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IInputFocusControllerMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.InputFocusController FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.InputFocusController.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.InputFocusController obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.InputFocusController>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.InputFocusController[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputFocusController>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputFocusController>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.InputFocusController[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputFocusController>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.InputFocusController[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputFocusController>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.InputFocusController[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputFocusController>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.InputFocusController>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputFocusController>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class InputFocusControllerRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.InputFocusController(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct InputFocusNavigationHost
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.InputFocusNavigationHost obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.InputFocusNavigationHost>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IInputFocusNavigationHostMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.InputFocusNavigationHost obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IInputFocusNavigationHostMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.InputFocusNavigationHost FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.InputFocusNavigationHost.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.InputFocusNavigationHost obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.InputFocusNavigationHost>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.InputFocusNavigationHost[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputFocusNavigationHost>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputFocusNavigationHost>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.InputFocusNavigationHost[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputFocusNavigationHost>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.InputFocusNavigationHost[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputFocusNavigationHost>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.InputFocusNavigationHost[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputFocusNavigationHost>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.InputFocusNavigationHost>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputFocusNavigationHost>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class InputFocusNavigationHostRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.InputFocusNavigationHost(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct InputKeyboardSource
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.InputKeyboardSource obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.InputKeyboardSource>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IInputKeyboardSourceMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.InputKeyboardSource obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IInputKeyboardSourceMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.InputKeyboardSource FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.InputKeyboardSource.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.InputKeyboardSource obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.InputKeyboardSource>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.InputKeyboardSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputKeyboardSource>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputKeyboardSource>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.InputKeyboardSource[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputKeyboardSource>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.InputKeyboardSource[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputKeyboardSource>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.InputKeyboardSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputKeyboardSource>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.InputKeyboardSource>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputKeyboardSource>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class InputKeyboardSourceRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.InputKeyboardSource(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct InputLightDismissAction
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.InputLightDismissAction obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.InputLightDismissAction>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IInputLightDismissActionMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.InputLightDismissAction obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IInputLightDismissActionMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.InputLightDismissAction FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.InputLightDismissAction.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.InputLightDismissAction obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.InputLightDismissAction>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.InputLightDismissAction[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputLightDismissAction>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputLightDismissAction>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.InputLightDismissAction[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputLightDismissAction>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.InputLightDismissAction[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputLightDismissAction>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.InputLightDismissAction[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputLightDismissAction>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.InputLightDismissAction>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputLightDismissAction>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class InputLightDismissActionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.InputLightDismissAction(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct InputLightDismissEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.InputLightDismissEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.InputLightDismissEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IInputLightDismissEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.InputLightDismissEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IInputLightDismissEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.InputLightDismissEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.InputLightDismissEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.InputLightDismissEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.InputLightDismissEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.InputLightDismissEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputLightDismissEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputLightDismissEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.InputLightDismissEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputLightDismissEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.InputLightDismissEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputLightDismissEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.InputLightDismissEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputLightDismissEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.InputLightDismissEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputLightDismissEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class InputLightDismissEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.InputLightDismissEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct InputNonClientPointerSource
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.InputNonClientPointerSource obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.InputNonClientPointerSource>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IInputNonClientPointerSourceMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.InputNonClientPointerSource obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IInputNonClientPointerSourceMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.InputNonClientPointerSource FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.InputNonClientPointerSource.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.InputNonClientPointerSource obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.InputNonClientPointerSource>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.InputNonClientPointerSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputNonClientPointerSource>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputNonClientPointerSource>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.InputNonClientPointerSource[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputNonClientPointerSource>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.InputNonClientPointerSource[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputNonClientPointerSource>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.InputNonClientPointerSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputNonClientPointerSource>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.InputNonClientPointerSource>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputNonClientPointerSource>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class InputNonClientPointerSourceRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.InputNonClientPointerSource(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct InputObject
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.InputObject obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.InputObject>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IInputObjectMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.InputObject obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IInputObjectMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.InputObject FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.InputObject.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.InputObject obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.InputObject>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.InputObject[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputObject>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputObject>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.InputObject[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputObject>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.InputObject[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputObject>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.InputObject[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputObject>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.InputObject>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputObject>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class InputObjectRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.InputObject(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct InputPointerSource
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.InputPointerSource obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.InputPointerSource>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IInputPointerSourceMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.InputPointerSource obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IInputPointerSourceMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.InputPointerSource FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.InputPointerSource.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.InputPointerSource obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.InputPointerSource>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.InputPointerSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputPointerSource>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputPointerSource>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.InputPointerSource[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputPointerSource>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.InputPointerSource[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputPointerSource>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.InputPointerSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputPointerSource>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.InputPointerSource>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputPointerSource>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class InputPointerSourceRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.InputPointerSource(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct InputPreTranslateKeyboardSource
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.InputPreTranslateKeyboardSource obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.InputPreTranslateKeyboardSource>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IInputPreTranslateKeyboardSourceMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.InputPreTranslateKeyboardSource obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IInputPreTranslateKeyboardSourceMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.InputPreTranslateKeyboardSource FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.InputPreTranslateKeyboardSource.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.InputPreTranslateKeyboardSource obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.InputPreTranslateKeyboardSource>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.InputPreTranslateKeyboardSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputPreTranslateKeyboardSource>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputPreTranslateKeyboardSource>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.InputPreTranslateKeyboardSource[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputPreTranslateKeyboardSource>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.InputPreTranslateKeyboardSource[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputPreTranslateKeyboardSource>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.InputPreTranslateKeyboardSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputPreTranslateKeyboardSource>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.InputPreTranslateKeyboardSource>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputPreTranslateKeyboardSource>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class InputPreTranslateKeyboardSourceRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.InputPreTranslateKeyboardSource(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct InputSystemCursor
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.InputSystemCursor obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.InputSystemCursor>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IInputSystemCursorMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.InputSystemCursor obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IInputSystemCursorMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.InputSystemCursor FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.InputSystemCursor.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.InputSystemCursor obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.InputSystemCursor>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.InputSystemCursor[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputSystemCursor>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputSystemCursor>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.InputSystemCursor[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputSystemCursor>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.InputSystemCursor[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputSystemCursor>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.InputSystemCursor[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputSystemCursor>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.InputSystemCursor>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.InputSystemCursor>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class InputSystemCursorRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.InputSystemCursor(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct KeyEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.KeyEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.KeyEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IKeyEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.KeyEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IKeyEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.KeyEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.KeyEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.KeyEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.KeyEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.KeyEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.KeyEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.KeyEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.KeyEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.KeyEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.KeyEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.KeyEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.KeyEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.KeyEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.KeyEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.KeyEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class KeyEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.KeyEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ManipulationCompletedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.ManipulationCompletedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.ManipulationCompletedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IManipulationCompletedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.ManipulationCompletedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IManipulationCompletedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.ManipulationCompletedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.ManipulationCompletedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.ManipulationCompletedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.ManipulationCompletedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.ManipulationCompletedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ManipulationCompletedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ManipulationCompletedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.ManipulationCompletedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ManipulationCompletedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.ManipulationCompletedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ManipulationCompletedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.ManipulationCompletedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ManipulationCompletedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.ManipulationCompletedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ManipulationCompletedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ManipulationCompletedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.ManipulationCompletedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ManipulationInertiaStartingEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.ManipulationInertiaStartingEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.ManipulationInertiaStartingEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IManipulationInertiaStartingEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.ManipulationInertiaStartingEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IManipulationInertiaStartingEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.ManipulationInertiaStartingEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.ManipulationInertiaStartingEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.ManipulationInertiaStartingEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.ManipulationInertiaStartingEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.ManipulationInertiaStartingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ManipulationInertiaStartingEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ManipulationInertiaStartingEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.ManipulationInertiaStartingEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ManipulationInertiaStartingEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.ManipulationInertiaStartingEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ManipulationInertiaStartingEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.ManipulationInertiaStartingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ManipulationInertiaStartingEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.ManipulationInertiaStartingEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ManipulationInertiaStartingEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ManipulationInertiaStartingEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.ManipulationInertiaStartingEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ManipulationStartedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.ManipulationStartedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.ManipulationStartedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IManipulationStartedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.ManipulationStartedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IManipulationStartedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.ManipulationStartedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.ManipulationStartedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.ManipulationStartedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.ManipulationStartedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.ManipulationStartedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ManipulationStartedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ManipulationStartedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.ManipulationStartedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ManipulationStartedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.ManipulationStartedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ManipulationStartedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.ManipulationStartedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ManipulationStartedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.ManipulationStartedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ManipulationStartedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ManipulationStartedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.ManipulationStartedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ManipulationUpdatedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.ManipulationUpdatedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.ManipulationUpdatedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IManipulationUpdatedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.ManipulationUpdatedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IManipulationUpdatedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.ManipulationUpdatedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.ManipulationUpdatedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.ManipulationUpdatedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.ManipulationUpdatedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.ManipulationUpdatedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ManipulationUpdatedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ManipulationUpdatedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.ManipulationUpdatedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ManipulationUpdatedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.ManipulationUpdatedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ManipulationUpdatedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.ManipulationUpdatedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ManipulationUpdatedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.ManipulationUpdatedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.ManipulationUpdatedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ManipulationUpdatedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.ManipulationUpdatedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct MouseWheelParameters
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.MouseWheelParameters obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.MouseWheelParameters>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IMouseWheelParametersMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.MouseWheelParameters obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IMouseWheelParametersMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.MouseWheelParameters FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.MouseWheelParameters.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.MouseWheelParameters obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.MouseWheelParameters>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.MouseWheelParameters[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.MouseWheelParameters>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.MouseWheelParameters>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.MouseWheelParameters[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.MouseWheelParameters>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.MouseWheelParameters[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.MouseWheelParameters>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.MouseWheelParameters[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.MouseWheelParameters>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.MouseWheelParameters>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.MouseWheelParameters>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class MouseWheelParametersRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.MouseWheelParameters(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct NonClientCaptionTappedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.NonClientCaptionTappedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.NonClientCaptionTappedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.INonClientCaptionTappedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.NonClientCaptionTappedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.INonClientCaptionTappedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.NonClientCaptionTappedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.NonClientCaptionTappedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.NonClientCaptionTappedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.NonClientCaptionTappedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.NonClientCaptionTappedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.NonClientCaptionTappedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.NonClientCaptionTappedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.NonClientCaptionTappedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.NonClientCaptionTappedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.NonClientCaptionTappedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.NonClientCaptionTappedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.NonClientCaptionTappedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.NonClientCaptionTappedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.NonClientCaptionTappedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.NonClientCaptionTappedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class NonClientCaptionTappedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.NonClientCaptionTappedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct NonClientPointerEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.NonClientPointerEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.NonClientPointerEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.INonClientPointerEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.NonClientPointerEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.INonClientPointerEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.NonClientPointerEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.NonClientPointerEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.NonClientPointerEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.NonClientPointerEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.NonClientPointerEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.NonClientPointerEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.NonClientPointerEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.NonClientPointerEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.NonClientPointerEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.NonClientPointerEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.NonClientPointerEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.NonClientPointerEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.NonClientPointerEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.NonClientPointerEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.NonClientPointerEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class NonClientPointerEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.NonClientPointerEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct NonClientRegionsChangedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.NonClientRegionsChangedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.NonClientRegionsChangedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.INonClientRegionsChangedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.NonClientRegionsChangedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.INonClientRegionsChangedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.NonClientRegionsChangedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.NonClientRegionsChangedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.NonClientRegionsChangedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.NonClientRegionsChangedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.NonClientRegionsChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.NonClientRegionsChangedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.NonClientRegionsChangedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.NonClientRegionsChangedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.NonClientRegionsChangedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.NonClientRegionsChangedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.NonClientRegionsChangedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.NonClientRegionsChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.NonClientRegionsChangedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.NonClientRegionsChangedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.NonClientRegionsChangedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class NonClientRegionsChangedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.NonClientRegionsChangedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PhysicalKeyStatus
    {
        public uint RepeatCount;
        public uint ScanCode;
        public byte IsExtendedKey;
        public byte IsMenuKeyDown;
        public byte WasKeyDown;
        public byte IsKeyReleased;

        public struct Marshaler
        {
            public PhysicalKeyStatus __abi;
        }

        public static Marshaler CreateMarshaler(global::Microsoft.UI.Input.PhysicalKeyStatus arg)
        {
            var m = new Marshaler();
            m.__abi = new PhysicalKeyStatus()
            {
                RepeatCount = arg.RepeatCount
                , ScanCode = arg.ScanCode
                , IsExtendedKey = (byte)(arg.IsExtendedKey ? 1 : 0)
                , IsMenuKeyDown = (byte)(arg.IsMenuKeyDown ? 1 : 0)
                , WasKeyDown = (byte)(arg.WasKeyDown ? 1 : 0)
                , IsKeyReleased = (byte)(arg.IsKeyReleased ? 1 : 0)
            };

            return m;}

        public static PhysicalKeyStatus GetAbi(Marshaler m) => m.__abi;

        public static global::Microsoft.UI.Input.PhysicalKeyStatus FromAbi(PhysicalKeyStatus arg)
        {
            return new global::Microsoft.UI.Input.PhysicalKeyStatus()
            {
                RepeatCount = arg.RepeatCount
                , ScanCode = arg.ScanCode
                , IsExtendedKey = arg.IsExtendedKey != 0
                , IsMenuKeyDown = arg.IsMenuKeyDown != 0
                , WasKeyDown = arg.WasKeyDown != 0
                , IsKeyReleased = arg.IsKeyReleased != 0
            };
        }

        public static PhysicalKeyStatus FromManaged(global::Microsoft.UI.Input.PhysicalKeyStatus arg)
        {
            return new PhysicalKeyStatus()
            {
                RepeatCount = arg.RepeatCount
                , ScanCode = arg.ScanCode
                , IsExtendedKey = (byte)(arg.IsExtendedKey ? 1 : 0)
                , IsMenuKeyDown = (byte)(arg.IsMenuKeyDown ? 1 : 0)
                , WasKeyDown = (byte)(arg.WasKeyDown ? 1 : 0)
                , IsKeyReleased = (byte)(arg.IsKeyReleased ? 1 : 0)
            };
        }

        public static unsafe void CopyAbi(Marshaler arg, IntPtr dest) => 
            *(PhysicalKeyStatus*)dest.ToPointer() = GetAbi(arg);

        public static unsafe void CopyManaged(global::Microsoft.UI.Input.PhysicalKeyStatus arg, IntPtr dest) =>
            *(PhysicalKeyStatus*)dest.ToPointer() = FromManaged(arg);

        public static void DisposeMarshaler(Marshaler m) {}

        public static void DisposeAbi(PhysicalKeyStatus abi)
        {
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PointerEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.PointerEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.PointerEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IPointerEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.PointerEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IPointerEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.PointerEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.PointerEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.PointerEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.PointerEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.PointerEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.PointerEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.PointerEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.PointerEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.PointerEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.PointerEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.PointerEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.PointerEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.PointerEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.PointerEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.PointerEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PointerEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.PointerEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PointerPoint
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.PointerPoint obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.PointerPoint>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IPointerPointMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.PointerPoint obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IPointerPointMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.PointerPoint FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.PointerPoint.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.PointerPoint obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.PointerPoint>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.PointerPoint[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.PointerPoint>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.PointerPoint>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.PointerPoint[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.PointerPoint>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.PointerPoint[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.PointerPoint>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.PointerPoint[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.PointerPoint>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.PointerPoint>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.PointerPoint>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PointerPointRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.PointerPoint(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PointerPointProperties
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.PointerPointProperties obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.PointerPointProperties>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IPointerPointPropertiesMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.PointerPointProperties obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IPointerPointPropertiesMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.PointerPointProperties FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.PointerPointProperties.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.PointerPointProperties obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.PointerPointProperties>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.PointerPointProperties[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.PointerPointProperties>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.PointerPointProperties>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.PointerPointProperties[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.PointerPointProperties>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.PointerPointProperties[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.PointerPointProperties>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.PointerPointProperties[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.PointerPointProperties>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.PointerPointProperties>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.PointerPointProperties>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PointerPointPropertiesRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.PointerPointProperties(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PointerPredictor
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.PointerPredictor obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.PointerPredictor>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IPointerPredictorMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.PointerPredictor obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IPointerPredictorMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.PointerPredictor FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.PointerPredictor.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.PointerPredictor obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.PointerPredictor>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.PointerPredictor[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.PointerPredictor>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.PointerPredictor>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.PointerPredictor[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.PointerPredictor>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.PointerPredictor[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.PointerPredictor>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.PointerPredictor[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.PointerPredictor>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.PointerPredictor>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.PointerPredictor>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PointerPredictorRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.PointerPredictor(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct RightTappedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.RightTappedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.RightTappedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IRightTappedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.RightTappedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IRightTappedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.RightTappedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.RightTappedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.RightTappedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.RightTappedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.RightTappedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.RightTappedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.RightTappedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.RightTappedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.RightTappedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.RightTappedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.RightTappedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.RightTappedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.RightTappedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.RightTappedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.RightTappedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class RightTappedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.RightTappedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct TappedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.TappedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.TappedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.ITappedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.TappedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.ITappedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.TappedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.TappedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.TappedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.TappedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.TappedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.TappedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.TappedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.TappedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.TappedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.TappedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.TappedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.TappedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.TappedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.TappedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.TappedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class TappedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.TappedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct TouchHitTestingEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.TouchHitTestingEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.TouchHitTestingEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.ITouchHitTestingEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.TouchHitTestingEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.ITouchHitTestingEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.TouchHitTestingEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.TouchHitTestingEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.TouchHitTestingEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.TouchHitTestingEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.TouchHitTestingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.TouchHitTestingEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.TouchHitTestingEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.TouchHitTestingEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.TouchHitTestingEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.TouchHitTestingEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.TouchHitTestingEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.TouchHitTestingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.TouchHitTestingEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.TouchHitTestingEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.TouchHitTestingEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class TouchHitTestingEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.TouchHitTestingEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct WindowRectChangedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.WindowRectChangedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.WindowRectChangedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IWindowRectChangedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.WindowRectChangedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IWindowRectChangedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.WindowRectChangedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.WindowRectChangedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.WindowRectChangedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.WindowRectChangedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.WindowRectChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.WindowRectChangedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.WindowRectChangedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.WindowRectChangedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.WindowRectChangedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.WindowRectChangedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.WindowRectChangedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.WindowRectChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.WindowRectChangedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.WindowRectChangedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.WindowRectChangedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class WindowRectChangedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.WindowRectChangedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct WindowRectChangingEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.WindowRectChangingEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.WindowRectChangingEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.IWindowRectChangingEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.WindowRectChangingEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.IWindowRectChangingEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.WindowRectChangingEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.WindowRectChangingEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.WindowRectChangingEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.WindowRectChangingEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.WindowRectChangingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.WindowRectChangingEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.WindowRectChangingEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.WindowRectChangingEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.WindowRectChangingEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.WindowRectChangingEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.WindowRectChangingEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.WindowRectChangingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.WindowRectChangingEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.WindowRectChangingEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.WindowRectChangingEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class WindowRectChangingEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.WindowRectChangingEventArgs(inspectable.ObjRef);
    }
}
#pragma warning restore CA1416
