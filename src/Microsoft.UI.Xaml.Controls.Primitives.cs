//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.UI.Xaml.Controls.Primitives
{
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<AnimationDirection>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum AnimationDirection : int
    {
        Left = unchecked((int)0),
        Top = unchecked((int)0x1),
        Right = unchecked((int)0x2),
        Bottom = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettingsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IAppBarButtonTemplateSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class AppBarButtonTemplateSettings : global::Microsoft.UI.Xaml.DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<AppBarButtonTemplateSettings>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IAppBarButtonTemplateSettings => _inner;


        public static new AppBarButtonTemplateSettings FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<AppBarButtonTemplateSettings>.FromAbi(thisPtr);
        }

        internal AppBarButtonTemplateSettings(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAppBarButtonTemplateSettingsMethods.IID);

        }


        public static bool operator ==(AppBarButtonTemplateSettings x, AppBarButtonTemplateSettings y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(AppBarButtonTemplateSettings x, AppBarButtonTemplateSettings y) => !(x == y);
        public bool Equals(AppBarButtonTemplateSettings other) => this == other;
        public override bool Equals(object obj) => obj is AppBarButtonTemplateSettings that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double KeyboardAcceleratorTextMinWidth => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAppBarButtonTemplateSettingsMethods.get_KeyboardAcceleratorTextMinWidth(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IAppBarButtonTemplateSettings);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.AppBarTemplateSettings))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.AppBarTemplateSettingsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IAppBarTemplateSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class AppBarTemplateSettings : global::Microsoft.UI.Xaml.DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<AppBarTemplateSettings>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IAppBarTemplateSettings => _inner;


        public static new AppBarTemplateSettings FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<AppBarTemplateSettings>.FromAbi(thisPtr);
        }

        internal AppBarTemplateSettings(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAppBarTemplateSettingsMethods.IID);

        }


        public static bool operator ==(AppBarTemplateSettings x, AppBarTemplateSettings y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(AppBarTemplateSettings x, AppBarTemplateSettings y) => !(x == y);
        public bool Equals(AppBarTemplateSettings other) => this == other;
        public override bool Equals(object obj) => obj is AppBarTemplateSettings that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.Rect ClipRect => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAppBarTemplateSettingsMethods.get_ClipRect(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IAppBarTemplateSettings);

        public global::Microsoft.UI.Xaml.Thickness CompactRootMargin => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAppBarTemplateSettingsMethods.get_CompactRootMargin(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IAppBarTemplateSettings);

        public double CompactVerticalDelta => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAppBarTemplateSettingsMethods.get_CompactVerticalDelta(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IAppBarTemplateSettings);

        public global::Microsoft.UI.Xaml.Thickness HiddenRootMargin => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAppBarTemplateSettingsMethods.get_HiddenRootMargin(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IAppBarTemplateSettings);

        public double HiddenVerticalDelta => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAppBarTemplateSettingsMethods.get_HiddenVerticalDelta(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IAppBarTemplateSettings);

        public global::Microsoft.UI.Xaml.Thickness MinimalRootMargin => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAppBarTemplateSettingsMethods.get_MinimalRootMargin(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IAppBarTemplateSettings);

        public double MinimalVerticalDelta => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAppBarTemplateSettingsMethods.get_MinimalVerticalDelta(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IAppBarTemplateSettings);

        public double NegativeCompactVerticalDelta => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAppBarTemplateSettingsMethods.get_NegativeCompactVerticalDelta(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IAppBarTemplateSettings);

        public double NegativeHiddenVerticalDelta => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAppBarTemplateSettingsMethods.get_NegativeHiddenVerticalDelta(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IAppBarTemplateSettings);

        public double NegativeMinimalVerticalDelta => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAppBarTemplateSettingsMethods.get_NegativeMinimalVerticalDelta(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IAppBarTemplateSettings);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettingsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IAppBarToggleButtonTemplateSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class AppBarToggleButtonTemplateSettings : global::Microsoft.UI.Xaml.DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<AppBarToggleButtonTemplateSettings>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IAppBarToggleButtonTemplateSettings => _inner;


        public static new AppBarToggleButtonTemplateSettings FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<AppBarToggleButtonTemplateSettings>.FromAbi(thisPtr);
        }

        internal AppBarToggleButtonTemplateSettings(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAppBarToggleButtonTemplateSettingsMethods.IID);

        }


        public static bool operator ==(AppBarToggleButtonTemplateSettings x, AppBarToggleButtonTemplateSettings y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(AppBarToggleButtonTemplateSettings x, AppBarToggleButtonTemplateSettings y) => !(x == y);
        public bool Equals(AppBarToggleButtonTemplateSettings other) => this == other;
        public override bool Equals(object obj) => obj is AppBarToggleButtonTemplateSettings that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double KeyboardAcceleratorTextMinWidth => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAppBarToggleButtonTemplateSettingsMethods.get_KeyboardAcceleratorTextMinWidth(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IAppBarToggleButtonTemplateSettings);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.AutoSuggestBoxHelper))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.AutoSuggestBoxHelperRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IAutoSuggestBoxHelper))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    public sealed class AutoSuggestBoxHelper : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<AutoSuggestBoxHelper>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IAutoSuggestBoxHelper => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.AutoSuggestBoxHelper").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IAutoSuggestBoxHelperStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IAutoSuggestBoxHelperStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IAutoSuggestBoxHelperStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IAutoSuggestBoxHelperStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.AutoSuggestBoxHelper", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAutoSuggestBoxHelperStaticsMethods.IID);
                }
            }
        }

        public static void SetKeepInteriorCornersSquare(global::Microsoft.UI.Xaml.Controls.AutoSuggestBox autoSuggestBox, bool value) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAutoSuggestBoxHelperStaticsMethods.SetKeepInteriorCornersSquare(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IAutoSuggestBoxHelperStatics, autoSuggestBox, value);

        public static bool GetKeepInteriorCornersSquare(global::Microsoft.UI.Xaml.Controls.AutoSuggestBox autoSuggestBox) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAutoSuggestBoxHelperStaticsMethods.GetKeepInteriorCornersSquare(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IAutoSuggestBoxHelperStatics, autoSuggestBox);

        public static global::Microsoft.UI.Xaml.DependencyProperty KeepInteriorCornersSquareProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAutoSuggestBoxHelperStaticsMethods.get_KeepInteriorCornersSquareProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IAutoSuggestBoxHelperStatics);

        public static AutoSuggestBoxHelper FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<AutoSuggestBoxHelper>.FromAbi(thisPtr);
        }

        internal AutoSuggestBoxHelper(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAutoSuggestBoxHelperMethods.IID);

        }


        public static bool operator ==(AutoSuggestBoxHelper x, AutoSuggestBoxHelper y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(AutoSuggestBoxHelper x, AutoSuggestBoxHelper y) => !(x == y);
        public bool Equals(AutoSuggestBoxHelper other) => this == other;
        public override bool Equals(object obj) => obj is AutoSuggestBoxHelper that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ButtonBase))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ButtonBaseRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IButtonBase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class ButtonBase : global::Microsoft.UI.Xaml.Controls.ContentControl, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ButtonBase>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IButtonBase;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IButtonBase()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IButtonBase, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IButtonBase;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IButtonBase => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IButtonBase ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IButtonBase();



        private static class _IButtonBaseFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IButtonBaseFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IButtonBaseFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IButtonBaseFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IButtonBaseFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ButtonBase", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseFactoryMethods.IID);
                }
            }
        }

        protected ButtonBase():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(ButtonBase);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IButtonBaseFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IButtonBaseFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ButtonBase").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IButtonBaseStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IButtonBaseStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IButtonBaseStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IButtonBaseStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ButtonBase", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty ClickModeProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseStaticsMethods.get_ClickModeProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IButtonBaseStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty CommandParameterProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseStaticsMethods.get_CommandParameterProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IButtonBaseStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty CommandProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseStaticsMethods.get_CommandProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IButtonBaseStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty IsPointerOverProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseStaticsMethods.get_IsPointerOverProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IButtonBaseStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty IsPressedProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseStaticsMethods.get_IsPressedProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IButtonBaseStatics);

        public static new ButtonBase FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ButtonBase>.FromAbi(thisPtr);
        }

        protected internal ButtonBase(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseMethods.IID);

        }


        public static bool operator ==(ButtonBase x, ButtonBase y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ButtonBase x, ButtonBase y) => !(x == y);
        public bool Equals(ButtonBase other) => this == other;
        public override bool Equals(object obj) => obj is ButtonBase that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected ButtonBase(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(ButtonBase);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public event global::Microsoft.UI.Xaml.RoutedEventHandler Click
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseMethods.Get_Click2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IButtonBase, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseMethods.Get_Click2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IButtonBase, (IWinRTObject)this).Unsubscribe(value);
        }

        public global::Microsoft.UI.Xaml.Controls.ClickMode ClickMode
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseMethods.get_ClickMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IButtonBase);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseMethods.set_ClickMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IButtonBase, value);
        }

        public global::System.Windows.Input.ICommand Command
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseMethods.get_Command(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IButtonBase);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseMethods.set_Command(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IButtonBase, value);
        }

        public object CommandParameter
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseMethods.get_CommandParameter(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IButtonBase);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseMethods.set_CommandParameter(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IButtonBase, value);
        }

        public bool IsPointerOver => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseMethods.get_IsPointerOver(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IButtonBase);

        public bool IsPressed => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseMethods.get_IsPressed(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IButtonBase);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.CalendarPanel))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.CalendarPanelRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICalendarPanel))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class CalendarPanel : global::Microsoft.UI.Xaml.Controls.Panel, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CalendarPanel>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICalendarPanel => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_CalendarPanel;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_CalendarPanel
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_CalendarPanel;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_CalendarPanel = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.CalendarPanel");
                }
            }
        }

        public CalendarPanel() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_CalendarPanel, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICalendarPanelMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new CalendarPanel FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CalendarPanel>.FromAbi(thisPtr);
        }

        internal CalendarPanel(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICalendarPanelMethods.IID);

        }


        public static bool operator ==(CalendarPanel x, CalendarPanel y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CalendarPanel x, CalendarPanel y) => !(x == y);
        public bool Equals(CalendarPanel other) => this == other;
        public override bool Equals(object obj) => obj is CalendarPanel that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettingsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICalendarViewTemplateSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class CalendarViewTemplateSettings : global::Microsoft.UI.Xaml.DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CalendarViewTemplateSettings>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICalendarViewTemplateSettings => _inner;


        public static new CalendarViewTemplateSettings FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CalendarViewTemplateSettings>.FromAbi(thisPtr);
        }

        internal CalendarViewTemplateSettings(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICalendarViewTemplateSettingsMethods.IID);

        }


        public static bool operator ==(CalendarViewTemplateSettings x, CalendarViewTemplateSettings y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CalendarViewTemplateSettings x, CalendarViewTemplateSettings y) => !(x == y);
        public bool Equals(CalendarViewTemplateSettings other) => this == other;
        public override bool Equals(object obj) => obj is CalendarViewTemplateSettings that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double CenterX => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICalendarViewTemplateSettingsMethods.get_CenterX(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICalendarViewTemplateSettings);

        public double CenterY => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICalendarViewTemplateSettingsMethods.get_CenterY(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICalendarViewTemplateSettings);

        public global::Windows.Foundation.Rect ClipRect => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICalendarViewTemplateSettingsMethods.get_ClipRect(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICalendarViewTemplateSettings);

        public bool HasMoreContentAfter => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICalendarViewTemplateSettingsMethods.get_HasMoreContentAfter(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICalendarViewTemplateSettings);

        public bool HasMoreContentBefore => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICalendarViewTemplateSettingsMethods.get_HasMoreContentBefore(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICalendarViewTemplateSettings);

        public bool HasMoreViews => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICalendarViewTemplateSettingsMethods.get_HasMoreViews(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICalendarViewTemplateSettings);

        public string HeaderText => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICalendarViewTemplateSettingsMethods.get_HeaderText(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICalendarViewTemplateSettings);

        public double MinViewWidth => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICalendarViewTemplateSettingsMethods.get_MinViewWidth(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICalendarViewTemplateSettings);

        public string WeekDay1 => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICalendarViewTemplateSettingsMethods.get_WeekDay1(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICalendarViewTemplateSettings);

        public string WeekDay2 => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICalendarViewTemplateSettingsMethods.get_WeekDay2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICalendarViewTemplateSettings);

        public string WeekDay3 => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICalendarViewTemplateSettingsMethods.get_WeekDay3(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICalendarViewTemplateSettings);

        public string WeekDay4 => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICalendarViewTemplateSettingsMethods.get_WeekDay4(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICalendarViewTemplateSettings);

        public string WeekDay5 => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICalendarViewTemplateSettingsMethods.get_WeekDay5(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICalendarViewTemplateSettings);

        public string WeekDay6 => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICalendarViewTemplateSettingsMethods.get_WeekDay6(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICalendarViewTemplateSettings);

        public string WeekDay7 => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICalendarViewTemplateSettingsMethods.get_WeekDay7(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICalendarViewTemplateSettings);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.CarouselPanel))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.CarouselPanelRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICarouselPanel))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class CarouselPanel : global::Microsoft.UI.Xaml.Controls.VirtualizingPanel, IScrollSnapPointsInfo, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CarouselPanel>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo();



        private static class _ICarouselPanelFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanelFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanelFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanelFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanelFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.CarouselPanel", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelFactoryMethods.IID);
                }
            }
        }

        public CarouselPanel():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(CarouselPanel);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _ICarouselPanelFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanelFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new CarouselPanel FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CarouselPanel>.FromAbi(thisPtr);
        }

        protected internal CarouselPanel(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelMethods.IID);

        }


        public static bool operator ==(CarouselPanel x, CarouselPanel y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CarouselPanel x, CarouselPanel y) => !(x == y);
        public bool Equals(CarouselPanel other) => this == other;
        public override bool Equals(object obj) => obj is CarouselPanel that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected CarouselPanel(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(CarouselPanel);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public void LineUp() => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelMethods.LineUp(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel);

        public void LineDown() => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelMethods.LineDown(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel);

        public void LineLeft() => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelMethods.LineLeft(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel);

        public void LineRight() => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelMethods.LineRight(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel);

        public void PageUp() => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelMethods.PageUp(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel);

        public void PageDown() => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelMethods.PageDown(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel);

        public void PageLeft() => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelMethods.PageLeft(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel);

        public void PageRight() => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelMethods.PageRight(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel);

        public void MouseWheelUp() => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelMethods.MouseWheelUp(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel);

        public void MouseWheelDown() => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelMethods.MouseWheelDown(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel);

        public void MouseWheelLeft() => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelMethods.MouseWheelLeft(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel);

        public void MouseWheelRight() => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelMethods.MouseWheelRight(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel);

        public void SetHorizontalOffset(double offset) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelMethods.SetHorizontalOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel, offset);

        public void SetVerticalOffset(double offset) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelMethods.SetVerticalOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel, offset);

        public global::Windows.Foundation.Rect MakeVisible(global::Microsoft.UI.Xaml.UIElement visual, global::Windows.Foundation.Rect rectangle) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelMethods.MakeVisible(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel, visual, rectangle);

        public global::System.Collections.Generic.IReadOnlyList<float> GetIrregularSnapPoints(global::Microsoft.UI.Xaml.Controls.Orientation orientation, SnapPointsAlignment alignment) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.GetIrregularSnapPoints(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo, orientation, alignment);

        public float GetRegularSnapPoints(global::Microsoft.UI.Xaml.Controls.Orientation orientation, SnapPointsAlignment alignment, out float offset) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.GetRegularSnapPoints(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo, orientation, alignment, out offset);

        public event global::System.EventHandler<object> HorizontalSnapPointsChanged
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.Get_HorizontalSnapPointsChanged2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.Get_HorizontalSnapPointsChanged2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::System.EventHandler<object> VerticalSnapPointsChanged
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.Get_VerticalSnapPointsChanged2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.Get_VerticalSnapPointsChanged2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo, (IWinRTObject)this).Unsubscribe(value);
        }

        public bool AreHorizontalSnapPointsRegular => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.get_AreHorizontalSnapPointsRegular(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo);

        public bool AreVerticalSnapPointsRegular => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.get_AreVerticalSnapPointsRegular(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo);

        public bool CanHorizontallyScroll
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelMethods.get_CanHorizontallyScroll(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelMethods.set_CanHorizontallyScroll(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel, value);
        }

        public bool CanVerticallyScroll
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelMethods.get_CanVerticallyScroll(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelMethods.set_CanVerticallyScroll(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel, value);
        }

        public double ExtentHeight => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelMethods.get_ExtentHeight(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel);

        public double ExtentWidth => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelMethods.get_ExtentWidth(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel);

        public double HorizontalOffset => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelMethods.get_HorizontalOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel);

        public object ScrollOwner
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelMethods.get_ScrollOwner(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelMethods.set_ScrollOwner(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel, value);
        }

        public double VerticalOffset => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelMethods.get_VerticalOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel);

        public double ViewportHeight => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelMethods.get_ViewportHeight(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel);

        public double ViewportWidth => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelMethods.get_ViewportWidth(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSliderRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IColorPickerSlider))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    public class ColorPickerSlider : global::Microsoft.UI.Xaml.Controls.Slider, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ColorPickerSlider>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSlider;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSlider()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSlider, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorPickerSliderMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSlider;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSlider => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSlider ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSlider();



        private static class _IColorPickerSliderFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSliderFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSliderFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSliderFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSliderFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorPickerSliderFactoryMethods.IID);
                }
            }
        }

        public ColorPickerSlider():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(ColorPickerSlider);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IColorPickerSliderFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSliderFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorPickerSliderMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSliderStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSliderStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSliderStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSliderStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorPickerSliderStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty ColorChannelProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorPickerSliderStaticsMethods.get_ColorChannelProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSliderStatics);

        public static new ColorPickerSlider FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ColorPickerSlider>.FromAbi(thisPtr);
        }

        protected internal ColorPickerSlider(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorPickerSliderMethods.IID);

        }


        public static bool operator ==(ColorPickerSlider x, ColorPickerSlider y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ColorPickerSlider x, ColorPickerSlider y) => !(x == y);
        public bool Equals(ColorPickerSlider other) => this == other;
        public override bool Equals(object obj) => obj is ColorPickerSlider that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected ColorPickerSlider(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(ColorPickerSlider);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::Microsoft.UI.Xaml.Controls.ColorPickerHsvChannel ColorChannel
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorPickerSliderMethods.get_ColorChannel(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSlider);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorPickerSliderMethods.set_ColorChannel(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSlider, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrumRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IColorSpectrum))]
    [global::Microsoft.UI.Xaml.CustomAttributes.MUXPropertyChangedCallback(enable = true)]
    [global::Microsoft.UI.Xaml.CustomAttributes.MUXPropertyChangedCallbackMethodName(value = @"OnPropertyChanged")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    public class ColorSpectrum : global::Microsoft.UI.Xaml.Controls.Control, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ColorSpectrum>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum();



        private static class _IColorSpectrumFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumFactoryMethods.IID);
                }
            }
        }

        public ColorSpectrum():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(ColorSpectrum);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IColorSpectrumFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty ColorProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumStaticsMethods.get_ColorProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ComponentsProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumStaticsMethods.get_ComponentsProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty HsvColorProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumStaticsMethods.get_HsvColorProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty MaxHueProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumStaticsMethods.get_MaxHueProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty MaxSaturationProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumStaticsMethods.get_MaxSaturationProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty MaxValueProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumStaticsMethods.get_MaxValueProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty MinHueProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumStaticsMethods.get_MinHueProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty MinSaturationProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumStaticsMethods.get_MinSaturationProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty MinValueProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumStaticsMethods.get_MinValueProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ShapeProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumStaticsMethods.get_ShapeProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumStatics);

        public static new ColorSpectrum FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ColorSpectrum>.FromAbi(thisPtr);
        }

        protected internal ColorSpectrum(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumMethods.IID);

        }


        public static bool operator ==(ColorSpectrum x, ColorSpectrum y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ColorSpectrum x, ColorSpectrum y) => !(x == y);
        public bool Equals(ColorSpectrum other) => this == other;
        public override bool Equals(object obj) => obj is ColorSpectrum that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected ColorSpectrum(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(ColorSpectrum);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public event global::Windows.Foundation.TypedEventHandler<ColorSpectrum, global::Microsoft.UI.Xaml.Controls.ColorChangedEventArgs> ColorChanged
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumMethods.Get_ColorChanged2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumMethods.Get_ColorChanged2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum, (IWinRTObject)this).Unsubscribe(value);
        }

        public global::Windows.UI.Color Color
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumMethods.get_Color(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumMethods.set_Color(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum, value);
        }

        public global::Microsoft.UI.Xaml.Controls.ColorSpectrumComponents Components
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumMethods.get_Components(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumMethods.set_Components(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum, value);
        }

        public global::System.Numerics.Vector4 HsvColor
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumMethods.get_HsvColor(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumMethods.set_HsvColor(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum, value);
        }

        public int MaxHue
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumMethods.get_MaxHue(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumMethods.set_MaxHue(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum, value);
        }

        public int MaxSaturation
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumMethods.get_MaxSaturation(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumMethods.set_MaxSaturation(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum, value);
        }

        public int MaxValue
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumMethods.get_MaxValue(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumMethods.set_MaxValue(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum, value);
        }

        public int MinHue
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumMethods.get_MinHue(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumMethods.set_MinHue(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum, value);
        }

        public int MinSaturation
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumMethods.get_MinSaturation(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumMethods.set_MinSaturation(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum, value);
        }

        public int MinValue
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumMethods.get_MinValue(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumMethods.set_MinValue(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum, value);
        }

        public global::Microsoft.UI.Xaml.Controls.ColorSpectrumShape Shape
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumMethods.get_Shape(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumMethods.set_Shape(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayoutRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IColumnMajorUniformToLargestGridLayout))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    public class ColumnMajorUniformToLargestGridLayout : global::Microsoft.UI.Xaml.Controls.NonVirtualizingLayout, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ColumnMajorUniformToLargestGridLayout>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayout;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayout()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayout, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColumnMajorUniformToLargestGridLayoutMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayout;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayout => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayout ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayout();



        private static class _IColumnMajorUniformToLargestGridLayoutFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayoutFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayoutFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayoutFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayoutFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColumnMajorUniformToLargestGridLayoutFactoryMethods.IID);
                }
            }
        }

        public ColumnMajorUniformToLargestGridLayout():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(ColumnMajorUniformToLargestGridLayout);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IColumnMajorUniformToLargestGridLayoutFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayoutFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColumnMajorUniformToLargestGridLayoutMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayoutStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayoutStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayoutStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayoutStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColumnMajorUniformToLargestGridLayoutStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty ColumnSpacingProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColumnMajorUniformToLargestGridLayoutStaticsMethods.get_ColumnSpacingProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayoutStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty MaxColumnsProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColumnMajorUniformToLargestGridLayoutStaticsMethods.get_MaxColumnsProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayoutStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty RowSpacingProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColumnMajorUniformToLargestGridLayoutStaticsMethods.get_RowSpacingProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayoutStatics);

        public static new ColumnMajorUniformToLargestGridLayout FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ColumnMajorUniformToLargestGridLayout>.FromAbi(thisPtr);
        }

        protected internal ColumnMajorUniformToLargestGridLayout(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColumnMajorUniformToLargestGridLayoutMethods.IID);

        }


        public static bool operator ==(ColumnMajorUniformToLargestGridLayout x, ColumnMajorUniformToLargestGridLayout y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ColumnMajorUniformToLargestGridLayout x, ColumnMajorUniformToLargestGridLayout y) => !(x == y);
        public bool Equals(ColumnMajorUniformToLargestGridLayout other) => this == other;
        public override bool Equals(object obj) => obj is ColumnMajorUniformToLargestGridLayout that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected ColumnMajorUniformToLargestGridLayout(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(ColumnMajorUniformToLargestGridLayout);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double ColumnSpacing
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColumnMajorUniformToLargestGridLayoutMethods.get_ColumnSpacing(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayout);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColumnMajorUniformToLargestGridLayoutMethods.set_ColumnSpacing(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayout, value);
        }

        public int MaxColumns
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColumnMajorUniformToLargestGridLayoutMethods.get_MaxColumns(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayout);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColumnMajorUniformToLargestGridLayoutMethods.set_MaxColumns(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayout, value);
        }

        public double RowSpacing
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColumnMajorUniformToLargestGridLayoutMethods.get_RowSpacing(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayout);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColumnMajorUniformToLargestGridLayoutMethods.set_RowSpacing(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayout, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ComboBoxHelper))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ComboBoxHelperRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IComboBoxHelper))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    public sealed class ComboBoxHelper : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ComboBoxHelper>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IComboBoxHelper => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ComboBoxHelper").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IComboBoxHelperStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IComboBoxHelperStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IComboBoxHelperStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IComboBoxHelperStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ComboBoxHelper", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IComboBoxHelperStaticsMethods.IID);
                }
            }
        }

        public static void SetKeepInteriorCornersSquare(global::Microsoft.UI.Xaml.Controls.ComboBox comboBox, bool value) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IComboBoxHelperStaticsMethods.SetKeepInteriorCornersSquare(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IComboBoxHelperStatics, comboBox, value);

        public static bool GetKeepInteriorCornersSquare(global::Microsoft.UI.Xaml.Controls.ComboBox comboBox) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IComboBoxHelperStaticsMethods.GetKeepInteriorCornersSquare(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IComboBoxHelperStatics, comboBox);

        public static global::Microsoft.UI.Xaml.DependencyProperty KeepInteriorCornersSquareProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IComboBoxHelperStaticsMethods.get_KeepInteriorCornersSquareProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IComboBoxHelperStatics);

        public static ComboBoxHelper FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ComboBoxHelper>.FromAbi(thisPtr);
        }

        internal ComboBoxHelper(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IComboBoxHelperMethods.IID);

        }


        public static bool operator ==(ComboBoxHelper x, ComboBoxHelper y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ComboBoxHelper x, ComboBoxHelper y) => !(x == y);
        public bool Equals(ComboBoxHelper other) => this == other;
        public override bool Equals(object obj) => obj is ComboBoxHelper that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettingsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IComboBoxTemplateSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class ComboBoxTemplateSettings : global::Microsoft.UI.Xaml.DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ComboBoxTemplateSettings>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IComboBoxTemplateSettings => _inner;


        public static new ComboBoxTemplateSettings FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ComboBoxTemplateSettings>.FromAbi(thisPtr);
        }

        internal ComboBoxTemplateSettings(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IComboBoxTemplateSettingsMethods.IID);

        }


        public static bool operator ==(ComboBoxTemplateSettings x, ComboBoxTemplateSettings y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ComboBoxTemplateSettings x, ComboBoxTemplateSettings y) => !(x == y);
        public bool Equals(ComboBoxTemplateSettings other) => this == other;
        public override bool Equals(object obj) => obj is ComboBoxTemplateSettings that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double DropDownClosedHeight => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IComboBoxTemplateSettingsMethods.get_DropDownClosedHeight(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IComboBoxTemplateSettings);

        public double DropDownContentMinWidth => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IComboBoxTemplateSettingsMethods.get_DropDownContentMinWidth(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IComboBoxTemplateSettings);

        public double DropDownOffset => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IComboBoxTemplateSettingsMethods.get_DropDownOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IComboBoxTemplateSettings);

        public double DropDownOpenedHeight => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IComboBoxTemplateSettingsMethods.get_DropDownOpenedHeight(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IComboBoxTemplateSettings);

        public AnimationDirection SelectedItemDirection => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IComboBoxTemplateSettingsMethods.get_SelectedItemDirection(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IComboBoxTemplateSettings);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICommandBarFlyoutCommandBar))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    public class CommandBarFlyoutCommandBar : global::Microsoft.UI.Xaml.Controls.CommandBar, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CommandBarFlyoutCommandBar>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBar;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBar()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBar, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBar;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBar => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBar ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBar();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBar2;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBar2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBar2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBar2Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBar2;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBar2 => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBar2 ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBar2();



        private static class _ICommandBarFlyoutCommandBarFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarFactoryMethods.IID);
                }
            }
        }

        public CommandBarFlyoutCommandBar():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(CommandBarFlyoutCommandBar);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _ICommandBarFlyoutCommandBarFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty SystemBackdropProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarStaticsMethods.get_SystemBackdropProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarStatics);

        public static new CommandBarFlyoutCommandBar FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CommandBarFlyoutCommandBar>.FromAbi(thisPtr);
        }

        protected internal CommandBarFlyoutCommandBar(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarMethods.IID);

        }


        public static bool operator ==(CommandBarFlyoutCommandBar x, CommandBarFlyoutCommandBar y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CommandBarFlyoutCommandBar x, CommandBarFlyoutCommandBar y) => !(x == y);
        public bool Equals(CommandBarFlyoutCommandBar other) => this == other;
        public override bool Equals(object obj) => obj is CommandBarFlyoutCommandBar that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected CommandBarFlyoutCommandBar(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(CommandBarFlyoutCommandBar);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public CommandBarFlyoutCommandBarTemplateSettings FlyoutTemplateSettings => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarMethods.get_FlyoutTemplateSettings(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBar);

        public global::Microsoft.UI.Xaml.Media.SystemBackdrop SystemBackdrop
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBar2Methods.get_SystemBackdrop(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBar2);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBar2Methods.set_SystemBackdrop(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBar2, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    public static class CommandBarFlyoutCommandBarAutomationProperties
    {

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarAutomationProperties").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarAutomationPropertiesStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarAutomationPropertiesStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarAutomationPropertiesStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarAutomationPropertiesStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarAutomationProperties", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarAutomationPropertiesStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.Automation.Peers.AutomationControlType GetControlType(global::Microsoft.UI.Xaml.UIElement element) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarAutomationPropertiesStaticsMethods.GetControlType(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarAutomationPropertiesStatics, element);

        public static void SetControlType(global::Microsoft.UI.Xaml.UIElement element, global::Microsoft.UI.Xaml.Automation.Peers.AutomationControlType value) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarAutomationPropertiesStaticsMethods.SetControlType(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarAutomationPropertiesStatics, element, value);

        public static global::Microsoft.UI.Xaml.DependencyProperty ControlTypeProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarAutomationPropertiesStaticsMethods.get_ControlTypeProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarAutomationPropertiesStatics);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettingsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICommandBarFlyoutCommandBarTemplateSettings))]
    [global::Microsoft.UI.Xaml.CustomAttributes.MUXPropertyNeedsDependencyPropertyField]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    public sealed class CommandBarFlyoutCommandBarTemplateSettings : global::Microsoft.UI.Xaml.DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CommandBarFlyoutCommandBarTemplateSettings>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings => _inner;


        public static new CommandBarFlyoutCommandBarTemplateSettings FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CommandBarFlyoutCommandBarTemplateSettings>.FromAbi(thisPtr);
        }

        internal CommandBarFlyoutCommandBarTemplateSettings(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarTemplateSettingsMethods.IID);

        }


        public static bool operator ==(CommandBarFlyoutCommandBarTemplateSettings x, CommandBarFlyoutCommandBarTemplateSettings y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CommandBarFlyoutCommandBarTemplateSettings x, CommandBarFlyoutCommandBarTemplateSettings y) => !(x == y);
        public bool Equals(CommandBarFlyoutCommandBarTemplateSettings other) => this == other;
        public override bool Equals(object obj) => obj is CommandBarFlyoutCommandBarTemplateSettings that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double CloseAnimationEndPosition => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarTemplateSettingsMethods.get_CloseAnimationEndPosition(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings);

        public global::Windows.Foundation.Rect ContentClipRect => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarTemplateSettingsMethods.get_ContentClipRect(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings);

        public double CurrentWidth => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarTemplateSettingsMethods.get_CurrentWidth(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings);

        public double ExpandDownAnimationEndPosition => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarTemplateSettingsMethods.get_ExpandDownAnimationEndPosition(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings);

        public double ExpandDownAnimationHoldPosition => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarTemplateSettingsMethods.get_ExpandDownAnimationHoldPosition(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings);

        public double ExpandDownAnimationStartPosition => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarTemplateSettingsMethods.get_ExpandDownAnimationStartPosition(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings);

        public double ExpandDownOverflowVerticalPosition => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarTemplateSettingsMethods.get_ExpandDownOverflowVerticalPosition(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings);

        public double ExpandUpAnimationEndPosition => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarTemplateSettingsMethods.get_ExpandUpAnimationEndPosition(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings);

        public double ExpandUpAnimationHoldPosition => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarTemplateSettingsMethods.get_ExpandUpAnimationHoldPosition(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings);

        public double ExpandUpAnimationStartPosition => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarTemplateSettingsMethods.get_ExpandUpAnimationStartPosition(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings);

        public double ExpandUpOverflowVerticalPosition => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarTemplateSettingsMethods.get_ExpandUpOverflowVerticalPosition(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings);

        public double ExpandedWidth => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarTemplateSettingsMethods.get_ExpandedWidth(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings);

        public double OpenAnimationEndPosition => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarTemplateSettingsMethods.get_OpenAnimationEndPosition(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings);

        public double OpenAnimationStartPosition => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarTemplateSettingsMethods.get_OpenAnimationStartPosition(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings);

        public global::Windows.Foundation.Rect OverflowContentClipRect => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarTemplateSettingsMethods.get_OverflowContentClipRect(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings);

        public double WidthExpansionAnimationEndPosition => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarTemplateSettingsMethods.get_WidthExpansionAnimationEndPosition(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings);

        public double WidthExpansionAnimationStartPosition => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarTemplateSettingsMethods.get_WidthExpansionAnimationStartPosition(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings);

        public double WidthExpansionDelta => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarTemplateSettingsMethods.get_WidthExpansionDelta(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings);

        public double WidthExpansionMoreButtonAnimationEndPosition => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarTemplateSettingsMethods.get_WidthExpansionMoreButtonAnimationEndPosition(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings);

        public double WidthExpansionMoreButtonAnimationStartPosition => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarTemplateSettingsMethods.get_WidthExpansionMoreButtonAnimationStartPosition(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.CommandBarTemplateSettingsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICommandBarTemplateSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class CommandBarTemplateSettings : global::Microsoft.UI.Xaml.DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CommandBarTemplateSettings>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarTemplateSettings => _inner;


        public static new CommandBarTemplateSettings FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CommandBarTemplateSettings>.FromAbi(thisPtr);
        }

        internal CommandBarTemplateSettings(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettingsMethods.IID);

        }


        public static bool operator ==(CommandBarTemplateSettings x, CommandBarTemplateSettings y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CommandBarTemplateSettings x, CommandBarTemplateSettings y) => !(x == y);
        public bool Equals(CommandBarTemplateSettings other) => this == other;
        public override bool Equals(object obj) => obj is CommandBarTemplateSettings that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double ContentHeight => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettingsMethods.get_ContentHeight(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarTemplateSettings);

        public global::Microsoft.UI.Xaml.Visibility EffectiveOverflowButtonVisibility => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettingsMethods.get_EffectiveOverflowButtonVisibility(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarTemplateSettings);

        public double NegativeOverflowContentHeight => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettingsMethods.get_NegativeOverflowContentHeight(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarTemplateSettings);

        public global::Windows.Foundation.Rect OverflowContentClipRect => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettingsMethods.get_OverflowContentClipRect(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarTemplateSettings);

        public double OverflowContentCompactYTranslation => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettingsMethods.get_OverflowContentCompactYTranslation(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarTemplateSettings);

        public double OverflowContentHeight => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettingsMethods.get_OverflowContentHeight(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarTemplateSettings);

        public double OverflowContentHiddenYTranslation => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettingsMethods.get_OverflowContentHiddenYTranslation(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarTemplateSettings);

        public double OverflowContentHorizontalOffset => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettingsMethods.get_OverflowContentHorizontalOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarTemplateSettings);

        public double OverflowContentMaxHeight => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettingsMethods.get_OverflowContentMaxHeight(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarTemplateSettings);

        public double OverflowContentMaxWidth => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettingsMethods.get_OverflowContentMaxWidth(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarTemplateSettings);

        public double OverflowContentMinWidth => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettingsMethods.get_OverflowContentMinWidth(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarTemplateSettings);

        public double OverflowContentMinimalYTranslation => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettingsMethods.get_OverflowContentMinimalYTranslation(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICommandBarTemplateSettings);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<ComponentResourceLocation>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum ComponentResourceLocation : int
    {
        Application = unchecked((int)0),
        Nested = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterConverter))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterConverterRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICornerRadiusFilterConverter))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    public sealed class CornerRadiusFilterConverter : global::Microsoft.UI.Xaml.DependencyObject, global::Microsoft.UI.Xaml.Data.IValueConverter, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CornerRadiusFilterConverter>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusFilterConverter => _inner;
        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Data_IValueConverter;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Data_IValueConverter()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Data_IValueConverter, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Data.IValueConverterMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Data_IValueConverter;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Data_IValueConverter => ___objRef_global__Microsoft_UI_Xaml_Data_IValueConverter ?? Make___objRef_global__Microsoft_UI_Xaml_Data_IValueConverter();



        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_CornerRadiusFilterConverter;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_CornerRadiusFilterConverter
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_CornerRadiusFilterConverter;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_CornerRadiusFilterConverter = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterConverter");
                }
            }
        }

        public CornerRadiusFilterConverter() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_CornerRadiusFilterConverter, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusFilterConverterMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterConverter").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusFilterConverterStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusFilterConverterStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusFilterConverterStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusFilterConverterStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterConverter", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusFilterConverterStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty FilterProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusFilterConverterStaticsMethods.get_FilterProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusFilterConverterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ScaleProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusFilterConverterStaticsMethods.get_ScaleProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusFilterConverterStatics);

        public static new CornerRadiusFilterConverter FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CornerRadiusFilterConverter>.FromAbi(thisPtr);
        }

        internal CornerRadiusFilterConverter(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusFilterConverterMethods.IID);

        }


        public static bool operator ==(CornerRadiusFilterConverter x, CornerRadiusFilterConverter y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CornerRadiusFilterConverter x, CornerRadiusFilterConverter y) => !(x == y);
        public bool Equals(CornerRadiusFilterConverter other) => this == other;
        public override bool Equals(object obj) => obj is CornerRadiusFilterConverter that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public object Convert(object value, global::System.Type targetType, object parameter, string language) => global::ABI.Microsoft.UI.Xaml.Data.IValueConverterMethods.Convert(_objRef_global__Microsoft_UI_Xaml_Data_IValueConverter, value, targetType, parameter, language);

        public object ConvertBack(object value, global::System.Type targetType, object parameter, string language) => global::ABI.Microsoft.UI.Xaml.Data.IValueConverterMethods.ConvertBack(_objRef_global__Microsoft_UI_Xaml_Data_IValueConverter, value, targetType, parameter, language);

        public CornerRadiusFilterKind Filter
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusFilterConverterMethods.get_Filter(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusFilterConverter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusFilterConverterMethods.set_Filter(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusFilterConverter, value);
        }

        public double Scale
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusFilterConverterMethods.get_Scale(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusFilterConverter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusFilterConverterMethods.set_Scale(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusFilterConverter, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CornerRadiusFilterKind>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    public enum CornerRadiusFilterKind : int
    {
        None = unchecked((int)0),
        Top = unchecked((int)0x1),
        Right = unchecked((int)0x2),
        Bottom = unchecked((int)0x3),
        Left = unchecked((int)0x4),
        TopLeftValue = unchecked((int)0x5),
        BottomRightValue = unchecked((int)0x6),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverter))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverterRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICornerRadiusToThicknessConverter))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    public sealed class CornerRadiusToThicknessConverter : global::Microsoft.UI.Xaml.DependencyObject, global::Microsoft.UI.Xaml.Data.IValueConverter, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CornerRadiusToThicknessConverter>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusToThicknessConverter => _inner;
        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Data_IValueConverter;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Data_IValueConverter()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Data_IValueConverter, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Data.IValueConverterMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Data_IValueConverter;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Data_IValueConverter => ___objRef_global__Microsoft_UI_Xaml_Data_IValueConverter ?? Make___objRef_global__Microsoft_UI_Xaml_Data_IValueConverter();



        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_CornerRadiusToThicknessConverter;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_CornerRadiusToThicknessConverter
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_CornerRadiusToThicknessConverter;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_CornerRadiusToThicknessConverter = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverter");
                }
            }
        }

        public CornerRadiusToThicknessConverter() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_CornerRadiusToThicknessConverter, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusToThicknessConverterMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverter").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusToThicknessConverterStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusToThicknessConverterStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusToThicknessConverterStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusToThicknessConverterStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverter", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusToThicknessConverterStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty ConversionKindProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusToThicknessConverterStaticsMethods.get_ConversionKindProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusToThicknessConverterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty MultiplierProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusToThicknessConverterStaticsMethods.get_MultiplierProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusToThicknessConverterStatics);

        public static new CornerRadiusToThicknessConverter FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CornerRadiusToThicknessConverter>.FromAbi(thisPtr);
        }

        internal CornerRadiusToThicknessConverter(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusToThicknessConverterMethods.IID);

        }


        public static bool operator ==(CornerRadiusToThicknessConverter x, CornerRadiusToThicknessConverter y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CornerRadiusToThicknessConverter x, CornerRadiusToThicknessConverter y) => !(x == y);
        public bool Equals(CornerRadiusToThicknessConverter other) => this == other;
        public override bool Equals(object obj) => obj is CornerRadiusToThicknessConverter that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public object Convert(object value, global::System.Type targetType, object parameter, string language) => global::ABI.Microsoft.UI.Xaml.Data.IValueConverterMethods.Convert(_objRef_global__Microsoft_UI_Xaml_Data_IValueConverter, value, targetType, parameter, language);

        public object ConvertBack(object value, global::System.Type targetType, object parameter, string language) => global::ABI.Microsoft.UI.Xaml.Data.IValueConverterMethods.ConvertBack(_objRef_global__Microsoft_UI_Xaml_Data_IValueConverter, value, targetType, parameter, language);

        public CornerRadiusToThicknessConverterKind ConversionKind
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusToThicknessConverterMethods.get_ConversionKind(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusToThicknessConverter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusToThicknessConverterMethods.set_ConversionKind(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusToThicknessConverter, value);
        }

        public double Multiplier
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusToThicknessConverterMethods.get_Multiplier(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusToThicknessConverter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusToThicknessConverterMethods.set_Multiplier(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusToThicknessConverter, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<CornerRadiusToThicknessConverterKind>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    public enum CornerRadiusToThicknessConverterKind : int
    {
        FilterTopAndBottomFromLeft = unchecked((int)0),
        FilterTopAndBottomFromRight = unchecked((int)0x1),
        FilterLeftAndRightFromTop = unchecked((int)0x2),
        FilterLeftAndRightFromBottom = unchecked((int)0x3),
        FilterTopFromTopLeft = unchecked((int)0x4),
        FilterTopFromTopRight = unchecked((int)0x5),
        FilterRightFromTopRight = unchecked((int)0x6),
        FilterRightFromBottomRight = unchecked((int)0x7),
        FilterBottomFromBottomRight = unchecked((int)0x8),
        FilterBottomFromBottomLeft = unchecked((int)0x9),
        FilterLeftFromBottomLeft = unchecked((int)0xa),
        FilterLeftFromTopLeft = unchecked((int)0xb),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDragCompletedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class DragCompletedEventArgs : global::Microsoft.UI.Xaml.RoutedEventArgs, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DragCompletedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragCompletedEventArgs;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragCompletedEventArgs()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragCompletedEventArgs, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IDragCompletedEventArgsMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragCompletedEventArgs;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragCompletedEventArgs => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragCompletedEventArgs ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragCompletedEventArgs();



        private static class _IDragCompletedEventArgsFactoryMethods
        {
            public static unsafe IntPtr CreateInstanceWithHorizontalChangeVerticalChangeAndCanceled(IObjectReference _obj, double horizontalChange, double verticalChange, bool canceled, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, double, byte, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, horizontalChange, verticalChange, (byte)(canceled ? 1 : 0), MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragCompletedEventArgsFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragCompletedEventArgsFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragCompletedEventArgsFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragCompletedEventArgsFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IDragCompletedEventArgsFactoryMethods.IID);
                }
            }
        }

        public DragCompletedEventArgs(double horizontalChange, double verticalChange, bool canceled):base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(DragCompletedEventArgs);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IDragCompletedEventArgsFactoryMethods.CreateInstanceWithHorizontalChangeVerticalChangeAndCanceled(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragCompletedEventArgsFactory, horizontalChange, verticalChange, canceled, baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IDragCompletedEventArgsMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new DragCompletedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DragCompletedEventArgs>.FromAbi(thisPtr);
        }

        protected internal DragCompletedEventArgs(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IDragCompletedEventArgsMethods.IID);

        }


        public static bool operator ==(DragCompletedEventArgs x, DragCompletedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DragCompletedEventArgs x, DragCompletedEventArgs y) => !(x == y);
        public bool Equals(DragCompletedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is DragCompletedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected DragCompletedEventArgs(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(DragCompletedEventArgs);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public bool Canceled => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IDragCompletedEventArgsMethods.get_Canceled(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragCompletedEventArgs);

        public double HorizontalChange => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IDragCompletedEventArgsMethods.get_HorizontalChange(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragCompletedEventArgs);

        public double VerticalChange => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IDragCompletedEventArgsMethods.get_VerticalChange(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragCompletedEventArgs);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public delegate void DragCompletedEventHandler(object sender, DragCompletedEventArgs e);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDragDeltaEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class DragDeltaEventArgs : global::Microsoft.UI.Xaml.RoutedEventArgs, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DragDeltaEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragDeltaEventArgs;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragDeltaEventArgs()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragDeltaEventArgs, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IDragDeltaEventArgsMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragDeltaEventArgs;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragDeltaEventArgs => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragDeltaEventArgs ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragDeltaEventArgs();



        private static class _IDragDeltaEventArgsFactoryMethods
        {
            public static unsafe IntPtr CreateInstanceWithHorizontalChangeAndVerticalChange(IObjectReference _obj, double horizontalChange, double verticalChange, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, double, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, horizontalChange, verticalChange, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragDeltaEventArgsFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragDeltaEventArgsFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragDeltaEventArgsFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragDeltaEventArgsFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IDragDeltaEventArgsFactoryMethods.IID);
                }
            }
        }

        public DragDeltaEventArgs(double horizontalChange, double verticalChange):base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(DragDeltaEventArgs);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IDragDeltaEventArgsFactoryMethods.CreateInstanceWithHorizontalChangeAndVerticalChange(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragDeltaEventArgsFactory, horizontalChange, verticalChange, baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IDragDeltaEventArgsMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new DragDeltaEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DragDeltaEventArgs>.FromAbi(thisPtr);
        }

        protected internal DragDeltaEventArgs(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IDragDeltaEventArgsMethods.IID);

        }


        public static bool operator ==(DragDeltaEventArgs x, DragDeltaEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DragDeltaEventArgs x, DragDeltaEventArgs y) => !(x == y);
        public bool Equals(DragDeltaEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is DragDeltaEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected DragDeltaEventArgs(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(DragDeltaEventArgs);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double HorizontalChange => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IDragDeltaEventArgsMethods.get_HorizontalChange(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragDeltaEventArgs);

        public double VerticalChange => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IDragDeltaEventArgsMethods.get_VerticalChange(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragDeltaEventArgs);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public delegate void DragDeltaEventHandler(object sender, DragDeltaEventArgs e);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDragStartedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class DragStartedEventArgs : global::Microsoft.UI.Xaml.RoutedEventArgs, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DragStartedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragStartedEventArgs;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragStartedEventArgs()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragStartedEventArgs, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IDragStartedEventArgsMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragStartedEventArgs;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragStartedEventArgs => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragStartedEventArgs ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragStartedEventArgs();



        private static class _IDragStartedEventArgsFactoryMethods
        {
            public static unsafe IntPtr CreateInstanceWithHorizontalOffsetAndVerticalOffset(IObjectReference _obj, double horizontalOffset, double verticalOffset, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, double, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, horizontalOffset, verticalOffset, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragStartedEventArgsFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragStartedEventArgsFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragStartedEventArgsFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragStartedEventArgsFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IDragStartedEventArgsFactoryMethods.IID);
                }
            }
        }

        public DragStartedEventArgs(double horizontalOffset, double verticalOffset):base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(DragStartedEventArgs);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IDragStartedEventArgsFactoryMethods.CreateInstanceWithHorizontalOffsetAndVerticalOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragStartedEventArgsFactory, horizontalOffset, verticalOffset, baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IDragStartedEventArgsMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new DragStartedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DragStartedEventArgs>.FromAbi(thisPtr);
        }

        protected internal DragStartedEventArgs(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IDragStartedEventArgsMethods.IID);

        }


        public static bool operator ==(DragStartedEventArgs x, DragStartedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DragStartedEventArgs x, DragStartedEventArgs y) => !(x == y);
        public bool Equals(DragStartedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is DragStartedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected DragStartedEventArgs(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(DragStartedEventArgs);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double HorizontalOffset => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IDragStartedEventArgsMethods.get_HorizontalOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragStartedEventArgs);

        public double VerticalOffset => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IDragStartedEventArgsMethods.get_VerticalOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IDragStartedEventArgs);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public delegate void DragStartedEventHandler(object sender, DragStartedEventArgs e);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<EdgeTransitionLocation>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum EdgeTransitionLocation : int
    {
        Left = unchecked((int)0),
        Top = unchecked((int)0x1),
        Right = unchecked((int)0x2),
        Bottom = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IFlyoutBase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class FlyoutBase : global::Microsoft.UI.Xaml.DependencyObject, IFlyoutBaseOverrides, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<FlyoutBase>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase2;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase2Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase2;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase2 => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase2 ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase2();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseOverrides;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseOverrides()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseOverrides, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseOverridesMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseOverrides;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseOverrides => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseOverrides ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseOverrides();



        private static class _IFlyoutBaseFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseFactoryMethods.IID);
                }
            }
        }

        protected FlyoutBase():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(FlyoutBase);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IFlyoutBaseFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseStaticsMethods.IID);
                }
            }
        }

        public static FlyoutBase GetAttachedFlyout(global::Microsoft.UI.Xaml.FrameworkElement element) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseStaticsMethods.GetAttachedFlyout(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseStatics, element);

        public static void SetAttachedFlyout(global::Microsoft.UI.Xaml.FrameworkElement element, FlyoutBase value) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseStaticsMethods.SetAttachedFlyout(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseStatics, element, value);

        public static void ShowAttachedFlyout(global::Microsoft.UI.Xaml.FrameworkElement flyoutOwner) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseStaticsMethods.ShowAttachedFlyout(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseStatics, flyoutOwner);

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseStatics2;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseStatics2
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseStatics2;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseStatics2 = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics2Methods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty AllowFocusOnInteractionProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseStaticsMethods.get_AllowFocusOnInteractionProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty AllowFocusWhenDisabledProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseStaticsMethods.get_AllowFocusWhenDisabledProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty AreOpenCloseAnimationsEnabledProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseStaticsMethods.get_AreOpenCloseAnimationsEnabledProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty AttachedFlyoutProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseStaticsMethods.get_AttachedFlyoutProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ElementSoundModeProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseStaticsMethods.get_ElementSoundModeProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty InputDevicePrefersPrimaryCommandsProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseStaticsMethods.get_InputDevicePrefersPrimaryCommandsProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty IsOpenProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseStaticsMethods.get_IsOpenProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty LightDismissOverlayModeProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseStaticsMethods.get_LightDismissOverlayModeProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty OverlayInputPassThroughElementProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseStaticsMethods.get_OverlayInputPassThroughElementProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty PlacementProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseStaticsMethods.get_PlacementProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ShouldConstrainToRootBoundsProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseStaticsMethods.get_ShouldConstrainToRootBoundsProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ShowModeProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseStaticsMethods.get_ShowModeProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SystemBackdropProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics2Methods.get_SystemBackdropProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseStatics2);

        public static global::Microsoft.UI.Xaml.DependencyProperty TargetProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseStaticsMethods.get_TargetProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseStatics);

        public static new FlyoutBase FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<FlyoutBase>.FromAbi(thisPtr);
        }

        protected internal FlyoutBase(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.IID);

        }


        public static bool operator ==(FlyoutBase x, FlyoutBase y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(FlyoutBase x, FlyoutBase y) => !(x == y);
        public bool Equals(FlyoutBase other) => this == other;
        public override bool Equals(object obj) => obj is FlyoutBase that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected FlyoutBase(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(FlyoutBase);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public void ShowAt(global::Microsoft.UI.Xaml.FrameworkElement placementTarget) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.ShowAt(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase, placementTarget);

        public void ShowAt(global::Microsoft.UI.Xaml.DependencyObject placementTarget, FlyoutShowOptions showOptions) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.ShowAt(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase, placementTarget, showOptions);

        public void Hide() => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.Hide(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase);

        public void TryInvokeKeyboardAccelerator(global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs args) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.TryInvokeKeyboardAccelerator(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase, args);

        public event global::System.EventHandler<object> Closed
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.Get_Closed2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.Get_Closed2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<FlyoutBase, FlyoutBaseClosingEventArgs> Closing
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.Get_Closing2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.Get_Closing2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::System.EventHandler<object> Opened
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.Get_Opened2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.Get_Opened2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::System.EventHandler<object> Opening
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.Get_Opening2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.Get_Opening2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase, (IWinRTObject)this).Unsubscribe(value);
        }

        protected virtual global::Microsoft.UI.Xaml.Controls.Control CreatePresenter() => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseOverridesMethods.CreatePresenter(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseOverrides);

        global::Microsoft.UI.Xaml.Controls.Control IFlyoutBaseOverrides.CreatePresenter() => CreatePresenter();
        protected virtual void OnProcessKeyboardAccelerators(global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs args) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseOverridesMethods.OnProcessKeyboardAccelerators(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseOverrides, args);

        void IFlyoutBaseOverrides.OnProcessKeyboardAccelerators(global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs args) => OnProcessKeyboardAccelerators(args);
        public bool AllowFocusOnInteraction
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.get_AllowFocusOnInteraction(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.set_AllowFocusOnInteraction(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase, value);
        }

        public bool AllowFocusWhenDisabled
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.get_AllowFocusWhenDisabled(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.set_AllowFocusWhenDisabled(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase, value);
        }

        public bool AreOpenCloseAnimationsEnabled
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.get_AreOpenCloseAnimationsEnabled(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.set_AreOpenCloseAnimationsEnabled(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase, value);
        }

        public global::Microsoft.UI.Xaml.ElementSoundMode ElementSoundMode
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.get_ElementSoundMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.set_ElementSoundMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase, value);
        }

        public bool InputDevicePrefersPrimaryCommands => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.get_InputDevicePrefersPrimaryCommands(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase);

        public bool IsConstrainedToRootBounds => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.get_IsConstrainedToRootBounds(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase);

        public bool IsOpen => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.get_IsOpen(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase);

        public global::Microsoft.UI.Xaml.Controls.LightDismissOverlayMode LightDismissOverlayMode
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.get_LightDismissOverlayMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.set_LightDismissOverlayMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase, value);
        }

        public global::Microsoft.UI.Xaml.DependencyObject OverlayInputPassThroughElement
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.get_OverlayInputPassThroughElement(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.set_OverlayInputPassThroughElement(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase, value);
        }

        public FlyoutPlacementMode Placement
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.get_Placement(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.set_Placement(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase, value);
        }

        public bool ShouldConstrainToRootBounds
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.get_ShouldConstrainToRootBounds(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.set_ShouldConstrainToRootBounds(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase, value);
        }

        public FlyoutShowMode ShowMode
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.get_ShowMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.set_ShowMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase, value);
        }

        public global::Microsoft.UI.Xaml.Media.SystemBackdrop SystemBackdrop
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase2Methods.get_SystemBackdrop(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase2);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase2Methods.set_SystemBackdrop(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase2, value);
        }

        public global::Microsoft.UI.Xaml.FrameworkElement Target => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.get_Target(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase);

        public global::Microsoft.UI.Xaml.XamlRoot XamlRoot
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.get_XamlRoot(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.set_XamlRoot(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseOverridesMethods.IID == iid || base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IFlyoutBaseClosingEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class FlyoutBaseClosingEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<FlyoutBaseClosingEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseClosingEventArgs => _inner;


        public static FlyoutBaseClosingEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<FlyoutBaseClosingEventArgs>.FromAbi(thisPtr);
        }

        internal FlyoutBaseClosingEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseClosingEventArgsMethods.IID);

        }


        public static bool operator ==(FlyoutBaseClosingEventArgs x, FlyoutBaseClosingEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(FlyoutBaseClosingEventArgs x, FlyoutBaseClosingEventArgs y) => !(x == y);
        public bool Equals(FlyoutBaseClosingEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is FlyoutBaseClosingEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool Cancel
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseClosingEventArgsMethods.get_Cancel(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseClosingEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseClosingEventArgsMethods.set_Cancel(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseClosingEventArgs, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<FlyoutPlacementMode>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum FlyoutPlacementMode : int
    {
        Top = unchecked((int)0),
        Bottom = unchecked((int)0x1),
        Left = unchecked((int)0x2),
        Right = unchecked((int)0x3),
        Full = unchecked((int)0x4),
        TopEdgeAlignedLeft = unchecked((int)0x5),
        TopEdgeAlignedRight = unchecked((int)0x6),
        BottomEdgeAlignedLeft = unchecked((int)0x7),
        BottomEdgeAlignedRight = unchecked((int)0x8),
        LeftEdgeAlignedTop = unchecked((int)0x9),
        LeftEdgeAlignedBottom = unchecked((int)0xa),
        RightEdgeAlignedTop = unchecked((int)0xb),
        RightEdgeAlignedBottom = unchecked((int)0xc),
        Auto = unchecked((int)0xd),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<FlyoutShowMode>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum FlyoutShowMode : int
    {
        Auto = unchecked((int)0),
        Standard = unchecked((int)0x1),
        Transient = unchecked((int)0x2),
        TransientWithDismissOnPointerMoveAway = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptionsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IFlyoutShowOptions))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class FlyoutShowOptions : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<FlyoutShowOptions>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutShowOptions;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutShowOptions()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutShowOptions, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutShowOptionsMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutShowOptions;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutShowOptions => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutShowOptions ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutShowOptions();



        private static class _IFlyoutShowOptionsFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutShowOptionsFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutShowOptionsFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutShowOptionsFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutShowOptionsFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutShowOptionsFactoryMethods.IID);
                }
            }
        }

        public FlyoutShowOptions()
        {
            bool isAggregation = this.GetType() != typeof(FlyoutShowOptions);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IFlyoutShowOptionsFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutShowOptionsFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutShowOptionsMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static FlyoutShowOptions FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<FlyoutShowOptions>.FromAbi(thisPtr);
        }

        protected internal FlyoutShowOptions(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutShowOptionsMethods.IID);

        }


        public static bool operator ==(FlyoutShowOptions x, FlyoutShowOptions y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(FlyoutShowOptions x, FlyoutShowOptions y) => !(x == y);
        public bool Equals(FlyoutShowOptions other) => this == other;
        public override bool Equals(object obj) => obj is FlyoutShowOptions that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected FlyoutShowOptions(global::WinRT.DerivedComposed _)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(FlyoutShowOptions);
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::System.Nullable<global::Windows.Foundation.Rect> ExclusionRect
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutShowOptionsMethods.get_ExclusionRect(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutShowOptions);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutShowOptionsMethods.set_ExclusionRect(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutShowOptions, value);
        }

        public FlyoutPlacementMode Placement
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutShowOptionsMethods.get_Placement(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutShowOptions);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutShowOptionsMethods.set_Placement(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutShowOptions, value);
        }

        public global::System.Nullable<global::Windows.Foundation.Point> Position
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutShowOptionsMethods.get_Position(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutShowOptions);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutShowOptionsMethods.set_Position(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutShowOptions, value);
        }

        public FlyoutShowMode ShowMode
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutShowOptionsMethods.get_ShowMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutShowOptions);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutShowOptionsMethods.set_ShowMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IFlyoutShowOptions, value);
        }

        protected virtual bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<GeneratorDirection>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum GeneratorDirection : int
    {
        Forward = unchecked((int)0),
        Backward = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.GridViewItemPresenter))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.GridViewItemPresenterRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IGridViewItemPresenter))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class GridViewItemPresenter : global::Microsoft.UI.Xaml.Controls.ContentPresenter, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<GridViewItemPresenter>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter();



        private static class _IGridViewItemPresenterFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.GridViewItemPresenter", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterFactoryMethods.IID);
                }
            }
        }

        public GridViewItemPresenter():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(GridViewItemPresenter);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IGridViewItemPresenterFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.GridViewItemPresenter").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.GridViewItemPresenter", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty CheckBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStaticsMethods.get_CheckBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty CheckHintBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStaticsMethods.get_CheckHintBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty CheckSelectingBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStaticsMethods.get_CheckSelectingBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ContentMarginProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStaticsMethods.get_ContentMarginProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty DisabledOpacityProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStaticsMethods.get_DisabledOpacityProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty DragBackgroundProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStaticsMethods.get_DragBackgroundProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty DragForegroundProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStaticsMethods.get_DragForegroundProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty DragOpacityProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStaticsMethods.get_DragOpacityProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty FocusBorderBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStaticsMethods.get_FocusBorderBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty GridViewItemPresenterHorizontalContentAlignmentProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStaticsMethods.get_GridViewItemPresenterHorizontalContentAlignmentProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty GridViewItemPresenterPaddingProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStaticsMethods.get_GridViewItemPresenterPaddingProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty GridViewItemPresenterVerticalContentAlignmentProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStaticsMethods.get_GridViewItemPresenterVerticalContentAlignmentProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty PlaceholderBackgroundProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStaticsMethods.get_PlaceholderBackgroundProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty PointerOverBackgroundMarginProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStaticsMethods.get_PointerOverBackgroundMarginProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty PointerOverBackgroundProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStaticsMethods.get_PointerOverBackgroundProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ReorderHintOffsetProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStaticsMethods.get_ReorderHintOffsetProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SelectedBackgroundProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStaticsMethods.get_SelectedBackgroundProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SelectedBorderThicknessProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStaticsMethods.get_SelectedBorderThicknessProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SelectedForegroundProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStaticsMethods.get_SelectedForegroundProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SelectedPointerOverBackgroundProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStaticsMethods.get_SelectedPointerOverBackgroundProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SelectedPointerOverBorderBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStaticsMethods.get_SelectedPointerOverBorderBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SelectionCheckMarkVisualEnabledProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStaticsMethods.get_SelectionCheckMarkVisualEnabledProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterStatics);

        public static new GridViewItemPresenter FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<GridViewItemPresenter>.FromAbi(thisPtr);
        }

        protected internal GridViewItemPresenter(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.IID);

        }


        public static bool operator ==(GridViewItemPresenter x, GridViewItemPresenter y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(GridViewItemPresenter x, GridViewItemPresenter y) => !(x == y);
        public bool Equals(GridViewItemPresenter other) => this == other;
        public override bool Equals(object obj) => obj is GridViewItemPresenter that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected GridViewItemPresenter(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(GridViewItemPresenter);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::Microsoft.UI.Xaml.Media.Brush CheckBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.get_CheckBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.set_CheckBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush CheckHintBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.get_CheckHintBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.set_CheckHintBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush CheckSelectingBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.get_CheckSelectingBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.set_CheckSelectingBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Thickness ContentMargin
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.get_ContentMargin(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.set_ContentMargin(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter, value);
        }

        public double DisabledOpacity
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.get_DisabledOpacity(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.set_DisabledOpacity(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush DragBackground
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.get_DragBackground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.set_DragBackground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush DragForeground
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.get_DragForeground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.set_DragForeground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter, value);
        }

        public double DragOpacity
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.get_DragOpacity(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.set_DragOpacity(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush FocusBorderBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.get_FocusBorderBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.set_FocusBorderBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.HorizontalAlignment GridViewItemPresenterHorizontalContentAlignment
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.get_GridViewItemPresenterHorizontalContentAlignment(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.set_GridViewItemPresenterHorizontalContentAlignment(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Thickness GridViewItemPresenterPadding
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.get_GridViewItemPresenterPadding(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.set_GridViewItemPresenterPadding(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.VerticalAlignment GridViewItemPresenterVerticalContentAlignment
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.get_GridViewItemPresenterVerticalContentAlignment(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.set_GridViewItemPresenterVerticalContentAlignment(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush PlaceholderBackground
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.get_PlaceholderBackground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.set_PlaceholderBackground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush PointerOverBackground
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.get_PointerOverBackground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.set_PointerOverBackground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Thickness PointerOverBackgroundMargin
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.get_PointerOverBackgroundMargin(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.set_PointerOverBackgroundMargin(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter, value);
        }

        public double ReorderHintOffset
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.get_ReorderHintOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.set_ReorderHintOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush SelectedBackground
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.get_SelectedBackground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.set_SelectedBackground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Thickness SelectedBorderThickness
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.get_SelectedBorderThickness(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.set_SelectedBorderThickness(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush SelectedForeground
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.get_SelectedForeground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.set_SelectedForeground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush SelectedPointerOverBackground
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.get_SelectedPointerOverBackground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.set_SelectedPointerOverBackground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush SelectedPointerOverBorderBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.get_SelectedPointerOverBorderBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.set_SelectedPointerOverBorderBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter, value);
        }

        public bool SelectionCheckMarkVisualEnabled
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.get_SelectionCheckMarkVisualEnabled(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.set_SelectionCheckMarkVisualEnabled(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettingsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IGridViewItemTemplateSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class GridViewItemTemplateSettings : global::Microsoft.UI.Xaml.DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<GridViewItemTemplateSettings>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemTemplateSettings => _inner;


        public static new GridViewItemTemplateSettings FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<GridViewItemTemplateSettings>.FromAbi(thisPtr);
        }

        internal GridViewItemTemplateSettings(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemTemplateSettingsMethods.IID);

        }


        public static bool operator ==(GridViewItemTemplateSettings x, GridViewItemTemplateSettings y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(GridViewItemTemplateSettings x, GridViewItemTemplateSettings y) => !(x == y);
        public bool Equals(GridViewItemTemplateSettings other) => this == other;
        public override bool Equals(object obj) => obj is GridViewItemTemplateSettings that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public int DragItemsCount => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemTemplateSettingsMethods.get_DragItemsCount(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemTemplateSettings);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<GroupHeaderPlacement>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum GroupHeaderPlacement : int
    {
        Top = unchecked((int)0),
        Left = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("6FC13525-BF03-5190-A1D5-EBD6A1BCB6B4")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAppBarButtonTemplateSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IAppBarButtonTemplateSettings
    {
        double KeyboardAcceleratorTextMinWidth { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("FE60E73F-9A52-5E0A-B738-426F97D09768")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAppBarTemplateSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IAppBarTemplateSettings
    {
        global::Windows.Foundation.Rect ClipRect { get; }
        global::Microsoft.UI.Xaml.Thickness CompactRootMargin { get; }
        double CompactVerticalDelta { get; }
        global::Microsoft.UI.Xaml.Thickness HiddenRootMargin { get; }
        double HiddenVerticalDelta { get; }
        global::Microsoft.UI.Xaml.Thickness MinimalRootMargin { get; }
        double MinimalVerticalDelta { get; }
        double NegativeCompactVerticalDelta { get; }
        double NegativeHiddenVerticalDelta { get; }
        double NegativeMinimalVerticalDelta { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("32AA9F11-2F5E-57AB-A570-B03BCEEE835D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAppBarToggleButtonTemplateSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IAppBarToggleButtonTemplateSettings
    {
        double KeyboardAcceleratorTextMinWidth { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("1E56736C-8248-57D9-AC04-E4E7DCC3F9E1")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAutoSuggestBoxHelper))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface IAutoSuggestBoxHelper
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("A8C05752-B160-5710-A009-2AD0FC4ED111")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAutoSuggestBoxHelperStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface IAutoSuggestBoxHelperStatics
    {
        void SetKeepInteriorCornersSquare(global::Microsoft.UI.Xaml.Controls.AutoSuggestBox autoSuggestBox, bool value);
        bool GetKeepInteriorCornersSquare(global::Microsoft.UI.Xaml.Controls.AutoSuggestBox autoSuggestBox);
        global::Microsoft.UI.Xaml.DependencyProperty KeepInteriorCornersSquareProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("65714269-2473-5327-A652-0EA6BCE7F403")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IButtonBase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IButtonBase
    {
        global::Microsoft.UI.Xaml.Controls.ClickMode ClickMode { get; set; }
        global::System.Windows.Input.ICommand Command { get; set; }
        object CommandParameter { get; set; }
        bool IsPointerOver { get; }
        bool IsPressed { get; }
        event global::Microsoft.UI.Xaml.RoutedEventHandler Click;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("21251AA9-6FD1-5E51-AB3B-E6FCAF3395ED")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IButtonBaseFactory
    {
        ButtonBase CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("DBE812F6-ADF8-51D3-8137-A8FBF6445B3C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IButtonBaseStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty ClickModeProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty CommandParameterProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty CommandProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty IsPointerOverProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty IsPressedProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("A4B26C3A-3825-5DA4-A9E0-DD9B1E405E53")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICalendarPanel))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ICalendarPanel
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("23B0FACB-0083-5109-87D3-DBEB13E331A0")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICalendarViewTemplateSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ICalendarViewTemplateSettings
    {
        double CenterX { get; }
        double CenterY { get; }
        global::Windows.Foundation.Rect ClipRect { get; }
        bool HasMoreContentAfter { get; }
        bool HasMoreContentBefore { get; }
        bool HasMoreViews { get; }
        string HeaderText { get; }
        double MinViewWidth { get; }
        string WeekDay1 { get; }
        string WeekDay2 { get; }
        string WeekDay3 { get; }
        string WeekDay4 { get; }
        string WeekDay5 { get; }
        string WeekDay6 { get; }
        string WeekDay7 { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("298D3800-E5C9-5003-B84C-A6538866E2D5")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanel))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ICarouselPanel
    {
        void LineUp();
        void LineDown();
        void LineLeft();
        void LineRight();
        void PageUp();
        void PageDown();
        void PageLeft();
        void PageRight();
        void MouseWheelUp();
        void MouseWheelDown();
        void MouseWheelLeft();
        void MouseWheelRight();
        void SetHorizontalOffset(double offset);
        void SetVerticalOffset(double offset);
        global::Windows.Foundation.Rect MakeVisible(global::Microsoft.UI.Xaml.UIElement visual, global::Windows.Foundation.Rect rectangle);
        bool CanHorizontallyScroll { get; set; }
        bool CanVerticallyScroll { get; set; }
        double ExtentHeight { get; }
        double ExtentWidth { get; }
        double HorizontalOffset { get; }
        object ScrollOwner { get; set; }
        double VerticalOffset { get; }
        double ViewportHeight { get; }
        double ViewportWidth { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("161D3FC2-D1EC-5D1D-AC8A-CF4577F06C3C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ICarouselPanelFactory
    {
        CarouselPanel CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("456231BB-5A4C-564B-9B3D-2F157061A0F8")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorPickerSlider))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface IColorPickerSlider
    {
        global::Microsoft.UI.Xaml.Controls.ColorPickerHsvChannel ColorChannel { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("D0CB1F0E-0771-5C7D-BA14-AA431179B2AC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorPickerSliderFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface IColorPickerSliderFactory
    {
        ColorPickerSlider CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("82F72B75-E986-587F-9701-8AC6801DA932")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorPickerSliderStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface IColorPickerSliderStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty ColorChannelProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("75305916-882D-5667-BFD0-0AF72D502D72")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrum))]
    [global::Microsoft.UI.Xaml.CustomAttributes.MUXPropertyChangedCallback(enable = true)]
    [global::Microsoft.UI.Xaml.CustomAttributes.MUXPropertyChangedCallbackMethodName(value = @"OnPropertyChanged")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface IColorSpectrum
    {
        global::Windows.UI.Color Color { get; set; }
        global::Microsoft.UI.Xaml.Controls.ColorSpectrumComponents Components { get; set; }
        global::System.Numerics.Vector4 HsvColor { get; set; }
        int MaxHue { get; set; }
        int MaxSaturation { get; set; }
        int MaxValue { get; set; }
        int MinHue { get; set; }
        int MinSaturation { get; set; }
        int MinValue { get; set; }
        global::Microsoft.UI.Xaml.Controls.ColorSpectrumShape Shape { get; set; }
        event global::Windows.Foundation.TypedEventHandler<ColorSpectrum, global::Microsoft.UI.Xaml.Controls.ColorChangedEventArgs> ColorChanged;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("EFECD442-8C2A-50A6-88A3-3999EA01F096")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumFactory))]
    [global::Microsoft.UI.Xaml.CustomAttributes.MUXPropertyChangedCallback(enable = true)]
    [global::Microsoft.UI.Xaml.CustomAttributes.MUXPropertyChangedCallbackMethodName(value = @"OnPropertyChanged")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface IColorSpectrumFactory
    {
        ColorSpectrum CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("A2B43DBA-1616-527D-9D32-039573B7FCE7")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumStatics))]
    [global::Microsoft.UI.Xaml.CustomAttributes.MUXPropertyChangedCallback(enable = true)]
    [global::Microsoft.UI.Xaml.CustomAttributes.MUXPropertyChangedCallbackMethodName(value = @"OnPropertyChanged")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface IColorSpectrumStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty ColorProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ComponentsProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty HsvColorProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty MaxHueProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty MaxSaturationProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty MaxValueProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty MinHueProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty MinSaturationProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty MinValueProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ShapeProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("EE10A6AA-EFEB-51AC-B791-71913AE8C235")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColumnMajorUniformToLargestGridLayout))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface IColumnMajorUniformToLargestGridLayout
    {
        double ColumnSpacing { get; set; }
        int MaxColumns { get; set; }
        double RowSpacing { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("2F21AF59-1585-5325-8412-2B83BF05D345")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColumnMajorUniformToLargestGridLayoutFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface IColumnMajorUniformToLargestGridLayoutFactory
    {
        ColumnMajorUniformToLargestGridLayout CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("7B2F0EC6-2345-5986-A5B9-B1BEB5A74350")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColumnMajorUniformToLargestGridLayoutStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface IColumnMajorUniformToLargestGridLayoutStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty ColumnSpacingProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty MaxColumnsProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty RowSpacingProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("5A3C87AC-C399-5E5F-873F-B9D0E8BCCEB7")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IComboBoxHelper))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface IComboBoxHelper
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("EC21BE42-ED02-5C10-9FBE-AF1881CD877B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IComboBoxHelperStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface IComboBoxHelperStatics
    {
        void SetKeepInteriorCornersSquare(global::Microsoft.UI.Xaml.Controls.ComboBox comboBox, bool value);
        bool GetKeepInteriorCornersSquare(global::Microsoft.UI.Xaml.Controls.ComboBox comboBox);
        global::Microsoft.UI.Xaml.DependencyProperty KeepInteriorCornersSquareProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("F2DC5E7F-8D3F-5C20-B356-AF6F1FF8242A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IComboBoxTemplateSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IComboBoxTemplateSettings
    {
        double DropDownClosedHeight { get; }
        double DropDownContentMinWidth { get; }
        double DropDownOffset { get; }
        double DropDownOpenedHeight { get; }
        AnimationDirection SelectedItemDirection { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("0F7120C5-6D00-5489-9171-BEDD2D4EF677")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBar))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface ICommandBarFlyoutCommandBar
    {
        CommandBarFlyoutCommandBarTemplateSettings FlyoutTemplateSettings { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("6ACA769F-1119-5355-AF7F-BCD5AA751229")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBar2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    internal interface ICommandBarFlyoutCommandBar2
    {
        global::Microsoft.UI.Xaml.Media.SystemBackdrop SystemBackdrop { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("C9957F75-C57F-5BA3-B867-F9D86B1D90B9")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarAutomationPropertiesStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface ICommandBarFlyoutCommandBarAutomationPropertiesStatics
    {
        global::Microsoft.UI.Xaml.Automation.Peers.AutomationControlType GetControlType(global::Microsoft.UI.Xaml.UIElement element);
        void SetControlType(global::Microsoft.UI.Xaml.UIElement element, global::Microsoft.UI.Xaml.Automation.Peers.AutomationControlType value);
        global::Microsoft.UI.Xaml.DependencyProperty ControlTypeProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("58DBCDA9-38E4-5EFC-B740-26FDA3D0A3C6")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface ICommandBarFlyoutCommandBarFactory
    {
        CommandBarFlyoutCommandBar CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("5F7FB950-7C7D-5F5C-8FC5-91344F3B034C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    internal interface ICommandBarFlyoutCommandBarStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty SystemBackdropProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("533CC5CA-DCF7-5F9D-A460-934A883ACDC1")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarTemplateSettings))]
    [global::Microsoft.UI.Xaml.CustomAttributes.MUXPropertyNeedsDependencyPropertyField]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface ICommandBarFlyoutCommandBarTemplateSettings
    {
        double CloseAnimationEndPosition { get; }
        global::Windows.Foundation.Rect ContentClipRect { get; }
        double CurrentWidth { get; }
        double ExpandDownAnimationEndPosition { get; }
        double ExpandDownAnimationHoldPosition { get; }
        double ExpandDownAnimationStartPosition { get; }
        double ExpandDownOverflowVerticalPosition { get; }
        double ExpandUpAnimationEndPosition { get; }
        double ExpandUpAnimationHoldPosition { get; }
        double ExpandUpAnimationStartPosition { get; }
        double ExpandUpOverflowVerticalPosition { get; }
        double ExpandedWidth { get; }
        double OpenAnimationEndPosition { get; }
        double OpenAnimationStartPosition { get; }
        global::Windows.Foundation.Rect OverflowContentClipRect { get; }
        double WidthExpansionAnimationEndPosition { get; }
        double WidthExpansionAnimationStartPosition { get; }
        double WidthExpansionDelta { get; }
        double WidthExpansionMoreButtonAnimationEndPosition { get; }
        double WidthExpansionMoreButtonAnimationStartPosition { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("AE9535F6-1678-5066-90BF-147AA610C5DD")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ICommandBarTemplateSettings
    {
        double ContentHeight { get; }
        global::Microsoft.UI.Xaml.Visibility EffectiveOverflowButtonVisibility { get; }
        double NegativeOverflowContentHeight { get; }
        global::Windows.Foundation.Rect OverflowContentClipRect { get; }
        double OverflowContentCompactYTranslation { get; }
        double OverflowContentHeight { get; }
        double OverflowContentHiddenYTranslation { get; }
        double OverflowContentHorizontalOffset { get; }
        double OverflowContentMaxHeight { get; }
        double OverflowContentMaxWidth { get; }
        double OverflowContentMinWidth { get; }
        double OverflowContentMinimalYTranslation { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("6F1A3ED2-F965-545E-BD44-441DB1794F5F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusFilterConverter))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface ICornerRadiusFilterConverter
    {
        CornerRadiusFilterKind Filter { get; set; }
        double Scale { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("2D9574F9-CC9E-535E-A70E-D55C4CA27F49")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusFilterConverterStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface ICornerRadiusFilterConverterStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty FilterProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ScaleProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("B36AA8AE-166E-5CA5-93D2-95E9907C1222")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusToThicknessConverter))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface ICornerRadiusToThicknessConverter
    {
        CornerRadiusToThicknessConverterKind ConversionKind { get; set; }
        double Multiplier { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("92AD9D36-5483-5258-A43B-4356443087F1")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusToThicknessConverterStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface ICornerRadiusToThicknessConverterStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty ConversionKindProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty MultiplierProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("ACD47547-3784-51FF-8EEB-7B212439974B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IDragCompletedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDragCompletedEventArgs
    {
        bool Canceled { get; }
        double HorizontalChange { get; }
        double VerticalChange { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("5767C408-454B-55CF-B74E-229642AED108")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IDragCompletedEventArgsFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDragCompletedEventArgsFactory
    {
        DragCompletedEventArgs CreateInstanceWithHorizontalChangeVerticalChangeAndCanceled(double horizontalChange, double verticalChange, bool canceled, object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("BC405765-ED94-5697-8506-A8F3D15272F9")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IDragDeltaEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDragDeltaEventArgs
    {
        double HorizontalChange { get; }
        double VerticalChange { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("4ADBA280-E1F9-5DAB-87FF-5903B419EF9D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IDragDeltaEventArgsFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDragDeltaEventArgsFactory
    {
        DragDeltaEventArgs CreateInstanceWithHorizontalChangeAndVerticalChange(double horizontalChange, double verticalChange, object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("AA27AEE4-2BDD-5D9A-8A1C-B37480A2012B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IDragStartedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDragStartedEventArgs
    {
        double HorizontalOffset { get; }
        double VerticalOffset { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("36078AA3-906C-5EF0-9D24-30C09F79C18F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IDragStartedEventArgsFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDragStartedEventArgsFactory
    {
        DragStartedEventArgs CreateInstanceWithHorizontalOffsetAndVerticalOffset(double horizontalOffset, double verticalOffset, object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("BB6603BF-744D-5C31-A87D-744394634D77")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IFlyoutBase
    {
        [global::Windows.Foundation.Metadata.Overload(@"ShowAt")]
        void ShowAt(global::Microsoft.UI.Xaml.FrameworkElement placementTarget);
        [global::Windows.Foundation.Metadata.Overload(@"ShowAtWithOptions")]
        void ShowAt(global::Microsoft.UI.Xaml.DependencyObject placementTarget, FlyoutShowOptions showOptions);
        void Hide();
        void TryInvokeKeyboardAccelerator(global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs args);
        bool AllowFocusOnInteraction { get; set; }
        bool AllowFocusWhenDisabled { get; set; }
        bool AreOpenCloseAnimationsEnabled { get; set; }
        global::Microsoft.UI.Xaml.ElementSoundMode ElementSoundMode { get; set; }
        bool InputDevicePrefersPrimaryCommands { get; }
        bool IsConstrainedToRootBounds { get; }
        bool IsOpen { get; }
        global::Microsoft.UI.Xaml.Controls.LightDismissOverlayMode LightDismissOverlayMode { get; set; }
        global::Microsoft.UI.Xaml.DependencyObject OverlayInputPassThroughElement { get; set; }
        FlyoutPlacementMode Placement { get; set; }
        bool ShouldConstrainToRootBounds { get; set; }
        FlyoutShowMode ShowMode { get; set; }
        global::Microsoft.UI.Xaml.FrameworkElement Target { get; }
        global::Microsoft.UI.Xaml.XamlRoot XamlRoot { get; set; }
        event global::System.EventHandler<object> Closed;
        event global::Windows.Foundation.TypedEventHandler<FlyoutBase, FlyoutBaseClosingEventArgs> Closing;
        event global::System.EventHandler<object> Opened;
        event global::System.EventHandler<object> Opening;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("54592F97-E40E-5CAD-864B-32307D047020")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 327680u)]
    internal interface IFlyoutBase2
    {
        global::Microsoft.UI.Xaml.Media.SystemBackdrop SystemBackdrop { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("7CB280B4-1CCA-5A5A-8EA4-191A2BBC8B32")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseClosingEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IFlyoutBaseClosingEventArgs
    {
        bool Cancel { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("006D738F-7C91-5EF3-8A80-A548108DAB8B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IFlyoutBaseFactory
    {
        FlyoutBase CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("5BB19ED8-08DE-5EEC-91CB-5FC59974E894")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseOverrides))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IFlyoutBaseOverrides
    {
        global::Microsoft.UI.Xaml.Controls.Control CreatePresenter();
        void OnProcessKeyboardAccelerators(global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs args);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("63EE628E-D2E3-5515-AEA4-E461088C0C4E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IFlyoutBaseStatics
    {
        FlyoutBase GetAttachedFlyout(global::Microsoft.UI.Xaml.FrameworkElement element);
        void SetAttachedFlyout(global::Microsoft.UI.Xaml.FrameworkElement element, FlyoutBase value);
        void ShowAttachedFlyout(global::Microsoft.UI.Xaml.FrameworkElement flyoutOwner);
        global::Microsoft.UI.Xaml.DependencyProperty AllowFocusOnInteractionProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty AllowFocusWhenDisabledProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty AreOpenCloseAnimationsEnabledProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty AttachedFlyoutProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ElementSoundModeProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty InputDevicePrefersPrimaryCommandsProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty IsOpenProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty LightDismissOverlayModeProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty OverlayInputPassThroughElementProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty PlacementProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ShouldConstrainToRootBoundsProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ShowModeProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty TargetProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("2403CD2C-A6B8-5DC2-BE3B-2A4BDD072EF1")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 327680u)]
    internal interface IFlyoutBaseStatics2
    {
        global::Microsoft.UI.Xaml.DependencyProperty SystemBackdropProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("30774A93-2803-50D3-B406-904AEC3E175D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutShowOptions))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IFlyoutShowOptions
    {
        global::System.Nullable<global::Windows.Foundation.Rect> ExclusionRect { get; set; }
        FlyoutPlacementMode Placement { get; set; }
        global::System.Nullable<global::Windows.Foundation.Point> Position { get; set; }
        FlyoutShowMode ShowMode { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("17426D30-70D9-54D7-BD39-E7C4C940C0F4")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutShowOptionsFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IFlyoutShowOptionsFactory
    {
        FlyoutShowOptions CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("22772FD8-FE30-5B6F-9B17-5EEA5D70D860")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenter))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IGridViewItemPresenter
    {
        global::Microsoft.UI.Xaml.Media.Brush CheckBrush { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush CheckHintBrush { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush CheckSelectingBrush { get; set; }
        global::Microsoft.UI.Xaml.Thickness ContentMargin { get; set; }
        double DisabledOpacity { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush DragBackground { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush DragForeground { get; set; }
        double DragOpacity { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush FocusBorderBrush { get; set; }
        global::Microsoft.UI.Xaml.HorizontalAlignment GridViewItemPresenterHorizontalContentAlignment { get; set; }
        global::Microsoft.UI.Xaml.Thickness GridViewItemPresenterPadding { get; set; }
        global::Microsoft.UI.Xaml.VerticalAlignment GridViewItemPresenterVerticalContentAlignment { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush PlaceholderBackground { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush PointerOverBackground { get; set; }
        global::Microsoft.UI.Xaml.Thickness PointerOverBackgroundMargin { get; set; }
        double ReorderHintOffset { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush SelectedBackground { get; set; }
        global::Microsoft.UI.Xaml.Thickness SelectedBorderThickness { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush SelectedForeground { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush SelectedPointerOverBackground { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush SelectedPointerOverBorderBrush { get; set; }
        bool SelectionCheckMarkVisualEnabled { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("D1F47760-C353-5A10-8A6B-9A1E3B52F934")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IGridViewItemPresenterFactory
    {
        GridViewItemPresenter CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("31A58ED1-901C-5753-944E-4DD9F22D2447")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IGridViewItemPresenterStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty CheckBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty CheckHintBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty CheckSelectingBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ContentMarginProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty DisabledOpacityProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty DragBackgroundProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty DragForegroundProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty DragOpacityProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty FocusBorderBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty GridViewItemPresenterHorizontalContentAlignmentProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty GridViewItemPresenterPaddingProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty GridViewItemPresenterVerticalContentAlignmentProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty PlaceholderBackgroundProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty PointerOverBackgroundMarginProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty PointerOverBackgroundProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ReorderHintOffsetProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SelectedBackgroundProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SelectedBorderThicknessProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SelectedForegroundProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SelectedPointerOverBackgroundProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SelectedPointerOverBorderBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SelectionCheckMarkVisualEnabledProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("7033E884-2117-56E7-AFB8-B7F5B8B64C70")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemTemplateSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IGridViewItemTemplateSettings
    {
        int DragItemsCount { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("4D2FD5FE-CB75-52FF-B57F-A992912383CC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IInfoBarPanel))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface IInfoBarPanel
    {
        global::Microsoft.UI.Xaml.Thickness HorizontalOrientationPadding { get; set; }
        global::Microsoft.UI.Xaml.Thickness VerticalOrientationPadding { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("00D1A8C5-F631-564A-8E9C-7C5CCAD238DE")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IInfoBarPanelFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface IInfoBarPanelFactory
    {
        InfoBarPanel CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("E0F19305-B392-5FA6-9670-895895A067FF")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IInfoBarPanelStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface IInfoBarPanelStatics
    {
        void SetHorizontalOrientationMargin(global::Microsoft.UI.Xaml.DependencyObject @object, global::Microsoft.UI.Xaml.Thickness value);
        global::Microsoft.UI.Xaml.Thickness GetHorizontalOrientationMargin(global::Microsoft.UI.Xaml.DependencyObject @object);
        void SetVerticalOrientationMargin(global::Microsoft.UI.Xaml.DependencyObject @object, global::Microsoft.UI.Xaml.Thickness value);
        global::Microsoft.UI.Xaml.Thickness GetVerticalOrientationMargin(global::Microsoft.UI.Xaml.DependencyObject @object);
        global::Microsoft.UI.Xaml.DependencyProperty HorizontalOrientationMarginProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty HorizontalOrientationPaddingProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty VerticalOrientationMarginProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty VerticalOrientationPaddingProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("B2BA1610-0E96-538A-978F-EC0B37193228")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IItemsChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IItemsChangedEventArgs
    {
        int Action { get; }
        int ItemCount { get; }
        int ItemUICount { get; }
        GeneratorPosition OldPosition { get; }
        GeneratorPosition Position { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("C475BB52-EA34-5CDE-9851-7841FEBD3D1D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemBackgroundConverter))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IJumpListItemBackgroundConverter
    {
        global::Microsoft.UI.Xaml.Media.Brush Disabled { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush Enabled { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("B03CB261-71EC-540E-83AC-E1A9FDD335E6")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemBackgroundConverterStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IJumpListItemBackgroundConverterStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty DisabledProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty EnabledProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("7308E0E4-102F-571A-BFDC-C8F411F07400")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemForegroundConverter))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IJumpListItemForegroundConverter
    {
        global::Microsoft.UI.Xaml.Media.Brush Disabled { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush Enabled { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("9AB3B95D-4061-59B4-9CE9-F45E2C05ADD7")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemForegroundConverterStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IJumpListItemForegroundConverterStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty DisabledProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty EnabledProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("CEEA0A8C-5A4F-5D7A-8FEA-77B5E0E0230C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILayoutInformation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ILayoutInformation
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("8DDB192D-B7FF-5307-ACF4-D4E547DA5815")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILayoutInformationStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ILayoutInformationStatics
    {
        global::Microsoft.UI.Xaml.UIElement GetLayoutExceptionElement(object dispatcher);
        global::Windows.Foundation.Rect GetLayoutSlot(global::Microsoft.UI.Xaml.FrameworkElement element);
        global::Windows.Foundation.Size GetAvailableSize(global::Microsoft.UI.Xaml.UIElement element);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("81012623-D987-5582-BC28-755A95CAAF1C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenter))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IListViewItemPresenter
    {
        global::Microsoft.UI.Xaml.Media.Brush CheckBoxBorderBrush { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush CheckBoxBrush { get; set; }
        global::Microsoft.UI.Xaml.CornerRadius CheckBoxCornerRadius { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush CheckBoxDisabledBorderBrush { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush CheckBoxDisabledBrush { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush CheckBoxPointerOverBorderBrush { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush CheckBoxPointerOverBrush { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush CheckBoxPressedBorderBrush { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush CheckBoxPressedBrush { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush CheckBoxSelectedBrush { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush CheckBoxSelectedDisabledBrush { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush CheckBoxSelectedPointerOverBrush { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush CheckBoxSelectedPressedBrush { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush CheckBrush { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush CheckDisabledBrush { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush CheckHintBrush { get; set; }
        ListViewItemPresenterCheckMode CheckMode { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush CheckPressedBrush { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush CheckSelectingBrush { get; set; }
        global::Microsoft.UI.Xaml.Thickness ContentMargin { get; set; }
        double DisabledOpacity { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush DragBackground { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush DragForeground { get; set; }
        double DragOpacity { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush FocusBorderBrush { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush FocusSecondaryBorderBrush { get; set; }
        global::Microsoft.UI.Xaml.HorizontalAlignment ListViewItemPresenterHorizontalContentAlignment { get; set; }
        global::Microsoft.UI.Xaml.Thickness ListViewItemPresenterPadding { get; set; }
        global::Microsoft.UI.Xaml.VerticalAlignment ListViewItemPresenterVerticalContentAlignment { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush PlaceholderBackground { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush PointerOverBackground { get; set; }
        global::Microsoft.UI.Xaml.Thickness PointerOverBackgroundMargin { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush PointerOverBorderBrush { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush PointerOverForeground { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush PressedBackground { get; set; }
        double ReorderHintOffset { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush RevealBackground { get; set; }
        bool RevealBackgroundShowsAboveContent { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush RevealBorderBrush { get; set; }
        global::Microsoft.UI.Xaml.Thickness RevealBorderThickness { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush SelectedBackground { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush SelectedBorderBrush { get; set; }
        global::Microsoft.UI.Xaml.Thickness SelectedBorderThickness { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush SelectedDisabledBackground { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush SelectedDisabledBorderBrush { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush SelectedForeground { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush SelectedInnerBorderBrush { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush SelectedPointerOverBackground { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush SelectedPointerOverBorderBrush { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush SelectedPressedBackground { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush SelectedPressedBorderBrush { get; set; }
        bool SelectionCheckMarkVisualEnabled { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush SelectionIndicatorBrush { get; set; }
        global::Microsoft.UI.Xaml.CornerRadius SelectionIndicatorCornerRadius { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush SelectionIndicatorDisabledBrush { get; set; }
        ListViewItemPresenterSelectionIndicatorMode SelectionIndicatorMode { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush SelectionIndicatorPointerOverBrush { get; set; }
        global::Microsoft.UI.Xaml.Media.Brush SelectionIndicatorPressedBrush { get; set; }
        bool SelectionIndicatorVisualEnabled { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("F86AC266-2740-505C-95EB-A7331B53B4A3")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IListViewItemPresenterFactory
    {
        ListViewItemPresenter CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("FB0810F9-3475-593A-88A8-EDBBF76FA90C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IListViewItemPresenterStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty CheckBoxBorderBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty CheckBoxBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty CheckBoxCornerRadiusProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty CheckBoxDisabledBorderBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty CheckBoxDisabledBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty CheckBoxPointerOverBorderBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty CheckBoxPointerOverBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty CheckBoxPressedBorderBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty CheckBoxPressedBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty CheckBoxSelectedBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty CheckBoxSelectedDisabledBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty CheckBoxSelectedPointerOverBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty CheckBoxSelectedPressedBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty CheckBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty CheckDisabledBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty CheckHintBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty CheckModeProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty CheckPressedBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty CheckSelectingBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ContentMarginProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty DisabledOpacityProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty DragBackgroundProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty DragForegroundProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty DragOpacityProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty FocusBorderBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty FocusSecondaryBorderBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ListViewItemPresenterHorizontalContentAlignmentProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ListViewItemPresenterPaddingProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ListViewItemPresenterVerticalContentAlignmentProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty PlaceholderBackgroundProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty PointerOverBackgroundMarginProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty PointerOverBackgroundProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty PointerOverBorderBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty PointerOverForegroundProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty PressedBackgroundProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ReorderHintOffsetProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty RevealBackgroundProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty RevealBackgroundShowsAboveContentProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty RevealBorderBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty RevealBorderThicknessProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SelectedBackgroundProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SelectedBorderBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SelectedBorderThicknessProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SelectedDisabledBackgroundProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SelectedDisabledBorderBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SelectedForegroundProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SelectedInnerBorderBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SelectedPointerOverBackgroundProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SelectedPointerOverBorderBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SelectedPressedBackgroundProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SelectedPressedBorderBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SelectionCheckMarkVisualEnabledProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SelectionIndicatorBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SelectionIndicatorCornerRadiusProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SelectionIndicatorDisabledBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SelectionIndicatorModeProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SelectionIndicatorPointerOverBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SelectionIndicatorPressedBrushProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SelectionIndicatorVisualEnabledProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("6E302714-2955-5961-94ED-5D0C0C1D0B07")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemTemplateSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IListViewItemTemplateSettings
    {
        int DragItemsCount { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("077759AC-6B52-5054-BD49-9EBA843CF894")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelector))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ILoopingSelector
    {
        int ItemHeight { get; set; }
        global::Microsoft.UI.Xaml.DataTemplate ItemTemplate { get; set; }
        int ItemWidth { get; set; }
        global::System.Collections.Generic.IList<object> Items { get; set; }
        int SelectedIndex { get; set; }
        object SelectedItem { get; set; }
        bool ShouldLoop { get; set; }
        event global::Microsoft.UI.Xaml.Controls.SelectionChangedEventHandler SelectionChanged;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("75D36595-BF4F-5393-819F-EB1E321CE1DC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorItem))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ILoopingSelectorItem
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("7479C3A4-C5B1-5112-BEA9-BEEF5CC79F57")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorPanel))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ILoopingSelectorPanel
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("E7F8770E-729B-57AA-9A79-EDE3F84253CC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ILoopingSelectorStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty ItemHeightProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ItemTemplateProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ItemWidthProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ItemsProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SelectedIndexProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SelectedItemProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ShouldLoopProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("FA7B8B1F-020D-58EC-8658-F2CE97310051")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IMenuFlyoutItemTemplateSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IMenuFlyoutItemTemplateSettings
    {
        double KeyboardAcceleratorTextMinWidth { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("2BFCFA7E-483C-5FC9-B070-FBB58E6E974D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IMenuFlyoutPresenterTemplateSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IMenuFlyoutPresenterTemplateSettings
    {
        double FlyoutContentMinWidth { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("3F0D1E92-5450-5078-8F72-5AC1749976E3")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IMonochromaticOverlayPresenter))]
    [global::Microsoft.UI.Xaml.CustomAttributes.MUXPropertyChangedCallback(enable = true)]
    [global::Microsoft.UI.Xaml.CustomAttributes.MUXPropertyChangedCallbackMethodName(value = @"OnPropertyChanged")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface IMonochromaticOverlayPresenter
    {
        global::Windows.UI.Color ReplacementColor { get; set; }
        global::Microsoft.UI.Xaml.UIElement SourceElement { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("4997847B-B558-5C8C-8298-BE1532E898EC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IMonochromaticOverlayPresenterFactory))]
    [global::Microsoft.UI.Xaml.CustomAttributes.MUXPropertyChangedCallback(enable = true)]
    [global::Microsoft.UI.Xaml.CustomAttributes.MUXPropertyChangedCallbackMethodName(value = @"OnPropertyChanged")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface IMonochromaticOverlayPresenterFactory
    {
        MonochromaticOverlayPresenter CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("A931BF94-A9C6-5D10-83AC-1492739E11E4")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IMonochromaticOverlayPresenterStatics))]
    [global::Microsoft.UI.Xaml.CustomAttributes.MUXPropertyChangedCallback(enable = true)]
    [global::Microsoft.UI.Xaml.CustomAttributes.MUXPropertyChangedCallbackMethodName(value = @"OnPropertyChanged")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface IMonochromaticOverlayPresenterStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty ReplacementColorProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SourceElementProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("64939DF5-760C-5B0B-AF4D-D8DD4EE50278")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenter))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface INavigationViewItemPresenter
    {
        global::Microsoft.UI.Xaml.Controls.IconElement Icon { get; set; }
        NavigationViewItemPresenterTemplateSettings TemplateSettings { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("3F775730-3713-5B3B-9600-53B79FFF2E35")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenter2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 196608u)]
    internal interface INavigationViewItemPresenter2
    {
        global::Microsoft.UI.Xaml.Controls.InfoBadge InfoBadge { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("B28B0160-022C-593C-AB9A-7B3DED2C0754")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface INavigationViewItemPresenterFactory
    {
        NavigationViewItemPresenter CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("3B07F068-A764-549C-B4CF-EBAB40EC5DD1")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface INavigationViewItemPresenterStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty IconProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty TemplateSettingsProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("4B473F61-3F17-5E4F-8453-541DF947A789")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterStatics2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 196608u)]
    internal interface INavigationViewItemPresenterStatics2
    {
        global::Microsoft.UI.Xaml.DependencyProperty InfoBadgeProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("A5119750-FA71-56F2-BFA4-799D9F304CB8")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterTemplateSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface INavigationViewItemPresenterTemplateSettings
    {
        double IconWidth { get; }
        double SmallerIconWidth { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("19EF1328-52C7-55E3-B1BB-923F2F39BD6E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterTemplateSettingsFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface INavigationViewItemPresenterTemplateSettingsFactory
    {
        NavigationViewItemPresenterTemplateSettings CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("72F09642-C658-5B06-8C81-1566B737B746")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterTemplateSettingsStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface INavigationViewItemPresenterTemplateSettingsStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty IconWidthProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SmallerIconWidthProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("450D2984-1E70-53D8-8269-A27564DAA69F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanel))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IOrientedVirtualizingPanel
    {
        void LineUp();
        void LineDown();
        void LineLeft();
        void LineRight();
        void PageUp();
        void PageDown();
        void PageLeft();
        void PageRight();
        void MouseWheelUp();
        void MouseWheelDown();
        void MouseWheelLeft();
        void MouseWheelRight();
        void SetHorizontalOffset(double offset);
        void SetVerticalOffset(double offset);
        global::Windows.Foundation.Rect MakeVisible(global::Microsoft.UI.Xaml.UIElement visual, global::Windows.Foundation.Rect rectangle);
        bool CanHorizontallyScroll { get; set; }
        bool CanVerticallyScroll { get; set; }
        double ExtentHeight { get; }
        double ExtentWidth { get; }
        double HorizontalOffset { get; }
        object ScrollOwner { get; set; }
        double VerticalOffset { get; }
        double ViewportHeight { get; }
        double ViewportWidth { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("A70C98F4-D671-5F46-9B01-28B1B5528FC0")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IOrientedVirtualizingPanelFactory
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("8C2CC030-14FE-5FCA-8CE3-E11A918632CC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPickerFlyoutBase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPickerFlyoutBase
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("8231DAB5-4B8B-5674-B273-1C66701C14E1")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPickerFlyoutBaseFactory
    {
        PickerFlyoutBase CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("5B090FFC-D423-5756-A01C-AA734579D856")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseOverrides))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPickerFlyoutBaseOverrides
    {
        void OnConfirmed();
        bool ShouldShowConfirmationButtons();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("0E414DC2-38E0-5EFE-BAE8-A0C6A78514C8")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPickerFlyoutBaseStatics
    {
        string GetTitle(global::Microsoft.UI.Xaml.DependencyObject element);
        void SetTitle(global::Microsoft.UI.Xaml.DependencyObject element, string value);
        global::Microsoft.UI.Xaml.DependencyProperty TitleProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("612D6F77-6C76-5239-8894-EFBAB0F53E3E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPivotHeaderItem))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPivotHeaderItem
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("D8DB1A66-1384-518D-BC8F-9EDC2CA79190")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPivotHeaderItemFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPivotHeaderItemFactory
    {
        PivotHeaderItem CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("B5AF5BED-5F2F-5AF6-BF17-C085531C880F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPivotHeaderPanel))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPivotHeaderPanel
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("8E66CDCF-3BF5-5FE0-B05B-1125E961F0CC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPivotPanel))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPivotPanel
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("4E3AB19D-2F95-579C-9535-906C58629437")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopup))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPopup
    {
        global::Microsoft.UI.Xaml.UIElement Child { get; set; }
        global::Microsoft.UI.Xaml.Media.Animation.TransitionCollection ChildTransitions { get; set; }
        double HorizontalOffset { get; set; }
        bool IsConstrainedToRootBounds { get; }
        bool IsLightDismissEnabled { get; set; }
        bool IsOpen { get; set; }
        global::Microsoft.UI.Xaml.Controls.LightDismissOverlayMode LightDismissOverlayMode { get; set; }
        bool ShouldConstrainToRootBounds { get; set; }
        double VerticalOffset { get; set; }
        event global::System.EventHandler<object> Closed;
        event global::System.EventHandler<object> Opened;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("EA9C4F43-A937-53D5-B665-6640AD7EC2F4")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopup2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 131072u)]
    internal interface IPopup2
    {
        PopupPlacementMode ActualPlacement { get; }
        PopupPlacementMode DesiredPlacement { get; set; }
        global::Microsoft.UI.Xaml.FrameworkElement PlacementTarget { get; set; }
        event global::System.EventHandler<object> ActualPlacementChanged;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("03736C25-DD36-5344-9A8D-3F4E8E616CBA")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopup3))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 327680u)]
    internal interface IPopup3
    {
        global::Microsoft.UI.Xaml.Media.SystemBackdrop SystemBackdrop { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("C1ACFAA4-209A-5FB8-8934-8825976769B8")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPopupStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty ChildProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ChildTransitionsProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty HorizontalOffsetProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty IsLightDismissEnabledProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty IsOpenProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty LightDismissOverlayModeProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ShouldConstrainToRootBoundsProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty VerticalOffsetProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("79B3285A-1330-5CFD-AF2F-88EFA00770A9")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupStatics2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 131072u)]
    internal interface IPopupStatics2
    {
        global::Microsoft.UI.Xaml.DependencyProperty DesiredPlacementProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty PlacementTargetProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("2409656D-84F9-5979-8ADF-F3DB71530B22")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupStatics3))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 327680u)]
    internal interface IPopupStatics3
    {
        global::Microsoft.UI.Xaml.DependencyProperty SystemBackdropProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("540D6D61-8FAC-5D5C-B5B0-E172A7DDE103")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IRangeBase
    {
        double LargeChange { get; set; }
        double Maximum { get; set; }
        double Minimum { get; set; }
        double SmallChange { get; set; }
        double Value { get; set; }
        event RangeBaseValueChangedEventHandler ValueChanged;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("41C205E2-4422-5DCA-9B49-E31210EA396C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IRangeBaseFactory
    {
        RangeBase CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("B3DEB76F-68A6-5C14-A824-AB58E8774745")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseOverrides))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IRangeBaseOverrides
    {
        void OnMinimumChanged(double oldMinimum, double newMinimum);
        void OnMaximumChanged(double oldMaximum, double newMaximum);
        void OnValueChanged(double oldValue, double newValue);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("4AED5E49-64EC-56F1-874D-B8C0F83F9AC8")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IRangeBaseStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty LargeChangeProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty MaximumProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty MinimumProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SmallChangeProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ValueProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("B0181692-9578-51C7-9D1C-ADFCF8945AA9")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseValueChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IRangeBaseValueChangedEventArgs
    {
        double NewValue { get; }
        double OldValue { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("97F4C728-4A94-56B5-91E4-E7C6F6A1251A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatButton))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IRepeatButton
    {
        int Delay { get; set; }
        int Interval { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("B57320F6-A58A-589C-9F41-AAB02F51E829")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatButtonStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IRepeatButtonStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty DelayProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty IntervalProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("5828FB51-8EBB-596D-A871-50063479362D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatedScrollSnapPoint))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    internal interface IRepeatedScrollSnapPoint
    {
        double End { get; }
        double Interval { get; }
        double Offset { get; }
        double Start { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("F2FD8403-679E-5C31-B431-72A0E0014E6A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatedScrollSnapPointFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    internal interface IRepeatedScrollSnapPointFactory
    {
        RepeatedScrollSnapPoint CreateInstance(double offset, double interval, double start, double end, ScrollSnapPointsAlignment alignment, object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("1FA6DBBE-5E11-5D32-873B-C92B1D171538")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatedZoomSnapPoint))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    internal interface IRepeatedZoomSnapPoint
    {
        double End { get; }
        double Interval { get; }
        double Offset { get; }
        double Start { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("7D032A7C-D91C-5660-B1C2-B36E8810AC65")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatedZoomSnapPointFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    internal interface IRepeatedZoomSnapPointFactory
    {
        RepeatedZoomSnapPoint CreateInstance(double offset, double interval, double start, double end, object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("568CBF41-F741-5F05-8E08-C0A50AC17C8C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollBar))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IScrollBar
    {
        ScrollingIndicatorMode IndicatorMode { get; set; }
        global::Microsoft.UI.Xaml.Controls.Orientation Orientation { get; set; }
        double ViewportSize { get; set; }
        event ScrollEventHandler Scroll;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("88B52E18-9528-579F-BD84-EBA585A01C7A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollBarStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IScrollBarStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty IndicatorModeProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty OrientationProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ViewportSizeProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("54396786-1726-53D6-97A3-40AF0838314C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollController))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    public interface IScrollController
    {
        void SetIsScrollable(bool isScrollable);
        void SetValues(double minOffset, double maxOffset, double offset, double viewportLength);
        global::Microsoft.UI.Composition.CompositionAnimation GetScrollAnimation(int correlationId, global::System.Numerics.Vector2 startPosition, global::System.Numerics.Vector2 endPosition, global::Microsoft.UI.Composition.CompositionAnimation defaultAnimation);
        void NotifyRequestedScrollCompleted(int correlationId);
        bool CanScroll { get; }
        bool IsScrollingWithMouse { get; }
        IScrollControllerPanningInfo PanningInfo { get; }
        event global::Windows.Foundation.TypedEventHandler<IScrollController, ScrollControllerAddScrollVelocityRequestedEventArgs> AddScrollVelocityRequested;
        event global::Windows.Foundation.TypedEventHandler<IScrollController, object> CanScrollChanged;
        event global::Windows.Foundation.TypedEventHandler<IScrollController, object> IsScrollingWithMouseChanged;
        event global::Windows.Foundation.TypedEventHandler<IScrollController, ScrollControllerScrollByRequestedEventArgs> ScrollByRequested;
        event global::Windows.Foundation.TypedEventHandler<IScrollController, ScrollControllerScrollToRequestedEventArgs> ScrollToRequested;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("317BBC1A-0CF7-5815-A8A7-BD7E6EEF966A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerAddScrollVelocityRequestedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    internal interface IScrollControllerAddScrollVelocityRequestedEventArgs
    {
        int CorrelationId { get; set; }
        global::System.Nullable<float> InertiaDecayRate { get; }
        float OffsetVelocity { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("9221D193-6F82-5E21-AACC-0B1460818AB5")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerAddScrollVelocityRequestedEventArgsFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    internal interface IScrollControllerAddScrollVelocityRequestedEventArgsFactory
    {
        ScrollControllerAddScrollVelocityRequestedEventArgs CreateInstance(float offsetVelocity, global::System.Nullable<float> inertiaDecayRate);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("BEEE064E-1D4D-5A1A-8781-ACF1587A5D6A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanRequestedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    internal interface IScrollControllerPanRequestedEventArgs
    {
        bool Handled { get; set; }
        global::Microsoft.UI.Input.PointerPoint PointerPoint { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("C3B0A6C1-6732-5832-BE50-4ECADE585CBC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanRequestedEventArgsFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    internal interface IScrollControllerPanRequestedEventArgsFactory
    {
        ScrollControllerPanRequestedEventArgs CreateInstance(global::Microsoft.UI.Input.PointerPoint pointerPoint);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("53D5B301-9AAB-59BC-92CD-42CF21ABD590")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    public interface IScrollControllerPanningInfo
    {
        void SetPanningElementExpressionAnimationSources(global::Microsoft.UI.Composition.CompositionPropertySet propertySet, string minOffsetPropertyName, string maxOffsetPropertyName, string offsetPropertyName, string multiplierPropertyName);
        bool IsRailEnabled { get; }
        global::Microsoft.UI.Xaml.Controls.Orientation PanOrientation { get; }
        global::Microsoft.UI.Xaml.UIElement PanningElementAncestor { get; }
        event global::Windows.Foundation.TypedEventHandler<IScrollControllerPanningInfo, object> Changed;
        event global::Windows.Foundation.TypedEventHandler<IScrollControllerPanningInfo, ScrollControllerPanRequestedEventArgs> PanRequested;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("E7F305FA-4073-5D88-8BF1-AE4ECB9208BF")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollByRequestedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    internal interface IScrollControllerScrollByRequestedEventArgs
    {
        int CorrelationId { get; set; }
        double OffsetDelta { get; }
        global::Microsoft.UI.Xaml.Controls.ScrollingScrollOptions Options { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("7ECF01A7-EF3F-5AF9-93B4-38BC1BAFD335")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollByRequestedEventArgsFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    internal interface IScrollControllerScrollByRequestedEventArgsFactory
    {
        ScrollControllerScrollByRequestedEventArgs CreateInstance(double offsetDelta, global::Microsoft.UI.Xaml.Controls.ScrollingScrollOptions options);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("73F16B99-7310-5C73-872B-276E5A9D4913")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollToRequestedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    internal interface IScrollControllerScrollToRequestedEventArgs
    {
        int CorrelationId { get; set; }
        double Offset { get; }
        global::Microsoft.UI.Xaml.Controls.ScrollingScrollOptions Options { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("01675DC4-1074-54E8-BEBB-66B03A33DA0D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollToRequestedEventArgsFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    internal interface IScrollControllerScrollToRequestedEventArgsFactory
    {
        ScrollControllerScrollToRequestedEventArgs CreateInstance(double offset, global::Microsoft.UI.Xaml.Controls.ScrollingScrollOptions options);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("DBD27F11-F937-5AD0-9F75-B962C33254CF")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IScrollEventArgs
    {
        double NewValue { get; }
        ScrollEventType ScrollEventType { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("424B8AFD-F7AA-5E5B-9D0B-5F0EA4E1A56E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenter))]
    [global::Microsoft.UI.Xaml.CustomAttributes.MUXPropertyChangedCallback(enable = true)]
    [global::Microsoft.UI.Xaml.CustomAttributes.MUXPropertyChangedCallbackMethodName(value = @"OnPropertyChanged")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    internal interface IScrollPresenter
    {
        [global::Windows.Foundation.Metadata.Overload(@"ScrollTo")]
        int ScrollTo(double horizontalOffset, double verticalOffset);
        [global::Windows.Foundation.Metadata.Overload(@"ScrollToWithOptions")]
        int ScrollTo(double horizontalOffset, double verticalOffset, global::Microsoft.UI.Xaml.Controls.ScrollingScrollOptions options);
        [global::Windows.Foundation.Metadata.Overload(@"ScrollBy")]
        int ScrollBy(double horizontalOffsetDelta, double verticalOffsetDelta);
        [global::Windows.Foundation.Metadata.Overload(@"ScrollByWithOptions")]
        int ScrollBy(double horizontalOffsetDelta, double verticalOffsetDelta, global::Microsoft.UI.Xaml.Controls.ScrollingScrollOptions options);
        int AddScrollVelocity(global::System.Numerics.Vector2 offsetsVelocity, global::System.Nullable<global::System.Numerics.Vector2> inertiaDecayRate);
        [global::Windows.Foundation.Metadata.Overload(@"ZoomTo")]
        int ZoomTo(float zoomFactor, global::System.Nullable<global::System.Numerics.Vector2> centerPoint);
        [global::Windows.Foundation.Metadata.Overload(@"ZoomToWithOptions")]
        int ZoomTo(float zoomFactor, global::System.Nullable<global::System.Numerics.Vector2> centerPoint, global::Microsoft.UI.Xaml.Controls.ScrollingZoomOptions options);
        [global::Windows.Foundation.Metadata.Overload(@"ZoomBy")]
        int ZoomBy(float zoomFactorDelta, global::System.Nullable<global::System.Numerics.Vector2> centerPoint);
        [global::Windows.Foundation.Metadata.Overload(@"ZoomByWithOptions")]
        int ZoomBy(float zoomFactorDelta, global::System.Nullable<global::System.Numerics.Vector2> centerPoint, global::Microsoft.UI.Xaml.Controls.ScrollingZoomOptions options);
        int AddZoomVelocity(float zoomFactorVelocity, global::System.Nullable<global::System.Numerics.Vector2> centerPoint, global::System.Nullable<float> inertiaDecayRate);
        global::Microsoft.UI.Xaml.Media.Brush Background { get; set; }
        global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode ComputedHorizontalScrollMode { get; }
        global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode ComputedVerticalScrollMode { get; }
        global::Microsoft.UI.Xaml.UIElement Content { get; set; }
        global::Microsoft.UI.Xaml.Controls.ScrollingContentOrientation ContentOrientation { get; set; }
        global::Microsoft.UI.Composition.CompositionPropertySet ExpressionAnimationSources { get; }
        double ExtentHeight { get; }
        double ExtentWidth { get; }
        double HorizontalAnchorRatio { get; set; }
        double HorizontalOffset { get; }
        global::Microsoft.UI.Xaml.Controls.ScrollingChainMode HorizontalScrollChainMode { get; set; }
        IScrollController HorizontalScrollController { get; set; }
        global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode HorizontalScrollMode { get; set; }
        global::Microsoft.UI.Xaml.Controls.ScrollingRailMode HorizontalScrollRailMode { get; set; }
        global::System.Collections.Generic.IList<ScrollSnapPointBase> HorizontalSnapPoints { get; }
        global::Microsoft.UI.Xaml.Controls.ScrollingInputKinds IgnoredInputKinds { get; set; }
        double MaxZoomFactor { get; set; }
        double MinZoomFactor { get; set; }
        double ScrollableHeight { get; }
        double ScrollableWidth { get; }
        global::Microsoft.UI.Xaml.Controls.ScrollingInteractionState State { get; }
        double VerticalAnchorRatio { get; set; }
        double VerticalOffset { get; }
        global::Microsoft.UI.Xaml.Controls.ScrollingChainMode VerticalScrollChainMode { get; set; }
        IScrollController VerticalScrollController { get; set; }
        global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode VerticalScrollMode { get; set; }
        global::Microsoft.UI.Xaml.Controls.ScrollingRailMode VerticalScrollRailMode { get; set; }
        global::System.Collections.Generic.IList<ScrollSnapPointBase> VerticalSnapPoints { get; }
        double ViewportHeight { get; }
        double ViewportWidth { get; }
        global::Microsoft.UI.Xaml.Controls.ScrollingChainMode ZoomChainMode { get; set; }
        float ZoomFactor { get; }
        global::Microsoft.UI.Xaml.Controls.ScrollingZoomMode ZoomMode { get; set; }
        global::System.Collections.Generic.IList<ZoomSnapPointBase> ZoomSnapPoints { get; }
        event global::Windows.Foundation.TypedEventHandler<ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingAnchorRequestedEventArgs> AnchorRequested;
        event global::Windows.Foundation.TypedEventHandler<ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingBringingIntoViewEventArgs> BringingIntoView;
        event global::Windows.Foundation.TypedEventHandler<ScrollPresenter, object> ExtentChanged;
        event global::Windows.Foundation.TypedEventHandler<ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingScrollAnimationStartingEventArgs> ScrollAnimationStarting;
        event global::Windows.Foundation.TypedEventHandler<ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingScrollCompletedEventArgs> ScrollCompleted;
        event global::Windows.Foundation.TypedEventHandler<ScrollPresenter, object> StateChanged;
        event global::Windows.Foundation.TypedEventHandler<ScrollPresenter, object> ViewChanged;
        event global::Windows.Foundation.TypedEventHandler<ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingZoomAnimationStartingEventArgs> ZoomAnimationStarting;
        event global::Windows.Foundation.TypedEventHandler<ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingZoomCompletedEventArgs> ZoomCompleted;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("F178EEBB-4285-5969-A222-4D7EFA8D6B19")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenter2))]
    [global::Microsoft.UI.Xaml.CustomAttributes.MUXPropertyChangedCallback(enable = true)]
    [global::Microsoft.UI.Xaml.CustomAttributes.MUXPropertyChangedCallbackMethodName(value = @"OnPropertyChanged")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 589824u)]
    [global::Windows.Foundation.Metadata.Experimental]
    internal interface IScrollPresenter2
    {
        event global::Windows.Foundation.TypedEventHandler<ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingScrollStartingEventArgs> ScrollStarting;
        event global::Windows.Foundation.TypedEventHandler<ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingZoomStartingEventArgs> ZoomStarting;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("9F5CDC57-D229-52B2-AEE4-37C496764EA3")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterFactory))]
    [global::Microsoft.UI.Xaml.CustomAttributes.MUXPropertyChangedCallback(enable = true)]
    [global::Microsoft.UI.Xaml.CustomAttributes.MUXPropertyChangedCallbackMethodName(value = @"OnPropertyChanged")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    internal interface IScrollPresenterFactory
    {
        ScrollPresenter CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("E27BA947-F8A5-5869-9A71-CD514D41C623")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterStatics))]
    [global::Microsoft.UI.Xaml.CustomAttributes.MUXPropertyChangedCallback(enable = true)]
    [global::Microsoft.UI.Xaml.CustomAttributes.MUXPropertyChangedCallbackMethodName(value = @"OnPropertyChanged")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    internal interface IScrollPresenterStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty BackgroundProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ComputedHorizontalScrollModeProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ComputedVerticalScrollModeProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ContentOrientationProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ContentProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty HorizontalAnchorRatioProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty HorizontalScrollChainModeProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty HorizontalScrollModeProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty HorizontalScrollRailModeProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty IgnoredInputKindsProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty MaxZoomFactorProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty MinZoomFactorProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty VerticalAnchorRatioProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty VerticalScrollChainModeProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty VerticalScrollModeProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty VerticalScrollRailModeProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ZoomChainModeProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ZoomModeProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("73D918FF-D16C-52CD-9657-E392EE08868A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPoint))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    internal interface IScrollSnapPoint
    {
        double Value { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("45D7319D-C9EB-5109-9668-FF3FC6CCDF11")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointBase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    internal interface IScrollSnapPointBase
    {
        ScrollSnapPointsAlignment Alignment { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("3FA2E552-1A45-5691-99DC-6400087CBB38")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointBaseFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    internal interface IScrollSnapPointBaseFactory
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("39304BC7-0E54-5C06-8920-ADCF67E7C466")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    internal interface IScrollSnapPointFactory
    {
        ScrollSnapPoint CreateInstance(double snapPointValue, ScrollSnapPointsAlignment alignment, object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("D3EA6E09-ECF7-51A8-BD54-FC84B9653766")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public interface IScrollSnapPointsInfo
    {
        global::System.Collections.Generic.IReadOnlyList<float> GetIrregularSnapPoints(global::Microsoft.UI.Xaml.Controls.Orientation orientation, SnapPointsAlignment alignment);
        float GetRegularSnapPoints(global::Microsoft.UI.Xaml.Controls.Orientation orientation, SnapPointsAlignment alignment, out float offset);
        bool AreHorizontalSnapPointsRegular { get; }
        bool AreVerticalSnapPointsRegular { get; }
        event global::System.EventHandler<object> HorizontalSnapPointsChanged;
        event global::System.EventHandler<object> VerticalSnapPointsChanged;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("8F7E2159-E61D-576F-8476-F83FDE3D689E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelector))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISelector
    {
        global::System.Nullable<bool> IsSynchronizedWithCurrentItem { get; set; }
        int SelectedIndex { get; set; }
        object SelectedItem { get; set; }
        object SelectedValue { get; set; }
        string SelectedValuePath { get; set; }
        event global::Microsoft.UI.Xaml.Controls.SelectionChangedEventHandler SelectionChanged;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("21A42024-AF07-58F9-8789-848D3324D901")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISelectorFactory
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("5772C4DE-60EA-5492-8C5E-B3323D5A3CA6")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorItem))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISelectorItem
    {
        bool IsSelected { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("078039F5-76ED-5299-9715-FC8C58173560")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorItemFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISelectorItemFactory
    {
        SelectorItem CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("4B201A54-A414-5E79-9B6B-3DA9DE442A35")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorItemStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISelectorItemStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty IsSelectedProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("569B2234-1CEB-516E-B64E-0D479452E279")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISelectorStatics
    {
        bool GetIsSelectionActive(global::Microsoft.UI.Xaml.DependencyObject element);
        global::Microsoft.UI.Xaml.DependencyProperty IsSynchronizedWithCurrentItemProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SelectedIndexProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SelectedItemProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SelectedValuePathProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SelectedValueProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("14ED1089-FB97-5211-8C45-C352CD8B96A1")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISnapPointBase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    internal interface ISnapPointBase
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("50266508-15F8-530A-A213-E976E04E670B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISnapPointBaseFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    internal interface ISnapPointBaseFactory
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("44D6F6F7-0058-5EAC-8837-F7F16D961F7C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISplitViewTemplateSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISplitViewTemplateSettings
    {
        global::Microsoft.UI.Xaml.GridLength CompactPaneGridLength { get; }
        double NegativeOpenPaneLength { get; }
        double NegativeOpenPaneLengthMinusCompactLength { get; }
        global::Microsoft.UI.Xaml.GridLength OpenPaneGridLength { get; }
        double OpenPaneLength { get; }
        double OpenPaneLengthMinusCompactLength { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("EC48EFB5-2CB3-562B-921C-E554923CE1D5")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ITabViewListView))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface ITabViewListView
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("8A084FDD-86F0-51EE-98DF-5FBD0B5669BE")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ITabViewListViewFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    internal interface ITabViewListViewFactory
    {
        TabViewListView CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("9B540AE4-98ED-5A19-9512-A56878C52FEE")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IThumb))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IThumb
    {
        void CancelDrag();
        bool IsDragging { get; }
        event DragCompletedEventHandler DragCompleted;
        event DragDeltaEventHandler DragDelta;
        event DragStartedEventHandler DragStarted;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("900C4924-886A-5F24-96D1-1EC3A36E8D66")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IThumbStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IThumbStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty IsDraggingProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("573293BD-3F6A-56C3-BF95-6254C9BBBC89")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ITickBar))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ITickBar
    {
        global::Microsoft.UI.Xaml.Media.Brush Fill { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("41C210CF-7060-5B7B-83AB-A302AA6EED6B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ITickBarStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ITickBarStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty FillProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("686FBAA4-C866-568B-8F75-481D8D545291")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleButton))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IToggleButton
    {
        global::System.Nullable<bool> IsChecked { get; set; }
        bool IsThreeState { get; set; }
        event global::Microsoft.UI.Xaml.RoutedEventHandler Checked;
        event global::Microsoft.UI.Xaml.RoutedEventHandler Indeterminate;
        event global::Microsoft.UI.Xaml.RoutedEventHandler Unchecked;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("519511BB-D35B-5E2D-966C-8369405A4408")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IToggleButtonFactory
    {
        ToggleButton CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("EE55F85D-9061-5D18-B31A-90BC5625CFE9")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonOverrides))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IToggleButtonOverrides
    {
        void OnToggle();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("4B8397E3-76FD-59DF-824F-40AE339FB00B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IToggleButtonStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty IsCheckedProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty IsThreeStateProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("8F9640A3-AA4E-52DA-A2C6-9167C800BABA")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleSwitchTemplateSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IToggleSwitchTemplateSettings
    {
        double CurtainCurrentToOffOffset { get; }
        double CurtainCurrentToOnOffset { get; }
        double CurtainOffToOnOffset { get; }
        double CurtainOnToOffOffset { get; }
        double KnobCurrentToOffOffset { get; }
        double KnobCurrentToOnOffset { get; }
        double KnobOffToOnOffset { get; }
        double KnobOnToOffOffset { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("4F725950-FF64-5CF1-9E86-9011FB10E88E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToolTipTemplateSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IToolTipTemplateSettings
    {
        double FromHorizontalOffset { get; }
        double FromVerticalOffset { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("8101D353-8DB3-5AC6-A7F8-B18EB9C123AC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IZoomSnapPoint))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    internal interface IZoomSnapPoint
    {
        double Value { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("C6D08756-0860-5C2D-ABEC-6EB4AA4B53D7")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IZoomSnapPointBase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    internal interface IZoomSnapPointBase
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("2C689EEA-B6CF-5024-847B-589355D5A2FA")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IZoomSnapPointBaseFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    internal interface IZoomSnapPointBaseFactory
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("0B3B5418-BFF6-5A9E-B734-B68ADF49F775")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IZoomSnapPointFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    internal interface IZoomSnapPointFactory
    {
        ZoomSnapPoint CreateInstance(double snapPointValue, object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanelRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IInfoBarPanel))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    public class InfoBarPanel : global::Microsoft.UI.Xaml.Controls.Panel, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<InfoBarPanel>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanel;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanel()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanel, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IInfoBarPanelMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanel;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanel => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanel ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanel();



        private static class _IInfoBarPanelFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanelFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanelFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanelFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanelFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IInfoBarPanelFactoryMethods.IID);
                }
            }
        }

        public InfoBarPanel():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(InfoBarPanel);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IInfoBarPanelFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanelFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IInfoBarPanelMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanelStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanelStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanelStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanelStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IInfoBarPanelStaticsMethods.IID);
                }
            }
        }

        public static void SetHorizontalOrientationMargin(global::Microsoft.UI.Xaml.DependencyObject @object, global::Microsoft.UI.Xaml.Thickness value) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IInfoBarPanelStaticsMethods.SetHorizontalOrientationMargin(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanelStatics, @object, value);

        public static global::Microsoft.UI.Xaml.Thickness GetHorizontalOrientationMargin(global::Microsoft.UI.Xaml.DependencyObject @object) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IInfoBarPanelStaticsMethods.GetHorizontalOrientationMargin(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanelStatics, @object);

        public static void SetVerticalOrientationMargin(global::Microsoft.UI.Xaml.DependencyObject @object, global::Microsoft.UI.Xaml.Thickness value) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IInfoBarPanelStaticsMethods.SetVerticalOrientationMargin(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanelStatics, @object, value);

        public static global::Microsoft.UI.Xaml.Thickness GetVerticalOrientationMargin(global::Microsoft.UI.Xaml.DependencyObject @object) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IInfoBarPanelStaticsMethods.GetVerticalOrientationMargin(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanelStatics, @object);

        public static global::Microsoft.UI.Xaml.DependencyProperty HorizontalOrientationMarginProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IInfoBarPanelStaticsMethods.get_HorizontalOrientationMarginProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanelStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty HorizontalOrientationPaddingProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IInfoBarPanelStaticsMethods.get_HorizontalOrientationPaddingProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanelStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty VerticalOrientationMarginProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IInfoBarPanelStaticsMethods.get_VerticalOrientationMarginProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanelStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty VerticalOrientationPaddingProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IInfoBarPanelStaticsMethods.get_VerticalOrientationPaddingProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanelStatics);

        public static new InfoBarPanel FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<InfoBarPanel>.FromAbi(thisPtr);
        }

        protected internal InfoBarPanel(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IInfoBarPanelMethods.IID);

        }


        public static bool operator ==(InfoBarPanel x, InfoBarPanel y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(InfoBarPanel x, InfoBarPanel y) => !(x == y);
        public bool Equals(InfoBarPanel other) => this == other;
        public override bool Equals(object obj) => obj is InfoBarPanel that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected InfoBarPanel(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(InfoBarPanel);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::Microsoft.UI.Xaml.Thickness HorizontalOrientationPadding
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IInfoBarPanelMethods.get_HorizontalOrientationPadding(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanel);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IInfoBarPanelMethods.set_HorizontalOrientationPadding(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanel, value);
        }

        public global::Microsoft.UI.Xaml.Thickness VerticalOrientationPadding
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IInfoBarPanelMethods.get_VerticalOrientationPadding(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanel);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IInfoBarPanelMethods.set_VerticalOrientationPadding(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanel, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IItemsChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class ItemsChangedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ItemsChangedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IItemsChangedEventArgs => _inner;


        public static ItemsChangedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ItemsChangedEventArgs>.FromAbi(thisPtr);
        }

        internal ItemsChangedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IItemsChangedEventArgsMethods.IID);

        }


        public static bool operator ==(ItemsChangedEventArgs x, ItemsChangedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ItemsChangedEventArgs x, ItemsChangedEventArgs y) => !(x == y);
        public bool Equals(ItemsChangedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is ItemsChangedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public int Action => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IItemsChangedEventArgsMethods.get_Action(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IItemsChangedEventArgs);

        public int ItemCount => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IItemsChangedEventArgsMethods.get_ItemCount(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IItemsChangedEventArgs);

        public int ItemUICount => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IItemsChangedEventArgsMethods.get_ItemUICount(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IItemsChangedEventArgs);

        public GeneratorPosition OldPosition => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IItemsChangedEventArgsMethods.get_OldPosition(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IItemsChangedEventArgs);

        public GeneratorPosition Position => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IItemsChangedEventArgsMethods.get_Position(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IItemsChangedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public delegate void ItemsChangedEventHandler(object sender, ItemsChangedEventArgs e);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverterRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IJumpListItemBackgroundConverter))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class JumpListItemBackgroundConverter : global::Microsoft.UI.Xaml.DependencyObject, global::Microsoft.UI.Xaml.Data.IValueConverter, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<JumpListItemBackgroundConverter>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IJumpListItemBackgroundConverter => _inner;
        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Data_IValueConverter;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Data_IValueConverter()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Data_IValueConverter, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Data.IValueConverterMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Data_IValueConverter;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Data_IValueConverter => ___objRef_global__Microsoft_UI_Xaml_Data_IValueConverter ?? Make___objRef_global__Microsoft_UI_Xaml_Data_IValueConverter();



        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_JumpListItemBackgroundConverter;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_JumpListItemBackgroundConverter
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_JumpListItemBackgroundConverter;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_JumpListItemBackgroundConverter = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter");
                }
            }
        }

        public JumpListItemBackgroundConverter() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_JumpListItemBackgroundConverter, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemBackgroundConverterMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IJumpListItemBackgroundConverterStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IJumpListItemBackgroundConverterStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IJumpListItemBackgroundConverterStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IJumpListItemBackgroundConverterStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemBackgroundConverterStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty DisabledProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemBackgroundConverterStaticsMethods.get_DisabledProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IJumpListItemBackgroundConverterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty EnabledProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemBackgroundConverterStaticsMethods.get_EnabledProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IJumpListItemBackgroundConverterStatics);

        public static new JumpListItemBackgroundConverter FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<JumpListItemBackgroundConverter>.FromAbi(thisPtr);
        }

        internal JumpListItemBackgroundConverter(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemBackgroundConverterMethods.IID);

        }


        public static bool operator ==(JumpListItemBackgroundConverter x, JumpListItemBackgroundConverter y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(JumpListItemBackgroundConverter x, JumpListItemBackgroundConverter y) => !(x == y);
        public bool Equals(JumpListItemBackgroundConverter other) => this == other;
        public override bool Equals(object obj) => obj is JumpListItemBackgroundConverter that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public object Convert(object value, global::System.Type targetType, object parameter, string language) => global::ABI.Microsoft.UI.Xaml.Data.IValueConverterMethods.Convert(_objRef_global__Microsoft_UI_Xaml_Data_IValueConverter, value, targetType, parameter, language);

        public object ConvertBack(object value, global::System.Type targetType, object parameter, string language) => global::ABI.Microsoft.UI.Xaml.Data.IValueConverterMethods.ConvertBack(_objRef_global__Microsoft_UI_Xaml_Data_IValueConverter, value, targetType, parameter, language);

        public global::Microsoft.UI.Xaml.Media.Brush Disabled
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemBackgroundConverterMethods.get_Disabled(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IJumpListItemBackgroundConverter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemBackgroundConverterMethods.set_Disabled(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IJumpListItemBackgroundConverter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush Enabled
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemBackgroundConverterMethods.get_Enabled(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IJumpListItemBackgroundConverter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemBackgroundConverterMethods.set_Enabled(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IJumpListItemBackgroundConverter, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverterRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IJumpListItemForegroundConverter))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class JumpListItemForegroundConverter : global::Microsoft.UI.Xaml.DependencyObject, global::Microsoft.UI.Xaml.Data.IValueConverter, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<JumpListItemForegroundConverter>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IJumpListItemForegroundConverter => _inner;
        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Data_IValueConverter;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Data_IValueConverter()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Data_IValueConverter, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Data.IValueConverterMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Data_IValueConverter;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Data_IValueConverter => ___objRef_global__Microsoft_UI_Xaml_Data_IValueConverter ?? Make___objRef_global__Microsoft_UI_Xaml_Data_IValueConverter();



        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_JumpListItemForegroundConverter;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_JumpListItemForegroundConverter
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_JumpListItemForegroundConverter;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_JumpListItemForegroundConverter = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter");
                }
            }
        }

        public JumpListItemForegroundConverter() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_JumpListItemForegroundConverter, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemForegroundConverterMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IJumpListItemForegroundConverterStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IJumpListItemForegroundConverterStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IJumpListItemForegroundConverterStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IJumpListItemForegroundConverterStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemForegroundConverterStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty DisabledProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemForegroundConverterStaticsMethods.get_DisabledProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IJumpListItemForegroundConverterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty EnabledProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemForegroundConverterStaticsMethods.get_EnabledProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IJumpListItemForegroundConverterStatics);

        public static new JumpListItemForegroundConverter FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<JumpListItemForegroundConverter>.FromAbi(thisPtr);
        }

        internal JumpListItemForegroundConverter(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemForegroundConverterMethods.IID);

        }


        public static bool operator ==(JumpListItemForegroundConverter x, JumpListItemForegroundConverter y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(JumpListItemForegroundConverter x, JumpListItemForegroundConverter y) => !(x == y);
        public bool Equals(JumpListItemForegroundConverter other) => this == other;
        public override bool Equals(object obj) => obj is JumpListItemForegroundConverter that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public object Convert(object value, global::System.Type targetType, object parameter, string language) => global::ABI.Microsoft.UI.Xaml.Data.IValueConverterMethods.Convert(_objRef_global__Microsoft_UI_Xaml_Data_IValueConverter, value, targetType, parameter, language);

        public object ConvertBack(object value, global::System.Type targetType, object parameter, string language) => global::ABI.Microsoft.UI.Xaml.Data.IValueConverterMethods.ConvertBack(_objRef_global__Microsoft_UI_Xaml_Data_IValueConverter, value, targetType, parameter, language);

        public global::Microsoft.UI.Xaml.Media.Brush Disabled
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemForegroundConverterMethods.get_Disabled(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IJumpListItemForegroundConverter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemForegroundConverterMethods.set_Disabled(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IJumpListItemForegroundConverter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush Enabled
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemForegroundConverterMethods.get_Enabled(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IJumpListItemForegroundConverter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemForegroundConverterMethods.set_Enabled(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IJumpListItemForegroundConverter, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.LayoutInformation))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.LayoutInformationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ILayoutInformation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class LayoutInformation : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<LayoutInformation>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILayoutInformation => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.LayoutInformation").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILayoutInformationStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILayoutInformationStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILayoutInformationStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILayoutInformationStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.LayoutInformation", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILayoutInformationStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.UIElement GetLayoutExceptionElement(object dispatcher) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILayoutInformationStaticsMethods.GetLayoutExceptionElement(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILayoutInformationStatics, dispatcher);

        public static global::Windows.Foundation.Rect GetLayoutSlot(global::Microsoft.UI.Xaml.FrameworkElement element) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILayoutInformationStaticsMethods.GetLayoutSlot(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILayoutInformationStatics, element);

        public static global::Windows.Foundation.Size GetAvailableSize(global::Microsoft.UI.Xaml.UIElement element) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILayoutInformationStaticsMethods.GetAvailableSize(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILayoutInformationStatics, element);

        public static LayoutInformation FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<LayoutInformation>.FromAbi(thisPtr);
        }

        internal LayoutInformation(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILayoutInformationMethods.IID);

        }


        public static bool operator ==(LayoutInformation x, LayoutInformation y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(LayoutInformation x, LayoutInformation y) => !(x == y);
        public bool Equals(LayoutInformation other) => this == other;
        public override bool Equals(object obj) => obj is LayoutInformation that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenter))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenterRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IListViewItemPresenter))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class ListViewItemPresenter : global::Microsoft.UI.Xaml.Controls.ContentPresenter, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ListViewItemPresenter>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter();



        private static class _IListViewItemPresenterFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenter", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterFactoryMethods.IID);
                }
            }
        }

        public ListViewItemPresenter():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(ListViewItemPresenter);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IListViewItemPresenterFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenter").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenter", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty CheckBoxBorderBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_CheckBoxBorderBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty CheckBoxBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_CheckBoxBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty CheckBoxCornerRadiusProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_CheckBoxCornerRadiusProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty CheckBoxDisabledBorderBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_CheckBoxDisabledBorderBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty CheckBoxDisabledBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_CheckBoxDisabledBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty CheckBoxPointerOverBorderBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_CheckBoxPointerOverBorderBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty CheckBoxPointerOverBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_CheckBoxPointerOverBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty CheckBoxPressedBorderBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_CheckBoxPressedBorderBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty CheckBoxPressedBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_CheckBoxPressedBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty CheckBoxSelectedBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_CheckBoxSelectedBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty CheckBoxSelectedDisabledBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_CheckBoxSelectedDisabledBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty CheckBoxSelectedPointerOverBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_CheckBoxSelectedPointerOverBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty CheckBoxSelectedPressedBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_CheckBoxSelectedPressedBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty CheckBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_CheckBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty CheckDisabledBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_CheckDisabledBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty CheckHintBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_CheckHintBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty CheckModeProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_CheckModeProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty CheckPressedBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_CheckPressedBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty CheckSelectingBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_CheckSelectingBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ContentMarginProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_ContentMarginProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty DisabledOpacityProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_DisabledOpacityProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty DragBackgroundProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_DragBackgroundProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty DragForegroundProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_DragForegroundProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty DragOpacityProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_DragOpacityProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty FocusBorderBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_FocusBorderBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty FocusSecondaryBorderBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_FocusSecondaryBorderBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ListViewItemPresenterHorizontalContentAlignmentProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_ListViewItemPresenterHorizontalContentAlignmentProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ListViewItemPresenterPaddingProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_ListViewItemPresenterPaddingProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ListViewItemPresenterVerticalContentAlignmentProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_ListViewItemPresenterVerticalContentAlignmentProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty PlaceholderBackgroundProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_PlaceholderBackgroundProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty PointerOverBackgroundMarginProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_PointerOverBackgroundMarginProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty PointerOverBackgroundProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_PointerOverBackgroundProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty PointerOverBorderBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_PointerOverBorderBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty PointerOverForegroundProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_PointerOverForegroundProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty PressedBackgroundProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_PressedBackgroundProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ReorderHintOffsetProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_ReorderHintOffsetProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty RevealBackgroundProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_RevealBackgroundProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty RevealBackgroundShowsAboveContentProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_RevealBackgroundShowsAboveContentProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty RevealBorderBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_RevealBorderBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty RevealBorderThicknessProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_RevealBorderThicknessProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SelectedBackgroundProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_SelectedBackgroundProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SelectedBorderBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_SelectedBorderBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SelectedBorderThicknessProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_SelectedBorderThicknessProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SelectedDisabledBackgroundProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_SelectedDisabledBackgroundProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SelectedDisabledBorderBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_SelectedDisabledBorderBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SelectedForegroundProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_SelectedForegroundProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SelectedInnerBorderBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_SelectedInnerBorderBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SelectedPointerOverBackgroundProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_SelectedPointerOverBackgroundProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SelectedPointerOverBorderBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_SelectedPointerOverBorderBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SelectedPressedBackgroundProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_SelectedPressedBackgroundProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SelectedPressedBorderBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_SelectedPressedBorderBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SelectionCheckMarkVisualEnabledProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_SelectionCheckMarkVisualEnabledProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SelectionIndicatorBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_SelectionIndicatorBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SelectionIndicatorCornerRadiusProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_SelectionIndicatorCornerRadiusProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SelectionIndicatorDisabledBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_SelectionIndicatorDisabledBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SelectionIndicatorModeProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_SelectionIndicatorModeProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SelectionIndicatorPointerOverBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_SelectionIndicatorPointerOverBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SelectionIndicatorPressedBrushProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_SelectionIndicatorPressedBrushProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SelectionIndicatorVisualEnabledProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStaticsMethods.get_SelectionIndicatorVisualEnabledProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics);

        public static new ListViewItemPresenter FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ListViewItemPresenter>.FromAbi(thisPtr);
        }

        protected internal ListViewItemPresenter(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.IID);

        }


        public static bool operator ==(ListViewItemPresenter x, ListViewItemPresenter y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ListViewItemPresenter x, ListViewItemPresenter y) => !(x == y);
        public bool Equals(ListViewItemPresenter other) => this == other;
        public override bool Equals(object obj) => obj is ListViewItemPresenter that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected ListViewItemPresenter(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(ListViewItemPresenter);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::Microsoft.UI.Xaml.Media.Brush CheckBoxBorderBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_CheckBoxBorderBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_CheckBoxBorderBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush CheckBoxBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_CheckBoxBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_CheckBoxBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.CornerRadius CheckBoxCornerRadius
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_CheckBoxCornerRadius(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_CheckBoxCornerRadius(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush CheckBoxDisabledBorderBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_CheckBoxDisabledBorderBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_CheckBoxDisabledBorderBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush CheckBoxDisabledBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_CheckBoxDisabledBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_CheckBoxDisabledBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush CheckBoxPointerOverBorderBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_CheckBoxPointerOverBorderBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_CheckBoxPointerOverBorderBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush CheckBoxPointerOverBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_CheckBoxPointerOverBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_CheckBoxPointerOverBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush CheckBoxPressedBorderBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_CheckBoxPressedBorderBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_CheckBoxPressedBorderBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush CheckBoxPressedBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_CheckBoxPressedBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_CheckBoxPressedBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush CheckBoxSelectedBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_CheckBoxSelectedBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_CheckBoxSelectedBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush CheckBoxSelectedDisabledBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_CheckBoxSelectedDisabledBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_CheckBoxSelectedDisabledBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush CheckBoxSelectedPointerOverBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_CheckBoxSelectedPointerOverBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_CheckBoxSelectedPointerOverBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush CheckBoxSelectedPressedBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_CheckBoxSelectedPressedBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_CheckBoxSelectedPressedBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush CheckBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_CheckBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_CheckBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush CheckDisabledBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_CheckDisabledBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_CheckDisabledBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush CheckHintBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_CheckHintBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_CheckHintBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public ListViewItemPresenterCheckMode CheckMode
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_CheckMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_CheckMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush CheckPressedBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_CheckPressedBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_CheckPressedBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush CheckSelectingBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_CheckSelectingBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_CheckSelectingBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Thickness ContentMargin
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_ContentMargin(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_ContentMargin(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public double DisabledOpacity
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_DisabledOpacity(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_DisabledOpacity(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush DragBackground
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_DragBackground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_DragBackground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush DragForeground
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_DragForeground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_DragForeground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public double DragOpacity
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_DragOpacity(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_DragOpacity(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush FocusBorderBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_FocusBorderBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_FocusBorderBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush FocusSecondaryBorderBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_FocusSecondaryBorderBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_FocusSecondaryBorderBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.HorizontalAlignment ListViewItemPresenterHorizontalContentAlignment
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_ListViewItemPresenterHorizontalContentAlignment(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_ListViewItemPresenterHorizontalContentAlignment(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Thickness ListViewItemPresenterPadding
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_ListViewItemPresenterPadding(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_ListViewItemPresenterPadding(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.VerticalAlignment ListViewItemPresenterVerticalContentAlignment
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_ListViewItemPresenterVerticalContentAlignment(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_ListViewItemPresenterVerticalContentAlignment(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush PlaceholderBackground
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_PlaceholderBackground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_PlaceholderBackground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush PointerOverBackground
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_PointerOverBackground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_PointerOverBackground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Thickness PointerOverBackgroundMargin
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_PointerOverBackgroundMargin(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_PointerOverBackgroundMargin(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush PointerOverBorderBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_PointerOverBorderBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_PointerOverBorderBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush PointerOverForeground
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_PointerOverForeground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_PointerOverForeground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush PressedBackground
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_PressedBackground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_PressedBackground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public double ReorderHintOffset
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_ReorderHintOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_ReorderHintOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush RevealBackground
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_RevealBackground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_RevealBackground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public bool RevealBackgroundShowsAboveContent
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_RevealBackgroundShowsAboveContent(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_RevealBackgroundShowsAboveContent(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush RevealBorderBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_RevealBorderBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_RevealBorderBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Thickness RevealBorderThickness
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_RevealBorderThickness(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_RevealBorderThickness(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush SelectedBackground
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_SelectedBackground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_SelectedBackground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush SelectedBorderBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_SelectedBorderBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_SelectedBorderBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Thickness SelectedBorderThickness
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_SelectedBorderThickness(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_SelectedBorderThickness(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush SelectedDisabledBackground
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_SelectedDisabledBackground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_SelectedDisabledBackground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush SelectedDisabledBorderBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_SelectedDisabledBorderBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_SelectedDisabledBorderBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush SelectedForeground
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_SelectedForeground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_SelectedForeground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush SelectedInnerBorderBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_SelectedInnerBorderBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_SelectedInnerBorderBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush SelectedPointerOverBackground
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_SelectedPointerOverBackground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_SelectedPointerOverBackground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush SelectedPointerOverBorderBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_SelectedPointerOverBorderBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_SelectedPointerOverBorderBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush SelectedPressedBackground
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_SelectedPressedBackground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_SelectedPressedBackground(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush SelectedPressedBorderBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_SelectedPressedBorderBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_SelectedPressedBorderBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public bool SelectionCheckMarkVisualEnabled
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_SelectionCheckMarkVisualEnabled(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_SelectionCheckMarkVisualEnabled(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush SelectionIndicatorBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_SelectionIndicatorBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_SelectionIndicatorBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.CornerRadius SelectionIndicatorCornerRadius
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_SelectionIndicatorCornerRadius(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_SelectionIndicatorCornerRadius(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush SelectionIndicatorDisabledBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_SelectionIndicatorDisabledBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_SelectionIndicatorDisabledBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public ListViewItemPresenterSelectionIndicatorMode SelectionIndicatorMode
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_SelectionIndicatorMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_SelectionIndicatorMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush SelectionIndicatorPointerOverBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_SelectionIndicatorPointerOverBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_SelectionIndicatorPointerOverBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Media.Brush SelectionIndicatorPressedBrush
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_SelectionIndicatorPressedBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_SelectionIndicatorPressedBrush(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        public bool SelectionIndicatorVisualEnabled
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.get_SelectionIndicatorVisualEnabled(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.set_SelectionIndicatorVisualEnabled(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<ListViewItemPresenterCheckMode>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum ListViewItemPresenterCheckMode : int
    {
        Inline = unchecked((int)0),
        Overlay = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<ListViewItemPresenterSelectionIndicatorMode>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum ListViewItemPresenterSelectionIndicatorMode : int
    {
        Inline = unchecked((int)0),
        Overlay = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettingsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IListViewItemTemplateSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class ListViewItemTemplateSettings : global::Microsoft.UI.Xaml.DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ListViewItemTemplateSettings>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemTemplateSettings => _inner;


        public static new ListViewItemTemplateSettings FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ListViewItemTemplateSettings>.FromAbi(thisPtr);
        }

        internal ListViewItemTemplateSettings(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemTemplateSettingsMethods.IID);

        }


        public static bool operator ==(ListViewItemTemplateSettings x, ListViewItemTemplateSettings y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ListViewItemTemplateSettings x, ListViewItemTemplateSettings y) => !(x == y);
        public bool Equals(ListViewItemTemplateSettings other) => this == other;
        public override bool Equals(object obj) => obj is ListViewItemTemplateSettings that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public int DragItemsCount => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemTemplateSettingsMethods.get_DragItemsCount(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IListViewItemTemplateSettings);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.LoopingSelector))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ILoopingSelector))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class LoopingSelector : global::Microsoft.UI.Xaml.Controls.Control, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<LoopingSelector>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelector => _inner;


        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.LoopingSelector").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelectorStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelectorStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelectorStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelectorStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.LoopingSelector", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty ItemHeightProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorStaticsMethods.get_ItemHeightProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelectorStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ItemTemplateProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorStaticsMethods.get_ItemTemplateProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelectorStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ItemWidthProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorStaticsMethods.get_ItemWidthProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelectorStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ItemsProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorStaticsMethods.get_ItemsProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelectorStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SelectedIndexProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorStaticsMethods.get_SelectedIndexProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelectorStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SelectedItemProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorStaticsMethods.get_SelectedItemProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelectorStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ShouldLoopProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorStaticsMethods.get_ShouldLoopProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelectorStatics);

        public static new LoopingSelector FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<LoopingSelector>.FromAbi(thisPtr);
        }

        internal LoopingSelector(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorMethods.IID);

        }


        public static bool operator ==(LoopingSelector x, LoopingSelector y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(LoopingSelector x, LoopingSelector y) => !(x == y);
        public bool Equals(LoopingSelector other) => this == other;
        public override bool Equals(object obj) => obj is LoopingSelector that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public event global::Microsoft.UI.Xaml.Controls.SelectionChangedEventHandler SelectionChanged
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorMethods.Get_SelectionChanged2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelector, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorMethods.Get_SelectionChanged2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelector, (IWinRTObject)this).Unsubscribe(value);
        }

        public int ItemHeight
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorMethods.get_ItemHeight(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelector);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorMethods.set_ItemHeight(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelector, value);
        }

        public global::Microsoft.UI.Xaml.DataTemplate ItemTemplate
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorMethods.get_ItemTemplate(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelector);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorMethods.set_ItemTemplate(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelector, value);
        }

        public int ItemWidth
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorMethods.get_ItemWidth(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelector);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorMethods.set_ItemWidth(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelector, value);
        }

        public global::System.Collections.Generic.IList<object> Items
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorMethods.get_Items(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelector);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorMethods.set_Items(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelector, value);
        }

        public int SelectedIndex
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorMethods.get_SelectedIndex(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelector);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorMethods.set_SelectedIndex(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelector, value);
        }

        public object SelectedItem
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorMethods.get_SelectedItem(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelector);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorMethods.set_SelectedItem(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelector, value);
        }

        public bool ShouldLoop
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorMethods.get_ShouldLoop(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelector);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorMethods.set_ShouldLoop(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelector, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorItem))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorItemRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ILoopingSelectorItem))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class LoopingSelectorItem : global::Microsoft.UI.Xaml.Controls.ContentControl, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<LoopingSelectorItem>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelectorItem => _inner;


        public static new LoopingSelectorItem FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<LoopingSelectorItem>.FromAbi(thisPtr);
        }

        internal LoopingSelectorItem(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorItemMethods.IID);

        }


        public static bool operator ==(LoopingSelectorItem x, LoopingSelectorItem y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(LoopingSelectorItem x, LoopingSelectorItem y) => !(x == y);
        public bool Equals(LoopingSelectorItem other) => this == other;
        public override bool Equals(object obj) => obj is LoopingSelectorItem that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorPanel))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorPanelRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ILoopingSelectorPanel))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class LoopingSelectorPanel : global::Microsoft.UI.Xaml.Controls.Canvas, IScrollSnapPointsInfo, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<LoopingSelectorPanel>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelectorPanel => _inner;
        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo();



        public static new LoopingSelectorPanel FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<LoopingSelectorPanel>.FromAbi(thisPtr);
        }

        internal LoopingSelectorPanel(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorPanelMethods.IID);

        }


        public static bool operator ==(LoopingSelectorPanel x, LoopingSelectorPanel y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(LoopingSelectorPanel x, LoopingSelectorPanel y) => !(x == y);
        public bool Equals(LoopingSelectorPanel other) => this == other;
        public override bool Equals(object obj) => obj is LoopingSelectorPanel that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::System.Collections.Generic.IReadOnlyList<float> GetIrregularSnapPoints(global::Microsoft.UI.Xaml.Controls.Orientation orientation, SnapPointsAlignment alignment) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.GetIrregularSnapPoints(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo, orientation, alignment);

        public float GetRegularSnapPoints(global::Microsoft.UI.Xaml.Controls.Orientation orientation, SnapPointsAlignment alignment, out float offset) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.GetRegularSnapPoints(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo, orientation, alignment, out offset);

        public event global::System.EventHandler<object> HorizontalSnapPointsChanged
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.Get_HorizontalSnapPointsChanged2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.Get_HorizontalSnapPointsChanged2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::System.EventHandler<object> VerticalSnapPointsChanged
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.Get_VerticalSnapPointsChanged2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.Get_VerticalSnapPointsChanged2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo, (IWinRTObject)this).Unsubscribe(value);
        }

        public bool AreHorizontalSnapPointsRegular => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.get_AreHorizontalSnapPointsRegular(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo);

        public bool AreVerticalSnapPointsRegular => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.get_AreVerticalSnapPointsRegular(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettingsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IMenuFlyoutItemTemplateSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class MenuFlyoutItemTemplateSettings : global::Microsoft.UI.Xaml.DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<MenuFlyoutItemTemplateSettings>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IMenuFlyoutItemTemplateSettings => _inner;


        public static new MenuFlyoutItemTemplateSettings FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<MenuFlyoutItemTemplateSettings>.FromAbi(thisPtr);
        }

        internal MenuFlyoutItemTemplateSettings(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IMenuFlyoutItemTemplateSettingsMethods.IID);

        }


        public static bool operator ==(MenuFlyoutItemTemplateSettings x, MenuFlyoutItemTemplateSettings y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(MenuFlyoutItemTemplateSettings x, MenuFlyoutItemTemplateSettings y) => !(x == y);
        public bool Equals(MenuFlyoutItemTemplateSettings other) => this == other;
        public override bool Equals(object obj) => obj is MenuFlyoutItemTemplateSettings that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double KeyboardAcceleratorTextMinWidth => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IMenuFlyoutItemTemplateSettingsMethods.get_KeyboardAcceleratorTextMinWidth(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IMenuFlyoutItemTemplateSettings);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettingsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IMenuFlyoutPresenterTemplateSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class MenuFlyoutPresenterTemplateSettings : global::Microsoft.UI.Xaml.DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<MenuFlyoutPresenterTemplateSettings>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IMenuFlyoutPresenterTemplateSettings => _inner;


        public static new MenuFlyoutPresenterTemplateSettings FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<MenuFlyoutPresenterTemplateSettings>.FromAbi(thisPtr);
        }

        internal MenuFlyoutPresenterTemplateSettings(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IMenuFlyoutPresenterTemplateSettingsMethods.IID);

        }


        public static bool operator ==(MenuFlyoutPresenterTemplateSettings x, MenuFlyoutPresenterTemplateSettings y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(MenuFlyoutPresenterTemplateSettings x, MenuFlyoutPresenterTemplateSettings y) => !(x == y);
        public bool Equals(MenuFlyoutPresenterTemplateSettings other) => this == other;
        public override bool Equals(object obj) => obj is MenuFlyoutPresenterTemplateSettings that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double FlyoutContentMinWidth => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IMenuFlyoutPresenterTemplateSettingsMethods.get_FlyoutContentMinWidth(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IMenuFlyoutPresenterTemplateSettings);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.MonochromaticOverlayPresenter))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.MonochromaticOverlayPresenterRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IMonochromaticOverlayPresenter))]
    [global::Microsoft.UI.Xaml.CustomAttributes.MUXPropertyChangedCallback(enable = true)]
    [global::Microsoft.UI.Xaml.CustomAttributes.MUXPropertyChangedCallbackMethodName(value = @"OnPropertyChanged")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    public class MonochromaticOverlayPresenter : global::Microsoft.UI.Xaml.Controls.Grid, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<MonochromaticOverlayPresenter>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenter;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenter()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenter, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IMonochromaticOverlayPresenterMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenter;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenter => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenter ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenter();



        private static class _IMonochromaticOverlayPresenterFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenterFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenterFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenterFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenterFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.MonochromaticOverlayPresenter", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IMonochromaticOverlayPresenterFactoryMethods.IID);
                }
            }
        }

        public MonochromaticOverlayPresenter():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(MonochromaticOverlayPresenter);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IMonochromaticOverlayPresenterFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenterFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IMonochromaticOverlayPresenterMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.MonochromaticOverlayPresenter").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenterStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenterStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenterStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenterStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.MonochromaticOverlayPresenter", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IMonochromaticOverlayPresenterStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty ReplacementColorProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IMonochromaticOverlayPresenterStaticsMethods.get_ReplacementColorProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SourceElementProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IMonochromaticOverlayPresenterStaticsMethods.get_SourceElementProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenterStatics);

        public static new MonochromaticOverlayPresenter FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<MonochromaticOverlayPresenter>.FromAbi(thisPtr);
        }

        protected internal MonochromaticOverlayPresenter(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IMonochromaticOverlayPresenterMethods.IID);

        }


        public static bool operator ==(MonochromaticOverlayPresenter x, MonochromaticOverlayPresenter y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(MonochromaticOverlayPresenter x, MonochromaticOverlayPresenter y) => !(x == y);
        public bool Equals(MonochromaticOverlayPresenter other) => this == other;
        public override bool Equals(object obj) => obj is MonochromaticOverlayPresenter that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected MonochromaticOverlayPresenter(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(MonochromaticOverlayPresenter);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::Windows.UI.Color ReplacementColor
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IMonochromaticOverlayPresenterMethods.get_ReplacementColor(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IMonochromaticOverlayPresenterMethods.set_ReplacementColor(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenter, value);
        }

        public global::Microsoft.UI.Xaml.UIElement SourceElement
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IMonochromaticOverlayPresenterMethods.get_SourceElement(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IMonochromaticOverlayPresenterMethods.set_SourceElement(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenter, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(INavigationViewItemPresenter))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    public class NavigationViewItemPresenter : global::Microsoft.UI.Xaml.Controls.ContentControl, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<NavigationViewItemPresenter>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenter;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenter()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenter, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenter;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenter => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenter ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenter();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenter2;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenter2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenter2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenter2Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenter2;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenter2 => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenter2 ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenter2();



        private static class _INavigationViewItemPresenterFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterFactoryMethods.IID);
                }
            }
        }

        public NavigationViewItemPresenter():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(NavigationViewItemPresenter);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _INavigationViewItemPresenterFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterStaticsMethods.IID);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterStatics2;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterStatics2
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterStatics2;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterStatics2 = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterStatics2Methods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty IconProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterStaticsMethods.get_IconProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty InfoBadgeProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterStatics2Methods.get_InfoBadgeProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterStatics2);

        public static global::Microsoft.UI.Xaml.DependencyProperty TemplateSettingsProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterStaticsMethods.get_TemplateSettingsProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterStatics);

        public static new NavigationViewItemPresenter FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<NavigationViewItemPresenter>.FromAbi(thisPtr);
        }

        protected internal NavigationViewItemPresenter(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterMethods.IID);

        }


        public static bool operator ==(NavigationViewItemPresenter x, NavigationViewItemPresenter y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(NavigationViewItemPresenter x, NavigationViewItemPresenter y) => !(x == y);
        public bool Equals(NavigationViewItemPresenter other) => this == other;
        public override bool Equals(object obj) => obj is NavigationViewItemPresenter that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected NavigationViewItemPresenter(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(NavigationViewItemPresenter);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::Microsoft.UI.Xaml.Controls.IconElement Icon
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterMethods.get_Icon(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterMethods.set_Icon(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Controls.InfoBadge InfoBadge
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenter2Methods.get_InfoBadge(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenter2);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenter2Methods.set_InfoBadge(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenter2, value);
        }

        public NavigationViewItemPresenterTemplateSettings TemplateSettings => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterMethods.get_TemplateSettings(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenter);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettingsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(INavigationViewItemPresenterTemplateSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    public class NavigationViewItemPresenterTemplateSettings : global::Microsoft.UI.Xaml.DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<NavigationViewItemPresenterTemplateSettings>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterTemplateSettings;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterTemplateSettings()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterTemplateSettings, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterTemplateSettingsMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterTemplateSettings;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterTemplateSettings => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterTemplateSettings ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterTemplateSettings();



        private static class _INavigationViewItemPresenterTemplateSettingsFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterTemplateSettingsFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterTemplateSettingsFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterTemplateSettingsFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterTemplateSettingsFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterTemplateSettingsFactoryMethods.IID);
                }
            }
        }

        public NavigationViewItemPresenterTemplateSettings():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(NavigationViewItemPresenterTemplateSettings);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _INavigationViewItemPresenterTemplateSettingsFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterTemplateSettingsFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterTemplateSettingsMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterTemplateSettingsStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterTemplateSettingsStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterTemplateSettingsStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterTemplateSettingsStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterTemplateSettingsStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty IconWidthProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterTemplateSettingsStaticsMethods.get_IconWidthProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterTemplateSettingsStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SmallerIconWidthProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterTemplateSettingsStaticsMethods.get_SmallerIconWidthProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterTemplateSettingsStatics);

        public static new NavigationViewItemPresenterTemplateSettings FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<NavigationViewItemPresenterTemplateSettings>.FromAbi(thisPtr);
        }

        protected internal NavigationViewItemPresenterTemplateSettings(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterTemplateSettingsMethods.IID);

        }


        public static bool operator ==(NavigationViewItemPresenterTemplateSettings x, NavigationViewItemPresenterTemplateSettings y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(NavigationViewItemPresenterTemplateSettings x, NavigationViewItemPresenterTemplateSettings y) => !(x == y);
        public bool Equals(NavigationViewItemPresenterTemplateSettings other) => this == other;
        public override bool Equals(object obj) => obj is NavigationViewItemPresenterTemplateSettings that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected NavigationViewItemPresenterTemplateSettings(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(NavigationViewItemPresenterTemplateSettings);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double IconWidth => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterTemplateSettingsMethods.get_IconWidth(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterTemplateSettings);

        public double SmallerIconWidth => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterTemplateSettingsMethods.get_SmallerIconWidth(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterTemplateSettings);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanelRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IOrientedVirtualizingPanel))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class OrientedVirtualizingPanel : global::Microsoft.UI.Xaml.Controls.VirtualizingPanel, IScrollSnapPointsInfo, global::Microsoft.UI.Xaml.Controls.IInsertionPanel, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<OrientedVirtualizingPanel>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_IInsertionPanel;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_IInsertionPanel()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_IInsertionPanel, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.IInsertionPanelMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_IInsertionPanel;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_IInsertionPanel => ___objRef_global__Microsoft_UI_Xaml_Controls_IInsertionPanel ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_IInsertionPanel();



        private static class _IOrientedVirtualizingPanelFactoryMethods
        {}

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanelFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanelFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanelFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanelFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelFactoryMethods.IID);
                }
            }
        }

        public static new OrientedVirtualizingPanel FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<OrientedVirtualizingPanel>.FromAbi(thisPtr);
        }

        protected internal OrientedVirtualizingPanel(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelMethods.IID);

        }


        public static bool operator ==(OrientedVirtualizingPanel x, OrientedVirtualizingPanel y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(OrientedVirtualizingPanel x, OrientedVirtualizingPanel y) => !(x == y);
        public bool Equals(OrientedVirtualizingPanel other) => this == other;
        public override bool Equals(object obj) => obj is OrientedVirtualizingPanel that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected OrientedVirtualizingPanel(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(OrientedVirtualizingPanel);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public void LineUp() => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelMethods.LineUp(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel);

        public void LineDown() => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelMethods.LineDown(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel);

        public void LineLeft() => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelMethods.LineLeft(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel);

        public void LineRight() => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelMethods.LineRight(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel);

        public void PageUp() => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelMethods.PageUp(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel);

        public void PageDown() => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelMethods.PageDown(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel);

        public void PageLeft() => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelMethods.PageLeft(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel);

        public void PageRight() => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelMethods.PageRight(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel);

        public void MouseWheelUp() => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelMethods.MouseWheelUp(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel);

        public void MouseWheelDown() => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelMethods.MouseWheelDown(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel);

        public void MouseWheelLeft() => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelMethods.MouseWheelLeft(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel);

        public void MouseWheelRight() => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelMethods.MouseWheelRight(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel);

        public void SetHorizontalOffset(double offset) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelMethods.SetHorizontalOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel, offset);

        public void SetVerticalOffset(double offset) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelMethods.SetVerticalOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel, offset);

        public global::Windows.Foundation.Rect MakeVisible(global::Microsoft.UI.Xaml.UIElement visual, global::Windows.Foundation.Rect rectangle) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelMethods.MakeVisible(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel, visual, rectangle);

        public global::System.Collections.Generic.IReadOnlyList<float> GetIrregularSnapPoints(global::Microsoft.UI.Xaml.Controls.Orientation orientation, SnapPointsAlignment alignment) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.GetIrregularSnapPoints(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo, orientation, alignment);

        public float GetRegularSnapPoints(global::Microsoft.UI.Xaml.Controls.Orientation orientation, SnapPointsAlignment alignment, out float offset) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.GetRegularSnapPoints(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo, orientation, alignment, out offset);

        public event global::System.EventHandler<object> HorizontalSnapPointsChanged
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.Get_HorizontalSnapPointsChanged2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.Get_HorizontalSnapPointsChanged2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::System.EventHandler<object> VerticalSnapPointsChanged
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.Get_VerticalSnapPointsChanged2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.Get_VerticalSnapPointsChanged2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo, (IWinRTObject)this).Unsubscribe(value);
        }

        public void GetInsertionIndexes(global::Windows.Foundation.Point position, out int first, out int second) => global::ABI.Microsoft.UI.Xaml.Controls.IInsertionPanelMethods.GetInsertionIndexes(_objRef_global__Microsoft_UI_Xaml_Controls_IInsertionPanel, position, out first, out second);

        public bool AreHorizontalSnapPointsRegular => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.get_AreHorizontalSnapPointsRegular(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo);

        public bool AreVerticalSnapPointsRegular => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.get_AreVerticalSnapPointsRegular(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo);

        public bool CanHorizontallyScroll
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelMethods.get_CanHorizontallyScroll(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelMethods.set_CanHorizontallyScroll(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel, value);
        }

        public bool CanVerticallyScroll
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelMethods.get_CanVerticallyScroll(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelMethods.set_CanVerticallyScroll(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel, value);
        }

        public double ExtentHeight => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelMethods.get_ExtentHeight(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel);

        public double ExtentWidth => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelMethods.get_ExtentWidth(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel);

        public double HorizontalOffset => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelMethods.get_HorizontalOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel);

        public object ScrollOwner
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelMethods.get_ScrollOwner(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelMethods.set_ScrollOwner(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel, value);
        }

        public double VerticalOffset => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelMethods.get_VerticalOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel);

        public double ViewportHeight => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelMethods.get_ViewportHeight(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel);

        public double ViewportWidth => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelMethods.get_ViewportWidth(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBaseRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPickerFlyoutBase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class PickerFlyoutBase : FlyoutBase, IPickerFlyoutBaseOverrides, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PickerFlyoutBase>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBase;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBase()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBase, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBase;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBase => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBase ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBase();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBaseOverrides;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBaseOverrides()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBaseOverrides, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseOverridesMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBaseOverrides;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBaseOverrides => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBaseOverrides ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBaseOverrides();



        private static class _IPickerFlyoutBaseFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBaseFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBaseFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBaseFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBaseFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseFactoryMethods.IID);
                }
            }
        }

        protected PickerFlyoutBase():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(PickerFlyoutBase);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IPickerFlyoutBaseFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBaseFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBaseStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBaseStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBaseStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBaseStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseStaticsMethods.IID);
                }
            }
        }

        public static string GetTitle(global::Microsoft.UI.Xaml.DependencyObject element) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseStaticsMethods.GetTitle(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBaseStatics, element);

        public static void SetTitle(global::Microsoft.UI.Xaml.DependencyObject element, string value) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseStaticsMethods.SetTitle(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBaseStatics, element, value);

        public static global::Microsoft.UI.Xaml.DependencyProperty TitleProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseStaticsMethods.get_TitleProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBaseStatics);

        public static new PickerFlyoutBase FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PickerFlyoutBase>.FromAbi(thisPtr);
        }

        protected internal PickerFlyoutBase(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseMethods.IID);

        }


        public static bool operator ==(PickerFlyoutBase x, PickerFlyoutBase y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PickerFlyoutBase x, PickerFlyoutBase y) => !(x == y);
        public bool Equals(PickerFlyoutBase other) => this == other;
        public override bool Equals(object obj) => obj is PickerFlyoutBase that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected PickerFlyoutBase(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(PickerFlyoutBase);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected virtual void OnConfirmed() => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseOverridesMethods.OnConfirmed(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBaseOverrides);

        void IPickerFlyoutBaseOverrides.OnConfirmed() => OnConfirmed();
        protected virtual bool ShouldShowConfirmationButtons() => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseOverridesMethods.ShouldShowConfirmationButtons(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBaseOverrides);

        bool IPickerFlyoutBaseOverrides.ShouldShowConfirmationButtons() => ShouldShowConfirmationButtons();
        protected override bool IsOverridableInterface(Guid iid) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseOverridesMethods.IID == iid || base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderItem))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderItemRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPivotHeaderItem))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class PivotHeaderItem : global::Microsoft.UI.Xaml.Controls.ContentControl, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PivotHeaderItem>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPivotHeaderItem;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPivotHeaderItem()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPivotHeaderItem, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPivotHeaderItemMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPivotHeaderItem;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPivotHeaderItem => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPivotHeaderItem ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPivotHeaderItem();



        private static class _IPivotHeaderItemFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPivotHeaderItemFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPivotHeaderItemFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPivotHeaderItemFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPivotHeaderItemFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderItem", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPivotHeaderItemFactoryMethods.IID);
                }
            }
        }

        public PivotHeaderItem():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(PivotHeaderItem);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IPivotHeaderItemFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPivotHeaderItemFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPivotHeaderItemMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new PivotHeaderItem FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PivotHeaderItem>.FromAbi(thisPtr);
        }

        protected internal PivotHeaderItem(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPivotHeaderItemMethods.IID);

        }


        public static bool operator ==(PivotHeaderItem x, PivotHeaderItem y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PivotHeaderItem x, PivotHeaderItem y) => !(x == y);
        public bool Equals(PivotHeaderItem other) => this == other;
        public override bool Equals(object obj) => obj is PivotHeaderItem that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected PivotHeaderItem(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(PivotHeaderItem);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderPanel))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderPanelRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPivotHeaderPanel))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class PivotHeaderPanel : global::Microsoft.UI.Xaml.Controls.Canvas, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PivotHeaderPanel>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPivotHeaderPanel => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_PivotHeaderPanel;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_PivotHeaderPanel
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_PivotHeaderPanel;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_PivotHeaderPanel = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderPanel");
                }
            }
        }

        public PivotHeaderPanel() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_PivotHeaderPanel, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPivotHeaderPanelMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new PivotHeaderPanel FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PivotHeaderPanel>.FromAbi(thisPtr);
        }

        internal PivotHeaderPanel(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPivotHeaderPanelMethods.IID);

        }


        public static bool operator ==(PivotHeaderPanel x, PivotHeaderPanel y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PivotHeaderPanel x, PivotHeaderPanel y) => !(x == y);
        public bool Equals(PivotHeaderPanel other) => this == other;
        public override bool Equals(object obj) => obj is PivotHeaderPanel that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.PivotPanel))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.PivotPanelRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPivotPanel))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class PivotPanel : global::Microsoft.UI.Xaml.Controls.Panel, IScrollSnapPointsInfo, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PivotPanel>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPivotPanel => _inner;
        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo();



        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_PivotPanel;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_PivotPanel
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_PivotPanel;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_PivotPanel = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.PivotPanel");
                }
            }
        }

        public PivotPanel() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_PivotPanel, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPivotPanelMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new PivotPanel FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PivotPanel>.FromAbi(thisPtr);
        }

        internal PivotPanel(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPivotPanelMethods.IID);

        }


        public static bool operator ==(PivotPanel x, PivotPanel y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PivotPanel x, PivotPanel y) => !(x == y);
        public bool Equals(PivotPanel other) => this == other;
        public override bool Equals(object obj) => obj is PivotPanel that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::System.Collections.Generic.IReadOnlyList<float> GetIrregularSnapPoints(global::Microsoft.UI.Xaml.Controls.Orientation orientation, SnapPointsAlignment alignment) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.GetIrregularSnapPoints(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo, orientation, alignment);

        public float GetRegularSnapPoints(global::Microsoft.UI.Xaml.Controls.Orientation orientation, SnapPointsAlignment alignment, out float offset) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.GetRegularSnapPoints(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo, orientation, alignment, out offset);

        public event global::System.EventHandler<object> HorizontalSnapPointsChanged
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.Get_HorizontalSnapPointsChanged2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.Get_HorizontalSnapPointsChanged2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::System.EventHandler<object> VerticalSnapPointsChanged
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.Get_VerticalSnapPointsChanged2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.Get_VerticalSnapPointsChanged2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo, (IWinRTObject)this).Unsubscribe(value);
        }

        public bool AreHorizontalSnapPointsRegular => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.get_AreHorizontalSnapPointsRegular(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo);

        public bool AreVerticalSnapPointsRegular => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.get_AreVerticalSnapPointsRegular(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<PlacementMode>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum PlacementMode : int
    {
        Bottom = unchecked((int)0x2),
        Left = unchecked((int)0x9),
        Mouse = unchecked((int)0x7),
        Right = unchecked((int)0x4),
        Top = unchecked((int)0xa),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.Popup))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.PopupRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPopup))]
    [global::Microsoft.UI.Xaml.Markup.ContentProperty(Name = @"Child")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class Popup : global::Microsoft.UI.Xaml.FrameworkElement, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<Popup>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup => _inner;
        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup2;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopup2Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup2;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup2 => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup2 ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup2();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup3;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup3()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup3, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopup3Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup3;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup3 => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup3 ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup3();



        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_Popup;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_Popup
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_Popup;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_Popup = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.Popup");
                }
            }
        }

        public Popup() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_Popup, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.Popup").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopupStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopupStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopupStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopupStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.Popup", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupStaticsMethods.IID);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopupStatics2;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopupStatics2
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopupStatics2;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopupStatics2 = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.Popup", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupStatics2Methods.IID);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopupStatics3;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopupStatics3
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopupStatics3;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopupStatics3 = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.Popup", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupStatics3Methods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty ChildProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupStaticsMethods.get_ChildProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopupStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ChildTransitionsProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupStaticsMethods.get_ChildTransitionsProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopupStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty DesiredPlacementProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupStatics2Methods.get_DesiredPlacementProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopupStatics2);

        public static global::Microsoft.UI.Xaml.DependencyProperty HorizontalOffsetProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupStaticsMethods.get_HorizontalOffsetProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopupStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty IsLightDismissEnabledProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupStaticsMethods.get_IsLightDismissEnabledProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopupStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty IsOpenProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupStaticsMethods.get_IsOpenProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopupStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty LightDismissOverlayModeProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupStaticsMethods.get_LightDismissOverlayModeProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopupStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty PlacementTargetProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupStatics2Methods.get_PlacementTargetProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopupStatics2);

        public static global::Microsoft.UI.Xaml.DependencyProperty ShouldConstrainToRootBoundsProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupStaticsMethods.get_ShouldConstrainToRootBoundsProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopupStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SystemBackdropProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupStatics3Methods.get_SystemBackdropProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopupStatics3);

        public static global::Microsoft.UI.Xaml.DependencyProperty VerticalOffsetProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupStaticsMethods.get_VerticalOffsetProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopupStatics);

        public static new Popup FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<Popup>.FromAbi(thisPtr);
        }

        internal Popup(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupMethods.IID);

        }


        public static bool operator ==(Popup x, Popup y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(Popup x, Popup y) => !(x == y);
        public bool Equals(Popup other) => this == other;
        public override bool Equals(object obj) => obj is Popup that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public event global::System.EventHandler<object> Closed
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupMethods.Get_Closed2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupMethods.Get_Closed2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::System.EventHandler<object> Opened
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupMethods.Get_Opened2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupMethods.Get_Opened2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::System.EventHandler<object> ActualPlacementChanged
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopup2Methods.Get_ActualPlacementChanged2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopup2Methods.Get_ActualPlacementChanged2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup2, (IWinRTObject)this).Unsubscribe(value);
        }

        public PopupPlacementMode ActualPlacement => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopup2Methods.get_ActualPlacement(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup2);

        public global::Microsoft.UI.Xaml.UIElement Child
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupMethods.get_Child(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupMethods.set_Child(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup, value);
        }

        public global::Microsoft.UI.Xaml.Media.Animation.TransitionCollection ChildTransitions
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupMethods.get_ChildTransitions(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupMethods.set_ChildTransitions(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup, value);
        }

        public PopupPlacementMode DesiredPlacement
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopup2Methods.get_DesiredPlacement(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup2);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopup2Methods.set_DesiredPlacement(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup2, value);
        }

        public double HorizontalOffset
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupMethods.get_HorizontalOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupMethods.set_HorizontalOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup, value);
        }

        public bool IsConstrainedToRootBounds => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupMethods.get_IsConstrainedToRootBounds(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup);

        public bool IsLightDismissEnabled
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupMethods.get_IsLightDismissEnabled(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupMethods.set_IsLightDismissEnabled(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup, value);
        }

        public bool IsOpen
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupMethods.get_IsOpen(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupMethods.set_IsOpen(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup, value);
        }

        public global::Microsoft.UI.Xaml.Controls.LightDismissOverlayMode LightDismissOverlayMode
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupMethods.get_LightDismissOverlayMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupMethods.set_LightDismissOverlayMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup, value);
        }

        public global::Microsoft.UI.Xaml.FrameworkElement PlacementTarget
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopup2Methods.get_PlacementTarget(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup2);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopup2Methods.set_PlacementTarget(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup2, value);
        }

        public bool ShouldConstrainToRootBounds
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupMethods.get_ShouldConstrainToRootBounds(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupMethods.set_ShouldConstrainToRootBounds(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup, value);
        }

        public global::Microsoft.UI.Xaml.Media.SystemBackdrop SystemBackdrop
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopup3Methods.get_SystemBackdrop(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup3);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopup3Methods.set_SystemBackdrop(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup3, value);
        }

        public double VerticalOffset
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupMethods.get_VerticalOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupMethods.set_VerticalOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IPopup, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<PopupPlacementMode>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    public enum PopupPlacementMode : int
    {
        Auto = unchecked((int)0),
        Top = unchecked((int)0x1),
        Bottom = unchecked((int)0x2),
        Left = unchecked((int)0x3),
        Right = unchecked((int)0x4),
        TopEdgeAlignedLeft = unchecked((int)0x5),
        TopEdgeAlignedRight = unchecked((int)0x6),
        BottomEdgeAlignedLeft = unchecked((int)0x7),
        BottomEdgeAlignedRight = unchecked((int)0x8),
        LeftEdgeAlignedTop = unchecked((int)0x9),
        LeftEdgeAlignedBottom = unchecked((int)0xa),
        RightEdgeAlignedTop = unchecked((int)0xb),
        RightEdgeAlignedBottom = unchecked((int)0xc),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.RangeBase))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.RangeBaseRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IRangeBase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class RangeBase : global::Microsoft.UI.Xaml.Controls.Control, IRangeBaseOverrides, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<RangeBase>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBase;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBase()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBase, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBase;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBase => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBase ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBase();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseOverrides;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseOverrides()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseOverrides, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseOverridesMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseOverrides;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseOverrides => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseOverrides ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseOverrides();



        private static class _IRangeBaseFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.RangeBase", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseFactoryMethods.IID);
                }
            }
        }

        protected RangeBase():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(RangeBase);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IRangeBaseFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.RangeBase").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.RangeBase", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty LargeChangeProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseStaticsMethods.get_LargeChangeProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty MaximumProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseStaticsMethods.get_MaximumProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty MinimumProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseStaticsMethods.get_MinimumProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SmallChangeProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseStaticsMethods.get_SmallChangeProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ValueProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseStaticsMethods.get_ValueProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseStatics);

        public static new RangeBase FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<RangeBase>.FromAbi(thisPtr);
        }

        protected internal RangeBase(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseMethods.IID);

        }


        public static bool operator ==(RangeBase x, RangeBase y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(RangeBase x, RangeBase y) => !(x == y);
        public bool Equals(RangeBase other) => this == other;
        public override bool Equals(object obj) => obj is RangeBase that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected RangeBase(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(RangeBase);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public event RangeBaseValueChangedEventHandler ValueChanged
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseMethods.Get_ValueChanged2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBase, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseMethods.Get_ValueChanged2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBase, (IWinRTObject)this).Unsubscribe(value);
        }

        protected virtual void OnMinimumChanged(double oldMinimum, double newMinimum) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseOverridesMethods.OnMinimumChanged(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseOverrides, oldMinimum, newMinimum);

        void IRangeBaseOverrides.OnMinimumChanged(double oldMinimum, double newMinimum) => OnMinimumChanged(oldMinimum, newMinimum);
        protected virtual void OnMaximumChanged(double oldMaximum, double newMaximum) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseOverridesMethods.OnMaximumChanged(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseOverrides, oldMaximum, newMaximum);

        void IRangeBaseOverrides.OnMaximumChanged(double oldMaximum, double newMaximum) => OnMaximumChanged(oldMaximum, newMaximum);
        protected virtual void OnValueChanged(double oldValue, double newValue) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseOverridesMethods.OnValueChanged(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseOverrides, oldValue, newValue);

        void IRangeBaseOverrides.OnValueChanged(double oldValue, double newValue) => OnValueChanged(oldValue, newValue);
        public double LargeChange
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseMethods.get_LargeChange(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBase);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseMethods.set_LargeChange(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBase, value);
        }

        public double Maximum
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseMethods.get_Maximum(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBase);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseMethods.set_Maximum(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBase, value);
        }

        public double Minimum
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseMethods.get_Minimum(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBase);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseMethods.set_Minimum(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBase, value);
        }

        public double SmallChange
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseMethods.get_SmallChange(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBase);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseMethods.set_SmallChange(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBase, value);
        }

        public double Value
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseMethods.get_Value(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBase);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseMethods.set_Value(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBase, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseOverridesMethods.IID == iid || base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IRangeBaseValueChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class RangeBaseValueChangedEventArgs : global::Microsoft.UI.Xaml.RoutedEventArgs, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<RangeBaseValueChangedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseValueChangedEventArgs => _inner;


        public static new RangeBaseValueChangedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<RangeBaseValueChangedEventArgs>.FromAbi(thisPtr);
        }

        internal RangeBaseValueChangedEventArgs(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseValueChangedEventArgsMethods.IID);

        }


        public static bool operator ==(RangeBaseValueChangedEventArgs x, RangeBaseValueChangedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(RangeBaseValueChangedEventArgs x, RangeBaseValueChangedEventArgs y) => !(x == y);
        public bool Equals(RangeBaseValueChangedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is RangeBaseValueChangedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double NewValue => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseValueChangedEventArgsMethods.get_NewValue(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseValueChangedEventArgs);

        public double OldValue => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseValueChangedEventArgsMethods.get_OldValue(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseValueChangedEventArgs);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public delegate void RangeBaseValueChangedEventHandler(object sender, RangeBaseValueChangedEventArgs e);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.RepeatButton))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.RepeatButtonRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IRepeatButton))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class RepeatButton : ButtonBase, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<RepeatButton>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatButton => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_RepeatButton;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_RepeatButton
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_RepeatButton;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_RepeatButton = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.RepeatButton");
                }
            }
        }

        public RepeatButton() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_RepeatButton, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatButtonMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.RepeatButton").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatButtonStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatButtonStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatButtonStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatButtonStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.RepeatButton", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatButtonStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty DelayProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatButtonStaticsMethods.get_DelayProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatButtonStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty IntervalProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatButtonStaticsMethods.get_IntervalProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatButtonStatics);

        public static new RepeatButton FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<RepeatButton>.FromAbi(thisPtr);
        }

        internal RepeatButton(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatButtonMethods.IID);

        }


        public static bool operator ==(RepeatButton x, RepeatButton y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(RepeatButton x, RepeatButton y) => !(x == y);
        public bool Equals(RepeatButton other) => this == other;
        public override bool Equals(object obj) => obj is RepeatButton that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public int Delay
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatButtonMethods.get_Delay(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatButton);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatButtonMethods.set_Delay(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatButton, value);
        }

        public int Interval
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatButtonMethods.get_Interval(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatButton);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatButtonMethods.set_Interval(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatButton, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.RepeatedScrollSnapPoint))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.RepeatedScrollSnapPointRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IRepeatedScrollSnapPoint))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    public class RepeatedScrollSnapPoint : ScrollSnapPointBase, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<RepeatedScrollSnapPoint>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatedScrollSnapPoint;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatedScrollSnapPoint()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatedScrollSnapPoint, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatedScrollSnapPointMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatedScrollSnapPoint;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatedScrollSnapPoint => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatedScrollSnapPoint ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatedScrollSnapPoint();



        private static class _IRepeatedScrollSnapPointFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, double offset, double interval, double start, double end, ScrollSnapPointsAlignment alignment, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, double, double, double, ScrollSnapPointsAlignment, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, offset, interval, start, end, alignment, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatedScrollSnapPointFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatedScrollSnapPointFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatedScrollSnapPointFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatedScrollSnapPointFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.RepeatedScrollSnapPoint", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatedScrollSnapPointFactoryMethods.IID);
                }
            }
        }

        public RepeatedScrollSnapPoint(double offset, double interval, double start, double end, ScrollSnapPointsAlignment alignment):base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(RepeatedScrollSnapPoint);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IRepeatedScrollSnapPointFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatedScrollSnapPointFactory, offset, interval, start, end, alignment, baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatedScrollSnapPointMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new RepeatedScrollSnapPoint FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<RepeatedScrollSnapPoint>.FromAbi(thisPtr);
        }

        protected internal RepeatedScrollSnapPoint(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatedScrollSnapPointMethods.IID);

        }


        public static bool operator ==(RepeatedScrollSnapPoint x, RepeatedScrollSnapPoint y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(RepeatedScrollSnapPoint x, RepeatedScrollSnapPoint y) => !(x == y);
        public bool Equals(RepeatedScrollSnapPoint other) => this == other;
        public override bool Equals(object obj) => obj is RepeatedScrollSnapPoint that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected RepeatedScrollSnapPoint(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(RepeatedScrollSnapPoint);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double End => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatedScrollSnapPointMethods.get_End(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatedScrollSnapPoint);

        public double Interval => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatedScrollSnapPointMethods.get_Interval(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatedScrollSnapPoint);

        public double Offset => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatedScrollSnapPointMethods.get_Offset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatedScrollSnapPoint);

        public double Start => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatedScrollSnapPointMethods.get_Start(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatedScrollSnapPoint);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.RepeatedZoomSnapPoint))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.RepeatedZoomSnapPointRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IRepeatedZoomSnapPoint))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    public class RepeatedZoomSnapPoint : ZoomSnapPointBase, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<RepeatedZoomSnapPoint>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatedZoomSnapPoint;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatedZoomSnapPoint()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatedZoomSnapPoint, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatedZoomSnapPointMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatedZoomSnapPoint;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatedZoomSnapPoint => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatedZoomSnapPoint ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatedZoomSnapPoint();



        private static class _IRepeatedZoomSnapPointFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, double offset, double interval, double start, double end, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, double, double, double, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, offset, interval, start, end, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatedZoomSnapPointFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatedZoomSnapPointFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatedZoomSnapPointFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatedZoomSnapPointFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.RepeatedZoomSnapPoint", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatedZoomSnapPointFactoryMethods.IID);
                }
            }
        }

        public RepeatedZoomSnapPoint(double offset, double interval, double start, double end):base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(RepeatedZoomSnapPoint);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IRepeatedZoomSnapPointFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatedZoomSnapPointFactory, offset, interval, start, end, baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatedZoomSnapPointMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new RepeatedZoomSnapPoint FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<RepeatedZoomSnapPoint>.FromAbi(thisPtr);
        }

        protected internal RepeatedZoomSnapPoint(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatedZoomSnapPointMethods.IID);

        }


        public static bool operator ==(RepeatedZoomSnapPoint x, RepeatedZoomSnapPoint y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(RepeatedZoomSnapPoint x, RepeatedZoomSnapPoint y) => !(x == y);
        public bool Equals(RepeatedZoomSnapPoint other) => this == other;
        public override bool Equals(object obj) => obj is RepeatedZoomSnapPoint that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected RepeatedZoomSnapPoint(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(RepeatedZoomSnapPoint);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double End => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatedZoomSnapPointMethods.get_End(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatedZoomSnapPoint);

        public double Interval => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatedZoomSnapPointMethods.get_Interval(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatedZoomSnapPoint);

        public double Offset => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatedZoomSnapPointMethods.get_Offset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatedZoomSnapPoint);

        public double Start => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatedZoomSnapPointMethods.get_Start(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IRepeatedZoomSnapPoint);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollBar))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollBarRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IScrollBar))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class ScrollBar : RangeBase, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ScrollBar>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollBar => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ScrollBar;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ScrollBar
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ScrollBar;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ScrollBar = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ScrollBar");
                }
            }
        }

        public ScrollBar() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ScrollBar, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollBarMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ScrollBar").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollBarStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollBarStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollBarStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollBarStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ScrollBar", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollBarStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty IndicatorModeProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollBarStaticsMethods.get_IndicatorModeProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollBarStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty OrientationProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollBarStaticsMethods.get_OrientationProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollBarStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ViewportSizeProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollBarStaticsMethods.get_ViewportSizeProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollBarStatics);

        public static new ScrollBar FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ScrollBar>.FromAbi(thisPtr);
        }

        internal ScrollBar(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollBarMethods.IID);

        }


        public static bool operator ==(ScrollBar x, ScrollBar y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ScrollBar x, ScrollBar y) => !(x == y);
        public bool Equals(ScrollBar other) => this == other;
        public override bool Equals(object obj) => obj is ScrollBar that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public event ScrollEventHandler Scroll
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollBarMethods.Get_Scroll2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollBar, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollBarMethods.Get_Scroll2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollBar, (IWinRTObject)this).Unsubscribe(value);
        }

        public ScrollingIndicatorMode IndicatorMode
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollBarMethods.get_IndicatorMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollBar);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollBarMethods.set_IndicatorMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollBar, value);
        }

        public global::Microsoft.UI.Xaml.Controls.Orientation Orientation
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollBarMethods.get_Orientation(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollBar);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollBarMethods.set_Orientation(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollBar, value);
        }

        public double ViewportSize
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollBarMethods.get_ViewportSize(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollBar);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollBarMethods.set_ViewportSize(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollBar, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IScrollControllerAddScrollVelocityRequestedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    public sealed class ScrollControllerAddScrollVelocityRequestedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ScrollControllerAddScrollVelocityRequestedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerAddScrollVelocityRequestedEventArgs => _inner;


        private static class _IScrollControllerAddScrollVelocityRequestedEventArgsFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, float offsetVelocity, global::System.Nullable<float> inertiaDecayRate)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __inertiaDecayRate = default;
                IntPtr __retval = default;
                try
                {
                    __inertiaDecayRate = MarshalInterface<global::System.Nullable<float>>.CreateMarshaler2(inertiaDecayRate, global::ABI.System.Nullable<float>.PIID);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, offsetVelocity, MarshalInspectable<object>.GetAbi(__inertiaDecayRate), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__inertiaDecayRate);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerAddScrollVelocityRequestedEventArgsFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerAddScrollVelocityRequestedEventArgsFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerAddScrollVelocityRequestedEventArgsFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerAddScrollVelocityRequestedEventArgsFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerAddScrollVelocityRequestedEventArgsFactoryMethods.IID);
                }
            }
        }

        public ScrollControllerAddScrollVelocityRequestedEventArgs(float offsetVelocity, global::System.Nullable<float> inertiaDecayRate) 
        { 
        IntPtr ptr = (_IScrollControllerAddScrollVelocityRequestedEventArgsFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerAddScrollVelocityRequestedEventArgsFactory, offsetVelocity, inertiaDecayRate)); 
        try 
        { 
        _inner = ComWrappersSupport.GetObjectReferenceForInterface(ptr, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerAddScrollVelocityRequestedEventArgsMethods.IID, false); 

        } 
        finally 
        { 
        MarshalInspectable<object>.DisposeAbi(ptr); 
        }

        ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
        ComWrappersHelper.Init(_inner, false);
        }

        public static ScrollControllerAddScrollVelocityRequestedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ScrollControllerAddScrollVelocityRequestedEventArgs>.FromAbi(thisPtr);
        }

        internal ScrollControllerAddScrollVelocityRequestedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerAddScrollVelocityRequestedEventArgsMethods.IID);

        }


        public static bool operator ==(ScrollControllerAddScrollVelocityRequestedEventArgs x, ScrollControllerAddScrollVelocityRequestedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ScrollControllerAddScrollVelocityRequestedEventArgs x, ScrollControllerAddScrollVelocityRequestedEventArgs y) => !(x == y);
        public bool Equals(ScrollControllerAddScrollVelocityRequestedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is ScrollControllerAddScrollVelocityRequestedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public int CorrelationId
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerAddScrollVelocityRequestedEventArgsMethods.get_CorrelationId(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerAddScrollVelocityRequestedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerAddScrollVelocityRequestedEventArgsMethods.set_CorrelationId(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerAddScrollVelocityRequestedEventArgs, value);
        }

        public global::System.Nullable<float> InertiaDecayRate => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerAddScrollVelocityRequestedEventArgsMethods.get_InertiaDecayRate(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerAddScrollVelocityRequestedEventArgs);

        public float OffsetVelocity => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerAddScrollVelocityRequestedEventArgsMethods.get_OffsetVelocity(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerAddScrollVelocityRequestedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IScrollControllerPanRequestedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    public sealed class ScrollControllerPanRequestedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ScrollControllerPanRequestedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerPanRequestedEventArgs => _inner;


        private static class _IScrollControllerPanRequestedEventArgsFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, global::Microsoft.UI.Input.PointerPoint pointerPoint)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __pointerPoint = default;
                IntPtr __retval = default;
                try
                {
                    __pointerPoint = global::ABI.Microsoft.UI.Input.PointerPoint.CreateMarshaler2(pointerPoint);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__pointerPoint), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__pointerPoint);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerPanRequestedEventArgsFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerPanRequestedEventArgsFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerPanRequestedEventArgsFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerPanRequestedEventArgsFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanRequestedEventArgsFactoryMethods.IID);
                }
            }
        }

        public ScrollControllerPanRequestedEventArgs(global::Microsoft.UI.Input.PointerPoint pointerPoint) 
        { 
        IntPtr ptr = (_IScrollControllerPanRequestedEventArgsFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerPanRequestedEventArgsFactory, pointerPoint)); 
        try 
        { 
        _inner = ComWrappersSupport.GetObjectReferenceForInterface(ptr, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanRequestedEventArgsMethods.IID, false); 

        } 
        finally 
        { 
        MarshalInspectable<object>.DisposeAbi(ptr); 
        }

        ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
        ComWrappersHelper.Init(_inner, false);
        }

        public static ScrollControllerPanRequestedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ScrollControllerPanRequestedEventArgs>.FromAbi(thisPtr);
        }

        internal ScrollControllerPanRequestedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanRequestedEventArgsMethods.IID);

        }


        public static bool operator ==(ScrollControllerPanRequestedEventArgs x, ScrollControllerPanRequestedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ScrollControllerPanRequestedEventArgs x, ScrollControllerPanRequestedEventArgs y) => !(x == y);
        public bool Equals(ScrollControllerPanRequestedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is ScrollControllerPanRequestedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanRequestedEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerPanRequestedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanRequestedEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerPanRequestedEventArgs, value);
        }

        public global::Microsoft.UI.Input.PointerPoint PointerPoint => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanRequestedEventArgsMethods.get_PointerPoint(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerPanRequestedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IScrollControllerScrollByRequestedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    public sealed class ScrollControllerScrollByRequestedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ScrollControllerScrollByRequestedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollByRequestedEventArgs => _inner;


        private static class _IScrollControllerScrollByRequestedEventArgsFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, double offsetDelta, global::Microsoft.UI.Xaml.Controls.ScrollingScrollOptions options)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __options = default;
                IntPtr __retval = default;
                try
                {
                    __options = global::ABI.Microsoft.UI.Xaml.Controls.ScrollingScrollOptions.CreateMarshaler2(options);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, offsetDelta, MarshalInspectable<object>.GetAbi(__options), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__options);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollByRequestedEventArgsFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollByRequestedEventArgsFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollByRequestedEventArgsFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollByRequestedEventArgsFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollByRequestedEventArgsFactoryMethods.IID);
                }
            }
        }

        public ScrollControllerScrollByRequestedEventArgs(double offsetDelta, global::Microsoft.UI.Xaml.Controls.ScrollingScrollOptions options) 
        { 
        IntPtr ptr = (_IScrollControllerScrollByRequestedEventArgsFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollByRequestedEventArgsFactory, offsetDelta, options)); 
        try 
        { 
        _inner = ComWrappersSupport.GetObjectReferenceForInterface(ptr, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollByRequestedEventArgsMethods.IID, false); 

        } 
        finally 
        { 
        MarshalInspectable<object>.DisposeAbi(ptr); 
        }

        ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
        ComWrappersHelper.Init(_inner, false);
        }

        public static ScrollControllerScrollByRequestedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ScrollControllerScrollByRequestedEventArgs>.FromAbi(thisPtr);
        }

        internal ScrollControllerScrollByRequestedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollByRequestedEventArgsMethods.IID);

        }


        public static bool operator ==(ScrollControllerScrollByRequestedEventArgs x, ScrollControllerScrollByRequestedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ScrollControllerScrollByRequestedEventArgs x, ScrollControllerScrollByRequestedEventArgs y) => !(x == y);
        public bool Equals(ScrollControllerScrollByRequestedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is ScrollControllerScrollByRequestedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public int CorrelationId
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollByRequestedEventArgsMethods.get_CorrelationId(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollByRequestedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollByRequestedEventArgsMethods.set_CorrelationId(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollByRequestedEventArgs, value);
        }

        public double OffsetDelta => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollByRequestedEventArgsMethods.get_OffsetDelta(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollByRequestedEventArgs);

        public global::Microsoft.UI.Xaml.Controls.ScrollingScrollOptions Options => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollByRequestedEventArgsMethods.get_Options(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollByRequestedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IScrollControllerScrollToRequestedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    public sealed class ScrollControllerScrollToRequestedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ScrollControllerScrollToRequestedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollToRequestedEventArgs => _inner;


        private static class _IScrollControllerScrollToRequestedEventArgsFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, double offset, global::Microsoft.UI.Xaml.Controls.ScrollingScrollOptions options)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __options = default;
                IntPtr __retval = default;
                try
                {
                    __options = global::ABI.Microsoft.UI.Xaml.Controls.ScrollingScrollOptions.CreateMarshaler2(options);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, offset, MarshalInspectable<object>.GetAbi(__options), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__options);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollToRequestedEventArgsFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollToRequestedEventArgsFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollToRequestedEventArgsFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollToRequestedEventArgsFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollToRequestedEventArgsFactoryMethods.IID);
                }
            }
        }

        public ScrollControllerScrollToRequestedEventArgs(double offset, global::Microsoft.UI.Xaml.Controls.ScrollingScrollOptions options) 
        { 
        IntPtr ptr = (_IScrollControllerScrollToRequestedEventArgsFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollToRequestedEventArgsFactory, offset, options)); 
        try 
        { 
        _inner = ComWrappersSupport.GetObjectReferenceForInterface(ptr, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollToRequestedEventArgsMethods.IID, false); 

        } 
        finally 
        { 
        MarshalInspectable<object>.DisposeAbi(ptr); 
        }

        ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
        ComWrappersHelper.Init(_inner, false);
        }

        public static ScrollControllerScrollToRequestedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ScrollControllerScrollToRequestedEventArgs>.FromAbi(thisPtr);
        }

        internal ScrollControllerScrollToRequestedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollToRequestedEventArgsMethods.IID);

        }


        public static bool operator ==(ScrollControllerScrollToRequestedEventArgs x, ScrollControllerScrollToRequestedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ScrollControllerScrollToRequestedEventArgs x, ScrollControllerScrollToRequestedEventArgs y) => !(x == y);
        public bool Equals(ScrollControllerScrollToRequestedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is ScrollControllerScrollToRequestedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public int CorrelationId
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollToRequestedEventArgsMethods.get_CorrelationId(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollToRequestedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollToRequestedEventArgsMethods.set_CorrelationId(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollToRequestedEventArgs, value);
        }

        public double Offset => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollToRequestedEventArgsMethods.get_Offset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollToRequestedEventArgs);

        public global::Microsoft.UI.Xaml.Controls.ScrollingScrollOptions Options => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollToRequestedEventArgsMethods.get_Options(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollToRequestedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IScrollEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class ScrollEventArgs : global::Microsoft.UI.Xaml.RoutedEventArgs, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ScrollEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollEventArgs => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ScrollEventArgs;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ScrollEventArgs
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ScrollEventArgs;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ScrollEventArgs = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ScrollEventArgs");
                }
            }
        }

        public ScrollEventArgs() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ScrollEventArgs, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollEventArgsMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new ScrollEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ScrollEventArgs>.FromAbi(thisPtr);
        }

        internal ScrollEventArgs(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollEventArgsMethods.IID);

        }


        public static bool operator ==(ScrollEventArgs x, ScrollEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ScrollEventArgs x, ScrollEventArgs y) => !(x == y);
        public bool Equals(ScrollEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is ScrollEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double NewValue => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollEventArgsMethods.get_NewValue(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollEventArgs);

        public ScrollEventType ScrollEventType => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollEventArgsMethods.get_ScrollEventType(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollEventArgs);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public delegate void ScrollEventHandler(object sender, ScrollEventArgs e);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<ScrollEventType>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum ScrollEventType : int
    {
        SmallDecrement = unchecked((int)0),
        SmallIncrement = unchecked((int)0x1),
        LargeDecrement = unchecked((int)0x2),
        LargeIncrement = unchecked((int)0x3),
        ThumbPosition = unchecked((int)0x4),
        ThumbTrack = unchecked((int)0x5),
        First = unchecked((int)0x6),
        Last = unchecked((int)0x7),
        EndScroll = unchecked((int)0x8),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenterRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IScrollPresenter))]
    [global::Microsoft.UI.Xaml.CustomAttributes.MUXPropertyChangedCallback(enable = true)]
    [global::Microsoft.UI.Xaml.CustomAttributes.MUXPropertyChangedCallbackMethodName(value = @"OnPropertyChanged")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    [global::Windows.UI.Xaml.Markup.ContentProperty(Name = @"Content")]
    public class ScrollPresenter : global::Microsoft.UI.Xaml.FrameworkElement, global::Microsoft.UI.Xaml.Controls.IScrollAnchorProvider, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ScrollPresenter>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter2;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenter2Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter2;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter2 => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter2 ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter2();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_IScrollAnchorProvider;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_IScrollAnchorProvider()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_IScrollAnchorProvider, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.IScrollAnchorProviderMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_IScrollAnchorProvider;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_IScrollAnchorProvider => ___objRef_global__Microsoft_UI_Xaml_Controls_IScrollAnchorProvider ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_IScrollAnchorProvider();



        private static class _IScrollPresenterFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterFactoryMethods.IID);
                }
            }
        }

        public ScrollPresenter():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(ScrollPresenter);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IScrollPresenterFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty BackgroundProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterStaticsMethods.get_BackgroundProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ComputedHorizontalScrollModeProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterStaticsMethods.get_ComputedHorizontalScrollModeProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ComputedVerticalScrollModeProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterStaticsMethods.get_ComputedVerticalScrollModeProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ContentOrientationProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterStaticsMethods.get_ContentOrientationProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ContentProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterStaticsMethods.get_ContentProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty HorizontalAnchorRatioProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterStaticsMethods.get_HorizontalAnchorRatioProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty HorizontalScrollChainModeProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterStaticsMethods.get_HorizontalScrollChainModeProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty HorizontalScrollModeProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterStaticsMethods.get_HorizontalScrollModeProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty HorizontalScrollRailModeProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterStaticsMethods.get_HorizontalScrollRailModeProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty IgnoredInputKindsProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterStaticsMethods.get_IgnoredInputKindsProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty MaxZoomFactorProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterStaticsMethods.get_MaxZoomFactorProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty MinZoomFactorProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterStaticsMethods.get_MinZoomFactorProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty VerticalAnchorRatioProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterStaticsMethods.get_VerticalAnchorRatioProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty VerticalScrollChainModeProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterStaticsMethods.get_VerticalScrollChainModeProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty VerticalScrollModeProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterStaticsMethods.get_VerticalScrollModeProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty VerticalScrollRailModeProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterStaticsMethods.get_VerticalScrollRailModeProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ZoomChainModeProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterStaticsMethods.get_ZoomChainModeProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ZoomModeProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterStaticsMethods.get_ZoomModeProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterStatics);

        public static new ScrollPresenter FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ScrollPresenter>.FromAbi(thisPtr);
        }

        protected internal ScrollPresenter(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.IID);

        }


        public static bool operator ==(ScrollPresenter x, ScrollPresenter y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ScrollPresenter x, ScrollPresenter y) => !(x == y);
        public bool Equals(ScrollPresenter other) => this == other;
        public override bool Equals(object obj) => obj is ScrollPresenter that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected ScrollPresenter(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(ScrollPresenter);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public int ScrollTo(double horizontalOffset, double verticalOffset) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.ScrollTo(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, horizontalOffset, verticalOffset);

        public int ScrollTo(double horizontalOffset, double verticalOffset, global::Microsoft.UI.Xaml.Controls.ScrollingScrollOptions options) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.ScrollTo(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, horizontalOffset, verticalOffset, options);

        public int ScrollBy(double horizontalOffsetDelta, double verticalOffsetDelta) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.ScrollBy(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, horizontalOffsetDelta, verticalOffsetDelta);

        public int ScrollBy(double horizontalOffsetDelta, double verticalOffsetDelta, global::Microsoft.UI.Xaml.Controls.ScrollingScrollOptions options) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.ScrollBy(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, horizontalOffsetDelta, verticalOffsetDelta, options);

        public int AddScrollVelocity(global::System.Numerics.Vector2 offsetsVelocity, global::System.Nullable<global::System.Numerics.Vector2> inertiaDecayRate) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.AddScrollVelocity(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, offsetsVelocity, inertiaDecayRate);

        public int ZoomTo(float zoomFactor, global::System.Nullable<global::System.Numerics.Vector2> centerPoint) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.ZoomTo(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, zoomFactor, centerPoint);

        public int ZoomTo(float zoomFactor, global::System.Nullable<global::System.Numerics.Vector2> centerPoint, global::Microsoft.UI.Xaml.Controls.ScrollingZoomOptions options) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.ZoomTo(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, zoomFactor, centerPoint, options);

        public int ZoomBy(float zoomFactorDelta, global::System.Nullable<global::System.Numerics.Vector2> centerPoint) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.ZoomBy(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, zoomFactorDelta, centerPoint);

        public int ZoomBy(float zoomFactorDelta, global::System.Nullable<global::System.Numerics.Vector2> centerPoint, global::Microsoft.UI.Xaml.Controls.ScrollingZoomOptions options) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.ZoomBy(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, zoomFactorDelta, centerPoint, options);

        public int AddZoomVelocity(float zoomFactorVelocity, global::System.Nullable<global::System.Numerics.Vector2> centerPoint, global::System.Nullable<float> inertiaDecayRate) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.AddZoomVelocity(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, zoomFactorVelocity, centerPoint, inertiaDecayRate);

        public event global::Windows.Foundation.TypedEventHandler<ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingAnchorRequestedEventArgs> AnchorRequested
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.Get_AnchorRequested2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.Get_AnchorRequested2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingBringingIntoViewEventArgs> BringingIntoView
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.Get_BringingIntoView2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.Get_BringingIntoView2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<ScrollPresenter, object> ExtentChanged
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.Get_ExtentChanged2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.Get_ExtentChanged2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingScrollAnimationStartingEventArgs> ScrollAnimationStarting
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.Get_ScrollAnimationStarting2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.Get_ScrollAnimationStarting2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingScrollCompletedEventArgs> ScrollCompleted
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.Get_ScrollCompleted2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.Get_ScrollCompleted2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<ScrollPresenter, object> StateChanged
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.Get_StateChanged2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.Get_StateChanged2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<ScrollPresenter, object> ViewChanged
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.Get_ViewChanged2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.Get_ViewChanged2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingZoomAnimationStartingEventArgs> ZoomAnimationStarting
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.Get_ZoomAnimationStarting2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.Get_ZoomAnimationStarting2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingZoomCompletedEventArgs> ZoomCompleted
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.Get_ZoomCompleted2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.Get_ZoomCompleted2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingScrollStartingEventArgs> ScrollStarting
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenter2Methods.Get_ScrollStarting2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenter2Methods.Get_ScrollStarting2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter2, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingZoomStartingEventArgs> ZoomStarting
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenter2Methods.Get_ZoomStarting2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenter2Methods.Get_ZoomStarting2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter2, (IWinRTObject)this).Unsubscribe(value);
        }

        public void RegisterAnchorCandidate(global::Microsoft.UI.Xaml.UIElement element) => global::ABI.Microsoft.UI.Xaml.Controls.IScrollAnchorProviderMethods.RegisterAnchorCandidate(_objRef_global__Microsoft_UI_Xaml_Controls_IScrollAnchorProvider, element);

        public void UnregisterAnchorCandidate(global::Microsoft.UI.Xaml.UIElement element) => global::ABI.Microsoft.UI.Xaml.Controls.IScrollAnchorProviderMethods.UnregisterAnchorCandidate(_objRef_global__Microsoft_UI_Xaml_Controls_IScrollAnchorProvider, element);

        public global::Microsoft.UI.Xaml.Media.Brush Background
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_Background(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.set_Background(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode ComputedHorizontalScrollMode => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_ComputedHorizontalScrollMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);

        public global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode ComputedVerticalScrollMode => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_ComputedVerticalScrollMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);

        public global::Microsoft.UI.Xaml.UIElement Content
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_Content(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.set_Content(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Controls.ScrollingContentOrientation ContentOrientation
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_ContentOrientation(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.set_ContentOrientation(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, value);
        }

        public global::Microsoft.UI.Xaml.UIElement CurrentAnchor => global::ABI.Microsoft.UI.Xaml.Controls.IScrollAnchorProviderMethods.get_CurrentAnchor(_objRef_global__Microsoft_UI_Xaml_Controls_IScrollAnchorProvider);

        public global::Microsoft.UI.Composition.CompositionPropertySet ExpressionAnimationSources => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_ExpressionAnimationSources(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);

        public double ExtentHeight => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_ExtentHeight(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);

        public double ExtentWidth => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_ExtentWidth(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);

        public double HorizontalAnchorRatio
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_HorizontalAnchorRatio(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.set_HorizontalAnchorRatio(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, value);
        }

        public double HorizontalOffset => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_HorizontalOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);

        public global::Microsoft.UI.Xaml.Controls.ScrollingChainMode HorizontalScrollChainMode
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_HorizontalScrollChainMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.set_HorizontalScrollChainMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, value);
        }

        public IScrollController HorizontalScrollController
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_HorizontalScrollController(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.set_HorizontalScrollController(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode HorizontalScrollMode
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_HorizontalScrollMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.set_HorizontalScrollMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Controls.ScrollingRailMode HorizontalScrollRailMode
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_HorizontalScrollRailMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.set_HorizontalScrollRailMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, value);
        }

        public global::System.Collections.Generic.IList<ScrollSnapPointBase> HorizontalSnapPoints => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_HorizontalSnapPoints(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);

        public global::Microsoft.UI.Xaml.Controls.ScrollingInputKinds IgnoredInputKinds
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_IgnoredInputKinds(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.set_IgnoredInputKinds(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, value);
        }

        public double MaxZoomFactor
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_MaxZoomFactor(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.set_MaxZoomFactor(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, value);
        }

        public double MinZoomFactor
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_MinZoomFactor(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.set_MinZoomFactor(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, value);
        }

        public double ScrollableHeight => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_ScrollableHeight(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);

        public double ScrollableWidth => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_ScrollableWidth(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);

        public global::Microsoft.UI.Xaml.Controls.ScrollingInteractionState State => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_State(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);

        public double VerticalAnchorRatio
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_VerticalAnchorRatio(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.set_VerticalAnchorRatio(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, value);
        }

        public double VerticalOffset => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_VerticalOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);

        public global::Microsoft.UI.Xaml.Controls.ScrollingChainMode VerticalScrollChainMode
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_VerticalScrollChainMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.set_VerticalScrollChainMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, value);
        }

        public IScrollController VerticalScrollController
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_VerticalScrollController(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.set_VerticalScrollController(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode VerticalScrollMode
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_VerticalScrollMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.set_VerticalScrollMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, value);
        }

        public global::Microsoft.UI.Xaml.Controls.ScrollingRailMode VerticalScrollRailMode
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_VerticalScrollRailMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.set_VerticalScrollRailMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, value);
        }

        public global::System.Collections.Generic.IList<ScrollSnapPointBase> VerticalSnapPoints => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_VerticalSnapPoints(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);

        public double ViewportHeight => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_ViewportHeight(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);

        public double ViewportWidth => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_ViewportWidth(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);

        public global::Microsoft.UI.Xaml.Controls.ScrollingChainMode ZoomChainMode
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_ZoomChainMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.set_ZoomChainMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, value);
        }

        public float ZoomFactor => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_ZoomFactor(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);

        public global::Microsoft.UI.Xaml.Controls.ScrollingZoomMode ZoomMode
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_ZoomMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.set_ZoomMode(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter, value);
        }

        public global::System.Collections.Generic.IList<ZoomSnapPointBase> ZoomSnapPoints => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.get_ZoomSnapPoints(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPoint))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IScrollSnapPoint))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    public class ScrollSnapPoint : ScrollSnapPointBase, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ScrollSnapPoint>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPoint;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPoint()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPoint, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPoint;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPoint => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPoint ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPoint();



        private static class _IScrollSnapPointFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, double snapPointValue, ScrollSnapPointsAlignment alignment, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, ScrollSnapPointsAlignment, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, snapPointValue, alignment, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPoint", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointFactoryMethods.IID);
                }
            }
        }

        public ScrollSnapPoint(double snapPointValue, ScrollSnapPointsAlignment alignment):base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(ScrollSnapPoint);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IScrollSnapPointFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointFactory, snapPointValue, alignment, baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new ScrollSnapPoint FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ScrollSnapPoint>.FromAbi(thisPtr);
        }

        protected internal ScrollSnapPoint(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointMethods.IID);

        }


        public static bool operator ==(ScrollSnapPoint x, ScrollSnapPoint y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ScrollSnapPoint x, ScrollSnapPoint y) => !(x == y);
        public bool Equals(ScrollSnapPoint other) => this == other;
        public override bool Equals(object obj) => obj is ScrollSnapPoint that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected ScrollSnapPoint(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(ScrollSnapPoint);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double Value => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointMethods.get_Value(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPoint);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBaseRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IScrollSnapPointBase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    public class ScrollSnapPointBase : SnapPointBase, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ScrollSnapPointBase>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointBase;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointBase()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointBase, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointBaseMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointBase;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointBase => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointBase ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointBase();



        private static class _IScrollSnapPointBaseFactoryMethods
        {}

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointBaseFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointBaseFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointBaseFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointBaseFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointBaseFactoryMethods.IID);
                }
            }
        }

        public static new ScrollSnapPointBase FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ScrollSnapPointBase>.FromAbi(thisPtr);
        }

        protected internal ScrollSnapPointBase(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointBaseMethods.IID);

        }


        public static bool operator ==(ScrollSnapPointBase x, ScrollSnapPointBase y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ScrollSnapPointBase x, ScrollSnapPointBase y) => !(x == y);
        public bool Equals(ScrollSnapPointBase other) => this == other;
        public override bool Equals(object obj) => obj is ScrollSnapPointBase that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected ScrollSnapPointBase(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(ScrollSnapPointBase);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public ScrollSnapPointsAlignment Alignment => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointBaseMethods.get_Alignment(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointBase);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<ScrollSnapPointsAlignment>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    public enum ScrollSnapPointsAlignment : int
    {
        Near = unchecked((int)0),
        Center = unchecked((int)0x1),
        Far = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<ScrollingIndicatorMode>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum ScrollingIndicatorMode : int
    {
        None = unchecked((int)0),
        TouchIndicator = unchecked((int)0x1),
        MouseIndicator = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.Selector))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.SelectorRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ISelector))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class Selector : global::Microsoft.UI.Xaml.Controls.ItemsControl, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<Selector>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelector;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelector()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelector, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelector;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelector => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelector ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelector();



        private static class _ISelectorFactoryMethods
        {}

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.Selector", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorFactoryMethods.IID);
                }
            }
        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.Selector").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.Selector", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorStaticsMethods.IID);
                }
            }
        }

        public static bool GetIsSelectionActive(global::Microsoft.UI.Xaml.DependencyObject element) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorStaticsMethods.GetIsSelectionActive(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorStatics, element);

        public static global::Microsoft.UI.Xaml.DependencyProperty IsSynchronizedWithCurrentItemProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorStaticsMethods.get_IsSynchronizedWithCurrentItemProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SelectedIndexProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorStaticsMethods.get_SelectedIndexProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SelectedItemProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorStaticsMethods.get_SelectedItemProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SelectedValuePathProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorStaticsMethods.get_SelectedValuePathProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SelectedValueProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorStaticsMethods.get_SelectedValueProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorStatics);

        public static new Selector FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<Selector>.FromAbi(thisPtr);
        }

        protected internal Selector(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorMethods.IID);

        }


        public static bool operator ==(Selector x, Selector y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(Selector x, Selector y) => !(x == y);
        public bool Equals(Selector other) => this == other;
        public override bool Equals(object obj) => obj is Selector that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected Selector(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(Selector);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public event global::Microsoft.UI.Xaml.Controls.SelectionChangedEventHandler SelectionChanged
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorMethods.Get_SelectionChanged2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelector, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorMethods.Get_SelectionChanged2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelector, (IWinRTObject)this).Unsubscribe(value);
        }

        public global::System.Nullable<bool> IsSynchronizedWithCurrentItem
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorMethods.get_IsSynchronizedWithCurrentItem(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelector);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorMethods.set_IsSynchronizedWithCurrentItem(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelector, value);
        }

        public int SelectedIndex
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorMethods.get_SelectedIndex(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelector);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorMethods.set_SelectedIndex(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelector, value);
        }

        public object SelectedItem
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorMethods.get_SelectedItem(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelector);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorMethods.set_SelectedItem(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelector, value);
        }

        public object SelectedValue
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorMethods.get_SelectedValue(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelector);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorMethods.set_SelectedValue(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelector, value);
        }

        public string SelectedValuePath
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorMethods.get_SelectedValuePath(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelector);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorMethods.set_SelectedValuePath(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelector, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.SelectorItem))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.SelectorItemRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ISelectorItem))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class SelectorItem : global::Microsoft.UI.Xaml.Controls.ContentControl, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<SelectorItem>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorItem;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorItem()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorItem, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorItemMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorItem;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorItem => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorItem ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorItem();



        private static class _ISelectorItemFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorItemFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorItemFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorItemFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorItemFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.SelectorItem", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorItemFactoryMethods.IID);
                }
            }
        }

        protected SelectorItem():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(SelectorItem);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _ISelectorItemFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorItemFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorItemMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.SelectorItem").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorItemStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorItemStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorItemStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorItemStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.SelectorItem", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorItemStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty IsSelectedProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorItemStaticsMethods.get_IsSelectedProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorItemStatics);

        public static new SelectorItem FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<SelectorItem>.FromAbi(thisPtr);
        }

        protected internal SelectorItem(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorItemMethods.IID);

        }


        public static bool operator ==(SelectorItem x, SelectorItem y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(SelectorItem x, SelectorItem y) => !(x == y);
        public bool Equals(SelectorItem other) => this == other;
        public override bool Equals(object obj) => obj is SelectorItem that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected SelectorItem(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(SelectorItem);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public bool IsSelected
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorItemMethods.get_IsSelected(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorItem);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorItemMethods.set_IsSelected(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISelectorItem, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<SliderSnapsTo>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum SliderSnapsTo : int
    {
        StepValues = unchecked((int)0),
        Ticks = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.SnapPointBaseRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ISnapPointBase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    public class SnapPointBase : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<SnapPointBase>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISnapPointBase;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISnapPointBase()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISnapPointBase, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISnapPointBaseMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISnapPointBase;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISnapPointBase => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISnapPointBase ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISnapPointBase();



        private static class _ISnapPointBaseFactoryMethods
        {}

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISnapPointBaseFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISnapPointBaseFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISnapPointBaseFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISnapPointBaseFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISnapPointBaseFactoryMethods.IID);
                }
            }
        }

        public static SnapPointBase FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<SnapPointBase>.FromAbi(thisPtr);
        }

        protected internal SnapPointBase(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISnapPointBaseMethods.IID);

        }


        public static bool operator ==(SnapPointBase x, SnapPointBase y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(SnapPointBase x, SnapPointBase y) => !(x == y);
        public bool Equals(SnapPointBase other) => this == other;
        public override bool Equals(object obj) => obj is SnapPointBase that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected SnapPointBase(global::WinRT.DerivedComposed _)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(SnapPointBase);
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        protected virtual bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<SnapPointsAlignment>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum SnapPointsAlignment : int
    {
        Near = unchecked((int)0),
        Center = unchecked((int)0x1),
        Far = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.SplitViewTemplateSettingsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ISplitViewTemplateSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class SplitViewTemplateSettings : global::Microsoft.UI.Xaml.DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<SplitViewTemplateSettings>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISplitViewTemplateSettings => _inner;


        public static new SplitViewTemplateSettings FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<SplitViewTemplateSettings>.FromAbi(thisPtr);
        }

        internal SplitViewTemplateSettings(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISplitViewTemplateSettingsMethods.IID);

        }


        public static bool operator ==(SplitViewTemplateSettings x, SplitViewTemplateSettings y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(SplitViewTemplateSettings x, SplitViewTemplateSettings y) => !(x == y);
        public bool Equals(SplitViewTemplateSettings other) => this == other;
        public override bool Equals(object obj) => obj is SplitViewTemplateSettings that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::Microsoft.UI.Xaml.GridLength CompactPaneGridLength => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISplitViewTemplateSettingsMethods.get_CompactPaneGridLength(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISplitViewTemplateSettings);

        public double NegativeOpenPaneLength => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISplitViewTemplateSettingsMethods.get_NegativeOpenPaneLength(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISplitViewTemplateSettings);

        public double NegativeOpenPaneLengthMinusCompactLength => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISplitViewTemplateSettingsMethods.get_NegativeOpenPaneLengthMinusCompactLength(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISplitViewTemplateSettings);

        public global::Microsoft.UI.Xaml.GridLength OpenPaneGridLength => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISplitViewTemplateSettingsMethods.get_OpenPaneGridLength(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISplitViewTemplateSettings);

        public double OpenPaneLength => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISplitViewTemplateSettingsMethods.get_OpenPaneLength(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISplitViewTemplateSettings);

        public double OpenPaneLengthMinusCompactLength => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISplitViewTemplateSettingsMethods.get_OpenPaneLengthMinusCompactLength(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ISplitViewTemplateSettings);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.TabViewListView))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.TabViewListViewRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ITabViewListView))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 65536u)]
    public class TabViewListView : global::Microsoft.UI.Xaml.Controls.ListView, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<TabViewListView>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ITabViewListView;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ITabViewListView()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ITabViewListView, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ITabViewListViewMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ITabViewListView;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ITabViewListView => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ITabViewListView ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ITabViewListView();



        private static class _ITabViewListViewFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ITabViewListViewFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ITabViewListViewFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ITabViewListViewFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ITabViewListViewFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.TabViewListView", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ITabViewListViewFactoryMethods.IID);
                }
            }
        }

        public TabViewListView():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(TabViewListView);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _ITabViewListViewFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ITabViewListViewFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ITabViewListViewMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new TabViewListView FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<TabViewListView>.FromAbi(thisPtr);
        }

        protected internal TabViewListView(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ITabViewListViewMethods.IID);

        }


        public static bool operator ==(TabViewListView x, TabViewListView y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(TabViewListView x, TabViewListView y) => !(x == y);
        public bool Equals(TabViewListView other) => this == other;
        public override bool Equals(object obj) => obj is TabViewListView that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected TabViewListView(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(TabViewListView);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.Thumb))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ThumbRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IThumb))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class Thumb : global::Microsoft.UI.Xaml.Controls.Control, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<Thumb>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IThumb => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_Thumb;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_Thumb
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_Thumb;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_Thumb = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.Thumb");
                }
            }
        }

        public Thumb() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_Thumb, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IThumbMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.Thumb").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IThumbStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IThumbStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IThumbStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IThumbStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.Thumb", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IThumbStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty IsDraggingProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IThumbStaticsMethods.get_IsDraggingProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IThumbStatics);

        public static new Thumb FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<Thumb>.FromAbi(thisPtr);
        }

        internal Thumb(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IThumbMethods.IID);

        }


        public static bool operator ==(Thumb x, Thumb y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(Thumb x, Thumb y) => !(x == y);
        public bool Equals(Thumb other) => this == other;
        public override bool Equals(object obj) => obj is Thumb that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public void CancelDrag() => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IThumbMethods.CancelDrag(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IThumb);

        public event DragCompletedEventHandler DragCompleted
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IThumbMethods.Get_DragCompleted2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IThumb, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IThumbMethods.Get_DragCompleted2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IThumb, (IWinRTObject)this).Unsubscribe(value);
        }

        public event DragDeltaEventHandler DragDelta
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IThumbMethods.Get_DragDelta2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IThumb, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IThumbMethods.Get_DragDelta2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IThumb, (IWinRTObject)this).Unsubscribe(value);
        }

        public event DragStartedEventHandler DragStarted
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IThumbMethods.Get_DragStarted2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IThumb, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IThumbMethods.Get_DragStarted2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IThumb, (IWinRTObject)this).Unsubscribe(value);
        }

        public bool IsDragging => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IThumbMethods.get_IsDragging(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IThumb);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.TickBar))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.TickBarRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ITickBar))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class TickBar : global::Microsoft.UI.Xaml.FrameworkElement, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<TickBar>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ITickBar => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_TickBar;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_TickBar
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_TickBar;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_TickBar = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.TickBar");
                }
            }
        }

        public TickBar() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_TickBar, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ITickBarMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.TickBar").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ITickBarStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ITickBarStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ITickBarStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ITickBarStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.TickBar", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ITickBarStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty FillProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ITickBarStaticsMethods.get_FillProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ITickBarStatics);

        public static new TickBar FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<TickBar>.FromAbi(thisPtr);
        }

        internal TickBar(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ITickBarMethods.IID);

        }


        public static bool operator ==(TickBar x, TickBar y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(TickBar x, TickBar y) => !(x == y);
        public bool Equals(TickBar other) => this == other;
        public override bool Equals(object obj) => obj is TickBar that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::Microsoft.UI.Xaml.Media.Brush Fill
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ITickBarMethods.get_Fill(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ITickBar);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ITickBarMethods.set_Fill(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_ITickBar, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<TickPlacement>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum TickPlacement : int
    {
        None = unchecked((int)0),
        TopLeft = unchecked((int)0x1),
        BottomRight = unchecked((int)0x2),
        Outside = unchecked((int)0x3),
        Inline = unchecked((int)0x4),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ToggleButton))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ToggleButtonRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IToggleButton))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class ToggleButton : ButtonBase, IToggleButtonOverrides, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ToggleButton>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButton;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButton()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButton, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButton;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButton => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButton ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButton();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButtonOverrides;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButtonOverrides()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButtonOverrides, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonOverridesMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButtonOverrides;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButtonOverrides => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButtonOverrides ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButtonOverrides();



        private static class _IToggleButtonFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButtonFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButtonFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButtonFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButtonFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ToggleButton", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonFactoryMethods.IID);
                }
            }
        }

        public ToggleButton():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(ToggleButton);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IToggleButtonFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButtonFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ToggleButton").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButtonStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButtonStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButtonStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButtonStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ToggleButton", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty IsCheckedProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonStaticsMethods.get_IsCheckedProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButtonStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty IsThreeStateProperty => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonStaticsMethods.get_IsThreeStateProperty(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButtonStatics);

        public static new ToggleButton FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ToggleButton>.FromAbi(thisPtr);
        }

        protected internal ToggleButton(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonMethods.IID);

        }


        public static bool operator ==(ToggleButton x, ToggleButton y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ToggleButton x, ToggleButton y) => !(x == y);
        public bool Equals(ToggleButton other) => this == other;
        public override bool Equals(object obj) => obj is ToggleButton that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected ToggleButton(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(ToggleButton);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public event global::Microsoft.UI.Xaml.RoutedEventHandler Checked
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonMethods.Get_Checked2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButton, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonMethods.Get_Checked2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButton, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Microsoft.UI.Xaml.RoutedEventHandler Indeterminate
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonMethods.Get_Indeterminate2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButton, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonMethods.Get_Indeterminate2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButton, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Microsoft.UI.Xaml.RoutedEventHandler Unchecked
        {
            add => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonMethods.Get_Unchecked2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButton, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonMethods.Get_Unchecked2(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButton, (IWinRTObject)this).Unsubscribe(value);
        }

        protected virtual void OnToggle() => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonOverridesMethods.OnToggle(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButtonOverrides);

        void IToggleButtonOverrides.OnToggle() => OnToggle();
        public global::System.Nullable<bool> IsChecked
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonMethods.get_IsChecked(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButton);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonMethods.set_IsChecked(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButton, value);
        }

        public bool IsThreeState
        {
            get => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonMethods.get_IsThreeState(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButton);
            set => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonMethods.set_IsThreeState(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleButton, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonOverridesMethods.IID == iid || base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettingsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IToggleSwitchTemplateSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class ToggleSwitchTemplateSettings : global::Microsoft.UI.Xaml.DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ToggleSwitchTemplateSettings>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleSwitchTemplateSettings => _inner;


        public static new ToggleSwitchTemplateSettings FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ToggleSwitchTemplateSettings>.FromAbi(thisPtr);
        }

        internal ToggleSwitchTemplateSettings(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleSwitchTemplateSettingsMethods.IID);

        }


        public static bool operator ==(ToggleSwitchTemplateSettings x, ToggleSwitchTemplateSettings y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ToggleSwitchTemplateSettings x, ToggleSwitchTemplateSettings y) => !(x == y);
        public bool Equals(ToggleSwitchTemplateSettings other) => this == other;
        public override bool Equals(object obj) => obj is ToggleSwitchTemplateSettings that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double CurtainCurrentToOffOffset => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleSwitchTemplateSettingsMethods.get_CurtainCurrentToOffOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleSwitchTemplateSettings);

        public double CurtainCurrentToOnOffset => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleSwitchTemplateSettingsMethods.get_CurtainCurrentToOnOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleSwitchTemplateSettings);

        public double CurtainOffToOnOffset => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleSwitchTemplateSettingsMethods.get_CurtainOffToOnOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleSwitchTemplateSettings);

        public double CurtainOnToOffOffset => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleSwitchTemplateSettingsMethods.get_CurtainOnToOffOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleSwitchTemplateSettings);

        public double KnobCurrentToOffOffset => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleSwitchTemplateSettingsMethods.get_KnobCurrentToOffOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleSwitchTemplateSettings);

        public double KnobCurrentToOnOffset => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleSwitchTemplateSettingsMethods.get_KnobCurrentToOnOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleSwitchTemplateSettings);

        public double KnobOffToOnOffset => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleSwitchTemplateSettingsMethods.get_KnobOffToOnOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleSwitchTemplateSettings);

        public double KnobOnToOffOffset => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleSwitchTemplateSettingsMethods.get_KnobOnToOffOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToggleSwitchTemplateSettings);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ToolTipTemplateSettingsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IToolTipTemplateSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class ToolTipTemplateSettings : global::Microsoft.UI.Xaml.DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ToolTipTemplateSettings>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToolTipTemplateSettings => _inner;


        public static new ToolTipTemplateSettings FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ToolTipTemplateSettings>.FromAbi(thisPtr);
        }

        internal ToolTipTemplateSettings(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToolTipTemplateSettingsMethods.IID);

        }


        public static bool operator ==(ToolTipTemplateSettings x, ToolTipTemplateSettings y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ToolTipTemplateSettings x, ToolTipTemplateSettings y) => !(x == y);
        public bool Equals(ToolTipTemplateSettings other) => this == other;
        public override bool Equals(object obj) => obj is ToolTipTemplateSettings that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double FromHorizontalOffset => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToolTipTemplateSettingsMethods.get_FromHorizontalOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToolTipTemplateSettings);

        public double FromVerticalOffset => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToolTipTemplateSettingsMethods.get_FromVerticalOffset(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IToolTipTemplateSettings);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPoint))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IZoomSnapPoint))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    public class ZoomSnapPoint : ZoomSnapPointBase, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ZoomSnapPoint>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPoint;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPoint()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPoint, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IZoomSnapPointMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPoint;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPoint => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPoint ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPoint();



        private static class _IZoomSnapPointFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, double snapPointValue, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, snapPointValue, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPointFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPointFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPointFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPointFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPoint", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IZoomSnapPointFactoryMethods.IID);
                }
            }
        }

        public ZoomSnapPoint(double snapPointValue):base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(ZoomSnapPoint);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IZoomSnapPointFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPointFactory, snapPointValue, baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IZoomSnapPointMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new ZoomSnapPoint FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ZoomSnapPoint>.FromAbi(thisPtr);
        }

        protected internal ZoomSnapPoint(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IZoomSnapPointMethods.IID);

        }


        public static bool operator ==(ZoomSnapPoint x, ZoomSnapPoint y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ZoomSnapPoint x, ZoomSnapPoint y) => !(x == y);
        public bool Equals(ZoomSnapPoint other) => this == other;
        public override bool Equals(object obj) => obj is ZoomSnapPoint that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected ZoomSnapPoint(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(ZoomSnapPoint);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double Value => global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IZoomSnapPointMethods.get_Value(_objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPoint);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase))]
    [global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBaseRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IZoomSnapPointBase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.XamlContract), 327680u)]
    public class ZoomSnapPointBase : SnapPointBase, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ZoomSnapPointBase>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPointBase;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPointBase()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPointBase, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IZoomSnapPointBaseMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPointBase;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPointBase => ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPointBase ?? Make___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPointBase();



        private static class _IZoomSnapPointBaseFactoryMethods
        {}

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPointBaseFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPointBaseFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPointBaseFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPointBaseFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase", global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IZoomSnapPointBaseFactoryMethods.IID);
                }
            }
        }

        public static new ZoomSnapPointBase FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ZoomSnapPointBase>.FromAbi(thisPtr);
        }

        protected internal ZoomSnapPointBase(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IZoomSnapPointBaseMethods.IID);

        }


        public static bool operator ==(ZoomSnapPointBase x, ZoomSnapPointBase y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ZoomSnapPointBase x, ZoomSnapPointBase y) => !(x == y);
        public bool Equals(ZoomSnapPointBase other) => this == other;
        public override bool Equals(object obj) => obj is ZoomSnapPointBase that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected ZoomSnapPointBase(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(ZoomSnapPointBase);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.UI.Xaml.Controls.Primitives
{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct AppBarButtonTemplateSettings
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAppBarButtonTemplateSettingsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAppBarButtonTemplateSettingsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class AppBarButtonTemplateSettingsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct AppBarTemplateSettings
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.AppBarTemplateSettings obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.AppBarTemplateSettings>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAppBarTemplateSettingsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.AppBarTemplateSettings obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAppBarTemplateSettingsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.AppBarTemplateSettings FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.AppBarTemplateSettings.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.AppBarTemplateSettings obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.AppBarTemplateSettings>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.AppBarTemplateSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.AppBarTemplateSettings>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.AppBarTemplateSettings>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.AppBarTemplateSettings[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.AppBarTemplateSettings>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.AppBarTemplateSettings[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.AppBarTemplateSettings>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.AppBarTemplateSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.AppBarTemplateSettings>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.AppBarTemplateSettings>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.AppBarTemplateSettings>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class AppBarTemplateSettingsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.AppBarTemplateSettings(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct AppBarToggleButtonTemplateSettings
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAppBarToggleButtonTemplateSettingsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAppBarToggleButtonTemplateSettingsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class AppBarToggleButtonTemplateSettingsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct AutoSuggestBoxHelper
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.AutoSuggestBoxHelper obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.AutoSuggestBoxHelper>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAutoSuggestBoxHelperMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.AutoSuggestBoxHelper obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IAutoSuggestBoxHelperMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.AutoSuggestBoxHelper FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.AutoSuggestBoxHelper.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.AutoSuggestBoxHelper obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.AutoSuggestBoxHelper>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.AutoSuggestBoxHelper[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.AutoSuggestBoxHelper>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.AutoSuggestBoxHelper>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.AutoSuggestBoxHelper[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.AutoSuggestBoxHelper>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.AutoSuggestBoxHelper[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.AutoSuggestBoxHelper>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.AutoSuggestBoxHelper[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.AutoSuggestBoxHelper>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.AutoSuggestBoxHelper>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.AutoSuggestBoxHelper>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class AutoSuggestBoxHelperRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.AutoSuggestBoxHelper(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ButtonBase
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ButtonBaseRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CalendarPanel
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.CalendarPanel obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.CalendarPanel>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICalendarPanelMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.CalendarPanel obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICalendarPanelMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.CalendarPanel FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.CalendarPanel.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.CalendarPanel obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CalendarPanel>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.CalendarPanel[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CalendarPanel>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CalendarPanel>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.CalendarPanel[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CalendarPanel>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.CalendarPanel[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CalendarPanel>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.CalendarPanel[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CalendarPanel>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CalendarPanel>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CalendarPanel>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CalendarPanelRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.CalendarPanel(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CalendarViewTemplateSettings
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICalendarViewTemplateSettingsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICalendarViewTemplateSettingsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CalendarViewTemplateSettingsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CarouselPanel
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.CarouselPanel obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.CarouselPanel>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.CarouselPanel obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.CarouselPanel FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.CarouselPanel.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.CarouselPanel obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CarouselPanel>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.CarouselPanel[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CarouselPanel>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CarouselPanel>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.CarouselPanel[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CarouselPanel>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.CarouselPanel[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CarouselPanel>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.CarouselPanel[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CarouselPanel>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CarouselPanel>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CarouselPanel>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CarouselPanelRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.CarouselPanel(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ColorPickerSlider
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorPickerSliderMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorPickerSliderMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ColorPickerSliderRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ColorSpectrum
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ColorSpectrumRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ColumnMajorUniformToLargestGridLayout
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColumnMajorUniformToLargestGridLayoutMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IColumnMajorUniformToLargestGridLayoutMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ColumnMajorUniformToLargestGridLayoutRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ComboBoxHelper
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxHelper obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxHelper>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IComboBoxHelperMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxHelper obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IComboBoxHelperMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxHelper FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxHelper.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxHelper obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxHelper>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxHelper[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxHelper>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxHelper>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxHelper[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxHelper>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxHelper[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxHelper>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxHelper[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxHelper>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxHelper>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxHelper>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ComboBoxHelperRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxHelper(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ComboBoxTemplateSettings
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IComboBoxTemplateSettingsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IComboBoxTemplateSettingsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ComboBoxTemplateSettingsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CommandBarFlyoutCommandBar
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CommandBarFlyoutCommandBarRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CommandBarFlyoutCommandBarTemplateSettings
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarTemplateSettingsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarTemplateSettingsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CommandBarFlyoutCommandBarTemplateSettingsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CommandBarTemplateSettings
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettingsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettingsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CommandBarTemplateSettingsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CornerRadiusFilterConverter
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterConverter obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterConverter>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusFilterConverterMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterConverter obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusFilterConverterMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterConverter FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterConverter.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterConverter obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterConverter>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterConverter[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterConverter>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterConverter>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterConverter[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterConverter>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterConverter[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterConverter>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterConverter[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterConverter>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterConverter>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterConverter>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CornerRadiusFilterConverterRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterConverter(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CornerRadiusToThicknessConverter
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverter obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverter>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusToThicknessConverterMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverter obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusToThicknessConverterMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverter FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverter.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverter obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverter>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverter[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverter>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverter>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverter[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverter>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverter[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverter>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverter[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverter>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverter>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverter>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CornerRadiusToThicknessConverterRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverter(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DragCompletedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IDragCompletedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IDragCompletedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DragCompletedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("A27012CB-923F-5992-ADE2-878F7C794EF5")]
    public static class DragCompletedEventHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xCB, 0x12, 0x70, 0xA2, 0x3F, 0x92, 0x92, 0x59, 0xAD, 0xE2, 0x87, 0x8F, 0x7C, 0x79, 0x4E, 0xF5 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe DragCompletedEventHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(DragCompletedEventHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(object sender, global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs e)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __sender = default;
                ObjectReferenceValue __e = default;
                try
                {
                    __sender = MarshalInspectable<object>.CreateMarshaler2(sender);
                    __e = global::ABI.Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs.CreateMarshaler2(e);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__sender), MarshalInspectable<object>.GetAbi(__e)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__sender);
                    MarshalInspectable<object>.DisposeMarshaler(__e);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr e)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandler>(thisPtr).Invoke(MarshalInspectable<object>.FromAbi(sender), global::ABI.Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs.FromAbi(e))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class DragCompletedEventHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = DragCompletedEventHandler.IID,
                Vtable = DragCompletedEventHandler.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DragDeltaEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IDragDeltaEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IDragDeltaEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DragDeltaEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("49CA91D0-FC43-56B1-98BD-68E2E1E24DE9")]
    public static class DragDeltaEventHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD0, 0x91, 0xCA, 0x49, 0x43, 0xFC, 0xB1, 0x56, 0x98, 0xBD, 0x68, 0xE2, 0xE1, 0xE2, 0x4D, 0xE9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe DragDeltaEventHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(DragDeltaEventHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(object sender, global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs e)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __sender = default;
                ObjectReferenceValue __e = default;
                try
                {
                    __sender = MarshalInspectable<object>.CreateMarshaler2(sender);
                    __e = global::ABI.Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs.CreateMarshaler2(e);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__sender), MarshalInspectable<object>.GetAbi(__e)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__sender);
                    MarshalInspectable<object>.DisposeMarshaler(__e);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr e)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandler>(thisPtr).Invoke(MarshalInspectable<object>.FromAbi(sender), global::ABI.Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs.FromAbi(e))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class DragDeltaEventHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = DragDeltaEventHandler.IID,
                Vtable = DragDeltaEventHandler.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DragStartedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IDragStartedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IDragStartedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DragStartedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("13191F6D-A651-5870-B3A1-221550003512")]
    public static class DragStartedEventHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x6D, 0x1F, 0x19, 0x13, 0x51, 0xA6, 0x70, 0x58, 0xB3, 0xA1, 0x22, 0x15, 0x50, 0x0, 0x35, 0x12 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe DragStartedEventHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(DragStartedEventHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(object sender, global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs e)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __sender = default;
                ObjectReferenceValue __e = default;
                try
                {
                    __sender = MarshalInspectable<object>.CreateMarshaler2(sender);
                    __e = global::ABI.Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs.CreateMarshaler2(e);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__sender), MarshalInspectable<object>.GetAbi(__e)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__sender);
                    MarshalInspectable<object>.DisposeMarshaler(__e);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr e)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandler>(thisPtr).Invoke(MarshalInspectable<object>.FromAbi(sender), global::ABI.Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs.FromAbi(e))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class DragStartedEventHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = DragStartedEventHandler.IID,
                Vtable = DragStartedEventHandler.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct FlyoutBase
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class FlyoutBaseRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct FlyoutBaseClosingEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseClosingEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseClosingEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class FlyoutBaseClosingEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct FlyoutShowOptions
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutShowOptionsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutShowOptionsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class FlyoutShowOptionsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct GridViewItemPresenter
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemPresenter obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemPresenter>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemPresenter obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemPresenter FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemPresenter.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemPresenter obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemPresenter>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemPresenter[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemPresenter>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemPresenter>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemPresenter[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemPresenter>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemPresenter[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemPresenter>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemPresenter[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemPresenter>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemPresenter>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemPresenter>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class GridViewItemPresenterRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemPresenter(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct GridViewItemTemplateSettings
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemTemplateSettingsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemTemplateSettingsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class GridViewItemTemplateSettingsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings(inspectable.ObjRef);
    }
    internal static class IAppBarButtonTemplateSettingsMethods
    {

        internal static unsafe double get_KeyboardAcceleratorTextMinWidth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x25, 0x35, 0xC1, 0x6F, 0x3, 0xBF, 0x90, 0x51, 0xA1, 0xD5, 0xEB, 0xD6, 0xA1, 0xBC, 0xB6, 0xB4 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("6FC13525-BF03-5190-A1D5-EBD6A1BCB6B4")]
    internal interface IAppBarButtonTemplateSettings : global::Microsoft.UI.Xaml.Controls.Primitives.IAppBarButtonTemplateSettings
    {
    }
    internal static class IAppBarTemplateSettingsMethods
    {

        internal static unsafe global::Windows.Foundation.Rect get_ClipRect(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Rect __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.Thickness get_CompactRootMargin(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Thickness __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_CompactVerticalDelta(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.Thickness get_HiddenRootMargin(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Thickness __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_HiddenVerticalDelta(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.Thickness get_MinimalRootMargin(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Thickness __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_MinimalVerticalDelta(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_NegativeCompactVerticalDelta(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_NegativeHiddenVerticalDelta(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[15](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_NegativeMinimalVerticalDelta(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3F, 0xE7, 0x60, 0xFE, 0x52, 0x9A, 0xA, 0x5E, 0xB7, 0x38, 0x42, 0x6F, 0x97, 0xD0, 0x97, 0x68 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("FE60E73F-9A52-5E0A-B738-426F97D09768")]
    internal interface IAppBarTemplateSettings : global::Microsoft.UI.Xaml.Controls.Primitives.IAppBarTemplateSettings
    {
    }
    internal static class IAppBarToggleButtonTemplateSettingsMethods
    {

        internal static unsafe double get_KeyboardAcceleratorTextMinWidth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x11, 0x9F, 0xAA, 0x32, 0x5E, 0x2F, 0xAB, 0x57, 0xA5, 0x70, 0xB0, 0x3B, 0xCE, 0xEE, 0x83, 0x5D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("32AA9F11-2F5E-57AB-A570-B03BCEEE835D")]
    internal interface IAppBarToggleButtonTemplateSettings : global::Microsoft.UI.Xaml.Controls.Primitives.IAppBarToggleButtonTemplateSettings
    {
    }
    internal static class IAutoSuggestBoxHelperMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x6C, 0x73, 0x56, 0x1E, 0x48, 0x82, 0xD9, 0x57, 0xAC, 0x4, 0xE4, 0xE7, 0xDC, 0xC3, 0xF9, 0xE1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("1E56736C-8248-57D9-AC04-E4E7DCC3F9E1")]
    internal interface IAutoSuggestBoxHelper : global::Microsoft.UI.Xaml.Controls.Primitives.IAutoSuggestBoxHelper
    {
    }
    internal static class IAutoSuggestBoxHelperStaticsMethods
    {


        internal static unsafe void SetKeepInteriorCornersSquare(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.AutoSuggestBox autoSuggestBox, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __autoSuggestBox = default;
            try
            {
                __autoSuggestBox = global::ABI.Microsoft.UI.Xaml.Controls.AutoSuggestBox.CreateMarshaler2(autoSuggestBox);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__autoSuggestBox), (byte)(value ? 1 : 0)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__autoSuggestBox);
            }
        }

        internal static unsafe bool GetKeepInteriorCornersSquare(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.AutoSuggestBox autoSuggestBox)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __autoSuggestBox = default;
            byte __retval = default;
            try
            {
                __autoSuggestBox = global::ABI.Microsoft.UI.Xaml.Controls.AutoSuggestBox.CreateMarshaler2(autoSuggestBox);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__autoSuggestBox), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__autoSuggestBox);
            }
        }
        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_KeepInteriorCornersSquareProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x52, 0x57, 0xC0, 0xA8, 0x60, 0xB1, 0x10, 0x57, 0xA0, 0x9, 0x2A, 0xD0, 0xFC, 0x4E, 0xD1, 0x11 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A8C05752-B160-5710-A009-2AD0FC4ED111")]
    internal interface IAutoSuggestBoxHelperStatics : global::Microsoft.UI.Xaml.Controls.Primitives.IAutoSuggestBoxHelperStatics
    {
    }
    internal static class IButtonBaseMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Controls.ClickMode get_ClickMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.ClickMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.ClickMode*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ClickMode(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.ClickMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.ClickMode, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::System.Windows.Input.ICommand get_Command(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Windows.Input.ICommand>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Windows.Input.ICommand>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Command(IObjectReference _obj, global::System.Windows.Input.ICommand value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Windows.Input.ICommand>.CreateMarshaler2(value, global::ABI.System.Windows.Input.ICommandMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe object get_CommandParameter(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_CommandParameter(IObjectReference _obj, object value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInspectable<object>.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[13](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe bool get_IsPointerOver(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_IsPressed(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler>> _Click_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler>> MakeClickTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Click_, new(), null);
            return _Click_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler>> _Click => _Click_ ?? MakeClickTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler> Get_Click2(IObjectReference _obj, object _thisObj)
        {
            return _Click.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_RoutedEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[14],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[15],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x69, 0x42, 0x71, 0x65, 0x73, 0x24, 0x27, 0x53, 0xA6, 0x52, 0xE, 0xA6, 0xBC, 0xE7, 0xF4, 0x3 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("65714269-2473-5327-A652-0EA6BCE7F403")]
    internal interface IButtonBase : global::Microsoft.UI.Xaml.Controls.Primitives.IButtonBase
    {
    }
    internal static class IButtonBaseFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ButtonBase.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ButtonBase.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA9, 0x1A, 0x25, 0x21, 0xD1, 0x6F, 0x51, 0x5E, 0xAB, 0x3B, 0xE6, 0xFC, 0xAF, 0x33, 0x95, 0xED };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("21251AA9-6FD1-5E51-AB3B-E6FCAF3395ED")]
    internal interface IButtonBaseFactory : global::Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseFactory
    {
    }
    internal static class IButtonBaseStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ClickModeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CommandParameterProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CommandProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IsPointerOverProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IsPressedProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF6, 0x12, 0xE8, 0xDB, 0xF8, 0xAD, 0xD3, 0x51, 0x81, 0x37, 0xA8, 0xFB, 0xF6, 0x44, 0x5B, 0x3C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("DBE812F6-ADF8-51D3-8137-A8FBF6445B3C")]
    internal interface IButtonBaseStatics : global::Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseStatics
    {
    }
    internal static class ICalendarPanelMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3A, 0x6C, 0xB2, 0xA4, 0x25, 0x38, 0xA4, 0x5D, 0xA9, 0xE0, 0xDD, 0x9B, 0x1E, 0x40, 0x5E, 0x53 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A4B26C3A-3825-5DA4-A9E0-DD9B1E405E53")]
    internal interface ICalendarPanel : global::Microsoft.UI.Xaml.Controls.Primitives.ICalendarPanel
    {
    }
    internal static class ICalendarViewTemplateSettingsMethods
    {

        internal static unsafe double get_CenterX(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[19](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_CenterY(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[20](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.Rect get_ClipRect(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Rect __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect*, int>**)ThisPtr)[18](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe bool get_HasMoreContentAfter(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[15](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_HasMoreContentBefore(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[16](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_HasMoreViews(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[17](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe string get_HeaderText(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe double get_MinViewWidth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe string get_WeekDay1(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_WeekDay2(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_WeekDay3(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_WeekDay4(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_WeekDay5(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_WeekDay6(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_WeekDay7(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xCB, 0xFA, 0xB0, 0x23, 0x83, 0x0, 0x9, 0x51, 0x87, 0xD3, 0xDB, 0xEB, 0x13, 0xE3, 0x31, 0xA0 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("23B0FACB-0083-5109-87D3-DBEB13E331A0")]
    internal interface ICalendarViewTemplateSettings : global::Microsoft.UI.Xaml.Controls.Primitives.ICalendarViewTemplateSettings
    {
    }
    internal static class ICarouselPanelMethods
    {


        internal static unsafe void LineUp(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[18](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void LineDown(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[19](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void LineLeft(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[20](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void LineRight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[21](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void PageUp(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[22](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void PageDown(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[23](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void PageLeft(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[24](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void PageRight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[25](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void MouseWheelUp(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[26](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void MouseWheelDown(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[27](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void MouseWheelLeft(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[28](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void MouseWheelRight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[29](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void SetHorizontalOffset(IObjectReference _obj, double offset)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[30](ThisPtr, offset));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void SetVerticalOffset(IObjectReference _obj, double offset)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[31](ThisPtr, offset));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.Foundation.Rect MakeVisible(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement visual, global::Windows.Foundation.Rect rectangle)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __visual = default;
            global::Windows.Foundation.Rect __retval = default;
            try
            {
                __visual = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(visual);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Windows.Foundation.Rect, global::Windows.Foundation.Rect*, int>**)ThisPtr)[32](ThisPtr, MarshalInspectable<object>.GetAbi(__visual), rectangle, &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__visual);
            }
        }
        internal static unsafe bool get_CanHorizontallyScroll(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_CanHorizontallyScroll(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[9](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_CanVerticallyScroll(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_CanVerticallyScroll(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_ExtentHeight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_ExtentWidth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_HorizontalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe object get_ScrollOwner(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[16](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ScrollOwner(IObjectReference _obj, object value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInspectable<object>.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[17](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe double get_VerticalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[15](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_ViewportHeight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_ViewportWidth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x0, 0x38, 0x8D, 0x29, 0xC9, 0xE5, 0x3, 0x50, 0xB8, 0x4C, 0xA6, 0x53, 0x88, 0x66, 0xE2, 0xD5 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("298D3800-E5C9-5003-B84C-A6538866E2D5")]
    internal interface ICarouselPanel : global::Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanel
    {
    }
    internal static class ICarouselPanelFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.CarouselPanel CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.CarouselPanel.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.CarouselPanel.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC2, 0x3F, 0x1D, 0x16, 0xEC, 0xD1, 0x1D, 0x5D, 0xAC, 0x8A, 0xCF, 0x45, 0x77, 0xF0, 0x6C, 0x3C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("161D3FC2-D1EC-5D1D-AC8A-CF4577F06C3C")]
    internal interface ICarouselPanelFactory : global::Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelFactory
    {
    }
    internal static class IColorPickerSliderMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Controls.ColorPickerHsvChannel get_ColorChannel(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.ColorPickerHsvChannel __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.ColorPickerHsvChannel*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ColorChannel(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.ColorPickerHsvChannel value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.ColorPickerHsvChannel, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xBB, 0x31, 0x62, 0x45, 0x4C, 0x5A, 0x4B, 0x56, 0x9B, 0x3D, 0x2F, 0x15, 0x70, 0x61, 0xA0, 0xF8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("456231BB-5A4C-564B-9B3D-2F157061A0F8")]
    internal interface IColorPickerSlider : global::Microsoft.UI.Xaml.Controls.Primitives.IColorPickerSlider
    {
    }
    internal static class IColorPickerSliderFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE, 0x1F, 0xCB, 0xD0, 0x71, 0x7, 0x7D, 0x5C, 0xBA, 0x14, 0xAA, 0x43, 0x11, 0x79, 0xB2, 0xAC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D0CB1F0E-0771-5C7D-BA14-AA431179B2AC")]
    internal interface IColorPickerSliderFactory : global::Microsoft.UI.Xaml.Controls.Primitives.IColorPickerSliderFactory
    {
    }
    internal static class IColorPickerSliderStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ColorChannelProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x75, 0x2B, 0xF7, 0x82, 0x86, 0xE9, 0x7F, 0x58, 0x97, 0x1, 0x8A, 0xC6, 0x80, 0x1D, 0xA9, 0x32 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("82F72B75-E986-587F-9701-8AC6801DA932")]
    internal interface IColorPickerSliderStatics : global::Microsoft.UI.Xaml.Controls.Primitives.IColorPickerSliderStatics
    {
    }
    internal static class IColorSpectrumMethods
    {

        internal static unsafe global::Windows.UI.Color get_Color(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Color(IObjectReference _obj, global::Windows.UI.Color value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.ColorSpectrumComponents get_Components(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.ColorSpectrumComponents __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.ColorSpectrumComponents*, int>**)ThisPtr)[24](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Components(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.ColorSpectrumComponents value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.ColorSpectrumComponents, int>**)ThisPtr)[25](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::System.Numerics.Vector4 get_HsvColor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::System.Numerics.Vector4 __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::System.Numerics.Vector4*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_HsvColor(IObjectReference _obj, global::System.Numerics.Vector4 value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::System.Numerics.Vector4, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe int get_MaxHue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_MaxHue(IObjectReference _obj, int value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int>**)ThisPtr)[13](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe int get_MaxSaturation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[16](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_MaxSaturation(IObjectReference _obj, int value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int>**)ThisPtr)[17](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe int get_MaxValue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[20](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_MaxValue(IObjectReference _obj, int value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int>**)ThisPtr)[21](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe int get_MinHue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_MinHue(IObjectReference _obj, int value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe int get_MinSaturation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_MinSaturation(IObjectReference _obj, int value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int>**)ThisPtr)[15](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe int get_MinValue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[18](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_MinValue(IObjectReference _obj, int value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int>**)ThisPtr)[19](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.ColorSpectrumShape get_Shape(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.ColorSpectrumShape __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.ColorSpectrumShape*, int>**)ThisPtr)[22](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Shape(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.ColorSpectrumShape value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.ColorSpectrumShape, int>**)ThisPtr)[23](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum, global::Microsoft.UI.Xaml.Controls.ColorChangedEventArgs>>> _ColorChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum, global::Microsoft.UI.Xaml.Controls.ColorChangedEventArgs>>> MakeColorChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ColorChanged_, new(), null);
            return _ColorChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum, global::Microsoft.UI.Xaml.Controls.ColorChangedEventArgs>>> _ColorChanged => _ColorChanged_ ?? MakeColorChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum, global::Microsoft.UI.Xaml.Controls.ColorChangedEventArgs>> Get_ColorChanged2(IObjectReference _obj, object _thisObj)
        {
            return _ColorChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_Controls_Primitives_ColorSpectrum__global__Microsoft_UI_Xaml_Controls_ColorChangedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[26],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[27],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x16, 0x59, 0x30, 0x75, 0x2D, 0x88, 0x67, 0x56, 0xBF, 0xD0, 0xA, 0xF7, 0x2D, 0x50, 0x2D, 0x72 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("75305916-882D-5667-BFD0-0AF72D502D72")]
    internal interface IColorSpectrum : global::Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrum
    {
    }
    internal static class IColorSpectrumFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x42, 0xD4, 0xEC, 0xEF, 0x2A, 0x8C, 0xA6, 0x50, 0x88, 0xA3, 0x39, 0x99, 0xEA, 0x1, 0xF0, 0x96 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("EFECD442-8C2A-50A6-88A3-3999EA01F096")]
    internal interface IColorSpectrumFactory : global::Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumFactory
    {
    }
    internal static class IColorSpectrumStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ColorProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ComponentsProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[15](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_HsvColorProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_MaxHueProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_MaxSaturationProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_MaxValueProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_MinHueProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_MinSaturationProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_MinValueProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ShapeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xBA, 0x3D, 0xB4, 0xA2, 0x16, 0x16, 0x7D, 0x52, 0x9D, 0x32, 0x3, 0x95, 0x73, 0xB7, 0xFC, 0xE7 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A2B43DBA-1616-527D-9D32-039573B7FCE7")]
    internal interface IColorSpectrumStatics : global::Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumStatics
    {
    }
    internal static class IColumnMajorUniformToLargestGridLayoutMethods
    {

        internal static unsafe double get_ColumnSpacing(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ColumnSpacing(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe int get_MaxColumns(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_MaxColumns(IObjectReference _obj, int value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_RowSpacing(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_RowSpacing(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xAA, 0xA6, 0x10, 0xEE, 0xEB, 0xEF, 0xAC, 0x51, 0xB7, 0x91, 0x71, 0x91, 0x3A, 0xE8, 0xC2, 0x35 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("EE10A6AA-EFEB-51AC-B791-71913AE8C235")]
    internal interface IColumnMajorUniformToLargestGridLayout : global::Microsoft.UI.Xaml.Controls.Primitives.IColumnMajorUniformToLargestGridLayout
    {
    }
    internal static class IColumnMajorUniformToLargestGridLayoutFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x59, 0xAF, 0x21, 0x2F, 0x85, 0x15, 0x25, 0x53, 0x84, 0x12, 0x2B, 0x83, 0xBF, 0x5, 0xD3, 0x45 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2F21AF59-1585-5325-8412-2B83BF05D345")]
    internal interface IColumnMajorUniformToLargestGridLayoutFactory : global::Microsoft.UI.Xaml.Controls.Primitives.IColumnMajorUniformToLargestGridLayoutFactory
    {
    }
    internal static class IColumnMajorUniformToLargestGridLayoutStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ColumnSpacingProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_MaxColumnsProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_RowSpacingProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC6, 0xE, 0x2F, 0x7B, 0x45, 0x23, 0x86, 0x59, 0xA5, 0xB9, 0xB1, 0xBE, 0xB5, 0xA7, 0x43, 0x50 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("7B2F0EC6-2345-5986-A5B9-B1BEB5A74350")]
    internal interface IColumnMajorUniformToLargestGridLayoutStatics : global::Microsoft.UI.Xaml.Controls.Primitives.IColumnMajorUniformToLargestGridLayoutStatics
    {
    }
    internal static class IComboBoxHelperMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xAC, 0x87, 0x3C, 0x5A, 0x99, 0xC3, 0x5F, 0x5E, 0x87, 0x3F, 0xB9, 0xD0, 0xE8, 0xBC, 0xCE, 0xB7 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("5A3C87AC-C399-5E5F-873F-B9D0E8BCCEB7")]
    internal interface IComboBoxHelper : global::Microsoft.UI.Xaml.Controls.Primitives.IComboBoxHelper
    {
    }
    internal static class IComboBoxHelperStaticsMethods
    {


        internal static unsafe void SetKeepInteriorCornersSquare(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.ComboBox comboBox, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __comboBox = default;
            try
            {
                __comboBox = global::ABI.Microsoft.UI.Xaml.Controls.ComboBox.CreateMarshaler2(comboBox);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__comboBox), (byte)(value ? 1 : 0)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__comboBox);
            }
        }

        internal static unsafe bool GetKeepInteriorCornersSquare(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.ComboBox comboBox)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __comboBox = default;
            byte __retval = default;
            try
            {
                __comboBox = global::ABI.Microsoft.UI.Xaml.Controls.ComboBox.CreateMarshaler2(comboBox);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__comboBox), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__comboBox);
            }
        }
        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_KeepInteriorCornersSquareProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x42, 0xBE, 0x21, 0xEC, 0x2, 0xED, 0x10, 0x5C, 0x9F, 0xBE, 0xAF, 0x18, 0x81, 0xCD, 0x87, 0x7B };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("EC21BE42-ED02-5C10-9FBE-AF1881CD877B")]
    internal interface IComboBoxHelperStatics : global::Microsoft.UI.Xaml.Controls.Primitives.IComboBoxHelperStatics
    {
    }
    internal static class IComboBoxTemplateSettingsMethods
    {

        internal static unsafe double get_DropDownClosedHeight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_DropDownContentMinWidth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_DropDownOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_DropDownOpenedHeight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.AnimationDirection get_SelectedItemDirection(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.Primitives.AnimationDirection __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.AnimationDirection*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7F, 0x5E, 0xDC, 0xF2, 0x3F, 0x8D, 0x20, 0x5C, 0xB3, 0x56, 0xAF, 0x6F, 0x1F, 0xF8, 0x24, 0x2A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F2DC5E7F-8D3F-5C20-B356-AF6F1FF8242A")]
    internal interface IComboBoxTemplateSettings : global::Microsoft.UI.Xaml.Controls.Primitives.IComboBoxTemplateSettings
    {
    }
    internal static class ICommandBarFlyoutCommandBarMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings get_FlyoutTemplateSettings(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC5, 0x20, 0x71, 0xF, 0x0, 0x6D, 0x89, 0x54, 0x91, 0x71, 0xBE, 0xDD, 0x2D, 0x4E, 0xF6, 0x77 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("0F7120C5-6D00-5489-9171-BEDD2D4EF677")]
    internal interface ICommandBarFlyoutCommandBar : global::Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBar
    {
    }
    internal static class ICommandBarFlyoutCommandBar2Methods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Media.SystemBackdrop get_SystemBackdrop(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.SystemBackdrop.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.SystemBackdrop.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SystemBackdrop(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.SystemBackdrop value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.SystemBackdrop.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x9F, 0x76, 0xCA, 0x6A, 0x19, 0x11, 0x55, 0x53, 0xAF, 0x7F, 0xBC, 0xD5, 0xAA, 0x75, 0x12, 0x29 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("6ACA769F-1119-5355-AF7F-BCD5AA751229")]
    internal interface ICommandBarFlyoutCommandBar2 : global::Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBar2
    {
    }
    internal static class ICommandBarFlyoutCommandBarAutomationPropertiesStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Automation.Peers.AutomationControlType GetControlType(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement element)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            global::Microsoft.UI.Xaml.Automation.Peers.AutomationControlType __retval = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(element);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Microsoft.UI.Xaml.Automation.Peers.AutomationControlType*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__element), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
            }
        }

        internal static unsafe void SetControlType(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement element, global::Microsoft.UI.Xaml.Automation.Peers.AutomationControlType value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(element);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Microsoft.UI.Xaml.Automation.Peers.AutomationControlType, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__element), value));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
            }
        }
        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ControlTypeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x75, 0x7F, 0x95, 0xC9, 0x7F, 0xC5, 0xA3, 0x5B, 0xB8, 0x67, 0xF9, 0xD8, 0x6B, 0x1D, 0x90, 0xB9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C9957F75-C57F-5BA3-B867-F9D86B1D90B9")]
    internal interface ICommandBarFlyoutCommandBarAutomationPropertiesStatics : global::Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarAutomationPropertiesStatics
    {
    }
    internal static class ICommandBarFlyoutCommandBarFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA9, 0xCD, 0xDB, 0x58, 0xE4, 0x38, 0xFC, 0x5E, 0xB7, 0x40, 0x26, 0xFD, 0xA3, 0xD0, 0xA3, 0xC6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("58DBCDA9-38E4-5EFC-B740-26FDA3D0A3C6")]
    internal interface ICommandBarFlyoutCommandBarFactory : global::Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarFactory
    {
    }
    internal static class ICommandBarFlyoutCommandBarStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SystemBackdropProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x50, 0xB9, 0x7F, 0x5F, 0x7D, 0x7C, 0x5C, 0x5F, 0x8F, 0xC5, 0x91, 0x34, 0x4F, 0x3B, 0x3, 0x4C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("5F7FB950-7C7D-5F5C-8FC5-91344F3B034C")]
    internal interface ICommandBarFlyoutCommandBarStatics : global::Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarStatics
    {
    }
    internal static class ICommandBarFlyoutCommandBarTemplateSettingsMethods
    {

        internal static unsafe double get_CloseAnimationEndPosition(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.Rect get_ContentClipRect(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Rect __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect*, int>**)ThisPtr)[24](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_CurrentWidth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_ExpandDownAnimationEndPosition(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[22](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_ExpandDownAnimationHoldPosition(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[23](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_ExpandDownAnimationStartPosition(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[21](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_ExpandDownOverflowVerticalPosition(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[17](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_ExpandUpAnimationEndPosition(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[19](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_ExpandUpAnimationHoldPosition(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[20](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_ExpandUpAnimationStartPosition(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[18](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_ExpandUpOverflowVerticalPosition(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[16](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_ExpandedWidth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_OpenAnimationEndPosition(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_OpenAnimationStartPosition(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.Rect get_OverflowContentClipRect(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Rect __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect*, int>**)ThisPtr)[25](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_WidthExpansionAnimationEndPosition(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_WidthExpansionAnimationStartPosition(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_WidthExpansionDelta(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_WidthExpansionMoreButtonAnimationEndPosition(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[15](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_WidthExpansionMoreButtonAnimationStartPosition(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xCA, 0xC5, 0x3C, 0x53, 0xF7, 0xDC, 0x9D, 0x5F, 0xA4, 0x60, 0x93, 0x4A, 0x88, 0x3A, 0xCD, 0xC1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("533CC5CA-DCF7-5F9D-A460-934A883ACDC1")]
    internal interface ICommandBarFlyoutCommandBarTemplateSettings : global::Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarTemplateSettings
    {
    }
    internal static class ICommandBarTemplateSettingsMethods
    {

        internal static unsafe double get_ContentHeight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.Visibility get_EffectiveOverflowButtonVisibility(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Visibility __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Visibility*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_NegativeOverflowContentHeight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.Rect get_OverflowContentClipRect(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Rect __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_OverflowContentCompactYTranslation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[15](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_OverflowContentHeight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_OverflowContentHiddenYTranslation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[17](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_OverflowContentHorizontalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_OverflowContentMaxHeight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_OverflowContentMaxWidth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_OverflowContentMinWidth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_OverflowContentMinimalYTranslation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[16](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF6, 0x35, 0x95, 0xAE, 0x78, 0x16, 0x66, 0x50, 0x90, 0xBF, 0x14, 0x7A, 0xA6, 0x10, 0xC5, 0xDD };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("AE9535F6-1678-5066-90BF-147AA610C5DD")]
    internal interface ICommandBarTemplateSettings : global::Microsoft.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettings
    {
    }
    internal static class ICornerRadiusFilterConverterMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterKind get_Filter(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterKind*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Filter(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterKind value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterKind, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_Scale(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Scale(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD2, 0x3E, 0x1A, 0x6F, 0x65, 0xF9, 0x5E, 0x54, 0xBD, 0x44, 0x44, 0x1D, 0xB1, 0x79, 0x4F, 0x5F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("6F1A3ED2-F965-545E-BD44-441DB1794F5F")]
    internal interface ICornerRadiusFilterConverter : global::Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusFilterConverter
    {
    }
    internal static class ICornerRadiusFilterConverterStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_FilterProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ScaleProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF9, 0x74, 0x95, 0x2D, 0x9E, 0xCC, 0x5E, 0x53, 0xA7, 0xE, 0xD5, 0x5C, 0x4C, 0xA2, 0x7F, 0x49 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2D9574F9-CC9E-535E-A70E-D55C4CA27F49")]
    internal interface ICornerRadiusFilterConverterStatics : global::Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusFilterConverterStatics
    {
    }
    internal static class ICornerRadiusToThicknessConverterMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind get_ConversionKind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ConversionKind(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_Multiplier(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Multiplier(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xAE, 0xA8, 0x6A, 0xB3, 0x6E, 0x16, 0xA5, 0x5C, 0x93, 0xD2, 0x95, 0xE9, 0x90, 0x7C, 0x12, 0x22 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B36AA8AE-166E-5CA5-93D2-95E9907C1222")]
    internal interface ICornerRadiusToThicknessConverter : global::Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusToThicknessConverter
    {
    }
    internal static class ICornerRadiusToThicknessConverterStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ConversionKindProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_MultiplierProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x36, 0x9D, 0xAD, 0x92, 0x83, 0x54, 0x58, 0x52, 0xA4, 0x3B, 0x43, 0x56, 0x44, 0x30, 0x87, 0xF1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("92AD9D36-5483-5258-A43B-4356443087F1")]
    internal interface ICornerRadiusToThicknessConverterStatics : global::Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusToThicknessConverterStatics
    {
    }
    internal static class IDragCompletedEventArgsMethods
    {

        internal static unsafe bool get_Canceled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe double get_HorizontalChange(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_VerticalChange(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x47, 0x75, 0xD4, 0xAC, 0x84, 0x37, 0xFF, 0x51, 0x8E, 0xEB, 0x7B, 0x21, 0x24, 0x39, 0x97, 0x4B };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("ACD47547-3784-51FF-8EEB-7B212439974B")]
    internal interface IDragCompletedEventArgs : global::Microsoft.UI.Xaml.Controls.Primitives.IDragCompletedEventArgs
    {
    }
    internal static class IDragCompletedEventArgsFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs CreateInstanceWithHorizontalChangeVerticalChangeAndCanceled(IObjectReference _obj, double horizontalChange, double verticalChange, bool canceled, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, double, byte, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, horizontalChange, verticalChange, (byte)(canceled ? 1 : 0), MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x8, 0xC4, 0x67, 0x57, 0x4B, 0x45, 0xCF, 0x55, 0xB7, 0x4E, 0x22, 0x96, 0x42, 0xAE, 0xD1, 0x8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("5767C408-454B-55CF-B74E-229642AED108")]
    internal interface IDragCompletedEventArgsFactory : global::Microsoft.UI.Xaml.Controls.Primitives.IDragCompletedEventArgsFactory
    {
    }
    internal static class IDragDeltaEventArgsMethods
    {

        internal static unsafe double get_HorizontalChange(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_VerticalChange(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x65, 0x57, 0x40, 0xBC, 0x94, 0xED, 0x97, 0x56, 0x85, 0x6, 0xA8, 0xF3, 0xD1, 0x52, 0x72, 0xF9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("BC405765-ED94-5697-8506-A8F3D15272F9")]
    internal interface IDragDeltaEventArgs : global::Microsoft.UI.Xaml.Controls.Primitives.IDragDeltaEventArgs
    {
    }
    internal static class IDragDeltaEventArgsFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs CreateInstanceWithHorizontalChangeAndVerticalChange(IObjectReference _obj, double horizontalChange, double verticalChange, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, double, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, horizontalChange, verticalChange, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x80, 0xA2, 0xDB, 0x4A, 0xF9, 0xE1, 0xAB, 0x5D, 0x87, 0xFF, 0x59, 0x3, 0xB4, 0x19, 0xEF, 0x9D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4ADBA280-E1F9-5DAB-87FF-5903B419EF9D")]
    internal interface IDragDeltaEventArgsFactory : global::Microsoft.UI.Xaml.Controls.Primitives.IDragDeltaEventArgsFactory
    {
    }
    internal static class IDragStartedEventArgsMethods
    {

        internal static unsafe double get_HorizontalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_VerticalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE4, 0xAE, 0x27, 0xAA, 0xDD, 0x2B, 0x9A, 0x5D, 0x8A, 0x1C, 0xB3, 0x74, 0x80, 0xA2, 0x1, 0x2B };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("AA27AEE4-2BDD-5D9A-8A1C-B37480A2012B")]
    internal interface IDragStartedEventArgs : global::Microsoft.UI.Xaml.Controls.Primitives.IDragStartedEventArgs
    {
    }
    internal static class IDragStartedEventArgsFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs CreateInstanceWithHorizontalOffsetAndVerticalOffset(IObjectReference _obj, double horizontalOffset, double verticalOffset, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, double, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, horizontalOffset, verticalOffset, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA3, 0x8A, 0x7, 0x36, 0x6C, 0x90, 0xF0, 0x5E, 0x9D, 0x24, 0x30, 0xC0, 0x9F, 0x79, 0xC1, 0x8F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("36078AA3-906C-5EF0-9D24-30C09F79C18F")]
    internal interface IDragStartedEventArgsFactory : global::Microsoft.UI.Xaml.Controls.Primitives.IDragStartedEventArgsFactory
    {
    }
    internal static class IFlyoutBaseMethods
    {


        internal static unsafe void ShowAt(IObjectReference _obj, global::Microsoft.UI.Xaml.FrameworkElement placementTarget)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __placementTarget = default;
            try
            {
                __placementTarget = global::ABI.Microsoft.UI.Xaml.FrameworkElement.CreateMarshaler2(placementTarget);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[38](ThisPtr, MarshalInspectable<object>.GetAbi(__placementTarget)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__placementTarget);
            }
        }

        internal static unsafe void ShowAt(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject placementTarget, global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions showOptions)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __placementTarget = default;
            ObjectReferenceValue __showOptions = default;
            try
            {
                __placementTarget = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(placementTarget);
                __showOptions = global::ABI.Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions.CreateMarshaler2(showOptions);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[39](ThisPtr, MarshalInspectable<object>.GetAbi(__placementTarget), MarshalInspectable<object>.GetAbi(__showOptions)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__placementTarget);
                MarshalInspectable<object>.DisposeMarshaler(__showOptions);
            }
        }

        internal static unsafe void Hide(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[40](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void TryInvokeKeyboardAccelerator(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs args)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __args = default;
            try
            {
                __args = global::ABI.Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs.CreateMarshaler2(args);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[41](ThisPtr, MarshalInspectable<object>.GetAbi(__args)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__args);
            }
        }
        internal static unsafe bool get_AllowFocusOnInteraction(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_AllowFocusOnInteraction(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[10](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_AllowFocusWhenDisabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_AllowFocusWhenDisabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[14](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_AreOpenCloseAnimationsEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[18](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_AreOpenCloseAnimationsEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[19](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.ElementSoundMode get_ElementSoundMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.ElementSoundMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.ElementSoundMode*, int>**)ThisPtr)[23](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ElementSoundMode(IObjectReference _obj, global::Microsoft.UI.Xaml.ElementSoundMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.ElementSoundMode, int>**)ThisPtr)[24](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_InputDevicePrefersPrimaryCommands(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[17](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_IsConstrainedToRootBounds(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[22](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_IsOpen(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[27](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.LightDismissOverlayMode get_LightDismissOverlayMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.LightDismissOverlayMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.LightDismissOverlayMode*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_LightDismissOverlayMode(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.LightDismissOverlayMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.LightDismissOverlayMode, int>**)ThisPtr)[12](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject get_OverlayInputPassThroughElement(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[25](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_OverlayInputPassThroughElement(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[26](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutPlacementMode get_Placement(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutPlacementMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutPlacementMode*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Placement(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutPlacementMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutPlacementMode, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_ShouldConstrainToRootBounds(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[20](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_ShouldConstrainToRootBounds(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[21](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowMode get_ShowMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowMode*, int>**)ThisPtr)[15](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ShowMode(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowMode, int>**)ThisPtr)[16](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.FrameworkElement get_Target(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.FrameworkElement.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.FrameworkElement.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.XamlRoot get_XamlRoot(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[28](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.XamlRoot.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.XamlRoot.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_XamlRoot(IObjectReference _obj, global::Microsoft.UI.Xaml.XamlRoot value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.XamlRoot.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[29](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _Closed_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> MakeClosedTable()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_EventHandler_1_object.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref _Closed_, new(), null);
            return _Closed_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _Closed => _Closed_ ?? MakeClosedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>> Get_Closed2(IObjectReference _obj, object _thisObj)
        {
            return _Closed.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return  new global::ABI.WinRT.Interop.EventHandlerEventSource<object>(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[32],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[33],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase, global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs>>> _Closing_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase, global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs>>> MakeClosingTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Closing_, new(), null);
            return _Closing_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase, global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs>>> _Closing => _Closing_ ?? MakeClosingTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase, global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs>> Get_Closing2(IObjectReference _obj, object _thisObj)
        {
            return _Closing.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_Controls_Primitives_FlyoutBase__global__Microsoft_UI_Xaml_Controls_Primitives_FlyoutBaseClosingEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[36],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[37],
                1);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _Opened_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> MakeOpenedTable()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_EventHandler_1_object.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref _Opened_, new(), null);
            return _Opened_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _Opened => _Opened_ ?? MakeOpenedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>> Get_Opened2(IObjectReference _obj, object _thisObj)
        {
            return _Opened.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return  new global::ABI.WinRT.Interop.EventHandlerEventSource<object>(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[30],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[31],
                2);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _Opening_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> MakeOpeningTable()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_EventHandler_1_object.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref _Opening_, new(), null);
            return _Opening_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _Opening => _Opening_ ?? MakeOpeningTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>> Get_Opening2(IObjectReference _obj, object _thisObj)
        {
            return _Opening.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return  new global::ABI.WinRT.Interop.EventHandlerEventSource<object>(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[34],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[35],
                3);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xBF, 0x3, 0x66, 0xBB, 0x4D, 0x74, 0x31, 0x5C, 0xA8, 0x7D, 0x74, 0x43, 0x94, 0x63, 0x4D, 0x77 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("BB6603BF-744D-5C31-A87D-744394634D77")]
    internal interface IFlyoutBase : global::Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase
    {
    }
    internal static class IFlyoutBase2Methods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Media.SystemBackdrop get_SystemBackdrop(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.SystemBackdrop.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.SystemBackdrop.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SystemBackdrop(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.SystemBackdrop value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.SystemBackdrop.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x97, 0x2F, 0x59, 0x54, 0xE, 0xE4, 0xAD, 0x5C, 0x86, 0x4B, 0x32, 0x30, 0x7D, 0x4, 0x70, 0x20 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("54592F97-E40E-5CAD-864B-32307D047020")]
    internal interface IFlyoutBase2 : global::Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase2
    {
    }
    internal static class IFlyoutBaseClosingEventArgsMethods
    {

        internal static unsafe bool get_Cancel(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Cancel(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB4, 0x80, 0xB2, 0x7C, 0xCA, 0x1C, 0x5A, 0x5A, 0x8E, 0xA4, 0x19, 0x1A, 0x2B, 0xBC, 0x8B, 0x32 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("7CB280B4-1CCA-5A5A-8EA4-191A2BBC8B32")]
    internal interface IFlyoutBaseClosingEventArgs : global::Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseClosingEventArgs
    {
    }
    internal static class IFlyoutBaseFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x8F, 0x73, 0x6D, 0x0, 0x91, 0x7C, 0xF3, 0x5E, 0x8A, 0x80, 0xA5, 0x48, 0x10, 0x8D, 0xAB, 0x8B };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("006D738F-7C91-5EF3-8A80-A548108DAB8B")]
    internal interface IFlyoutBaseFactory : global::Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseFactory
    {
    }
    public static class IFlyoutBaseOverridesMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Control CreatePresenter(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Controls.Control.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Controls.Control.DisposeAbi(__retval);
            }
        }

        internal static unsafe void OnProcessKeyboardAccelerators(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs args)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __args = default;
            try
            {
                __args = global::ABI.Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs.CreateMarshaler2(args);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__args)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__args);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD8, 0x9E, 0xB1, 0x5B, 0xDE, 0x8, 0xEC, 0x5E, 0x91, 0xCB, 0x5F, 0xC5, 0x99, 0x74, 0xE8, 0x94 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IFlyoutBaseOverrides.AbiToProjectionVftablePtr;

    }

    [Guid("5BB19ED8-08DE-5EEC-91CB-5FC59974E894")]
    internal unsafe interface IFlyoutBaseOverrides : global::Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseOverrides
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IFlyoutBaseOverrides()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IFlyoutBaseOverrides), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 2);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_CreatePresenter_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_OnProcessKeyboardAccelerators_1;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_CreatePresenter_0(IntPtr thisPtr, IntPtr* result)
        {

            global::Microsoft.UI.Xaml.Controls.Control __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseOverrides>(thisPtr).CreatePresenter();
                *result = global::ABI.Microsoft.UI.Xaml.Controls.Control.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_OnProcessKeyboardAccelerators_1(IntPtr thisPtr, IntPtr args)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseOverrides>(thisPtr).OnProcessKeyboardAccelerators(global::ABI.Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs.FromAbi(args));

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }

    internal static class IFlyoutBaseStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase GetAttachedFlyout(IObjectReference _obj, global::Microsoft.UI.Xaml.FrameworkElement element)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            IntPtr __retval = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.FrameworkElement.CreateMarshaler2(element);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[19](ThisPtr, MarshalInspectable<object>.GetAbi(__element), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase.DisposeAbi(__retval);
            }
        }

        internal static unsafe void SetAttachedFlyout(IObjectReference _obj, global::Microsoft.UI.Xaml.FrameworkElement element, global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            ObjectReferenceValue __value = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.FrameworkElement.CreateMarshaler2(element);
                __value = global::ABI.Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[20](ThisPtr, MarshalInspectable<object>.GetAbi(__element), MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe void ShowAttachedFlyout(IObjectReference _obj, global::Microsoft.UI.Xaml.FrameworkElement flyoutOwner)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __flyoutOwner = default;
            try
            {
                __flyoutOwner = global::ABI.Microsoft.UI.Xaml.FrameworkElement.CreateMarshaler2(flyoutOwner);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[21](ThisPtr, MarshalInspectable<object>.GetAbi(__flyoutOwner)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__flyoutOwner);
            }
        }
        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_AllowFocusOnInteractionProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_AllowFocusWhenDisabledProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_AreOpenCloseAnimationsEnabledProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_AttachedFlyoutProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[18](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ElementSoundModeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[15](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_InputDevicePrefersPrimaryCommandsProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IsOpenProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[17](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_LightDismissOverlayModeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_OverlayInputPassThroughElementProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[16](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_PlacementProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ShouldConstrainToRootBoundsProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ShowModeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_TargetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x8E, 0x62, 0xEE, 0x63, 0xE3, 0xD2, 0x15, 0x55, 0xAE, 0xA4, 0xE4, 0x61, 0x8, 0x8C, 0xC, 0x4E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("63EE628E-D2E3-5515-AEA4-E461088C0C4E")]
    internal interface IFlyoutBaseStatics : global::Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics
    {
    }
    internal static class IFlyoutBaseStatics2Methods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SystemBackdropProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x2C, 0xCD, 0x3, 0x24, 0xB8, 0xA6, 0xC2, 0x5D, 0xBE, 0x3B, 0x2A, 0x4B, 0xDD, 0x7, 0x2E, 0xF1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2403CD2C-A6B8-5DC2-BE3B-2A4BDD072EF1")]
    internal interface IFlyoutBaseStatics2 : global::Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics2
    {
    }
    internal static class IFlyoutShowOptionsMethods
    {

        internal static unsafe global::System.Nullable<global::Windows.Foundation.Rect> get_ExclusionRect(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.Foundation.Rect>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.Foundation.Rect>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ExclusionRect(IObjectReference _obj, global::System.Nullable<global::Windows.Foundation.Rect> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.Foundation.Rect>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.Foundation.Rect>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutPlacementMode get_Placement(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutPlacementMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutPlacementMode*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Placement(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutPlacementMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutPlacementMode, int>**)ThisPtr)[13](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::System.Nullable<global::Windows.Foundation.Point> get_Position(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.Foundation.Point>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.Foundation.Point>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Position(IObjectReference _obj, global::System.Nullable<global::Windows.Foundation.Point> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.Foundation.Point>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.Foundation.Point>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowMode get_ShowMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowMode*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ShowMode(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowMode, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x93, 0x4A, 0x77, 0x30, 0x3, 0x28, 0xD3, 0x50, 0xB4, 0x6, 0x90, 0x4A, 0xEC, 0x3E, 0x17, 0x5D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("30774A93-2803-50D3-B406-904AEC3E175D")]
    internal interface IFlyoutShowOptions : global::Microsoft.UI.Xaml.Controls.Primitives.IFlyoutShowOptions
    {
    }
    internal static class IFlyoutShowOptionsFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x30, 0x6D, 0x42, 0x17, 0xD9, 0x70, 0xD7, 0x54, 0xBD, 0x39, 0xE7, 0xC4, 0xC9, 0x40, 0xC0, 0xF4 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("17426D30-70D9-54D7-BD39-E7C4C940C0F4")]
    internal interface IFlyoutShowOptionsFactory : global::Microsoft.UI.Xaml.Controls.Primitives.IFlyoutShowOptionsFactory
    {
    }
    internal static class IGridViewItemPresenterMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_CheckBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_CheckBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[13](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_CheckHintBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_CheckHintBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_CheckSelectingBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_CheckSelectingBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Thickness get_ContentMargin(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Thickness __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness*, int>**)ThisPtr)[48](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ContentMargin(IObjectReference _obj, global::Microsoft.UI.Xaml.Thickness value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness, int>**)ThisPtr)[49](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_DisabledOpacity(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[34](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_DisabledOpacity(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[35](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_DragBackground(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_DragBackground(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[15](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_DragForeground(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[16](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_DragForeground(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[17](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe double get_DragOpacity(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[36](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_DragOpacity(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[37](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_FocusBorderBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[18](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_FocusBorderBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[19](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.HorizontalAlignment get_GridViewItemPresenterHorizontalContentAlignment(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.HorizontalAlignment __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.HorizontalAlignment*, int>**)ThisPtr)[40](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_GridViewItemPresenterHorizontalContentAlignment(IObjectReference _obj, global::Microsoft.UI.Xaml.HorizontalAlignment value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.HorizontalAlignment, int>**)ThisPtr)[41](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Thickness get_GridViewItemPresenterPadding(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Thickness __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness*, int>**)ThisPtr)[44](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_GridViewItemPresenterPadding(IObjectReference _obj, global::Microsoft.UI.Xaml.Thickness value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness, int>**)ThisPtr)[45](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.VerticalAlignment get_GridViewItemPresenterVerticalContentAlignment(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.VerticalAlignment __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.VerticalAlignment*, int>**)ThisPtr)[42](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_GridViewItemPresenterVerticalContentAlignment(IObjectReference _obj, global::Microsoft.UI.Xaml.VerticalAlignment value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.VerticalAlignment, int>**)ThisPtr)[43](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_PlaceholderBackground(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[20](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_PlaceholderBackground(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[21](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_PointerOverBackground(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[22](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_PointerOverBackground(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[23](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Thickness get_PointerOverBackgroundMargin(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Thickness __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness*, int>**)ThisPtr)[46](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_PointerOverBackgroundMargin(IObjectReference _obj, global::Microsoft.UI.Xaml.Thickness value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness, int>**)ThisPtr)[47](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_ReorderHintOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[38](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ReorderHintOffset(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[39](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_SelectedBackground(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[24](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SelectedBackground(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[25](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Thickness get_SelectedBorderThickness(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Thickness __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness*, int>**)ThisPtr)[32](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_SelectedBorderThickness(IObjectReference _obj, global::Microsoft.UI.Xaml.Thickness value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness, int>**)ThisPtr)[33](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_SelectedForeground(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[26](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SelectedForeground(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[27](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_SelectedPointerOverBackground(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[28](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SelectedPointerOverBackground(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[29](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_SelectedPointerOverBorderBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[30](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SelectedPointerOverBorderBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[31](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe bool get_SelectionCheckMarkVisualEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_SelectionCheckMarkVisualEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD8, 0x2F, 0x77, 0x22, 0x30, 0xFE, 0x6F, 0x5B, 0x9B, 0x17, 0x5E, 0xEA, 0x5D, 0x70, 0xD8, 0x60 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("22772FD8-FE30-5B6F-9B17-5EEA5D70D860")]
    internal interface IGridViewItemPresenter : global::Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenter
    {
    }
    internal static class IGridViewItemPresenterFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.GridViewItemPresenter CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.GridViewItemPresenter.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.GridViewItemPresenter.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x60, 0x77, 0xF4, 0xD1, 0x53, 0xC3, 0x10, 0x5A, 0x8A, 0x6B, 0x9A, 0x1E, 0x3B, 0x52, 0xF9, 0x34 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D1F47760-C353-5A10-8A6B-9A1E3B52F934")]
    internal interface IGridViewItemPresenterFactory : global::Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterFactory
    {
    }
    internal static class IGridViewItemPresenterStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CheckBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CheckHintBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CheckSelectingBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ContentMarginProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[27](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_DisabledOpacityProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[20](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_DragBackgroundProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_DragForegroundProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_DragOpacityProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[21](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_FocusBorderBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_GridViewItemPresenterHorizontalContentAlignmentProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[23](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_GridViewItemPresenterPaddingProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[25](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_GridViewItemPresenterVerticalContentAlignmentProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[24](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_PlaceholderBackgroundProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_PointerOverBackgroundMarginProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[26](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_PointerOverBackgroundProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ReorderHintOffsetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[22](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SelectedBackgroundProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[15](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SelectedBorderThicknessProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[19](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SelectedForegroundProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[16](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SelectedPointerOverBackgroundProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[17](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SelectedPointerOverBorderBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[18](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SelectionCheckMarkVisualEnabledProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD1, 0x8E, 0xA5, 0x31, 0x1C, 0x90, 0x53, 0x57, 0x94, 0x4E, 0x4D, 0xD9, 0xF2, 0x2D, 0x24, 0x47 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("31A58ED1-901C-5753-944E-4DD9F22D2447")]
    internal interface IGridViewItemPresenterStatics : global::Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStatics
    {
    }
    internal static class IGridViewItemTemplateSettingsMethods
    {

        internal static unsafe int get_DragItemsCount(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x84, 0xE8, 0x33, 0x70, 0x17, 0x21, 0xE7, 0x56, 0xAF, 0xB8, 0xB7, 0xF5, 0xB8, 0xB6, 0x4C, 0x70 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("7033E884-2117-56E7-AFB8-B7F5B8B64C70")]
    internal interface IGridViewItemTemplateSettings : global::Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemTemplateSettings
    {
    }
    internal static class IInfoBarPanelMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Thickness get_HorizontalOrientationPadding(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Thickness __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_HorizontalOrientationPadding(IObjectReference _obj, global::Microsoft.UI.Xaml.Thickness value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Thickness get_VerticalOrientationPadding(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Thickness __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_VerticalOrientationPadding(IObjectReference _obj, global::Microsoft.UI.Xaml.Thickness value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFE, 0xD5, 0x2F, 0x4D, 0x75, 0xCB, 0xFF, 0x52, 0xB5, 0x7F, 0xA9, 0x92, 0x91, 0x23, 0x83, 0xCC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4D2FD5FE-CB75-52FF-B57F-A992912383CC")]
    internal interface IInfoBarPanel : global::Microsoft.UI.Xaml.Controls.Primitives.IInfoBarPanel
    {
    }
    internal static class IInfoBarPanelFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC5, 0xA8, 0xD1, 0x0, 0x31, 0xF6, 0x4A, 0x56, 0x8E, 0x9C, 0x7C, 0x5C, 0xCA, 0xD2, 0x38, 0xDE };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("00D1A8C5-F631-564A-8E9C-7C5CCAD238DE")]
    internal interface IInfoBarPanelFactory : global::Microsoft.UI.Xaml.Controls.Primitives.IInfoBarPanelFactory
    {
    }
    internal static class IInfoBarPanelStaticsMethods
    {


        internal static unsafe void SetHorizontalOrientationMargin(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject @object, global::Microsoft.UI.Xaml.Thickness value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __object = default;
            try
            {
                __object = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(@object);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Microsoft.UI.Xaml.Thickness, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__object), value));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__object);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Thickness GetHorizontalOrientationMargin(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject @object)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __object = default;
            global::Microsoft.UI.Xaml.Thickness __retval = default;
            try
            {
                __object = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(@object);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Microsoft.UI.Xaml.Thickness*, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__object), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__object);
            }
        }

        internal static unsafe void SetVerticalOrientationMargin(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject @object, global::Microsoft.UI.Xaml.Thickness value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __object = default;
            try
            {
                __object = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(@object);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Microsoft.UI.Xaml.Thickness, int>**)ThisPtr)[11](ThisPtr, MarshalInspectable<object>.GetAbi(__object), value));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__object);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Thickness GetVerticalOrientationMargin(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject @object)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __object = default;
            global::Microsoft.UI.Xaml.Thickness __retval = default;
            try
            {
                __object = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(@object);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Microsoft.UI.Xaml.Thickness*, int>**)ThisPtr)[12](ThisPtr, MarshalInspectable<object>.GetAbi(__object), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__object);
            }
        }
        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_HorizontalOrientationMarginProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_HorizontalOrientationPaddingProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_VerticalOrientationMarginProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_VerticalOrientationPaddingProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x5, 0x93, 0xF1, 0xE0, 0x92, 0xB3, 0xA6, 0x5F, 0x96, 0x70, 0x89, 0x58, 0x95, 0xA0, 0x67, 0xFF };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E0F19305-B392-5FA6-9670-895895A067FF")]
    internal interface IInfoBarPanelStatics : global::Microsoft.UI.Xaml.Controls.Primitives.IInfoBarPanelStatics
    {
    }
    internal static class IItemsChangedEventArgsMethods
    {

        internal static unsafe int get_Action(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe int get_ItemCount(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe int get_ItemUICount(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.GeneratorPosition get_OldPosition(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.Primitives.GeneratorPosition __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.GeneratorPosition*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.GeneratorPosition get_Position(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.Primitives.GeneratorPosition __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.GeneratorPosition*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x10, 0x16, 0xBA, 0xB2, 0x96, 0xE, 0x8A, 0x53, 0x97, 0x8F, 0xEC, 0xB, 0x37, 0x19, 0x32, 0x28 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B2BA1610-0E96-538A-978F-EC0B37193228")]
    internal interface IItemsChangedEventArgs : global::Microsoft.UI.Xaml.Controls.Primitives.IItemsChangedEventArgs
    {
    }
    internal static class IJumpListItemBackgroundConverterMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_Disabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Disabled(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_Enabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Enabled(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x52, 0xBB, 0x75, 0xC4, 0x34, 0xEA, 0xDE, 0x5C, 0x98, 0x51, 0x78, 0x41, 0xFE, 0xBD, 0x3D, 0x1D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C475BB52-EA34-5CDE-9851-7841FEBD3D1D")]
    internal interface IJumpListItemBackgroundConverter : global::Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemBackgroundConverter
    {
    }
    internal static class IJumpListItemBackgroundConverterStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_DisabledProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_EnabledProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x61, 0xB2, 0x3C, 0xB0, 0xEC, 0x71, 0xE, 0x54, 0x83, 0xAC, 0xE1, 0xA9, 0xFD, 0xD3, 0x35, 0xE6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B03CB261-71EC-540E-83AC-E1A9FDD335E6")]
    internal interface IJumpListItemBackgroundConverterStatics : global::Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemBackgroundConverterStatics
    {
    }
    internal static class IJumpListItemForegroundConverterMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_Disabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Disabled(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_Enabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Enabled(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE4, 0xE0, 0x8, 0x73, 0x2F, 0x10, 0x1A, 0x57, 0xBF, 0xDC, 0xC8, 0xF4, 0x11, 0xF0, 0x74, 0x0 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("7308E0E4-102F-571A-BFDC-C8F411F07400")]
    internal interface IJumpListItemForegroundConverter : global::Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemForegroundConverter
    {
    }
    internal static class IJumpListItemForegroundConverterStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_DisabledProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_EnabledProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x5D, 0xB9, 0xB3, 0x9A, 0x61, 0x40, 0xB4, 0x59, 0x9C, 0xE9, 0xF4, 0x5E, 0x2C, 0x5, 0xAD, 0xD7 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("9AB3B95D-4061-59B4-9CE9-F45E2C05ADD7")]
    internal interface IJumpListItemForegroundConverterStatics : global::Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemForegroundConverterStatics
    {
    }
    internal static class ILayoutInformationMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x8C, 0xA, 0xEA, 0xCE, 0x4F, 0x5A, 0x7A, 0x5D, 0x8F, 0xEA, 0x77, 0xB5, 0xE0, 0xE0, 0x23, 0xC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("CEEA0A8C-5A4F-5D7A-8FEA-77B5E0E0230C")]
    internal interface ILayoutInformation : global::Microsoft.UI.Xaml.Controls.Primitives.ILayoutInformation
    {
    }
    internal static class ILayoutInformationStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.UIElement GetLayoutExceptionElement(IObjectReference _obj, object dispatcher)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dispatcher = default;
            IntPtr __retval = default;
            try
            {
                __dispatcher = MarshalInspectable<object>.CreateMarshaler2(dispatcher);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__dispatcher), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.UIElement.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dispatcher);
                global::ABI.Microsoft.UI.Xaml.UIElement.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.Rect GetLayoutSlot(IObjectReference _obj, global::Microsoft.UI.Xaml.FrameworkElement element)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            global::Windows.Foundation.Rect __retval = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.FrameworkElement.CreateMarshaler2(element);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Windows.Foundation.Rect*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__element), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
            }
        }

        internal static unsafe global::Windows.Foundation.Size GetAvailableSize(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement element)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            global::Windows.Foundation.Size __retval = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(element);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Windows.Foundation.Size*, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__element), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x2D, 0x19, 0xDB, 0x8D, 0xFF, 0xB7, 0x7, 0x53, 0xAC, 0xF4, 0xD4, 0xE5, 0x47, 0xDA, 0x58, 0x15 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8DDB192D-B7FF-5307-ACF4-D4E547DA5815")]
    internal interface ILayoutInformationStatics : global::Microsoft.UI.Xaml.Controls.Primitives.ILayoutInformationStatics
    {
    }
    internal static class IListViewItemPresenterMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_CheckBoxBorderBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[90](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_CheckBoxBorderBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[91](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_CheckBoxBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[54](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_CheckBoxBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[55](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.CornerRadius get_CheckBoxCornerRadius(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.CornerRadius __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.CornerRadius*, int>**)ThisPtr)[98](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_CheckBoxCornerRadius(IObjectReference _obj, global::Microsoft.UI.Xaml.CornerRadius value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.CornerRadius, int>**)ThisPtr)[99](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_CheckBoxDisabledBorderBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[96](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_CheckBoxDisabledBorderBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[97](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_CheckBoxDisabledBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[80](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_CheckBoxDisabledBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[81](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_CheckBoxPointerOverBorderBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[92](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_CheckBoxPointerOverBorderBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[93](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_CheckBoxPointerOverBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[76](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_CheckBoxPointerOverBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[77](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_CheckBoxPressedBorderBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[94](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_CheckBoxPressedBorderBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[95](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_CheckBoxPressedBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[78](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_CheckBoxPressedBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[79](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_CheckBoxSelectedBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[82](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_CheckBoxSelectedBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[83](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_CheckBoxSelectedDisabledBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[88](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_CheckBoxSelectedDisabledBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[89](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_CheckBoxSelectedPointerOverBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[84](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_CheckBoxSelectedPointerOverBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[85](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_CheckBoxSelectedPressedBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[86](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_CheckBoxSelectedPressedBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[87](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_CheckBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_CheckBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[13](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_CheckDisabledBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[74](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_CheckDisabledBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[75](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_CheckHintBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_CheckHintBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenterCheckMode get_CheckMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenterCheckMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenterCheckMode*, int>**)ThisPtr)[58](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_CheckMode(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenterCheckMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenterCheckMode, int>**)ThisPtr)[59](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_CheckPressedBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[72](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_CheckPressedBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[73](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_CheckSelectingBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_CheckSelectingBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Thickness get_ContentMargin(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Thickness __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness*, int>**)ThisPtr)[48](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ContentMargin(IObjectReference _obj, global::Microsoft.UI.Xaml.Thickness value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness, int>**)ThisPtr)[49](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_DisabledOpacity(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[34](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_DisabledOpacity(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[35](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_DragBackground(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_DragBackground(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[15](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_DragForeground(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[16](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_DragForeground(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[17](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe double get_DragOpacity(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[36](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_DragOpacity(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[37](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_FocusBorderBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[18](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_FocusBorderBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[19](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_FocusSecondaryBorderBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[56](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_FocusSecondaryBorderBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[57](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.HorizontalAlignment get_ListViewItemPresenterHorizontalContentAlignment(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.HorizontalAlignment __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.HorizontalAlignment*, int>**)ThisPtr)[40](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ListViewItemPresenterHorizontalContentAlignment(IObjectReference _obj, global::Microsoft.UI.Xaml.HorizontalAlignment value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.HorizontalAlignment, int>**)ThisPtr)[41](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Thickness get_ListViewItemPresenterPadding(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Thickness __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness*, int>**)ThisPtr)[44](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ListViewItemPresenterPadding(IObjectReference _obj, global::Microsoft.UI.Xaml.Thickness value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness, int>**)ThisPtr)[45](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.VerticalAlignment get_ListViewItemPresenterVerticalContentAlignment(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.VerticalAlignment __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.VerticalAlignment*, int>**)ThisPtr)[42](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ListViewItemPresenterVerticalContentAlignment(IObjectReference _obj, global::Microsoft.UI.Xaml.VerticalAlignment value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.VerticalAlignment, int>**)ThisPtr)[43](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_PlaceholderBackground(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[20](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_PlaceholderBackground(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[21](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_PointerOverBackground(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[22](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_PointerOverBackground(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[23](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Thickness get_PointerOverBackgroundMargin(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Thickness __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness*, int>**)ThisPtr)[46](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_PointerOverBackgroundMargin(IObjectReference _obj, global::Microsoft.UI.Xaml.Thickness value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness, int>**)ThisPtr)[47](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_PointerOverBorderBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[122](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_PointerOverBorderBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[123](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_PointerOverForeground(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[60](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_PointerOverForeground(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[61](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_PressedBackground(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[52](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_PressedBackground(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[53](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe double get_ReorderHintOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[38](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ReorderHintOffset(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[39](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_RevealBackground(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[62](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_RevealBackground(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[63](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe bool get_RevealBackgroundShowsAboveContent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[68](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_RevealBackgroundShowsAboveContent(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[69](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_RevealBorderBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[64](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_RevealBorderBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[65](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Thickness get_RevealBorderThickness(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Thickness __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness*, int>**)ThisPtr)[66](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_RevealBorderThickness(IObjectReference _obj, global::Microsoft.UI.Xaml.Thickness value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness, int>**)ThisPtr)[67](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_SelectedBackground(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[24](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SelectedBackground(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[25](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_SelectedBorderBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[114](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SelectedBorderBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[115](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Thickness get_SelectedBorderThickness(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Thickness __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness*, int>**)ThisPtr)[32](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_SelectedBorderThickness(IObjectReference _obj, global::Microsoft.UI.Xaml.Thickness value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Thickness, int>**)ThisPtr)[33](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_SelectedDisabledBackground(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[70](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SelectedDisabledBackground(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[71](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_SelectedDisabledBorderBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[118](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SelectedDisabledBorderBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[119](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_SelectedForeground(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[26](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SelectedForeground(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[27](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_SelectedInnerBorderBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[120](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SelectedInnerBorderBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[121](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_SelectedPointerOverBackground(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[28](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SelectedPointerOverBackground(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[29](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_SelectedPointerOverBorderBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[30](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SelectedPointerOverBorderBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[31](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_SelectedPressedBackground(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[50](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SelectedPressedBackground(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[51](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_SelectedPressedBorderBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[116](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SelectedPressedBorderBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[117](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe bool get_SelectionCheckMarkVisualEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_SelectionCheckMarkVisualEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_SelectionIndicatorBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[106](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SelectionIndicatorBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[107](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.CornerRadius get_SelectionIndicatorCornerRadius(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.CornerRadius __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.CornerRadius*, int>**)ThisPtr)[100](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_SelectionIndicatorCornerRadius(IObjectReference _obj, global::Microsoft.UI.Xaml.CornerRadius value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.CornerRadius, int>**)ThisPtr)[101](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_SelectionIndicatorDisabledBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[112](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SelectionIndicatorDisabledBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[113](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenterSelectionIndicatorMode get_SelectionIndicatorMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenterSelectionIndicatorMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenterSelectionIndicatorMode*, int>**)ThisPtr)[104](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_SelectionIndicatorMode(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenterSelectionIndicatorMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenterSelectionIndicatorMode, int>**)ThisPtr)[105](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_SelectionIndicatorPointerOverBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[108](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SelectionIndicatorPointerOverBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[109](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_SelectionIndicatorPressedBrush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[110](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SelectionIndicatorPressedBrush(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[111](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe bool get_SelectionIndicatorVisualEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[102](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_SelectionIndicatorVisualEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[103](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x23, 0x26, 0x1, 0x81, 0x87, 0xD9, 0x82, 0x55, 0xBC, 0x28, 0x75, 0x5A, 0x95, 0xCA, 0xAF, 0x1C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("81012623-D987-5582-BC28-755A95CAAF1C")]
    internal interface IListViewItemPresenter : global::Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenter
    {
    }
    internal static class IListViewItemPresenterFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenter CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenter.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenter.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x66, 0xC2, 0x6A, 0xF8, 0x40, 0x27, 0x5C, 0x50, 0x95, 0xEB, 0xA7, 0x33, 0x1B, 0x53, 0xB4, 0xA3 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F86AC266-2740-505C-95EB-A7331B53B4A3")]
    internal interface IListViewItemPresenterFactory : global::Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterFactory
    {
    }
    internal static class IListViewItemPresenterStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CheckBoxBorderBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[48](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CheckBoxBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[30](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CheckBoxCornerRadiusProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[52](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CheckBoxDisabledBorderBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[51](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CheckBoxDisabledBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[43](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CheckBoxPointerOverBorderBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[49](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CheckBoxPointerOverBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[41](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CheckBoxPressedBorderBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[50](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CheckBoxPressedBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[42](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CheckBoxSelectedBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[44](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CheckBoxSelectedDisabledBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[47](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CheckBoxSelectedPointerOverBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[45](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CheckBoxSelectedPressedBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[46](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CheckBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CheckDisabledBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[40](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CheckHintBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CheckModeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[32](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CheckPressedBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[39](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CheckSelectingBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ContentMarginProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[27](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_DisabledOpacityProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[20](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_DragBackgroundProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_DragForegroundProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_DragOpacityProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[21](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_FocusBorderBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_FocusSecondaryBorderBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[31](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ListViewItemPresenterHorizontalContentAlignmentProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[23](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ListViewItemPresenterPaddingProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[25](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ListViewItemPresenterVerticalContentAlignmentProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[24](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_PlaceholderBackgroundProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_PointerOverBackgroundMarginProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[26](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_PointerOverBackgroundProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_PointerOverBorderBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[64](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_PointerOverForegroundProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[33](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_PressedBackgroundProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[29](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ReorderHintOffsetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[22](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_RevealBackgroundProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[34](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_RevealBackgroundShowsAboveContentProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[37](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_RevealBorderBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[35](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_RevealBorderThicknessProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[36](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SelectedBackgroundProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[15](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SelectedBorderBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[60](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SelectedBorderThicknessProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[19](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SelectedDisabledBackgroundProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[38](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SelectedDisabledBorderBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[62](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SelectedForegroundProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[16](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SelectedInnerBorderBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[63](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SelectedPointerOverBackgroundProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[17](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SelectedPointerOverBorderBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[18](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SelectedPressedBackgroundProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[28](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SelectedPressedBorderBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[61](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SelectionCheckMarkVisualEnabledProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SelectionIndicatorBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[56](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SelectionIndicatorCornerRadiusProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[53](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SelectionIndicatorDisabledBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[59](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SelectionIndicatorModeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[55](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SelectionIndicatorPointerOverBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[57](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SelectionIndicatorPressedBrushProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[58](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SelectionIndicatorVisualEnabledProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[54](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF9, 0x10, 0x8, 0xFB, 0x75, 0x34, 0x3A, 0x59, 0x88, 0xA8, 0xED, 0xBB, 0xF7, 0x6F, 0xA9, 0xC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("FB0810F9-3475-593A-88A8-EDBBF76FA90C")]
    internal interface IListViewItemPresenterStatics : global::Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics
    {
    }
    internal static class IListViewItemTemplateSettingsMethods
    {

        internal static unsafe int get_DragItemsCount(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x14, 0x27, 0x30, 0x6E, 0x55, 0x29, 0x61, 0x59, 0x94, 0xED, 0x5D, 0xC, 0xC, 0x1D, 0xB, 0x7 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("6E302714-2955-5961-94ED-5D0C0C1D0B07")]
    internal interface IListViewItemTemplateSettings : global::Microsoft.UI.Xaml.Controls.Primitives.IListViewItemTemplateSettings
    {
    }
    internal static class ILoopingSelectorMethods
    {

        internal static unsafe int get_ItemHeight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[16](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ItemHeight(IObjectReference _obj, int value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int>**)ThisPtr)[17](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.DataTemplate get_ItemTemplate(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[18](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DataTemplate.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DataTemplate.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ItemTemplate(IObjectReference _obj, global::Microsoft.UI.Xaml.DataTemplate value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.DataTemplate.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[19](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe int get_ItemWidth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ItemWidth(IObjectReference _obj, int value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int>**)ThisPtr)[15](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::System.Collections.Generic.IList<object> get_Items(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_object.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<object>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<object>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Items(IObjectReference _obj, global::System.Collections.Generic.IList<object> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Collections.Generic.IList<object>>.CreateMarshaler2(value, global::ABI.System.Collections.Generic.IListMethods<object>.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe int get_SelectedIndex(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_SelectedIndex(IObjectReference _obj, int value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe object get_SelectedItem(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SelectedItem(IObjectReference _obj, object value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInspectable<object>.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[13](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe bool get_ShouldLoop(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_ShouldLoop(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Controls.SelectionChangedEventHandler>> _SelectionChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Controls.SelectionChangedEventHandler>> MakeSelectionChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _SelectionChanged_, new(), null);
            return _SelectionChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Controls.SelectionChangedEventHandler>> _SelectionChanged => _SelectionChanged_ ?? MakeSelectionChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Controls.SelectionChangedEventHandler> Get_SelectionChanged2(IObjectReference _obj, object _thisObj)
        {
            return _SelectionChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_Controls_SelectionChangedEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[20],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[21],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xAC, 0x59, 0x77, 0x7, 0x52, 0x6B, 0x54, 0x50, 0xBD, 0x49, 0x9E, 0xBA, 0x84, 0x3C, 0xF8, 0x94 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("077759AC-6B52-5054-BD49-9EBA843CF894")]
    internal interface ILoopingSelector : global::Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelector
    {
    }
    internal static class ILoopingSelectorItemMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x95, 0x65, 0xD3, 0x75, 0x4F, 0xBF, 0x93, 0x53, 0x81, 0x9F, 0xEB, 0x1E, 0x32, 0x1C, 0xE1, 0xDC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("75D36595-BF4F-5393-819F-EB1E321CE1DC")]
    internal interface ILoopingSelectorItem : global::Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorItem
    {
    }
    internal static class ILoopingSelectorPanelMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA4, 0xC3, 0x79, 0x74, 0xB1, 0xC5, 0x12, 0x51, 0xBE, 0xA9, 0xBE, 0xEF, 0x5C, 0xC7, 0x9F, 0x57 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("7479C3A4-C5B1-5112-BEA9-BEEF5CC79F57")]
    internal interface ILoopingSelectorPanel : global::Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorPanel
    {
    }
    internal static class ILoopingSelectorStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ItemHeightProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ItemTemplateProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ItemWidthProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ItemsProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SelectedIndexProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SelectedItemProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ShouldLoopProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE, 0x77, 0xF8, 0xE7, 0x9B, 0x72, 0xAA, 0x57, 0x9A, 0x79, 0xED, 0xE3, 0xF8, 0x42, 0x53, 0xCC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E7F8770E-729B-57AA-9A79-EDE3F84253CC")]
    internal interface ILoopingSelectorStatics : global::Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorStatics
    {
    }
    internal static class IMenuFlyoutItemTemplateSettingsMethods
    {

        internal static unsafe double get_KeyboardAcceleratorTextMinWidth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x1F, 0x8B, 0x7B, 0xFA, 0xD, 0x2, 0xEC, 0x58, 0x86, 0x58, 0xF2, 0xCE, 0x97, 0x31, 0x0, 0x51 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("FA7B8B1F-020D-58EC-8658-F2CE97310051")]
    internal interface IMenuFlyoutItemTemplateSettings : global::Microsoft.UI.Xaml.Controls.Primitives.IMenuFlyoutItemTemplateSettings
    {
    }
    internal static class IMenuFlyoutPresenterTemplateSettingsMethods
    {

        internal static unsafe double get_FlyoutContentMinWidth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7E, 0xFA, 0xFC, 0x2B, 0x3C, 0x48, 0xC9, 0x5F, 0xB0, 0x70, 0xFB, 0xB5, 0x8E, 0x6E, 0x97, 0x4D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2BFCFA7E-483C-5FC9-B070-FBB58E6E974D")]
    internal interface IMenuFlyoutPresenterTemplateSettings : global::Microsoft.UI.Xaml.Controls.Primitives.IMenuFlyoutPresenterTemplateSettings
    {
    }
    internal static class IMonochromaticOverlayPresenterMethods
    {

        internal static unsafe global::Windows.UI.Color get_ReplacementColor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ReplacementColor(IObjectReference _obj, global::Windows.UI.Color value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.UIElement get_SourceElement(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.UIElement.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.UIElement.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SourceElement(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x92, 0x1E, 0xD, 0x3F, 0x50, 0x54, 0x78, 0x50, 0x8F, 0x72, 0x5A, 0xC1, 0x74, 0x99, 0x76, 0xE3 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("3F0D1E92-5450-5078-8F72-5AC1749976E3")]
    internal interface IMonochromaticOverlayPresenter : global::Microsoft.UI.Xaml.Controls.Primitives.IMonochromaticOverlayPresenter
    {
    }
    internal static class IMonochromaticOverlayPresenterFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.MonochromaticOverlayPresenter CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.MonochromaticOverlayPresenter.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.MonochromaticOverlayPresenter.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7B, 0x84, 0x97, 0x49, 0x58, 0xB5, 0x8C, 0x5C, 0x82, 0x98, 0xBE, 0x15, 0x32, 0xE8, 0x98, 0xEC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4997847B-B558-5C8C-8298-BE1532E898EC")]
    internal interface IMonochromaticOverlayPresenterFactory : global::Microsoft.UI.Xaml.Controls.Primitives.IMonochromaticOverlayPresenterFactory
    {
    }
    internal static class IMonochromaticOverlayPresenterStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ReplacementColorProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SourceElementProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x94, 0xBF, 0x31, 0xA9, 0xC6, 0xA9, 0x10, 0x5D, 0x83, 0xAC, 0x14, 0x92, 0x73, 0x9E, 0x11, 0xE4 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A931BF94-A9C6-5D10-83AC-1492739E11E4")]
    internal interface IMonochromaticOverlayPresenterStatics : global::Microsoft.UI.Xaml.Controls.Primitives.IMonochromaticOverlayPresenterStatics
    {
    }
    internal static class INavigationViewItemPresenterMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Controls.IconElement get_Icon(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Controls.IconElement.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Controls.IconElement.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Icon(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.IconElement value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Controls.IconElement.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings get_TemplateSettings(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF5, 0x9D, 0x93, 0x64, 0xC, 0x76, 0xB, 0x5B, 0xAF, 0x4D, 0xD8, 0xDD, 0x4E, 0xE5, 0x2, 0x78 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("64939DF5-760C-5B0B-AF4D-D8DD4EE50278")]
    internal interface INavigationViewItemPresenter : global::Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenter
    {
    }
    internal static class INavigationViewItemPresenter2Methods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Controls.InfoBadge get_InfoBadge(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Controls.InfoBadge.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Controls.InfoBadge.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_InfoBadge(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.InfoBadge value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Controls.InfoBadge.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x30, 0x57, 0x77, 0x3F, 0x13, 0x37, 0x3B, 0x5B, 0x96, 0x0, 0x53, 0xB7, 0x9F, 0xFF, 0x2E, 0x35 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("3F775730-3713-5B3B-9600-53B79FFF2E35")]
    internal interface INavigationViewItemPresenter2 : global::Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenter2
    {
    }
    internal static class INavigationViewItemPresenterFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x60, 0x1, 0x8B, 0xB2, 0x2C, 0x2, 0x3C, 0x59, 0xAB, 0x9A, 0x7B, 0x3D, 0xED, 0x2C, 0x7, 0x54 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B28B0160-022C-593C-AB9A-7B3DED2C0754")]
    internal interface INavigationViewItemPresenterFactory : global::Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterFactory
    {
    }
    internal static class INavigationViewItemPresenterStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IconProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_TemplateSettingsProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x68, 0xF0, 0x7, 0x3B, 0x64, 0xA7, 0x9C, 0x54, 0xB4, 0xCF, 0xEB, 0xAB, 0x40, 0xEC, 0x5D, 0xD1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("3B07F068-A764-549C-B4CF-EBAB40EC5DD1")]
    internal interface INavigationViewItemPresenterStatics : global::Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterStatics
    {
    }
    internal static class INavigationViewItemPresenterStatics2Methods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_InfoBadgeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x61, 0x3F, 0x47, 0x4B, 0x17, 0x3F, 0x4F, 0x5E, 0x84, 0x53, 0x54, 0x1D, 0xF9, 0x47, 0xA7, 0x89 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4B473F61-3F17-5E4F-8453-541DF947A789")]
    internal interface INavigationViewItemPresenterStatics2 : global::Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterStatics2
    {
    }
    internal static class INavigationViewItemPresenterTemplateSettingsMethods
    {

        internal static unsafe double get_IconWidth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_SmallerIconWidth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x50, 0x97, 0x11, 0xA5, 0x71, 0xFA, 0xF2, 0x56, 0xBF, 0xA4, 0x79, 0x9D, 0x9F, 0x30, 0x4C, 0xB8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A5119750-FA71-56F2-BFA4-799D9F304CB8")]
    internal interface INavigationViewItemPresenterTemplateSettings : global::Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterTemplateSettings
    {
    }
    internal static class INavigationViewItemPresenterTemplateSettingsFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x28, 0x13, 0xEF, 0x19, 0xC7, 0x52, 0xE3, 0x55, 0xB1, 0xBB, 0x92, 0x3F, 0x2F, 0x39, 0xBD, 0x6E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("19EF1328-52C7-55E3-B1BB-923F2F39BD6E")]
    internal interface INavigationViewItemPresenterTemplateSettingsFactory : global::Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterTemplateSettingsFactory
    {
    }
    internal static class INavigationViewItemPresenterTemplateSettingsStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IconWidthProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SmallerIconWidthProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x42, 0x96, 0xF0, 0x72, 0x58, 0xC6, 0x6, 0x5B, 0x8C, 0x81, 0x15, 0x66, 0xB7, 0x37, 0xB7, 0x46 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("72F09642-C658-5B06-8C81-1566B737B746")]
    internal interface INavigationViewItemPresenterTemplateSettingsStatics : global::Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterTemplateSettingsStatics
    {
    }
    internal static class IOrientedVirtualizingPanelMethods
    {


        internal static unsafe void LineUp(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[18](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void LineDown(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[19](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void LineLeft(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[20](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void LineRight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[21](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void PageUp(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[22](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void PageDown(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[23](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void PageLeft(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[24](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void PageRight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[25](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void MouseWheelUp(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[26](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void MouseWheelDown(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[27](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void MouseWheelLeft(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[28](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void MouseWheelRight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[29](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void SetHorizontalOffset(IObjectReference _obj, double offset)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[30](ThisPtr, offset));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void SetVerticalOffset(IObjectReference _obj, double offset)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[31](ThisPtr, offset));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.Foundation.Rect MakeVisible(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement visual, global::Windows.Foundation.Rect rectangle)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __visual = default;
            global::Windows.Foundation.Rect __retval = default;
            try
            {
                __visual = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(visual);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Windows.Foundation.Rect, global::Windows.Foundation.Rect*, int>**)ThisPtr)[32](ThisPtr, MarshalInspectable<object>.GetAbi(__visual), rectangle, &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__visual);
            }
        }
        internal static unsafe bool get_CanHorizontallyScroll(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_CanHorizontallyScroll(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[9](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_CanVerticallyScroll(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_CanVerticallyScroll(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_ExtentHeight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_ExtentWidth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_HorizontalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe object get_ScrollOwner(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[16](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ScrollOwner(IObjectReference _obj, object value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInspectable<object>.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[17](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe double get_VerticalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[15](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_ViewportHeight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_ViewportWidth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x84, 0x29, 0xD, 0x45, 0x70, 0x1E, 0xD8, 0x53, 0x82, 0x69, 0xA2, 0x75, 0x64, 0xDA, 0xA6, 0x9F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("450D2984-1E70-53D8-8269-A27564DAA69F")]
    internal interface IOrientedVirtualizingPanel : global::Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanel
    {
    }
    internal static class IOrientedVirtualizingPanelFactoryMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF4, 0x98, 0xC, 0xA7, 0x71, 0xD6, 0x46, 0x5F, 0x9B, 0x1, 0x28, 0xB1, 0xB5, 0x52, 0x8F, 0xC0 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A70C98F4-D671-5F46-9B01-28B1B5528FC0")]
    internal interface IOrientedVirtualizingPanelFactory : global::Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelFactory
    {
    }
    internal static class IPickerFlyoutBaseMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x30, 0xC0, 0x2C, 0x8C, 0xFE, 0x14, 0xCA, 0x5F, 0x8C, 0xE3, 0xE1, 0x1A, 0x91, 0x86, 0x32, 0xCC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8C2CC030-14FE-5FCA-8CE3-E11A918632CC")]
    internal interface IPickerFlyoutBase : global::Microsoft.UI.Xaml.Controls.Primitives.IPickerFlyoutBase
    {
    }
    internal static class IPickerFlyoutBaseFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB5, 0xDA, 0x31, 0x82, 0x8B, 0x4B, 0x74, 0x56, 0xB2, 0x73, 0x1C, 0x66, 0x70, 0x1C, 0x14, 0xE1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8231DAB5-4B8B-5674-B273-1C66701C14E1")]
    internal interface IPickerFlyoutBaseFactory : global::Microsoft.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseFactory
    {
    }
    public static class IPickerFlyoutBaseOverridesMethods
    {


        internal static unsafe void OnConfirmed(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[6](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool ShouldShowConfirmationButtons(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFC, 0xF, 0x9, 0x5B, 0x23, 0xD4, 0x56, 0x57, 0xA0, 0x1C, 0xAA, 0x73, 0x45, 0x79, 0xD8, 0x56 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IPickerFlyoutBaseOverrides.AbiToProjectionVftablePtr;

    }

    [Guid("5B090FFC-D423-5756-A01C-AA734579D856")]
    internal unsafe interface IPickerFlyoutBaseOverrides : global::Microsoft.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseOverrides
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IPickerFlyoutBaseOverrides()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IPickerFlyoutBaseOverrides), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 2);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_OnConfirmed_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_ShouldShowConfirmationButtons_1;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_OnConfirmed_0(IntPtr thisPtr)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseOverrides>(thisPtr).OnConfirmed();

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_ShouldShowConfirmationButtons_1(IntPtr thisPtr, byte* result)
        {

            bool __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseOverrides>(thisPtr).ShouldShowConfirmationButtons();
                *result = (byte)(__result ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }

    internal static class IPickerFlyoutBaseStaticsMethods
    {


        internal static unsafe string GetTitle(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject element)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            IntPtr __retval = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(element);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__element), &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe void SetTitle(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject element, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(element);
                MarshalString.Pinnable __value = new(value);
                fixed(void* ___value = __value)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__element), MarshalString.GetAbi(ref __value)));
                    global::System.GC.KeepAlive(_obj);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
            }
        }
        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_TitleProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC2, 0x4D, 0x41, 0xE, 0xE0, 0x38, 0xFE, 0x5E, 0xBA, 0xE8, 0xA0, 0xC6, 0xA7, 0x85, 0x14, 0xC8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("0E414DC2-38E0-5EFE-BAE8-A0C6A78514C8")]
    internal interface IPickerFlyoutBaseStatics : global::Microsoft.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseStatics
    {
    }
    internal static class IPivotHeaderItemMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x77, 0x6F, 0x2D, 0x61, 0x76, 0x6C, 0x39, 0x52, 0x88, 0x94, 0xEF, 0xBA, 0xB0, 0xF5, 0x3E, 0x3E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("612D6F77-6C76-5239-8894-EFBAB0F53E3E")]
    internal interface IPivotHeaderItem : global::Microsoft.UI.Xaml.Controls.Primitives.IPivotHeaderItem
    {
    }
    internal static class IPivotHeaderItemFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderItem CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderItem.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderItem.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x66, 0x1A, 0xDB, 0xD8, 0x84, 0x13, 0x8D, 0x51, 0xBC, 0x8F, 0x9E, 0xDC, 0x2C, 0xA7, 0x91, 0x90 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D8DB1A66-1384-518D-BC8F-9EDC2CA79190")]
    internal interface IPivotHeaderItemFactory : global::Microsoft.UI.Xaml.Controls.Primitives.IPivotHeaderItemFactory
    {
    }
    internal static class IPivotHeaderPanelMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xED, 0x5B, 0xAF, 0xB5, 0x2F, 0x5F, 0xF6, 0x5A, 0xBF, 0x17, 0xC0, 0x85, 0x53, 0x1C, 0x88, 0xF };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B5AF5BED-5F2F-5AF6-BF17-C085531C880F")]
    internal interface IPivotHeaderPanel : global::Microsoft.UI.Xaml.Controls.Primitives.IPivotHeaderPanel
    {
    }
    internal static class IPivotPanelMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xCF, 0xCD, 0x66, 0x8E, 0xF5, 0x3B, 0xE0, 0x5F, 0xB0, 0x5B, 0x11, 0x25, 0xE9, 0x61, 0xF0, 0xCC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8E66CDCF-3BF5-5FE0-B05B-1125E961F0CC")]
    internal interface IPivotPanel : global::Microsoft.UI.Xaml.Controls.Primitives.IPivotPanel
    {
    }
    internal static class IPopupMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.UIElement get_Child(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.UIElement.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.UIElement.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Child(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.TransitionCollection get_ChildTransitions(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Animation.TransitionCollection.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Animation.TransitionCollection.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ChildTransitions(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Animation.TransitionCollection value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Animation.TransitionCollection.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[15](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe double get_HorizontalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_HorizontalOffset(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsConstrainedToRootBounds(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[22](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_IsLightDismissEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[16](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsLightDismissEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[17](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsOpen(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsOpen(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[9](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.LightDismissOverlayMode get_LightDismissOverlayMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.LightDismissOverlayMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.LightDismissOverlayMode*, int>**)ThisPtr)[18](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_LightDismissOverlayMode(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.LightDismissOverlayMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.LightDismissOverlayMode, int>**)ThisPtr)[19](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_ShouldConstrainToRootBounds(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[20](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_ShouldConstrainToRootBounds(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[21](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_VerticalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_VerticalOffset(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[13](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _Closed_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> MakeClosedTable()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_EventHandler_1_object.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref _Closed_, new(), null);
            return _Closed_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _Closed => _Closed_ ?? MakeClosedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>> Get_Closed2(IObjectReference _obj, object _thisObj)
        {
            return _Closed.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return  new global::ABI.WinRT.Interop.EventHandlerEventSource<object>(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[25],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[26],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _Opened_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> MakeOpenedTable()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_EventHandler_1_object.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref _Opened_, new(), null);
            return _Opened_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _Opened => _Opened_ ?? MakeOpenedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>> Get_Opened2(IObjectReference _obj, object _thisObj)
        {
            return _Opened.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return  new global::ABI.WinRT.Interop.EventHandlerEventSource<object>(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[23],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[24],
                1);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x9D, 0xB1, 0x3A, 0x4E, 0x95, 0x2F, 0x9C, 0x57, 0x95, 0x35, 0x90, 0x6C, 0x58, 0x62, 0x94, 0x37 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4E3AB19D-2F95-579C-9535-906C58629437")]
    internal interface IPopup : global::Microsoft.UI.Xaml.Controls.Primitives.IPopup
    {
    }
    internal static class IPopup2Methods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.PopupPlacementMode get_ActualPlacement(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.Primitives.PopupPlacementMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.PopupPlacementMode*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.PopupPlacementMode get_DesiredPlacement(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.Primitives.PopupPlacementMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.PopupPlacementMode*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_DesiredPlacement(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.Primitives.PopupPlacementMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.PopupPlacementMode, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.FrameworkElement get_PlacementTarget(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.FrameworkElement.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.FrameworkElement.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_PlacementTarget(IObjectReference _obj, global::Microsoft.UI.Xaml.FrameworkElement value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.FrameworkElement.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _ActualPlacementChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> MakeActualPlacementChangedTable()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_EventHandler_1_object.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref _ActualPlacementChanged_, new(), null);
            return _ActualPlacementChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _ActualPlacementChanged => _ActualPlacementChanged_ ?? MakeActualPlacementChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>> Get_ActualPlacementChanged2(IObjectReference _obj, object _thisObj)
        {
            return _ActualPlacementChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return  new global::ABI.WinRT.Interop.EventHandlerEventSource<object>(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[11],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[12],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x43, 0x4F, 0x9C, 0xEA, 0x37, 0xA9, 0xD5, 0x53, 0xB6, 0x65, 0x66, 0x40, 0xAD, 0x7E, 0xC2, 0xF4 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("EA9C4F43-A937-53D5-B665-6640AD7EC2F4")]
    internal interface IPopup2 : global::Microsoft.UI.Xaml.Controls.Primitives.IPopup2
    {
    }
    internal static class IPopup3Methods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Media.SystemBackdrop get_SystemBackdrop(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.SystemBackdrop.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.SystemBackdrop.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SystemBackdrop(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.SystemBackdrop value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.SystemBackdrop.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x25, 0x6C, 0x73, 0x3, 0x36, 0xDD, 0x44, 0x53, 0x9A, 0x8D, 0x3F, 0x4E, 0x8E, 0x61, 0x6C, 0xBA };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("03736C25-DD36-5344-9A8D-3F4E8E616CBA")]
    internal interface IPopup3 : global::Microsoft.UI.Xaml.Controls.Primitives.IPopup3
    {
    }
    internal static class IPopupStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ChildProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ChildTransitionsProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_HorizontalOffsetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IsLightDismissEnabledProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IsOpenProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_LightDismissOverlayModeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ShouldConstrainToRootBoundsProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_VerticalOffsetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA4, 0xFA, 0xAC, 0xC1, 0x9A, 0x20, 0xB8, 0x5F, 0x89, 0x34, 0x88, 0x25, 0x97, 0x67, 0x69, 0xB8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C1ACFAA4-209A-5FB8-8934-8825976769B8")]
    internal interface IPopupStatics : global::Microsoft.UI.Xaml.Controls.Primitives.IPopupStatics
    {
    }
    internal static class IPopupStatics2Methods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_DesiredPlacementProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_PlacementTargetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x5A, 0x28, 0xB3, 0x79, 0x30, 0x13, 0xFD, 0x5C, 0xAF, 0x2F, 0x88, 0xEF, 0xA0, 0x7, 0x70, 0xA9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("79B3285A-1330-5CFD-AF2F-88EFA00770A9")]
    internal interface IPopupStatics2 : global::Microsoft.UI.Xaml.Controls.Primitives.IPopupStatics2
    {
    }
    internal static class IPopupStatics3Methods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SystemBackdropProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x6D, 0x65, 0x9, 0x24, 0xF9, 0x84, 0x79, 0x59, 0x8A, 0xDF, 0xF3, 0xDB, 0x71, 0x53, 0xB, 0x22 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2409656D-84F9-5979-8ADF-F3DB71530B22")]
    internal interface IPopupStatics3 : global::Microsoft.UI.Xaml.Controls.Primitives.IPopupStatics3
    {
    }
    internal static class IRangeBaseMethods
    {

        internal static unsafe double get_LargeChange(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_LargeChange(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[13](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_Maximum(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Maximum(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_Minimum(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Minimum(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_SmallChange(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_SmallChange(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_Value(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Value(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[15](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler>> _ValueChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler>> MakeValueChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ValueChanged_, new(), null);
            return _ValueChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler>> _ValueChanged => _ValueChanged_ ?? MakeValueChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler> Get_ValueChanged2(IObjectReference _obj, object _thisObj)
        {
            return _ValueChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_Controls_Primitives_RangeBaseValueChangedEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[16],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[17],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x61, 0x6D, 0xD, 0x54, 0xAC, 0x8F, 0x5C, 0x5D, 0xB5, 0xB0, 0xE1, 0x72, 0xA7, 0xDD, 0xE1, 0x3 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("540D6D61-8FAC-5D5C-B5B0-E172A7DDE103")]
    internal interface IRangeBase : global::Microsoft.UI.Xaml.Controls.Primitives.IRangeBase
    {
    }
    internal static class IRangeBaseFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.RangeBase.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.RangeBase.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE2, 0x5, 0xC2, 0x41, 0x22, 0x44, 0xCA, 0x5D, 0x9B, 0x49, 0xE3, 0x12, 0x10, 0xEA, 0x39, 0x6C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("41C205E2-4422-5DCA-9B49-E31210EA396C")]
    internal interface IRangeBaseFactory : global::Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseFactory
    {
    }
    public static class IRangeBaseOverridesMethods
    {


        internal static unsafe void OnMinimumChanged(IObjectReference _obj, double oldMinimum, double newMinimum)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, double, int>**)ThisPtr)[6](ThisPtr, oldMinimum, newMinimum));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void OnMaximumChanged(IObjectReference _obj, double oldMaximum, double newMaximum)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, double, int>**)ThisPtr)[7](ThisPtr, oldMaximum, newMaximum));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void OnValueChanged(IObjectReference _obj, double oldValue, double newValue)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, double, int>**)ThisPtr)[8](ThisPtr, oldValue, newValue));
            global::System.GC.KeepAlive(_obj);
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x6F, 0xB7, 0xDE, 0xB3, 0xA6, 0x68, 0x14, 0x5C, 0xA8, 0x24, 0xAB, 0x58, 0xE8, 0x77, 0x47, 0x45 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IRangeBaseOverrides.AbiToProjectionVftablePtr;

    }

    [Guid("B3DEB76F-68A6-5C14-A824-AB58E8774745")]
    internal unsafe interface IRangeBaseOverrides : global::Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseOverrides
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IRangeBaseOverrides()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IRangeBaseOverrides), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 3);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, double, double, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_OnMinimumChanged_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, double, double, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_OnMaximumChanged_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, double, double, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_OnValueChanged_2;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_OnMinimumChanged_0(IntPtr thisPtr, double oldMinimum, double newMinimum)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseOverrides>(thisPtr).OnMinimumChanged(oldMinimum, newMinimum);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_OnMaximumChanged_1(IntPtr thisPtr, double oldMaximum, double newMaximum)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseOverrides>(thisPtr).OnMaximumChanged(oldMaximum, newMaximum);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_OnValueChanged_2(IntPtr thisPtr, double oldValue, double newValue)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseOverrides>(thisPtr).OnValueChanged(oldValue, newValue);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }

    internal static class IRangeBaseStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_LargeChangeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_MaximumProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_MinimumProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SmallChangeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ValueProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x49, 0x5E, 0xED, 0x4A, 0xEC, 0x64, 0xF1, 0x56, 0x87, 0x4D, 0xB8, 0xC0, 0xF8, 0x3F, 0x9A, 0xC8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4AED5E49-64EC-56F1-874D-B8C0F83F9AC8")]
    internal interface IRangeBaseStatics : global::Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseStatics
    {
    }
    internal static class IRangeBaseValueChangedEventArgsMethods
    {

        internal static unsafe double get_NewValue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_OldValue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x92, 0x16, 0x18, 0xB0, 0x78, 0x95, 0xC7, 0x51, 0x9D, 0x1C, 0xAD, 0xFC, 0xF8, 0x94, 0x5A, 0xA9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B0181692-9578-51C7-9D1C-ADFCF8945AA9")]
    internal interface IRangeBaseValueChangedEventArgs : global::Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseValueChangedEventArgs
    {
    }
    internal static class IRepeatButtonMethods
    {

        internal static unsafe int get_Delay(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Delay(IObjectReference _obj, int value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe int get_Interval(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Interval(IObjectReference _obj, int value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x28, 0xC7, 0xF4, 0x97, 0x94, 0x4A, 0xB5, 0x56, 0x91, 0xE4, 0xE7, 0xC6, 0xF6, 0xA1, 0x25, 0x1A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("97F4C728-4A94-56B5-91E4-E7C6F6A1251A")]
    internal interface IRepeatButton : global::Microsoft.UI.Xaml.Controls.Primitives.IRepeatButton
    {
    }
    internal static class IRepeatButtonStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_DelayProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IntervalProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF6, 0x20, 0x73, 0xB5, 0x8A, 0xA5, 0x9C, 0x58, 0x9F, 0x41, 0xAA, 0xB0, 0x2F, 0x51, 0xE8, 0x29 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B57320F6-A58A-589C-9F41-AAB02F51E829")]
    internal interface IRepeatButtonStatics : global::Microsoft.UI.Xaml.Controls.Primitives.IRepeatButtonStatics
    {
    }
    internal static class IRepeatedScrollSnapPointMethods
    {

        internal static unsafe double get_End(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_Interval(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_Offset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_Start(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x51, 0xFB, 0x28, 0x58, 0xBB, 0x8E, 0x6D, 0x59, 0xA8, 0x71, 0x50, 0x6, 0x34, 0x79, 0x36, 0x2D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("5828FB51-8EBB-596D-A871-50063479362D")]
    internal interface IRepeatedScrollSnapPoint : global::Microsoft.UI.Xaml.Controls.Primitives.IRepeatedScrollSnapPoint
    {
    }
    internal static class IRepeatedScrollSnapPointFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedScrollSnapPoint CreateInstance(IObjectReference _obj, double offset, double interval, double start, double end, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointsAlignment alignment, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, double, double, double, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointsAlignment, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, offset, interval, start, end, alignment, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.RepeatedScrollSnapPoint.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.RepeatedScrollSnapPoint.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3, 0x84, 0xFD, 0xF2, 0x9E, 0x67, 0x31, 0x5C, 0xB4, 0x31, 0x72, 0xA0, 0xE0, 0x1, 0x4E, 0x6A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F2FD8403-679E-5C31-B431-72A0E0014E6A")]
    internal interface IRepeatedScrollSnapPointFactory : global::Microsoft.UI.Xaml.Controls.Primitives.IRepeatedScrollSnapPointFactory
    {
    }
    internal static class IRepeatedZoomSnapPointMethods
    {

        internal static unsafe double get_End(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_Interval(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_Offset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_Start(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xBE, 0xDB, 0xA6, 0x1F, 0x11, 0x5E, 0x32, 0x5D, 0x87, 0x3B, 0xC9, 0x2B, 0x1D, 0x17, 0x15, 0x38 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("1FA6DBBE-5E11-5D32-873B-C92B1D171538")]
    internal interface IRepeatedZoomSnapPoint : global::Microsoft.UI.Xaml.Controls.Primitives.IRepeatedZoomSnapPoint
    {
    }
    internal static class IRepeatedZoomSnapPointFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedZoomSnapPoint CreateInstance(IObjectReference _obj, double offset, double interval, double start, double end, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, double, double, double, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, offset, interval, start, end, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.RepeatedZoomSnapPoint.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.RepeatedZoomSnapPoint.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7C, 0x2A, 0x3, 0x7D, 0x1C, 0xD9, 0x60, 0x56, 0xB1, 0xC2, 0xB3, 0x6E, 0x88, 0x10, 0xAC, 0x65 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("7D032A7C-D91C-5660-B1C2-B36E8810AC65")]
    internal interface IRepeatedZoomSnapPointFactory : global::Microsoft.UI.Xaml.Controls.Primitives.IRepeatedZoomSnapPointFactory
    {
    }
    internal static class IScrollBarMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ScrollingIndicatorMode get_IndicatorMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.Primitives.ScrollingIndicatorMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollingIndicatorMode*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_IndicatorMode(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollingIndicatorMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollingIndicatorMode, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.Orientation get_Orientation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.Orientation __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Orientation*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Orientation(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.Orientation value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Orientation, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_ViewportSize(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ViewportSize(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandler>> _Scroll_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandler>> MakeScrollTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Scroll_, new(), null);
            return _Scroll_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandler>> _Scroll => _Scroll_ ?? MakeScrollTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandler> Get_Scroll2(IObjectReference _obj, object _thisObj)
        {
            return _Scroll.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_Controls_Primitives_ScrollEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[12],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[13],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x41, 0xBF, 0x8C, 0x56, 0x41, 0xF7, 0x5, 0x5F, 0x8E, 0x8, 0xC0, 0xA5, 0xA, 0xC1, 0x7C, 0x8C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("568CBF41-F741-5F05-8E08-C0A50AC17C8C")]
    internal interface IScrollBar : global::Microsoft.UI.Xaml.Controls.Primitives.IScrollBar
    {
    }
    internal static class IScrollBarStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IndicatorModeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_OrientationProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ViewportSizeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x18, 0x2E, 0xB5, 0x88, 0x28, 0x95, 0x9F, 0x57, 0xBD, 0x84, 0xEB, 0xA5, 0x85, 0xA0, 0x1C, 0x7A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("88B52E18-9528-579F-BD84-EBA585A01C7A")]
    internal interface IScrollBarStatics : global::Microsoft.UI.Xaml.Controls.Primitives.IScrollBarStatics
    {
    }
    public static class IScrollControllerMethods
    {


        public static unsafe void SetIsScrollable(IObjectReference _obj, bool isScrollable)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[9](ThisPtr, (byte)(isScrollable ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        public static unsafe void SetValues(IObjectReference _obj, double minOffset, double maxOffset, double offset, double viewportLength)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, double, double, double, int>**)ThisPtr)[10](ThisPtr, minOffset, maxOffset, offset, viewportLength));
            global::System.GC.KeepAlive(_obj);
        }

        public static unsafe global::Microsoft.UI.Composition.CompositionAnimation GetScrollAnimation(IObjectReference _obj, int correlationId, global::System.Numerics.Vector2 startPosition, global::System.Numerics.Vector2 endPosition, global::Microsoft.UI.Composition.CompositionAnimation defaultAnimation)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __defaultAnimation = default;
            IntPtr __retval = default;
            try
            {
                __defaultAnimation = global::ABI.Microsoft.UI.Composition.CompositionAnimation.CreateMarshaler2(defaultAnimation);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, global::System.Numerics.Vector2, global::System.Numerics.Vector2, IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, correlationId, startPosition, endPosition, MarshalInspectable<object>.GetAbi(__defaultAnimation), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Composition.CompositionAnimation.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__defaultAnimation);
                global::ABI.Microsoft.UI.Composition.CompositionAnimation.DisposeAbi(__retval);
            }
        }

        public static unsafe void NotifyRequestedScrollCompleted(IObjectReference _obj, int correlationId)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int>**)ThisPtr)[12](ThisPtr, correlationId));
            global::System.GC.KeepAlive(_obj);
        }
        public static unsafe bool get_CanScroll(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        public static unsafe bool get_IsScrollingWithMouse(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo get_PanningInfo(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo>.DisposeAbi(__retval);
            }
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs>>> _AddScrollVelocityRequested_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs>>> MakeAddScrollVelocityRequestedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _AddScrollVelocityRequested_, new(), null);
            return _AddScrollVelocityRequested_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs>>> _AddScrollVelocityRequested => _AddScrollVelocityRequested_ ?? MakeAddScrollVelocityRequestedTable();

        public static unsafe (Action<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs>>, Action<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs>>) Get_AddScrollVelocityRequested(IObjectReference _obj, object _thisObj)
        {
            var eventSource = Get_AddScrollVelocityRequested2(_obj, _thisObj);
            return (eventSource.Subscribe, eventSource.Unsubscribe);
        }

        public static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs>> Get_AddScrollVelocityRequested2(IObjectReference _obj, object _thisObj)
        {
            return _AddScrollVelocityRequested.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollController__global__Microsoft_UI_Xaml_Controls_Primitives_ScrollControllerAddScrollVelocityRequestedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[21],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[22],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, object>>> _CanScrollChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, object>>> MakeCanScrollChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _CanScrollChanged_, new(), null);
            return _CanScrollChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, object>>> _CanScrollChanged => _CanScrollChanged_ ?? MakeCanScrollChangedTable();

        public static unsafe (Action<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, object>>, Action<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, object>>) Get_CanScrollChanged(IObjectReference _obj, object _thisObj)
        {
            var eventSource = Get_CanScrollChanged2(_obj, _thisObj);
            return (eventSource.Subscribe, eventSource.Unsubscribe);
        }

        public static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, object>> Get_CanScrollChanged2(IObjectReference _obj, object _thisObj)
        {
            return _CanScrollChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollController__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[13],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[14],
                1);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, object>>> _IsScrollingWithMouseChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, object>>> MakeIsScrollingWithMouseChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _IsScrollingWithMouseChanged_, new(), null);
            return _IsScrollingWithMouseChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, object>>> _IsScrollingWithMouseChanged => _IsScrollingWithMouseChanged_ ?? MakeIsScrollingWithMouseChangedTable();

        public static unsafe (Action<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, object>>, Action<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, object>>) Get_IsScrollingWithMouseChanged(IObjectReference _obj, object _thisObj)
        {
            var eventSource = Get_IsScrollingWithMouseChanged2(_obj, _thisObj);
            return (eventSource.Subscribe, eventSource.Unsubscribe);
        }

        public static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, object>> Get_IsScrollingWithMouseChanged2(IObjectReference _obj, object _thisObj)
        {
            return _IsScrollingWithMouseChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollController__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[15],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[16],
                2);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs>>> _ScrollByRequested_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs>>> MakeScrollByRequestedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ScrollByRequested_, new(), null);
            return _ScrollByRequested_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs>>> _ScrollByRequested => _ScrollByRequested_ ?? MakeScrollByRequestedTable();

        public static unsafe (Action<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs>>, Action<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs>>) Get_ScrollByRequested(IObjectReference _obj, object _thisObj)
        {
            var eventSource = Get_ScrollByRequested2(_obj, _thisObj);
            return (eventSource.Subscribe, eventSource.Unsubscribe);
        }

        public static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs>> Get_ScrollByRequested2(IObjectReference _obj, object _thisObj)
        {
            return _ScrollByRequested.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollController__global__Microsoft_UI_Xaml_Controls_Primitives_ScrollControllerScrollByRequestedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[19],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[20],
                3);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs>>> _ScrollToRequested_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs>>> MakeScrollToRequestedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ScrollToRequested_, new(), null);
            return _ScrollToRequested_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs>>> _ScrollToRequested => _ScrollToRequested_ ?? MakeScrollToRequestedTable();

        public static unsafe (Action<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs>>, Action<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs>>) Get_ScrollToRequested(IObjectReference _obj, object _thisObj)
        {
            var eventSource = Get_ScrollToRequested2(_obj, _thisObj);
            return (eventSource.Subscribe, eventSource.Unsubscribe);
        }

        public static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs>> Get_ScrollToRequested2(IObjectReference _obj, object _thisObj)
        {
            return _ScrollToRequested.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollController__global__Microsoft_UI_Xaml_Controls_Primitives_ScrollControllerScrollToRequestedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[17],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[18],
                4);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x86, 0x67, 0x39, 0x54, 0x26, 0x17, 0xD6, 0x53, 0x97, 0xA3, 0x40, 0xAF, 0x8, 0x38, 0x31, 0x4C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IScrollController.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("54396786-1726-53D6-97A3-40AF0838314C")]
    internal unsafe interface IScrollController : global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IScrollController()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IScrollController), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 17);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_PanningInfo_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_CanScroll_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_get_IsScrollingWithMouse_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_SetIsScrollable_3;
            ((delegate* unmanaged[Stdcall]<IntPtr, double, double, double, double, int>*)AbiToProjectionVftablePtr)[10] = &Do_Abi_SetValues_4;
            ((delegate* unmanaged[Stdcall]<IntPtr, int, global::System.Numerics.Vector2, global::System.Numerics.Vector2, IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[11] = &Do_Abi_GetScrollAnimation_5;
            ((delegate* unmanaged[Stdcall]<IntPtr, int, int>*)AbiToProjectionVftablePtr)[12] = &Do_Abi_NotifyRequestedScrollCompleted_6;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>*)AbiToProjectionVftablePtr)[13] = &Do_Abi_add_CanScrollChanged_7;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>*)AbiToProjectionVftablePtr)[14] = &Do_Abi_remove_CanScrollChanged_8;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>*)AbiToProjectionVftablePtr)[15] = &Do_Abi_add_IsScrollingWithMouseChanged_9;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>*)AbiToProjectionVftablePtr)[16] = &Do_Abi_remove_IsScrollingWithMouseChanged_10;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>*)AbiToProjectionVftablePtr)[17] = &Do_Abi_add_ScrollToRequested_11;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>*)AbiToProjectionVftablePtr)[18] = &Do_Abi_remove_ScrollToRequested_12;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>*)AbiToProjectionVftablePtr)[19] = &Do_Abi_add_ScrollByRequested_13;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>*)AbiToProjectionVftablePtr)[20] = &Do_Abi_remove_ScrollByRequested_14;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>*)AbiToProjectionVftablePtr)[21] = &Do_Abi_add_AddScrollVelocityRequested_15;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>*)AbiToProjectionVftablePtr)[22] = &Do_Abi_remove_AddScrollVelocityRequested_16;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_SetIsScrollable_3(IntPtr thisPtr, byte isScrollable)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController>(thisPtr).SetIsScrollable(isScrollable != 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_SetValues_4(IntPtr thisPtr, double minOffset, double maxOffset, double offset, double viewportLength)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController>(thisPtr).SetValues(minOffset, maxOffset, offset, viewportLength);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetScrollAnimation_5(IntPtr thisPtr, int correlationId, global::System.Numerics.Vector2 startPosition, global::System.Numerics.Vector2 endPosition, IntPtr defaultAnimation, IntPtr* result)
        {

            global::Microsoft.UI.Composition.CompositionAnimation __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController>(thisPtr).GetScrollAnimation(correlationId, startPosition, endPosition, global::ABI.Microsoft.UI.Composition.CompositionAnimation.FromAbi(defaultAnimation));
                *result = global::ABI.Microsoft.UI.Composition.CompositionAnimation.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_NotifyRequestedScrollCompleted_6(IntPtr thisPtr, int correlationId)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController>(thisPtr).NotifyRequestedScrollCompleted(correlationId);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_CanScroll_1(IntPtr thisPtr, byte* value)
        {

            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController>(thisPtr).CanScroll;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_IsScrollingWithMouse_2(IntPtr thisPtr, byte* value)
        {

            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController>(thisPtr).IsScrollingWithMouse;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_PanningInfo_0(IntPtr thisPtr, IntPtr* value)
        {

            global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController>(thisPtr).PanningInfo;
                *value = MarshalInterface<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::WinRT.EventRegistrationTokenTable<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs>>> _AddScrollVelocityRequested_tokenTables;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::WinRT.EventRegistrationTokenTable<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs>>> MakeAddScrollVelocityRequestedTable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _AddScrollVelocityRequested_tokenTables, new(), null);
            return _AddScrollVelocityRequested_tokenTables;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::WinRT.EventRegistrationTokenTable<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs>>> _AddScrollVelocityRequested_TokenTables => _AddScrollVelocityRequested_tokenTables ?? MakeAddScrollVelocityRequestedTable();

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_add_AddScrollVelocityRequested_15(IntPtr thisPtr, IntPtr handler, global::WinRT.EventRegistrationToken* token)
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Xaml_Controls_Primitives_IScrollController__Microsoft_UI_Xaml_Controls_Primitives_ScrollControllerAddScrollVelocityRequestedEventArgs.EnsureInitialized();
            *token = default;
            try
            {
                var __this = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController>(thisPtr);
                var __handler = global::ABI.Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs>.FromAbi(handler);
                *token = _AddScrollVelocityRequested_TokenTables.GetOrCreateValue(__this).AddEventHandler(__handler);
                __this.AddScrollVelocityRequested += __handler;
                return 0;
            }
            catch (Exception __ex)
            {
                return __ex.HResult;
            }
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_remove_AddScrollVelocityRequested_16(IntPtr thisPtr, global::WinRT.EventRegistrationToken token)
        {
            try
            {
                var __this = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController>(thisPtr);
                if(__this != null && _AddScrollVelocityRequested_TokenTables.TryGetValue(__this, out var __table) && __table.RemoveEventHandler(token, out var __handler))
                {
                    __this.AddScrollVelocityRequested -= __handler;
                }
                return 0;
            }
            catch (Exception __ex)
            {
                return __ex.HResult;
            }
        }
        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::WinRT.EventRegistrationTokenTable<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, object>>> _CanScrollChanged_tokenTables;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::WinRT.EventRegistrationTokenTable<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, object>>> MakeCanScrollChangedTable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _CanScrollChanged_tokenTables, new(), null);
            return _CanScrollChanged_tokenTables;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::WinRT.EventRegistrationTokenTable<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, object>>> _CanScrollChanged_TokenTables => _CanScrollChanged_tokenTables ?? MakeCanScrollChangedTable();

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_add_CanScrollChanged_7(IntPtr thisPtr, IntPtr handler, global::WinRT.EventRegistrationToken* token)
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Xaml_Controls_Primitives_IScrollController__object.EnsureInitialized();
            *token = default;
            try
            {
                var __this = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController>(thisPtr);
                var __handler = global::ABI.Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, object>.FromAbi(handler);
                *token = _CanScrollChanged_TokenTables.GetOrCreateValue(__this).AddEventHandler(__handler);
                __this.CanScrollChanged += __handler;
                return 0;
            }
            catch (Exception __ex)
            {
                return __ex.HResult;
            }
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_remove_CanScrollChanged_8(IntPtr thisPtr, global::WinRT.EventRegistrationToken token)
        {
            try
            {
                var __this = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController>(thisPtr);
                if(__this != null && _CanScrollChanged_TokenTables.TryGetValue(__this, out var __table) && __table.RemoveEventHandler(token, out var __handler))
                {
                    __this.CanScrollChanged -= __handler;
                }
                return 0;
            }
            catch (Exception __ex)
            {
                return __ex.HResult;
            }
        }
        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::WinRT.EventRegistrationTokenTable<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, object>>> _IsScrollingWithMouseChanged_tokenTables;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::WinRT.EventRegistrationTokenTable<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, object>>> MakeIsScrollingWithMouseChangedTable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _IsScrollingWithMouseChanged_tokenTables, new(), null);
            return _IsScrollingWithMouseChanged_tokenTables;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::WinRT.EventRegistrationTokenTable<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, object>>> _IsScrollingWithMouseChanged_TokenTables => _IsScrollingWithMouseChanged_tokenTables ?? MakeIsScrollingWithMouseChangedTable();

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_add_IsScrollingWithMouseChanged_9(IntPtr thisPtr, IntPtr handler, global::WinRT.EventRegistrationToken* token)
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Xaml_Controls_Primitives_IScrollController__object.EnsureInitialized();
            *token = default;
            try
            {
                var __this = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController>(thisPtr);
                var __handler = global::ABI.Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, object>.FromAbi(handler);
                *token = _IsScrollingWithMouseChanged_TokenTables.GetOrCreateValue(__this).AddEventHandler(__handler);
                __this.IsScrollingWithMouseChanged += __handler;
                return 0;
            }
            catch (Exception __ex)
            {
                return __ex.HResult;
            }
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_remove_IsScrollingWithMouseChanged_10(IntPtr thisPtr, global::WinRT.EventRegistrationToken token)
        {
            try
            {
                var __this = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController>(thisPtr);
                if(__this != null && _IsScrollingWithMouseChanged_TokenTables.TryGetValue(__this, out var __table) && __table.RemoveEventHandler(token, out var __handler))
                {
                    __this.IsScrollingWithMouseChanged -= __handler;
                }
                return 0;
            }
            catch (Exception __ex)
            {
                return __ex.HResult;
            }
        }
        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::WinRT.EventRegistrationTokenTable<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs>>> _ScrollByRequested_tokenTables;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::WinRT.EventRegistrationTokenTable<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs>>> MakeScrollByRequestedTable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _ScrollByRequested_tokenTables, new(), null);
            return _ScrollByRequested_tokenTables;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::WinRT.EventRegistrationTokenTable<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs>>> _ScrollByRequested_TokenTables => _ScrollByRequested_tokenTables ?? MakeScrollByRequestedTable();

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_add_ScrollByRequested_13(IntPtr thisPtr, IntPtr handler, global::WinRT.EventRegistrationToken* token)
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Xaml_Controls_Primitives_IScrollController__Microsoft_UI_Xaml_Controls_Primitives_ScrollControllerScrollByRequestedEventArgs.EnsureInitialized();
            *token = default;
            try
            {
                var __this = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController>(thisPtr);
                var __handler = global::ABI.Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs>.FromAbi(handler);
                *token = _ScrollByRequested_TokenTables.GetOrCreateValue(__this).AddEventHandler(__handler);
                __this.ScrollByRequested += __handler;
                return 0;
            }
            catch (Exception __ex)
            {
                return __ex.HResult;
            }
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_remove_ScrollByRequested_14(IntPtr thisPtr, global::WinRT.EventRegistrationToken token)
        {
            try
            {
                var __this = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController>(thisPtr);
                if(__this != null && _ScrollByRequested_TokenTables.TryGetValue(__this, out var __table) && __table.RemoveEventHandler(token, out var __handler))
                {
                    __this.ScrollByRequested -= __handler;
                }
                return 0;
            }
            catch (Exception __ex)
            {
                return __ex.HResult;
            }
        }
        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::WinRT.EventRegistrationTokenTable<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs>>> _ScrollToRequested_tokenTables;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::WinRT.EventRegistrationTokenTable<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs>>> MakeScrollToRequestedTable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _ScrollToRequested_tokenTables, new(), null);
            return _ScrollToRequested_tokenTables;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::WinRT.EventRegistrationTokenTable<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs>>> _ScrollToRequested_TokenTables => _ScrollToRequested_tokenTables ?? MakeScrollToRequestedTable();

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_add_ScrollToRequested_11(IntPtr thisPtr, IntPtr handler, global::WinRT.EventRegistrationToken* token)
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Xaml_Controls_Primitives_IScrollController__Microsoft_UI_Xaml_Controls_Primitives_ScrollControllerScrollToRequestedEventArgs.EnsureInitialized();
            *token = default;
            try
            {
                var __this = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController>(thisPtr);
                var __handler = global::ABI.Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs>.FromAbi(handler);
                *token = _ScrollToRequested_TokenTables.GetOrCreateValue(__this).AddEventHandler(__handler);
                __this.ScrollToRequested += __handler;
                return 0;
            }
            catch (Exception __ex)
            {
                return __ex.HResult;
            }
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_remove_ScrollToRequested_12(IntPtr thisPtr, global::WinRT.EventRegistrationToken token)
        {
            try
            {
                var __this = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController>(thisPtr);
                if(__this != null && _ScrollToRequested_TokenTables.TryGetValue(__this, out var __table) && __table.RemoveEventHandler(token, out var __handler))
                {
                    __this.ScrollToRequested -= __handler;
                }
                return 0;
            }
            catch (Exception __ex)
            {
                return __ex.HResult;
            }
        }

        unsafe void global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController.SetIsScrollable(bool isScrollable)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController).TypeHandle));
            global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerMethods.SetIsScrollable(_obj, isScrollable);
        }

        unsafe void global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController.SetValues(double minOffset, double maxOffset, double offset, double viewportLength)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController).TypeHandle));
            global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerMethods.SetValues(_obj, minOffset, maxOffset, offset, viewportLength);
        }

        unsafe global::Microsoft.UI.Composition.CompositionAnimation global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController.GetScrollAnimation(int correlationId, global::System.Numerics.Vector2 startPosition, global::System.Numerics.Vector2 endPosition, global::Microsoft.UI.Composition.CompositionAnimation defaultAnimation)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerMethods.GetScrollAnimation(_obj, correlationId, startPosition, endPosition, defaultAnimation);
        }

        unsafe void global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController.NotifyRequestedScrollCompleted(int correlationId)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController).TypeHandle));
            global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerMethods.NotifyRequestedScrollCompleted(_obj, correlationId);
        }

        unsafe bool global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController.CanScroll
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerMethods.get_CanScroll(_obj);
            }
        }

        unsafe bool global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController.IsScrollingWithMouse
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerMethods.get_IsScrollingWithMouse(_obj);
            }
        }

        unsafe global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController.PanningInfo
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerMethods.get_PanningInfo(_obj);
            }
        }

        event global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs> global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController.AddScrollVelocityRequested
        {
            add 
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController).TypeHandle));
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerMethods.Get_AddScrollVelocityRequested2(_obj, (IWinRTObject)this).Subscribe(value);
            }
            remove
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController).TypeHandle));
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerMethods.Get_AddScrollVelocityRequested2(_obj, (IWinRTObject)this).Unsubscribe(value);
            }
        }

        event global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, object> global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController.CanScrollChanged
        {
            add 
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController).TypeHandle));
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerMethods.Get_CanScrollChanged2(_obj, (IWinRTObject)this).Subscribe(value);
            }
            remove
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController).TypeHandle));
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerMethods.Get_CanScrollChanged2(_obj, (IWinRTObject)this).Unsubscribe(value);
            }
        }

        event global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, object> global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController.IsScrollingWithMouseChanged
        {
            add 
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController).TypeHandle));
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerMethods.Get_IsScrollingWithMouseChanged2(_obj, (IWinRTObject)this).Subscribe(value);
            }
            remove
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController).TypeHandle));
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerMethods.Get_IsScrollingWithMouseChanged2(_obj, (IWinRTObject)this).Unsubscribe(value);
            }
        }

        event global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs> global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController.ScrollByRequested
        {
            add 
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController).TypeHandle));
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerMethods.Get_ScrollByRequested2(_obj, (IWinRTObject)this).Subscribe(value);
            }
            remove
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController).TypeHandle));
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerMethods.Get_ScrollByRequested2(_obj, (IWinRTObject)this).Unsubscribe(value);
            }
        }

        event global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs> global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController.ScrollToRequested
        {
            add 
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController).TypeHandle));
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerMethods.Get_ScrollToRequested2(_obj, (IWinRTObject)this).Subscribe(value);
            }
            remove
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController).TypeHandle));
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerMethods.Get_ScrollToRequested2(_obj, (IWinRTObject)this).Unsubscribe(value);
            }
        }
    }

    internal static class IScrollControllerAddScrollVelocityRequestedEventArgsMethods
    {

        internal static unsafe int get_CorrelationId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_CorrelationId(IObjectReference _obj, int value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::System.Nullable<float> get_InertiaDecayRate(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<float>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<float>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe float get_OffsetVelocity(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            float __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x1A, 0xBC, 0x7B, 0x31, 0xF7, 0xC, 0x15, 0x58, 0xA8, 0xA7, 0xBD, 0x7E, 0x6E, 0xEF, 0x96, 0x6A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("317BBC1A-0CF7-5815-A8A7-BD7E6EEF966A")]
    internal interface IScrollControllerAddScrollVelocityRequestedEventArgs : global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerAddScrollVelocityRequestedEventArgs
    {
    }
    internal static class IScrollControllerAddScrollVelocityRequestedEventArgsFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs CreateInstance(IObjectReference _obj, float offsetVelocity, global::System.Nullable<float> inertiaDecayRate)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __inertiaDecayRate = default;
            IntPtr __retval = default;
            try
            {
                __inertiaDecayRate = MarshalInterface<global::System.Nullable<float>>.CreateMarshaler2(inertiaDecayRate, global::ABI.System.Nullable<float>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, offsetVelocity, MarshalInspectable<object>.GetAbi(__inertiaDecayRate), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__inertiaDecayRate);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x93, 0xD1, 0x21, 0x92, 0x82, 0x6F, 0x21, 0x5E, 0xAA, 0xCC, 0xB, 0x14, 0x60, 0x81, 0x8A, 0xB5 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("9221D193-6F82-5E21-AACC-0B1460818AB5")]
    internal interface IScrollControllerAddScrollVelocityRequestedEventArgsFactory : global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerAddScrollVelocityRequestedEventArgsFactory
    {
    }
    internal static class IScrollControllerPanRequestedEventArgsMethods
    {

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[8](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Input.PointerPoint get_PointerPoint(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.PointerPoint.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Input.PointerPoint.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x4E, 0x6, 0xEE, 0xBE, 0x4D, 0x1D, 0x1A, 0x5A, 0x87, 0x81, 0xAC, 0xF1, 0x58, 0x7A, 0x5D, 0x6A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("BEEE064E-1D4D-5A1A-8781-ACF1587A5D6A")]
    internal interface IScrollControllerPanRequestedEventArgs : global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanRequestedEventArgs
    {
    }
    internal static class IScrollControllerPanRequestedEventArgsFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs CreateInstance(IObjectReference _obj, global::Microsoft.UI.Input.PointerPoint pointerPoint)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __pointerPoint = default;
            IntPtr __retval = default;
            try
            {
                __pointerPoint = global::ABI.Microsoft.UI.Input.PointerPoint.CreateMarshaler2(pointerPoint);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__pointerPoint), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__pointerPoint);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC1, 0xA6, 0xB0, 0xC3, 0x32, 0x67, 0x32, 0x58, 0xBE, 0x50, 0x4E, 0xCA, 0xDE, 0x58, 0x5C, 0xBC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C3B0A6C1-6732-5832-BE50-4ECADE585CBC")]
    internal interface IScrollControllerPanRequestedEventArgsFactory : global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanRequestedEventArgsFactory
    {
    }
    public static class IScrollControllerPanningInfoMethods
    {


        public static unsafe void SetPanningElementExpressionAnimationSources(IObjectReference _obj, global::Microsoft.UI.Composition.CompositionPropertySet propertySet, string minOffsetPropertyName, string maxOffsetPropertyName, string offsetPropertyName, string multiplierPropertyName)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __propertySet = default;
            try
            {
                __propertySet = global::ABI.Microsoft.UI.Composition.CompositionPropertySet.CreateMarshaler2(propertySet);
                MarshalString.Pinnable __minOffsetPropertyName = new(minOffsetPropertyName);
                MarshalString.Pinnable __maxOffsetPropertyName = new(maxOffsetPropertyName);
                MarshalString.Pinnable __offsetPropertyName = new(offsetPropertyName);
                MarshalString.Pinnable __multiplierPropertyName = new(multiplierPropertyName);
                fixed(void* ___minOffsetPropertyName = __minOffsetPropertyName, ___maxOffsetPropertyName = __maxOffsetPropertyName, ___offsetPropertyName = __offsetPropertyName, ___multiplierPropertyName = __multiplierPropertyName)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__propertySet), MarshalString.GetAbi(ref __minOffsetPropertyName), MarshalString.GetAbi(ref __maxOffsetPropertyName), MarshalString.GetAbi(ref __offsetPropertyName), MarshalString.GetAbi(ref __multiplierPropertyName)));
                    global::System.GC.KeepAlive(_obj);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__propertySet);
            }
        }
        public static unsafe bool get_IsRailEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        public static unsafe global::Microsoft.UI.Xaml.Controls.Orientation get_PanOrientation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.Orientation __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Orientation*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        public static unsafe global::Microsoft.UI.Xaml.UIElement get_PanningElementAncestor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.UIElement.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.UIElement.DisposeAbi(__retval);
            }
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo, object>>> _Changed_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo, object>>> MakeChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Changed_, new(), null);
            return _Changed_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo, object>>> _Changed => _Changed_ ?? MakeChangedTable();

        public static unsafe (Action<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo, object>>, Action<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo, object>>) Get_Changed(IObjectReference _obj, object _thisObj)
        {
            var eventSource = Get_Changed2(_obj, _thisObj);
            return (eventSource.Subscribe, eventSource.Unsubscribe);
        }

        public static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo, object>> Get_Changed2(IObjectReference _obj, object _thisObj)
        {
            return _Changed.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerPanningInfo__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[10],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[11],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs>>> _PanRequested_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs>>> MakePanRequestedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _PanRequested_, new(), null);
            return _PanRequested_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs>>> _PanRequested => _PanRequested_ ?? MakePanRequestedTable();

        public static unsafe (Action<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs>>, Action<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs>>) Get_PanRequested(IObjectReference _obj, object _thisObj)
        {
            var eventSource = Get_PanRequested2(_obj, _thisObj);
            return (eventSource.Subscribe, eventSource.Unsubscribe);
        }

        public static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs>> Get_PanRequested2(IObjectReference _obj, object _thisObj)
        {
            return _PanRequested.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerPanningInfo__global__Microsoft_UI_Xaml_Controls_Primitives_ScrollControllerPanRequestedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[12],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[13],
                1);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x1, 0xB3, 0xD5, 0x53, 0xAB, 0x9A, 0xBC, 0x59, 0x92, 0xCD, 0x42, 0xCF, 0x21, 0xAB, 0xD5, 0x90 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IScrollControllerPanningInfo.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("53D5B301-9AAB-59BC-92CD-42CF21ABD590")]
    internal unsafe interface IScrollControllerPanningInfo : global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IScrollControllerPanningInfo()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IScrollControllerPanningInfo), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 8);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_IsRailEnabled_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Orientation*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_PanOrientation_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_get_PanningElementAncestor_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_SetPanningElementExpressionAnimationSources_3;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>*)AbiToProjectionVftablePtr)[10] = &Do_Abi_add_Changed_4;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>*)AbiToProjectionVftablePtr)[11] = &Do_Abi_remove_Changed_5;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>*)AbiToProjectionVftablePtr)[12] = &Do_Abi_add_PanRequested_6;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>*)AbiToProjectionVftablePtr)[13] = &Do_Abi_remove_PanRequested_7;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_SetPanningElementExpressionAnimationSources_3(IntPtr thisPtr, IntPtr propertySet, IntPtr minOffsetPropertyName, IntPtr maxOffsetPropertyName, IntPtr offsetPropertyName, IntPtr multiplierPropertyName)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo>(thisPtr).SetPanningElementExpressionAnimationSources(global::ABI.Microsoft.UI.Composition.CompositionPropertySet.FromAbi(propertySet), MarshalString.FromAbi(minOffsetPropertyName), MarshalString.FromAbi(maxOffsetPropertyName), MarshalString.FromAbi(offsetPropertyName), MarshalString.FromAbi(multiplierPropertyName));

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_IsRailEnabled_0(IntPtr thisPtr, byte* value)
        {

            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo>(thisPtr).IsRailEnabled;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_PanOrientation_1(IntPtr thisPtr, global::Microsoft.UI.Xaml.Controls.Orientation* value)
        {

            global::Microsoft.UI.Xaml.Controls.Orientation __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo>(thisPtr).PanOrientation;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_PanningElementAncestor_2(IntPtr thisPtr, IntPtr* value)
        {

            global::Microsoft.UI.Xaml.UIElement __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo>(thisPtr).PanningElementAncestor;
                *value = global::ABI.Microsoft.UI.Xaml.UIElement.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo, global::WinRT.EventRegistrationTokenTable<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo, object>>> _Changed_tokenTables;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo, global::WinRT.EventRegistrationTokenTable<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo, object>>> MakeChangedTable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _Changed_tokenTables, new(), null);
            return _Changed_tokenTables;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo, global::WinRT.EventRegistrationTokenTable<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo, object>>> _Changed_TokenTables => _Changed_tokenTables ?? MakeChangedTable();

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_add_Changed_4(IntPtr thisPtr, IntPtr handler, global::WinRT.EventRegistrationToken* token)
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerPanningInfo__object.EnsureInitialized();
            *token = default;
            try
            {
                var __this = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo>(thisPtr);
                var __handler = global::ABI.Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo, object>.FromAbi(handler);
                *token = _Changed_TokenTables.GetOrCreateValue(__this).AddEventHandler(__handler);
                __this.Changed += __handler;
                return 0;
            }
            catch (Exception __ex)
            {
                return __ex.HResult;
            }
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_remove_Changed_5(IntPtr thisPtr, global::WinRT.EventRegistrationToken token)
        {
            try
            {
                var __this = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo>(thisPtr);
                if(__this != null && _Changed_TokenTables.TryGetValue(__this, out var __table) && __table.RemoveEventHandler(token, out var __handler))
                {
                    __this.Changed -= __handler;
                }
                return 0;
            }
            catch (Exception __ex)
            {
                return __ex.HResult;
            }
        }
        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo, global::WinRT.EventRegistrationTokenTable<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs>>> _PanRequested_tokenTables;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo, global::WinRT.EventRegistrationTokenTable<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs>>> MakePanRequestedTable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _PanRequested_tokenTables, new(), null);
            return _PanRequested_tokenTables;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo, global::WinRT.EventRegistrationTokenTable<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs>>> _PanRequested_TokenTables => _PanRequested_tokenTables ?? MakePanRequestedTable();

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_add_PanRequested_6(IntPtr thisPtr, IntPtr handler, global::WinRT.EventRegistrationToken* token)
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerPanningInfo__Microsoft_UI_Xaml_Controls_Primitives_ScrollControllerPanRequestedEventArgs.EnsureInitialized();
            *token = default;
            try
            {
                var __this = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo>(thisPtr);
                var __handler = global::ABI.Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs>.FromAbi(handler);
                *token = _PanRequested_TokenTables.GetOrCreateValue(__this).AddEventHandler(__handler);
                __this.PanRequested += __handler;
                return 0;
            }
            catch (Exception __ex)
            {
                return __ex.HResult;
            }
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_remove_PanRequested_7(IntPtr thisPtr, global::WinRT.EventRegistrationToken token)
        {
            try
            {
                var __this = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo>(thisPtr);
                if(__this != null && _PanRequested_TokenTables.TryGetValue(__this, out var __table) && __table.RemoveEventHandler(token, out var __handler))
                {
                    __this.PanRequested -= __handler;
                }
                return 0;
            }
            catch (Exception __ex)
            {
                return __ex.HResult;
            }
        }

        unsafe void global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo.SetPanningElementExpressionAnimationSources(global::Microsoft.UI.Composition.CompositionPropertySet propertySet, string minOffsetPropertyName, string maxOffsetPropertyName, string offsetPropertyName, string multiplierPropertyName)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo).TypeHandle));
            global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfoMethods.SetPanningElementExpressionAnimationSources(_obj, propertySet, minOffsetPropertyName, maxOffsetPropertyName, offsetPropertyName, multiplierPropertyName);
        }

        unsafe bool global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo.IsRailEnabled
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfoMethods.get_IsRailEnabled(_obj);
            }
        }

        unsafe global::Microsoft.UI.Xaml.Controls.Orientation global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo.PanOrientation
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfoMethods.get_PanOrientation(_obj);
            }
        }

        unsafe global::Microsoft.UI.Xaml.UIElement global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo.PanningElementAncestor
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfoMethods.get_PanningElementAncestor(_obj);
            }
        }

        event global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo, object> global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo.Changed
        {
            add 
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo).TypeHandle));
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfoMethods.Get_Changed2(_obj, (IWinRTObject)this).Subscribe(value);
            }
            remove
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo).TypeHandle));
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfoMethods.Get_Changed2(_obj, (IWinRTObject)this).Unsubscribe(value);
            }
        }

        event global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs> global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo.PanRequested
        {
            add 
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo).TypeHandle));
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfoMethods.Get_PanRequested2(_obj, (IWinRTObject)this).Subscribe(value);
            }
            remove
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo).TypeHandle));
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfoMethods.Get_PanRequested2(_obj, (IWinRTObject)this).Unsubscribe(value);
            }
        }
    }

    internal static class IScrollControllerScrollByRequestedEventArgsMethods
    {

        internal static unsafe int get_CorrelationId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_CorrelationId(IObjectReference _obj, int value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_OffsetDelta(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.ScrollingScrollOptions get_Options(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Controls.ScrollingScrollOptions.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Controls.ScrollingScrollOptions.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFA, 0x5, 0xF3, 0xE7, 0x73, 0x40, 0x88, 0x5D, 0x8B, 0xF1, 0xAE, 0x4E, 0xCB, 0x92, 0x8, 0xBF };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E7F305FA-4073-5D88-8BF1-AE4ECB9208BF")]
    internal interface IScrollControllerScrollByRequestedEventArgs : global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollByRequestedEventArgs
    {
    }
    internal static class IScrollControllerScrollByRequestedEventArgsFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs CreateInstance(IObjectReference _obj, double offsetDelta, global::Microsoft.UI.Xaml.Controls.ScrollingScrollOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __options = default;
            IntPtr __retval = default;
            try
            {
                __options = global::ABI.Microsoft.UI.Xaml.Controls.ScrollingScrollOptions.CreateMarshaler2(options);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, offsetDelta, MarshalInspectable<object>.GetAbi(__options), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__options);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA7, 0x1, 0xCF, 0x7E, 0x3F, 0xEF, 0xF9, 0x5A, 0x93, 0xB4, 0x38, 0xBC, 0x1B, 0xAF, 0xD3, 0x35 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("7ECF01A7-EF3F-5AF9-93B4-38BC1BAFD335")]
    internal interface IScrollControllerScrollByRequestedEventArgsFactory : global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollByRequestedEventArgsFactory
    {
    }
    internal static class IScrollControllerScrollToRequestedEventArgsMethods
    {

        internal static unsafe int get_CorrelationId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_CorrelationId(IObjectReference _obj, int value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_Offset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.ScrollingScrollOptions get_Options(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Controls.ScrollingScrollOptions.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Controls.ScrollingScrollOptions.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x99, 0x6B, 0xF1, 0x73, 0x10, 0x73, 0x73, 0x5C, 0x87, 0x2B, 0x27, 0x6E, 0x5A, 0x9D, 0x49, 0x13 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("73F16B99-7310-5C73-872B-276E5A9D4913")]
    internal interface IScrollControllerScrollToRequestedEventArgs : global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollToRequestedEventArgs
    {
    }
    internal static class IScrollControllerScrollToRequestedEventArgsFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs CreateInstance(IObjectReference _obj, double offset, global::Microsoft.UI.Xaml.Controls.ScrollingScrollOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __options = default;
            IntPtr __retval = default;
            try
            {
                __options = global::ABI.Microsoft.UI.Xaml.Controls.ScrollingScrollOptions.CreateMarshaler2(options);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, offset, MarshalInspectable<object>.GetAbi(__options), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__options);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC4, 0x5D, 0x67, 0x1, 0x74, 0x10, 0xE8, 0x54, 0xBE, 0xBB, 0x66, 0xB0, 0x3A, 0x33, 0xDA, 0xD };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("01675DC4-1074-54E8-BEBB-66B03A33DA0D")]
    internal interface IScrollControllerScrollToRequestedEventArgsFactory : global::Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollToRequestedEventArgsFactory
    {
    }
    internal static class IScrollEventArgsMethods
    {

        internal static unsafe double get_NewValue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventType get_ScrollEventType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventType __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventType*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x11, 0x7F, 0xD2, 0xDB, 0x37, 0xF9, 0xD0, 0x5A, 0x9F, 0x75, 0xB9, 0x62, 0xC3, 0x32, 0x54, 0xCF };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("DBD27F11-F937-5AD0-9F75-B962C33254CF")]
    internal interface IScrollEventArgs : global::Microsoft.UI.Xaml.Controls.Primitives.IScrollEventArgs
    {
    }
    internal static class IScrollPresenterMethods
    {


        internal static unsafe int ScrollTo(IObjectReference _obj, double horizontalOffset, double verticalOffset)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, double, int*, int>**)ThisPtr)[58](ThisPtr, horizontalOffset, verticalOffset, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe int ScrollTo(IObjectReference _obj, double horizontalOffset, double verticalOffset, global::Microsoft.UI.Xaml.Controls.ScrollingScrollOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __options = default;
            int __retval = default;
            try
            {
                __options = global::ABI.Microsoft.UI.Xaml.Controls.ScrollingScrollOptions.CreateMarshaler2(options);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, double, IntPtr, int*, int>**)ThisPtr)[59](ThisPtr, horizontalOffset, verticalOffset, MarshalInspectable<object>.GetAbi(__options), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__options);
            }
        }

        internal static unsafe int ScrollBy(IObjectReference _obj, double horizontalOffsetDelta, double verticalOffsetDelta)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, double, int*, int>**)ThisPtr)[60](ThisPtr, horizontalOffsetDelta, verticalOffsetDelta, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe int ScrollBy(IObjectReference _obj, double horizontalOffsetDelta, double verticalOffsetDelta, global::Microsoft.UI.Xaml.Controls.ScrollingScrollOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __options = default;
            int __retval = default;
            try
            {
                __options = global::ABI.Microsoft.UI.Xaml.Controls.ScrollingScrollOptions.CreateMarshaler2(options);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, double, IntPtr, int*, int>**)ThisPtr)[61](ThisPtr, horizontalOffsetDelta, verticalOffsetDelta, MarshalInspectable<object>.GetAbi(__options), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__options);
            }
        }

        internal static unsafe int AddScrollVelocity(IObjectReference _obj, global::System.Numerics.Vector2 offsetsVelocity, global::System.Nullable<global::System.Numerics.Vector2> inertiaDecayRate)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __inertiaDecayRate = default;
            int __retval = default;
            try
            {
                __inertiaDecayRate = MarshalInterface<global::System.Nullable<global::System.Numerics.Vector2>>.CreateMarshaler2(inertiaDecayRate, global::ABI.System.Nullable<global::System.Numerics.Vector2>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::System.Numerics.Vector2, IntPtr, int*, int>**)ThisPtr)[62](ThisPtr, offsetsVelocity, MarshalInspectable<object>.GetAbi(__inertiaDecayRate), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__inertiaDecayRate);
            }
        }

        internal static unsafe int ZoomTo(IObjectReference _obj, float zoomFactor, global::System.Nullable<global::System.Numerics.Vector2> centerPoint)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __centerPoint = default;
            int __retval = default;
            try
            {
                __centerPoint = MarshalInterface<global::System.Nullable<global::System.Numerics.Vector2>>.CreateMarshaler2(centerPoint, global::ABI.System.Nullable<global::System.Numerics.Vector2>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float, IntPtr, int*, int>**)ThisPtr)[63](ThisPtr, zoomFactor, MarshalInspectable<object>.GetAbi(__centerPoint), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__centerPoint);
            }
        }

        internal static unsafe int ZoomTo(IObjectReference _obj, float zoomFactor, global::System.Nullable<global::System.Numerics.Vector2> centerPoint, global::Microsoft.UI.Xaml.Controls.ScrollingZoomOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __centerPoint = default;
            ObjectReferenceValue __options = default;
            int __retval = default;
            try
            {
                __centerPoint = MarshalInterface<global::System.Nullable<global::System.Numerics.Vector2>>.CreateMarshaler2(centerPoint, global::ABI.System.Nullable<global::System.Numerics.Vector2>.PIID);
                __options = global::ABI.Microsoft.UI.Xaml.Controls.ScrollingZoomOptions.CreateMarshaler2(options);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float, IntPtr, IntPtr, int*, int>**)ThisPtr)[64](ThisPtr, zoomFactor, MarshalInspectable<object>.GetAbi(__centerPoint), MarshalInspectable<object>.GetAbi(__options), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__centerPoint);
                MarshalInspectable<object>.DisposeMarshaler(__options);
            }
        }

        internal static unsafe int ZoomBy(IObjectReference _obj, float zoomFactorDelta, global::System.Nullable<global::System.Numerics.Vector2> centerPoint)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __centerPoint = default;
            int __retval = default;
            try
            {
                __centerPoint = MarshalInterface<global::System.Nullable<global::System.Numerics.Vector2>>.CreateMarshaler2(centerPoint, global::ABI.System.Nullable<global::System.Numerics.Vector2>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float, IntPtr, int*, int>**)ThisPtr)[65](ThisPtr, zoomFactorDelta, MarshalInspectable<object>.GetAbi(__centerPoint), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__centerPoint);
            }
        }

        internal static unsafe int ZoomBy(IObjectReference _obj, float zoomFactorDelta, global::System.Nullable<global::System.Numerics.Vector2> centerPoint, global::Microsoft.UI.Xaml.Controls.ScrollingZoomOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __centerPoint = default;
            ObjectReferenceValue __options = default;
            int __retval = default;
            try
            {
                __centerPoint = MarshalInterface<global::System.Nullable<global::System.Numerics.Vector2>>.CreateMarshaler2(centerPoint, global::ABI.System.Nullable<global::System.Numerics.Vector2>.PIID);
                __options = global::ABI.Microsoft.UI.Xaml.Controls.ScrollingZoomOptions.CreateMarshaler2(options);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float, IntPtr, IntPtr, int*, int>**)ThisPtr)[66](ThisPtr, zoomFactorDelta, MarshalInspectable<object>.GetAbi(__centerPoint), MarshalInspectable<object>.GetAbi(__options), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__centerPoint);
                MarshalInspectable<object>.DisposeMarshaler(__options);
            }
        }

        internal static unsafe int AddZoomVelocity(IObjectReference _obj, float zoomFactorVelocity, global::System.Nullable<global::System.Numerics.Vector2> centerPoint, global::System.Nullable<float> inertiaDecayRate)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __centerPoint = default;
            ObjectReferenceValue __inertiaDecayRate = default;
            int __retval = default;
            try
            {
                __centerPoint = MarshalInterface<global::System.Nullable<global::System.Numerics.Vector2>>.CreateMarshaler2(centerPoint, global::ABI.System.Nullable<global::System.Numerics.Vector2>.PIID);
                __inertiaDecayRate = MarshalInterface<global::System.Nullable<float>>.CreateMarshaler2(inertiaDecayRate, global::ABI.System.Nullable<float>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float, IntPtr, IntPtr, int*, int>**)ThisPtr)[67](ThisPtr, zoomFactorVelocity, MarshalInspectable<object>.GetAbi(__centerPoint), MarshalInspectable<object>.GetAbi(__inertiaDecayRate), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__centerPoint);
                MarshalInspectable<object>.DisposeMarshaler(__inertiaDecayRate);
            }
        }
        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_Background(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Background(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode get_ComputedHorizontalScrollMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode*, int>**)ThisPtr)[34](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode get_ComputedVerticalScrollMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode*, int>**)ThisPtr)[35](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.UIElement get_Content(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.UIElement.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.UIElement.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Content(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.ScrollingContentOrientation get_ContentOrientation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.ScrollingContentOrientation __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.ScrollingContentOrientation*, int>**)ThisPtr)[20](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ContentOrientation(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.ScrollingContentOrientation value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.ScrollingContentOrientation, int>**)ThisPtr)[21](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Composition.CompositionPropertySet get_ExpressionAnimationSources(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Composition.CompositionPropertySet.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Composition.CompositionPropertySet.DisposeAbi(__retval);
            }
        }

        internal static unsafe double get_ExtentHeight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[15](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_ExtentWidth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_HorizontalAnchorRatio(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[51](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_HorizontalAnchorRatio(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[52](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_HorizontalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.ScrollingChainMode get_HorizontalScrollChainMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.ScrollingChainMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.ScrollingChainMode*, int>**)ThisPtr)[22](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_HorizontalScrollChainMode(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.ScrollingChainMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.ScrollingChainMode, int>**)ThisPtr)[23](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController get_HorizontalScrollController(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[47](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_HorizontalScrollController(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController>.CreateMarshaler2(value, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[48](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode get_HorizontalScrollMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode*, int>**)ThisPtr)[30](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_HorizontalScrollMode(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode, int>**)ThisPtr)[31](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.ScrollingRailMode get_HorizontalScrollRailMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.ScrollingRailMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.ScrollingRailMode*, int>**)ThisPtr)[26](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_HorizontalScrollRailMode(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.ScrollingRailMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.ScrollingRailMode, int>**)ThisPtr)[27](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase> get_HorizontalSnapPoints(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[55](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Xaml_Controls_Primitives_ScrollSnapPointBase.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.ScrollingInputKinds get_IgnoredInputKinds(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.ScrollingInputKinds __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.ScrollingInputKinds*, int>**)ThisPtr)[40](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_IgnoredInputKinds(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.ScrollingInputKinds value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.ScrollingInputKinds, int>**)ThisPtr)[41](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_MaxZoomFactor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[44](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_MaxZoomFactor(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[45](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_MinZoomFactor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[42](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_MinZoomFactor(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[43](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_ScrollableHeight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[19](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_ScrollableWidth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[18](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.ScrollingInteractionState get_State(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.ScrollingInteractionState __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.ScrollingInteractionState*, int>**)ThisPtr)[46](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_VerticalAnchorRatio(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[53](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_VerticalAnchorRatio(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[54](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_VerticalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.ScrollingChainMode get_VerticalScrollChainMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.ScrollingChainMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.ScrollingChainMode*, int>**)ThisPtr)[24](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_VerticalScrollChainMode(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.ScrollingChainMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.ScrollingChainMode, int>**)ThisPtr)[25](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController get_VerticalScrollController(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[49](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_VerticalScrollController(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController>.CreateMarshaler2(value, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[50](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode get_VerticalScrollMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode*, int>**)ThisPtr)[32](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_VerticalScrollMode(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode, int>**)ThisPtr)[33](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.ScrollingRailMode get_VerticalScrollRailMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.ScrollingRailMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.ScrollingRailMode*, int>**)ThisPtr)[28](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_VerticalScrollRailMode(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.ScrollingRailMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.ScrollingRailMode, int>**)ThisPtr)[29](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase> get_VerticalSnapPoints(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[56](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Xaml_Controls_Primitives_ScrollSnapPointBase.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe double get_ViewportHeight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[17](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_ViewportWidth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[16](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.ScrollingChainMode get_ZoomChainMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.ScrollingChainMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.ScrollingChainMode*, int>**)ThisPtr)[36](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ZoomChainMode(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.ScrollingChainMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.ScrollingChainMode, int>**)ThisPtr)[37](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe float get_ZoomFactor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            float __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, float*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.ScrollingZoomMode get_ZoomMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.ScrollingZoomMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.ScrollingZoomMode*, int>**)ThisPtr)[38](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ZoomMode(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.ScrollingZoomMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.ScrollingZoomMode, int>**)ThisPtr)[39](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase> get_ZoomSnapPoints(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[57](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Xaml_Controls_Primitives_ZoomSnapPointBase.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase>>.DisposeAbi(__retval);
            }
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingAnchorRequestedEventArgs>>> _AnchorRequested_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingAnchorRequestedEventArgs>>> MakeAnchorRequestedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _AnchorRequested_, new(), null);
            return _AnchorRequested_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingAnchorRequestedEventArgs>>> _AnchorRequested => _AnchorRequested_ ?? MakeAnchorRequestedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingAnchorRequestedEventArgs>> Get_AnchorRequested2(IObjectReference _obj, object _thisObj)
        {
            return _AnchorRequested.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_Controls_Primitives_ScrollPresenter__global__Microsoft_UI_Xaml_Controls_ScrollingAnchorRequestedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[84],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[85],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingBringingIntoViewEventArgs>>> _BringingIntoView_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingBringingIntoViewEventArgs>>> MakeBringingIntoViewTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _BringingIntoView_, new(), null);
            return _BringingIntoView_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingBringingIntoViewEventArgs>>> _BringingIntoView => _BringingIntoView_ ?? MakeBringingIntoViewTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingBringingIntoViewEventArgs>> Get_BringingIntoView2(IObjectReference _obj, object _thisObj)
        {
            return _BringingIntoView.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_Controls_Primitives_ScrollPresenter__global__Microsoft_UI_Xaml_Controls_ScrollingBringingIntoViewEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[82],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[83],
                1);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, object>>> _ExtentChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, object>>> MakeExtentChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ExtentChanged_, new(), null);
            return _ExtentChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, object>>> _ExtentChanged => _ExtentChanged_ ?? MakeExtentChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, object>> Get_ExtentChanged2(IObjectReference _obj, object _thisObj)
        {
            return _ExtentChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_Controls_Primitives_ScrollPresenter__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[68],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[69],
                2);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingScrollAnimationStartingEventArgs>>> _ScrollAnimationStarting_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingScrollAnimationStartingEventArgs>>> MakeScrollAnimationStartingTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ScrollAnimationStarting_, new(), null);
            return _ScrollAnimationStarting_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingScrollAnimationStartingEventArgs>>> _ScrollAnimationStarting => _ScrollAnimationStarting_ ?? MakeScrollAnimationStartingTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingScrollAnimationStartingEventArgs>> Get_ScrollAnimationStarting2(IObjectReference _obj, object _thisObj)
        {
            return _ScrollAnimationStarting.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_Controls_Primitives_ScrollPresenter__global__Microsoft_UI_Xaml_Controls_ScrollingScrollAnimationStartingEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[74],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[75],
                3);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingScrollCompletedEventArgs>>> _ScrollCompleted_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingScrollCompletedEventArgs>>> MakeScrollCompletedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ScrollCompleted_, new(), null);
            return _ScrollCompleted_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingScrollCompletedEventArgs>>> _ScrollCompleted => _ScrollCompleted_ ?? MakeScrollCompletedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingScrollCompletedEventArgs>> Get_ScrollCompleted2(IObjectReference _obj, object _thisObj)
        {
            return _ScrollCompleted.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_Controls_Primitives_ScrollPresenter__global__Microsoft_UI_Xaml_Controls_ScrollingScrollCompletedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[78],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[79],
                4);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, object>>> _StateChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, object>>> MakeStateChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _StateChanged_, new(), null);
            return _StateChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, object>>> _StateChanged => _StateChanged_ ?? MakeStateChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, object>> Get_StateChanged2(IObjectReference _obj, object _thisObj)
        {
            return _StateChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_Controls_Primitives_ScrollPresenter__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[70],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[71],
                5);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, object>>> _ViewChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, object>>> MakeViewChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ViewChanged_, new(), null);
            return _ViewChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, object>>> _ViewChanged => _ViewChanged_ ?? MakeViewChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, object>> Get_ViewChanged2(IObjectReference _obj, object _thisObj)
        {
            return _ViewChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_Controls_Primitives_ScrollPresenter__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[72],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[73],
                6);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingZoomAnimationStartingEventArgs>>> _ZoomAnimationStarting_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingZoomAnimationStartingEventArgs>>> MakeZoomAnimationStartingTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ZoomAnimationStarting_, new(), null);
            return _ZoomAnimationStarting_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingZoomAnimationStartingEventArgs>>> _ZoomAnimationStarting => _ZoomAnimationStarting_ ?? MakeZoomAnimationStartingTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingZoomAnimationStartingEventArgs>> Get_ZoomAnimationStarting2(IObjectReference _obj, object _thisObj)
        {
            return _ZoomAnimationStarting.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_Controls_Primitives_ScrollPresenter__global__Microsoft_UI_Xaml_Controls_ScrollingZoomAnimationStartingEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[76],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[77],
                7);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingZoomCompletedEventArgs>>> _ZoomCompleted_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingZoomCompletedEventArgs>>> MakeZoomCompletedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ZoomCompleted_, new(), null);
            return _ZoomCompleted_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingZoomCompletedEventArgs>>> _ZoomCompleted => _ZoomCompleted_ ?? MakeZoomCompletedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingZoomCompletedEventArgs>> Get_ZoomCompleted2(IObjectReference _obj, object _thisObj)
        {
            return _ZoomCompleted.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_Controls_Primitives_ScrollPresenter__global__Microsoft_UI_Xaml_Controls_ScrollingZoomCompletedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[80],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[81],
                8);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFD, 0x8A, 0x4B, 0x42, 0xAA, 0xF7, 0x5B, 0x5E, 0x9D, 0xB, 0x5F, 0xE, 0xA4, 0xE1, 0xA5, 0x6E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("424B8AFD-F7AA-5E5B-9D0B-5F0EA4E1A56E")]
    internal interface IScrollPresenter : global::Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenter
    {
    }
    internal static class IScrollPresenter2Methods
    {


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingScrollStartingEventArgs>>> _ScrollStarting_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingScrollStartingEventArgs>>> MakeScrollStartingTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ScrollStarting_, new(), null);
            return _ScrollStarting_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingScrollStartingEventArgs>>> _ScrollStarting => _ScrollStarting_ ?? MakeScrollStartingTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingScrollStartingEventArgs>> Get_ScrollStarting2(IObjectReference _obj, object _thisObj)
        {
            return _ScrollStarting.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_Controls_Primitives_ScrollPresenter__global__Microsoft_UI_Xaml_Controls_ScrollingScrollStartingEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[6],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[7],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingZoomStartingEventArgs>>> _ZoomStarting_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingZoomStartingEventArgs>>> MakeZoomStartingTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ZoomStarting_, new(), null);
            return _ZoomStarting_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingZoomStartingEventArgs>>> _ZoomStarting => _ZoomStarting_ ?? MakeZoomStartingTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter, global::Microsoft.UI.Xaml.Controls.ScrollingZoomStartingEventArgs>> Get_ZoomStarting2(IObjectReference _obj, object _thisObj)
        {
            return _ZoomStarting.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_Controls_Primitives_ScrollPresenter__global__Microsoft_UI_Xaml_Controls_ScrollingZoomStartingEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[8],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[9],
                1);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xBB, 0xEE, 0x78, 0xF1, 0x85, 0x42, 0x69, 0x59, 0xA2, 0x22, 0x4D, 0x7E, 0xFA, 0x8D, 0x6B, 0x19 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F178EEBB-4285-5969-A222-4D7EFA8D6B19")]
    internal interface IScrollPresenter2 : global::Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenter2
    {
    }
    internal static class IScrollPresenterFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x57, 0xDC, 0x5C, 0x9F, 0x29, 0xD2, 0xB2, 0x52, 0xAE, 0xE4, 0x37, 0xC4, 0x96, 0x76, 0x4E, 0xA3 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("9F5CDC57-D229-52B2-AEE4-37C496764EA3")]
    internal interface IScrollPresenterFactory : global::Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterFactory
    {
    }
    internal static class IScrollPresenterStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_BackgroundProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ComputedHorizontalScrollModeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[15](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ComputedVerticalScrollModeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[16](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ContentOrientationProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ContentProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_HorizontalAnchorRatioProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[22](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_HorizontalScrollChainModeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_HorizontalScrollModeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_HorizontalScrollRailModeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IgnoredInputKindsProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[19](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_MaxZoomFactorProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[21](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_MinZoomFactorProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[20](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_VerticalAnchorRatioProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[23](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_VerticalScrollChainModeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_VerticalScrollModeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_VerticalScrollRailModeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ZoomChainModeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[17](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ZoomModeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[18](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x47, 0xA9, 0x7B, 0xE2, 0xA5, 0xF8, 0x69, 0x58, 0x9A, 0x71, 0xCD, 0x51, 0x4D, 0x41, 0xC6, 0x23 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E27BA947-F8A5-5869-9A71-CD514D41C623")]
    internal interface IScrollPresenterStatics : global::Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterStatics
    {
    }
    internal static class IScrollSnapPointMethods
    {

        internal static unsafe double get_Value(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFF, 0x18, 0xD9, 0x73, 0x6C, 0xD1, 0xCD, 0x52, 0x96, 0x57, 0xE3, 0x92, 0xEE, 0x8, 0x86, 0x8A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("73D918FF-D16C-52CD-9657-E392EE08868A")]
    internal interface IScrollSnapPoint : global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPoint
    {
    }
    internal static class IScrollSnapPointBaseMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointsAlignment get_Alignment(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointsAlignment __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointsAlignment*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x9D, 0x31, 0xD7, 0x45, 0xEB, 0xC9, 0x9, 0x51, 0x96, 0x68, 0xFF, 0x3F, 0xC6, 0xCC, 0xDF, 0x11 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("45D7319D-C9EB-5109-9668-FF3FC6CCDF11")]
    internal interface IScrollSnapPointBase : global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointBase
    {
    }
    internal static class IScrollSnapPointBaseFactoryMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x52, 0xE5, 0xA2, 0x3F, 0x45, 0x1A, 0x91, 0x56, 0x99, 0xDC, 0x64, 0x0, 0x8, 0x7C, 0xBB, 0x38 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("3FA2E552-1A45-5691-99DC-6400087CBB38")]
    internal interface IScrollSnapPointBaseFactory : global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointBaseFactory
    {
    }
    internal static class IScrollSnapPointFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPoint CreateInstance(IObjectReference _obj, double snapPointValue, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointsAlignment alignment, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointsAlignment, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, snapPointValue, alignment, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPoint.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPoint.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC7, 0x4B, 0x30, 0x39, 0x54, 0xE, 0x6, 0x5C, 0x89, 0x20, 0xAD, 0xCF, 0x67, 0xE7, 0xC4, 0x66 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("39304BC7-0E54-5C06-8920-ADCF67E7C466")]
    internal interface IScrollSnapPointFactory : global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointFactory
    {
    }
    public static class IScrollSnapPointsInfoMethods
    {


        public static unsafe global::System.Collections.Generic.IReadOnlyList<float> GetIrregularSnapPoints(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.Orientation orientation, global::Microsoft.UI.Xaml.Controls.Primitives.SnapPointsAlignment alignment)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Orientation, global::Microsoft.UI.Xaml.Controls.Primitives.SnapPointsAlignment, IntPtr*, int>**)ThisPtr)[12](ThisPtr, orientation, alignment, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Float.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IReadOnlyList<float>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IReadOnlyList<float>>.DisposeAbi(__retval);
            }
        }

        public static unsafe float GetRegularSnapPoints(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.Orientation orientation, global::Microsoft.UI.Xaml.Controls.Primitives.SnapPointsAlignment alignment, out float offset)
        {
            var ThisPtr = _obj.ThisPtr;

            float __offset = default;
            float __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Orientation, global::Microsoft.UI.Xaml.Controls.Primitives.SnapPointsAlignment, float*, float*, int>**)ThisPtr)[13](ThisPtr, orientation, alignment, &__offset, &__retval));
            global::System.GC.KeepAlive(_obj);
            offset = __offset;
            return __retval;
        }
        public static unsafe bool get_AreHorizontalSnapPointsRegular(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        public static unsafe bool get_AreVerticalSnapPointsRegular(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _HorizontalSnapPointsChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> MakeHorizontalSnapPointsChangedTable()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_EventHandler_1_object.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref _HorizontalSnapPointsChanged_, new(), null);
            return _HorizontalSnapPointsChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _HorizontalSnapPointsChanged => _HorizontalSnapPointsChanged_ ?? MakeHorizontalSnapPointsChangedTable();

        public static unsafe (Action<global::System.EventHandler<object>>, Action<global::System.EventHandler<object>>) Get_HorizontalSnapPointsChanged(IObjectReference _obj, object _thisObj)
        {
            var eventSource = Get_HorizontalSnapPointsChanged2(_obj, _thisObj);
            return (eventSource.Subscribe, eventSource.Unsubscribe);
        }

        public static unsafe global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>> Get_HorizontalSnapPointsChanged2(IObjectReference _obj, object _thisObj)
        {
            return _HorizontalSnapPointsChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return  new global::ABI.WinRT.Interop.EventHandlerEventSource<object>(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[8],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[9],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _VerticalSnapPointsChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> MakeVerticalSnapPointsChangedTable()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_EventHandler_1_object.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref _VerticalSnapPointsChanged_, new(), null);
            return _VerticalSnapPointsChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _VerticalSnapPointsChanged => _VerticalSnapPointsChanged_ ?? MakeVerticalSnapPointsChangedTable();

        public static unsafe (Action<global::System.EventHandler<object>>, Action<global::System.EventHandler<object>>) Get_VerticalSnapPointsChanged(IObjectReference _obj, object _thisObj)
        {
            var eventSource = Get_VerticalSnapPointsChanged2(_obj, _thisObj);
            return (eventSource.Subscribe, eventSource.Unsubscribe);
        }

        public static unsafe global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>> Get_VerticalSnapPointsChanged2(IObjectReference _obj, object _thisObj)
        {
            return _VerticalSnapPointsChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return  new global::ABI.WinRT.Interop.EventHandlerEventSource<object>(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[10],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[11],
                1);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x9, 0x6E, 0xEA, 0xD3, 0xF7, 0xEC, 0xA8, 0x51, 0xBD, 0x54, 0xFC, 0x84, 0xB9, 0x65, 0x37, 0x66 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IScrollSnapPointsInfo.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("D3EA6E09-ECF7-51A8-BD54-FC84B9653766")]
    internal unsafe interface IScrollSnapPointsInfo : global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IScrollSnapPointsInfo()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IScrollSnapPointsInfo), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 8);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_AreHorizontalSnapPointsRegular_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_AreVerticalSnapPointsRegular_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_add_HorizontalSnapPointsChanged_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_remove_HorizontalSnapPointsChanged_3;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>*)AbiToProjectionVftablePtr)[10] = &Do_Abi_add_VerticalSnapPointsChanged_4;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>*)AbiToProjectionVftablePtr)[11] = &Do_Abi_remove_VerticalSnapPointsChanged_5;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Orientation, global::Microsoft.UI.Xaml.Controls.Primitives.SnapPointsAlignment, IntPtr*, int>*)AbiToProjectionVftablePtr)[12] = &Do_Abi_GetIrregularSnapPoints_6;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Orientation, global::Microsoft.UI.Xaml.Controls.Primitives.SnapPointsAlignment, float*, float*, int>*)AbiToProjectionVftablePtr)[13] = &Do_Abi_GetRegularSnapPoints_7;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetIrregularSnapPoints_6(IntPtr thisPtr, global::Microsoft.UI.Xaml.Controls.Orientation orientation, global::Microsoft.UI.Xaml.Controls.Primitives.SnapPointsAlignment alignment, IntPtr* result)
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Float.EnsureInitialized();

            global::System.Collections.Generic.IReadOnlyList<float> __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo>(thisPtr).GetIrregularSnapPoints(orientation, alignment);
                *result = MarshalInterface<global::System.Collections.Generic.IReadOnlyList<float>>.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetRegularSnapPoints_7(IntPtr thisPtr, global::Microsoft.UI.Xaml.Controls.Orientation orientation, global::Microsoft.UI.Xaml.Controls.Primitives.SnapPointsAlignment alignment, float* offset, float* returnValue)
        {

            float __returnValue = default;

            *offset = default;
            *returnValue = default;
            float __offset = default;

            try
            {
                __returnValue = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo>(thisPtr).GetRegularSnapPoints(orientation, alignment, out __offset);
                *offset = __offset;
                *returnValue = __returnValue;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_AreHorizontalSnapPointsRegular_0(IntPtr thisPtr, byte* value)
        {

            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo>(thisPtr).AreHorizontalSnapPointsRegular;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_AreVerticalSnapPointsRegular_1(IntPtr thisPtr, byte* value)
        {

            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo>(thisPtr).AreVerticalSnapPointsRegular;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, global::WinRT.EventRegistrationTokenTable<global::System.EventHandler<object>>> _HorizontalSnapPointsChanged_tokenTables;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, global::WinRT.EventRegistrationTokenTable<global::System.EventHandler<object>>> MakeHorizontalSnapPointsChangedTable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _HorizontalSnapPointsChanged_tokenTables, new(), null);
            return _HorizontalSnapPointsChanged_tokenTables;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, global::WinRT.EventRegistrationTokenTable<global::System.EventHandler<object>>> _HorizontalSnapPointsChanged_TokenTables => _HorizontalSnapPointsChanged_tokenTables ?? MakeHorizontalSnapPointsChangedTable();

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_add_HorizontalSnapPointsChanged_2(IntPtr thisPtr, IntPtr handler, global::WinRT.EventRegistrationToken* token)
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_EventHandler_1_object.EnsureInitialized();
            *token = default;
            try
            {
                var __this = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo>(thisPtr);
                var __handler = global::ABI.System.EventHandler<object>.FromAbi(handler);
                *token = _HorizontalSnapPointsChanged_TokenTables.GetOrCreateValue(__this).AddEventHandler(__handler);
                __this.HorizontalSnapPointsChanged += __handler;
                return 0;
            }
            catch (Exception __ex)
            {
                return __ex.HResult;
            }
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_remove_HorizontalSnapPointsChanged_3(IntPtr thisPtr, global::WinRT.EventRegistrationToken token)
        {
            try
            {
                var __this = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo>(thisPtr);
                if(__this != null && _HorizontalSnapPointsChanged_TokenTables.TryGetValue(__this, out var __table) && __table.RemoveEventHandler(token, out var __handler))
                {
                    __this.HorizontalSnapPointsChanged -= __handler;
                }
                return 0;
            }
            catch (Exception __ex)
            {
                return __ex.HResult;
            }
        }
        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, global::WinRT.EventRegistrationTokenTable<global::System.EventHandler<object>>> _VerticalSnapPointsChanged_tokenTables;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, global::WinRT.EventRegistrationTokenTable<global::System.EventHandler<object>>> MakeVerticalSnapPointsChangedTable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _VerticalSnapPointsChanged_tokenTables, new(), null);
            return _VerticalSnapPointsChanged_tokenTables;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, global::WinRT.EventRegistrationTokenTable<global::System.EventHandler<object>>> _VerticalSnapPointsChanged_TokenTables => _VerticalSnapPointsChanged_tokenTables ?? MakeVerticalSnapPointsChangedTable();

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_add_VerticalSnapPointsChanged_4(IntPtr thisPtr, IntPtr handler, global::WinRT.EventRegistrationToken* token)
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_EventHandler_1_object.EnsureInitialized();
            *token = default;
            try
            {
                var __this = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo>(thisPtr);
                var __handler = global::ABI.System.EventHandler<object>.FromAbi(handler);
                *token = _VerticalSnapPointsChanged_TokenTables.GetOrCreateValue(__this).AddEventHandler(__handler);
                __this.VerticalSnapPointsChanged += __handler;
                return 0;
            }
            catch (Exception __ex)
            {
                return __ex.HResult;
            }
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_remove_VerticalSnapPointsChanged_5(IntPtr thisPtr, global::WinRT.EventRegistrationToken token)
        {
            try
            {
                var __this = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo>(thisPtr);
                if(__this != null && _VerticalSnapPointsChanged_TokenTables.TryGetValue(__this, out var __table) && __table.RemoveEventHandler(token, out var __handler))
                {
                    __this.VerticalSnapPointsChanged -= __handler;
                }
                return 0;
            }
            catch (Exception __ex)
            {
                return __ex.HResult;
            }
        }

        unsafe global::System.Collections.Generic.IReadOnlyList<float> global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo.GetIrregularSnapPoints(global::Microsoft.UI.Xaml.Controls.Orientation orientation, global::Microsoft.UI.Xaml.Controls.Primitives.SnapPointsAlignment alignment)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.GetIrregularSnapPoints(_obj, orientation, alignment);
        }

        unsafe float global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo.GetRegularSnapPoints(global::Microsoft.UI.Xaml.Controls.Orientation orientation, global::Microsoft.UI.Xaml.Controls.Primitives.SnapPointsAlignment alignment, out float offset)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.GetRegularSnapPoints(_obj, orientation, alignment, out offset);
        }

        unsafe bool global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo.AreHorizontalSnapPointsRegular
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.get_AreHorizontalSnapPointsRegular(_obj);
            }
        }

        unsafe bool global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo.AreVerticalSnapPointsRegular
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.get_AreVerticalSnapPointsRegular(_obj);
            }
        }

        event global::System.EventHandler<object> global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo.HorizontalSnapPointsChanged
        {
            add 
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo).TypeHandle));
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.Get_HorizontalSnapPointsChanged2(_obj, (IWinRTObject)this).Subscribe(value);
            }
            remove
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo).TypeHandle));
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.Get_HorizontalSnapPointsChanged2(_obj, (IWinRTObject)this).Unsubscribe(value);
            }
        }

        event global::System.EventHandler<object> global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo.VerticalSnapPointsChanged
        {
            add 
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo).TypeHandle));
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.Get_VerticalSnapPointsChanged2(_obj, (IWinRTObject)this).Subscribe(value);
            }
            remove
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo).TypeHandle));
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfoMethods.Get_VerticalSnapPointsChanged2(_obj, (IWinRTObject)this).Unsubscribe(value);
            }
        }
    }

    internal static class ISelectorMethods
    {

        internal static unsafe global::System.Nullable<bool> get_IsSynchronizedWithCurrentItem(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<bool>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<bool>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_IsSynchronizedWithCurrentItem(IObjectReference _obj, global::System.Nullable<bool> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<bool>>.CreateMarshaler2(value, global::ABI.System.Nullable<bool>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[15](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe int get_SelectedIndex(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_SelectedIndex(IObjectReference _obj, int value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe object get_SelectedItem(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SelectedItem(IObjectReference _obj, object value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInspectable<object>.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe object get_SelectedValue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SelectedValue(IObjectReference _obj, object value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInspectable<object>.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe string get_SelectedValuePath(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SelectedValuePath(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[13](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Controls.SelectionChangedEventHandler>> _SelectionChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Controls.SelectionChangedEventHandler>> MakeSelectionChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _SelectionChanged_, new(), null);
            return _SelectionChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Controls.SelectionChangedEventHandler>> _SelectionChanged => _SelectionChanged_ ?? MakeSelectionChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Controls.SelectionChangedEventHandler> Get_SelectionChanged2(IObjectReference _obj, object _thisObj)
        {
            return _SelectionChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_Controls_SelectionChangedEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[16],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[17],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x59, 0x21, 0x7E, 0x8F, 0x1D, 0xE6, 0x6F, 0x57, 0x84, 0x76, 0xF8, 0x3F, 0xDE, 0x3D, 0x68, 0x9E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8F7E2159-E61D-576F-8476-F83FDE3D689E")]
    internal interface ISelector : global::Microsoft.UI.Xaml.Controls.Primitives.ISelector
    {
    }
    internal static class ISelectorFactoryMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x24, 0x20, 0xA4, 0x21, 0x7, 0xAF, 0xF9, 0x58, 0x87, 0x89, 0x84, 0x8D, 0x33, 0x24, 0xD9, 0x1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("21A42024-AF07-58F9-8789-848D3324D901")]
    internal interface ISelectorFactory : global::Microsoft.UI.Xaml.Controls.Primitives.ISelectorFactory
    {
    }
    internal static class ISelectorItemMethods
    {

        internal static unsafe bool get_IsSelected(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsSelected(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xDE, 0xC4, 0x72, 0x57, 0xEA, 0x60, 0x92, 0x54, 0x8C, 0x5E, 0xB3, 0x32, 0x3D, 0x5A, 0x3C, 0xA6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("5772C4DE-60EA-5492-8C5E-B3323D5A3CA6")]
    internal interface ISelectorItem : global::Microsoft.UI.Xaml.Controls.Primitives.ISelectorItem
    {
    }
    internal static class ISelectorItemFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.SelectorItem CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.SelectorItem.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.SelectorItem.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF5, 0x39, 0x80, 0x7, 0xED, 0x76, 0x99, 0x52, 0x97, 0x15, 0xFC, 0x8C, 0x58, 0x17, 0x35, 0x60 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("078039F5-76ED-5299-9715-FC8C58173560")]
    internal interface ISelectorItemFactory : global::Microsoft.UI.Xaml.Controls.Primitives.ISelectorItemFactory
    {
    }
    internal static class ISelectorItemStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IsSelectedProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x54, 0x1A, 0x20, 0x4B, 0x14, 0xA4, 0x79, 0x5E, 0x9B, 0x6B, 0x3D, 0xA9, 0xDE, 0x44, 0x2A, 0x35 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4B201A54-A414-5E79-9B6B-3DA9DE442A35")]
    internal interface ISelectorItemStatics : global::Microsoft.UI.Xaml.Controls.Primitives.ISelectorItemStatics
    {
    }
    internal static class ISelectorStaticsMethods
    {


        internal static unsafe bool GetIsSelectionActive(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject element)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            byte __retval = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(element);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte*, int>**)ThisPtr)[11](ThisPtr, MarshalInspectable<object>.GetAbi(__element), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
            }
        }
        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IsSynchronizedWithCurrentItemProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SelectedIndexProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SelectedItemProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SelectedValuePathProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SelectedValueProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x34, 0x22, 0x9B, 0x56, 0xEB, 0x1C, 0x6E, 0x51, 0xB6, 0x4E, 0xD, 0x47, 0x94, 0x52, 0xE2, 0x79 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("569B2234-1CEB-516E-B64E-0D479452E279")]
    internal interface ISelectorStatics : global::Microsoft.UI.Xaml.Controls.Primitives.ISelectorStatics
    {
    }
    internal static class ISnapPointBaseMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x89, 0x10, 0xED, 0x14, 0x97, 0xFB, 0x11, 0x52, 0x8C, 0x45, 0xC3, 0x52, 0xCD, 0x8B, 0x96, 0xA1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("14ED1089-FB97-5211-8C45-C352CD8B96A1")]
    internal interface ISnapPointBase : global::Microsoft.UI.Xaml.Controls.Primitives.ISnapPointBase
    {
    }
    internal static class ISnapPointBaseFactoryMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x8, 0x65, 0x26, 0x50, 0xF8, 0x15, 0xA, 0x53, 0xA2, 0x13, 0xE9, 0x76, 0xE0, 0x4E, 0x67, 0xB };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("50266508-15F8-530A-A213-E976E04E670B")]
    internal interface ISnapPointBaseFactory : global::Microsoft.UI.Xaml.Controls.Primitives.ISnapPointBaseFactory
    {
    }
    internal static class ISplitViewTemplateSettingsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.GridLength get_CompactPaneGridLength(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.GridLength __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.GridLength*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_NegativeOpenPaneLength(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_NegativeOpenPaneLengthMinusCompactLength(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.GridLength get_OpenPaneGridLength(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.GridLength __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.GridLength*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_OpenPaneLength(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_OpenPaneLengthMinusCompactLength(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF7, 0xF6, 0xD6, 0x44, 0x58, 0x0, 0xAC, 0x5E, 0x88, 0x37, 0xF7, 0xF1, 0x6D, 0x96, 0x1F, 0x7C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("44D6F6F7-0058-5EAC-8837-F7F16D961F7C")]
    internal interface ISplitViewTemplateSettings : global::Microsoft.UI.Xaml.Controls.Primitives.ISplitViewTemplateSettings
    {
    }
    internal static class ITabViewListViewMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB5, 0xEF, 0x48, 0xEC, 0xB3, 0x2C, 0x2B, 0x56, 0x92, 0x1C, 0xE5, 0x54, 0x92, 0x3C, 0xE1, 0xD5 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("EC48EFB5-2CB3-562B-921C-E554923CE1D5")]
    internal interface ITabViewListView : global::Microsoft.UI.Xaml.Controls.Primitives.ITabViewListView
    {
    }
    internal static class ITabViewListViewFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.TabViewListView CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.TabViewListView.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.TabViewListView.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xDD, 0x4F, 0x8, 0x8A, 0xF0, 0x86, 0xEE, 0x51, 0x98, 0xDF, 0x5F, 0xBD, 0xB, 0x56, 0x69, 0xBE };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8A084FDD-86F0-51EE-98DF-5FBD0B5669BE")]
    internal interface ITabViewListViewFactory : global::Microsoft.UI.Xaml.Controls.Primitives.ITabViewListViewFactory
    {
    }
    internal static class IThumbMethods
    {


        internal static unsafe void CancelDrag(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[13](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }
        internal static unsafe bool get_IsDragging(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandler>> _DragCompleted_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandler>> MakeDragCompletedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _DragCompleted_, new(), null);
            return _DragCompleted_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandler>> _DragCompleted => _DragCompleted_ ?? MakeDragCompletedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandler> Get_DragCompleted2(IObjectReference _obj, object _thisObj)
        {
            return _DragCompleted.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_Controls_Primitives_DragCompletedEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[11],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[12],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandler>> _DragDelta_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandler>> MakeDragDeltaTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _DragDelta_, new(), null);
            return _DragDelta_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandler>> _DragDelta => _DragDelta_ ?? MakeDragDeltaTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandler> Get_DragDelta2(IObjectReference _obj, object _thisObj)
        {
            return _DragDelta.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_Controls_Primitives_DragDeltaEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[9],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[10],
                1);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandler>> _DragStarted_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandler>> MakeDragStartedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _DragStarted_, new(), null);
            return _DragStarted_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandler>> _DragStarted => _DragStarted_ ?? MakeDragStartedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandler> Get_DragStarted2(IObjectReference _obj, object _thisObj)
        {
            return _DragStarted.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_Controls_Primitives_DragStartedEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[7],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[8],
                2);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE4, 0xA, 0x54, 0x9B, 0xED, 0x98, 0x19, 0x5A, 0x95, 0x12, 0xA5, 0x68, 0x78, 0xC5, 0x2F, 0xEE };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("9B540AE4-98ED-5A19-9512-A56878C52FEE")]
    internal interface IThumb : global::Microsoft.UI.Xaml.Controls.Primitives.IThumb
    {
    }
    internal static class IThumbStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IsDraggingProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x24, 0x49, 0xC, 0x90, 0x6A, 0x88, 0x24, 0x5F, 0x96, 0xD1, 0x1E, 0xC3, 0xA3, 0x6E, 0x8D, 0x66 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("900C4924-886A-5F24-96D1-1EC3A36E8D66")]
    internal interface IThumbStatics : global::Microsoft.UI.Xaml.Controls.Primitives.IThumbStatics
    {
    }
    internal static class ITickBarMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Media.Brush get_Fill(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Brush.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Brush.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Fill(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Brush value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Brush.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xBD, 0x93, 0x32, 0x57, 0x6A, 0x3F, 0xC3, 0x56, 0xBF, 0x95, 0x62, 0x54, 0xC9, 0xBB, 0xBC, 0x89 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("573293BD-3F6A-56C3-BF95-6254C9BBBC89")]
    internal interface ITickBar : global::Microsoft.UI.Xaml.Controls.Primitives.ITickBar
    {
    }
    internal static class ITickBarStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_FillProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xCF, 0x10, 0xC2, 0x41, 0x60, 0x70, 0x7B, 0x5B, 0x83, 0xAB, 0xA3, 0x2, 0xAA, 0x6E, 0xED, 0x6B };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("41C210CF-7060-5B7B-83AB-A302AA6EED6B")]
    internal interface ITickBarStatics : global::Microsoft.UI.Xaml.Controls.Primitives.ITickBarStatics
    {
    }
    internal static class IToggleButtonMethods
    {

        internal static unsafe global::System.Nullable<bool> get_IsChecked(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<bool>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<bool>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_IsChecked(IObjectReference _obj, global::System.Nullable<bool> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<bool>>.CreateMarshaler2(value, global::ABI.System.Nullable<bool>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe bool get_IsThreeState(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsThreeState(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[9](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler>> _Checked_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler>> MakeCheckedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Checked_, new(), null);
            return _Checked_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler>> _Checked => _Checked_ ?? MakeCheckedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler> Get_Checked2(IObjectReference _obj, object _thisObj)
        {
            return _Checked.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_RoutedEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[10],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[11],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler>> _Indeterminate_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler>> MakeIndeterminateTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Indeterminate_, new(), null);
            return _Indeterminate_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler>> _Indeterminate => _Indeterminate_ ?? MakeIndeterminateTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler> Get_Indeterminate2(IObjectReference _obj, object _thisObj)
        {
            return _Indeterminate.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_RoutedEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[14],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[15],
                1);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler>> _Unchecked_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler>> MakeUncheckedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Unchecked_, new(), null);
            return _Unchecked_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler>> _Unchecked => _Unchecked_ ?? MakeUncheckedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler> Get_Unchecked2(IObjectReference _obj, object _thisObj)
        {
            return _Unchecked.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_RoutedEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[12],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[13],
                2);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA4, 0xBA, 0x6F, 0x68, 0x66, 0xC8, 0x8B, 0x56, 0x8F, 0x75, 0x48, 0x1D, 0x8D, 0x54, 0x52, 0x91 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("686FBAA4-C866-568B-8F75-481D8D545291")]
    internal interface IToggleButton : global::Microsoft.UI.Xaml.Controls.Primitives.IToggleButton
    {
    }
    internal static class IToggleButtonFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ToggleButton.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ToggleButton.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xBB, 0x11, 0x95, 0x51, 0x5B, 0xD3, 0x2D, 0x5E, 0x96, 0x6C, 0x83, 0x69, 0x40, 0x5A, 0x44, 0x8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("519511BB-D35B-5E2D-966C-8369405A4408")]
    internal interface IToggleButtonFactory : global::Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonFactory
    {
    }
    public static class IToggleButtonOverridesMethods
    {


        internal static unsafe void OnToggle(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[6](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x5D, 0xF8, 0x55, 0xEE, 0x61, 0x90, 0x18, 0x5D, 0xB3, 0x1A, 0x90, 0xBC, 0x56, 0x25, 0xCF, 0xE9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IToggleButtonOverrides.AbiToProjectionVftablePtr;

    }

    [Guid("EE55F85D-9061-5D18-B31A-90BC5625CFE9")]
    internal unsafe interface IToggleButtonOverrides : global::Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonOverrides
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IToggleButtonOverrides()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IToggleButtonOverrides), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_OnToggle_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_OnToggle_0(IntPtr thisPtr)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonOverrides>(thisPtr).OnToggle();

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }

    internal static class IToggleButtonStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IsCheckedProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IsThreeStateProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE3, 0x97, 0x83, 0x4B, 0xFD, 0x76, 0xDF, 0x59, 0x82, 0x4F, 0x40, 0xAE, 0x33, 0x9F, 0xB0, 0xB };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4B8397E3-76FD-59DF-824F-40AE339FB00B")]
    internal interface IToggleButtonStatics : global::Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonStatics
    {
    }
    internal static class IToggleSwitchTemplateSettingsMethods
    {

        internal static unsafe double get_CurtainCurrentToOffOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_CurtainCurrentToOnOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_CurtainOffToOnOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_CurtainOnToOffOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_KnobCurrentToOffOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_KnobCurrentToOnOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_KnobOffToOnOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_KnobOnToOffOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA3, 0x40, 0x96, 0x8F, 0x4E, 0xAA, 0xDA, 0x52, 0xA2, 0xC6, 0x91, 0x67, 0xC8, 0x0, 0xBA, 0xBA };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8F9640A3-AA4E-52DA-A2C6-9167C800BABA")]
    internal interface IToggleSwitchTemplateSettings : global::Microsoft.UI.Xaml.Controls.Primitives.IToggleSwitchTemplateSettings
    {
    }
    internal static class IToolTipTemplateSettingsMethods
    {

        internal static unsafe double get_FromHorizontalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe double get_FromVerticalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x50, 0x59, 0x72, 0x4F, 0x64, 0xFF, 0xF1, 0x5C, 0x9E, 0x86, 0x90, 0x11, 0xFB, 0x10, 0xE8, 0x8E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4F725950-FF64-5CF1-9E86-9011FB10E88E")]
    internal interface IToolTipTemplateSettings : global::Microsoft.UI.Xaml.Controls.Primitives.IToolTipTemplateSettings
    {
    }
    internal static class IZoomSnapPointMethods
    {

        internal static unsafe double get_Value(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x53, 0xD3, 0x1, 0x81, 0xB3, 0x8D, 0xC6, 0x5A, 0xA7, 0xF8, 0xB1, 0x8E, 0xB9, 0xC1, 0x23, 0xAC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8101D353-8DB3-5AC6-A7F8-B18EB9C123AC")]
    internal interface IZoomSnapPoint : global::Microsoft.UI.Xaml.Controls.Primitives.IZoomSnapPoint
    {
    }
    internal static class IZoomSnapPointBaseMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x56, 0x87, 0xD0, 0xC6, 0x60, 0x8, 0x2D, 0x5C, 0xAB, 0xEC, 0x6E, 0xB4, 0xAA, 0x4B, 0x53, 0xD7 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C6D08756-0860-5C2D-ABEC-6EB4AA4B53D7")]
    internal interface IZoomSnapPointBase : global::Microsoft.UI.Xaml.Controls.Primitives.IZoomSnapPointBase
    {
    }
    internal static class IZoomSnapPointBaseFactoryMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xEA, 0x9E, 0x68, 0x2C, 0xCF, 0xB6, 0x24, 0x50, 0x84, 0x7B, 0x58, 0x93, 0x55, 0xD5, 0xA2, 0xFA };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2C689EEA-B6CF-5024-847B-589355D5A2FA")]
    internal interface IZoomSnapPointBaseFactory : global::Microsoft.UI.Xaml.Controls.Primitives.IZoomSnapPointBaseFactory
    {
    }
    internal static class IZoomSnapPointFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPoint CreateInstance(IObjectReference _obj, double snapPointValue, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, snapPointValue, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPoint.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPoint.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x18, 0x54, 0x3B, 0xB, 0xF6, 0xBF, 0x9E, 0x5A, 0xB7, 0x34, 0xB6, 0x8A, 0xDF, 0x49, 0xF7, 0x75 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("0B3B5418-BFF6-5A9E-B734-B68ADF49F775")]
    internal interface IZoomSnapPointFactory : global::Microsoft.UI.Xaml.Controls.Primitives.IZoomSnapPointFactory
    {
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct InfoBarPanel
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IInfoBarPanelMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IInfoBarPanelMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class InfoBarPanelRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ItemsChangedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IItemsChangedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IItemsChangedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ItemsChangedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("8E15E39E-23F7-5FCF-B04B-D1B7891DCCC4")]
    public static class ItemsChangedEventHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x9E, 0xE3, 0x15, 0x8E, 0xF7, 0x23, 0xCF, 0x5F, 0xB0, 0x4B, 0xD1, 0xB7, 0x89, 0x1D, 0xCC, 0xC4 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe ItemsChangedEventHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(ItemsChangedEventHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(object sender, global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs e)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __sender = default;
                ObjectReferenceValue __e = default;
                try
                {
                    __sender = MarshalInspectable<object>.CreateMarshaler2(sender);
                    __e = global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs.CreateMarshaler2(e);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__sender), MarshalInspectable<object>.GetAbi(__e)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__sender);
                    MarshalInspectable<object>.DisposeMarshaler(__e);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr e)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventHandler>(thisPtr).Invoke(MarshalInspectable<object>.FromAbi(sender), global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs.FromAbi(e))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class ItemsChangedEventHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = ItemsChangedEventHandler.IID,
                Vtable = ItemsChangedEventHandler.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct JumpListItemBackgroundConverter
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemBackgroundConverterMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemBackgroundConverterMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class JumpListItemBackgroundConverterRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct JumpListItemForegroundConverter
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemForegroundConverterMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemForegroundConverterMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class JumpListItemForegroundConverterRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct LayoutInformation
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.LayoutInformation obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.LayoutInformation>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILayoutInformationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.LayoutInformation obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILayoutInformationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.LayoutInformation FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.LayoutInformation.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.LayoutInformation obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.LayoutInformation>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.LayoutInformation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.LayoutInformation>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.LayoutInformation>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.LayoutInformation[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.LayoutInformation>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.LayoutInformation[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.LayoutInformation>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.LayoutInformation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.LayoutInformation>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.LayoutInformation>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.LayoutInformation>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class LayoutInformationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.LayoutInformation(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ListViewItemPresenter
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenter obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenter>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenter obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenter FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenter.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenter obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenter>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenter[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenter>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenter>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenter[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenter>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenter[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenter>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenter[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenter>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenter>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenter>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ListViewItemPresenterRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenter(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ListViewItemTemplateSettings
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemTemplateSettingsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IListViewItemTemplateSettingsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ListViewItemTemplateSettingsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct LoopingSelector
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelector obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelector>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelector obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelector FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelector.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelector obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelector>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelector[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelector>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelector>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelector[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelector>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelector[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelector>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelector[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelector>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelector>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelector>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class LoopingSelectorRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelector(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct LoopingSelectorItem
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorItem obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorItem>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorItemMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorItem obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorItemMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorItem FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorItem.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorItem obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorItem>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorItem[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorItem>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorItem>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorItem[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorItem>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorItem[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorItem>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorItem[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorItem>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorItem>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorItem>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class LoopingSelectorItemRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorItem(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct LoopingSelectorPanel
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorPanel obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorPanel>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorPanelMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorPanel obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorPanelMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorPanel FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorPanel.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorPanel obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorPanel>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorPanel[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorPanel>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorPanel>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorPanel[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorPanel>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorPanel[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorPanel>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorPanel[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorPanel>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorPanel>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorPanel>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class LoopingSelectorPanelRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorPanel(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct MenuFlyoutItemTemplateSettings
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IMenuFlyoutItemTemplateSettingsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IMenuFlyoutItemTemplateSettingsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class MenuFlyoutItemTemplateSettingsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct MenuFlyoutPresenterTemplateSettings
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IMenuFlyoutPresenterTemplateSettingsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IMenuFlyoutPresenterTemplateSettingsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class MenuFlyoutPresenterTemplateSettingsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct MonochromaticOverlayPresenter
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.MonochromaticOverlayPresenter obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.MonochromaticOverlayPresenter>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IMonochromaticOverlayPresenterMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.MonochromaticOverlayPresenter obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IMonochromaticOverlayPresenterMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.MonochromaticOverlayPresenter FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.MonochromaticOverlayPresenter.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.MonochromaticOverlayPresenter obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.MonochromaticOverlayPresenter>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.MonochromaticOverlayPresenter[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.MonochromaticOverlayPresenter>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.MonochromaticOverlayPresenter>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.MonochromaticOverlayPresenter[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.MonochromaticOverlayPresenter>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.MonochromaticOverlayPresenter[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.MonochromaticOverlayPresenter>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.MonochromaticOverlayPresenter[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.MonochromaticOverlayPresenter>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.MonochromaticOverlayPresenter>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.MonochromaticOverlayPresenter>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class MonochromaticOverlayPresenterRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.MonochromaticOverlayPresenter(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct NavigationViewItemPresenter
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class NavigationViewItemPresenterRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct NavigationViewItemPresenterTemplateSettings
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterTemplateSettingsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterTemplateSettingsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class NavigationViewItemPresenterTemplateSettingsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct OrientedVirtualizingPanel
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class OrientedVirtualizingPanelRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PickerFlyoutBase
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PickerFlyoutBaseRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PivotHeaderItem
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderItem obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderItem>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPivotHeaderItemMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderItem obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPivotHeaderItemMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderItem FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderItem.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderItem obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderItem>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderItem[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderItem>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderItem>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderItem[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderItem>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderItem[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderItem>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderItem[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderItem>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderItem>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderItem>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PivotHeaderItemRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderItem(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PivotHeaderPanel
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderPanel obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderPanel>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPivotHeaderPanelMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderPanel obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPivotHeaderPanelMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderPanel FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderPanel.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderPanel obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderPanel>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderPanel[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderPanel>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderPanel>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderPanel[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderPanel>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderPanel[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderPanel>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderPanel[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderPanel>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderPanel>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderPanel>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PivotHeaderPanelRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderPanel(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PivotPanel
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.PivotPanel obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.PivotPanel>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPivotPanelMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.PivotPanel obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPivotPanelMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.PivotPanel FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.PivotPanel.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.PivotPanel obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.PivotPanel>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.PivotPanel[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.PivotPanel>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.PivotPanel>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.PivotPanel[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.PivotPanel>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.PivotPanel[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.PivotPanel>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.PivotPanel[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.PivotPanel>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.PivotPanel>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.PivotPanel>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PivotPanelRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.PivotPanel(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct Popup
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.Popup obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.Popup>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.Popup obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IPopupMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.Popup FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.Popup.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.Popup obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.Popup>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.Popup[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.Popup>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.Popup>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.Popup[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.Popup>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.Popup[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.Popup>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.Popup[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.Popup>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.Popup>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.Popup>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PopupRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.Popup(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct RangeBase
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class RangeBaseRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct RangeBaseValueChangedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseValueChangedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseValueChangedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class RangeBaseValueChangedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("23F0E209-9455-54CB-B8BC-0B49553C7DCC")]
    public static class RangeBaseValueChangedEventHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x9, 0xE2, 0xF0, 0x23, 0x55, 0x94, 0xCB, 0x54, 0xB8, 0xBC, 0xB, 0x49, 0x55, 0x3C, 0x7D, 0xCC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe RangeBaseValueChangedEventHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(RangeBaseValueChangedEventHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(object sender, global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs e)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __sender = default;
                ObjectReferenceValue __e = default;
                try
                {
                    __sender = MarshalInspectable<object>.CreateMarshaler2(sender);
                    __e = global::ABI.Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs.CreateMarshaler2(e);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__sender), MarshalInspectable<object>.GetAbi(__e)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__sender);
                    MarshalInspectable<object>.DisposeMarshaler(__e);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr e)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler>(thisPtr).Invoke(MarshalInspectable<object>.FromAbi(sender), global::ABI.Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs.FromAbi(e))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class RangeBaseValueChangedEventHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = RangeBaseValueChangedEventHandler.IID,
                Vtable = RangeBaseValueChangedEventHandler.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct RepeatButton
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.RepeatButton obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.RepeatButton>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatButtonMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.RepeatButton obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatButtonMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.RepeatButton FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.RepeatButton.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.RepeatButton obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RepeatButton>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.RepeatButton[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RepeatButton>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RepeatButton>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.RepeatButton[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RepeatButton>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.RepeatButton[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RepeatButton>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.RepeatButton[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RepeatButton>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RepeatButton>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RepeatButton>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class RepeatButtonRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.RepeatButton(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct RepeatedScrollSnapPoint
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedScrollSnapPoint obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedScrollSnapPoint>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatedScrollSnapPointMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedScrollSnapPoint obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatedScrollSnapPointMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedScrollSnapPoint FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedScrollSnapPoint.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedScrollSnapPoint obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedScrollSnapPoint>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedScrollSnapPoint[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedScrollSnapPoint>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedScrollSnapPoint>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedScrollSnapPoint[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedScrollSnapPoint>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedScrollSnapPoint[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedScrollSnapPoint>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedScrollSnapPoint[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedScrollSnapPoint>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedScrollSnapPoint>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedScrollSnapPoint>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class RepeatedScrollSnapPointRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedScrollSnapPoint(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct RepeatedZoomSnapPoint
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedZoomSnapPoint obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedZoomSnapPoint>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatedZoomSnapPointMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedZoomSnapPoint obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IRepeatedZoomSnapPointMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedZoomSnapPoint FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedZoomSnapPoint.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedZoomSnapPoint obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedZoomSnapPoint>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedZoomSnapPoint[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedZoomSnapPoint>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedZoomSnapPoint>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedZoomSnapPoint[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedZoomSnapPoint>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedZoomSnapPoint[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedZoomSnapPoint>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedZoomSnapPoint[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedZoomSnapPoint>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedZoomSnapPoint>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedZoomSnapPoint>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class RepeatedZoomSnapPointRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.RepeatedZoomSnapPoint(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ScrollBar
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollBar obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollBar>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollBarMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollBar obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollBarMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.ScrollBar FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.ScrollBar.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollBar obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollBar>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollBar[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollBar>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollBar>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ScrollBar[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollBar>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollBar[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollBar>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollBar[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollBar>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollBar>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollBar>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ScrollBarRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.ScrollBar(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ScrollControllerAddScrollVelocityRequestedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerAddScrollVelocityRequestedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerAddScrollVelocityRequestedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ScrollControllerAddScrollVelocityRequestedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ScrollControllerPanRequestedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanRequestedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanRequestedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ScrollControllerPanRequestedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ScrollControllerScrollByRequestedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollByRequestedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollByRequestedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ScrollControllerScrollByRequestedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ScrollControllerScrollToRequestedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollToRequestedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollToRequestedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ScrollControllerScrollToRequestedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ScrollEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ScrollEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("FF661BA9-8C06-5785-A23C-30D6B31631E8")]
    public static class ScrollEventHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA9, 0x1B, 0x66, 0xFF, 0x6, 0x8C, 0x85, 0x57, 0xA2, 0x3C, 0x30, 0xD6, 0xB3, 0x16, 0x31, 0xE8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe ScrollEventHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(ScrollEventHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(object sender, global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventArgs e)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __sender = default;
                ObjectReferenceValue __e = default;
                try
                {
                    __sender = MarshalInspectable<object>.CreateMarshaler2(sender);
                    __e = global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollEventArgs.CreateMarshaler2(e);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__sender), MarshalInspectable<object>.GetAbi(__e)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__sender);
                    MarshalInspectable<object>.DisposeMarshaler(__e);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr e)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandler>(thisPtr).Invoke(MarshalInspectable<object>.FromAbi(sender), global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ScrollEventArgs.FromAbi(e))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class ScrollEventHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = ScrollEventHandler.IID,
                Vtable = ScrollEventHandler.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ScrollPresenter
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ScrollPresenterRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ScrollSnapPoint
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPoint obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPoint>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPoint obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPoint FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPoint.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPoint obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPoint>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPoint[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPoint>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPoint>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPoint[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPoint>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPoint[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPoint>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPoint[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPoint>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPoint>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPoint>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ScrollSnapPointRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPoint(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ScrollSnapPointBase
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointBaseMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointBaseMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ScrollSnapPointBaseRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct Selector
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.Selector obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.Selector>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.Selector obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.Selector FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.Selector.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.Selector obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.Selector>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.Selector[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.Selector>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.Selector>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.Selector[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.Selector>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.Selector[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.Selector>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.Selector[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.Selector>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.Selector>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.Selector>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class SelectorRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.Selector(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct SelectorItem
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.SelectorItem obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.SelectorItem>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorItemMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.SelectorItem obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISelectorItemMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.SelectorItem FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.SelectorItem.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.SelectorItem obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.SelectorItem>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.SelectorItem[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.SelectorItem>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.SelectorItem>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.SelectorItem[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.SelectorItem>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.SelectorItem[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.SelectorItem>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.SelectorItem[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.SelectorItem>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.SelectorItem>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.SelectorItem>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class SelectorItemRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.SelectorItem(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct SnapPointBase
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISnapPointBaseMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISnapPointBaseMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class SnapPointBaseRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct SplitViewTemplateSettings
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISplitViewTemplateSettingsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ISplitViewTemplateSettingsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class SplitViewTemplateSettingsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct TabViewListView
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.TabViewListView obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.TabViewListView>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ITabViewListViewMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.TabViewListView obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ITabViewListViewMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.TabViewListView FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.TabViewListView.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.TabViewListView obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.TabViewListView>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.TabViewListView[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.TabViewListView>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.TabViewListView>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.TabViewListView[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.TabViewListView>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.TabViewListView[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.TabViewListView>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.TabViewListView[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.TabViewListView>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.TabViewListView>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.TabViewListView>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class TabViewListViewRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.TabViewListView(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct Thumb
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.Thumb obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.Thumb>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IThumbMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.Thumb obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IThumbMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.Thumb FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.Thumb.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.Thumb obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.Thumb>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.Thumb[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.Thumb>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.Thumb>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.Thumb[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.Thumb>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.Thumb[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.Thumb>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.Thumb[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.Thumb>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.Thumb>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.Thumb>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ThumbRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.Thumb(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct TickBar
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.TickBar obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.TickBar>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ITickBarMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.TickBar obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.ITickBarMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.TickBar FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.TickBar.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.TickBar obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.TickBar>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.TickBar[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.TickBar>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.TickBar>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.TickBar[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.TickBar>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.TickBar[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.TickBar>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.TickBar[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.TickBar>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.TickBar>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.TickBar>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class TickBarRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.TickBar(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ToggleButton
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ToggleButtonRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ToggleSwitchTemplateSettings
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleSwitchTemplateSettingsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToggleSwitchTemplateSettingsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ToggleSwitchTemplateSettingsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ToolTipTemplateSettings
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToolTipTemplateSettingsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IToolTipTemplateSettingsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ToolTipTemplateSettingsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ZoomSnapPoint
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPoint obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPoint>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IZoomSnapPointMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPoint obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IZoomSnapPointMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPoint FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPoint.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPoint obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPoint>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPoint[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPoint>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPoint>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPoint[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPoint>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPoint[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPoint>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPoint[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPoint>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPoint>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPoint>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ZoomSnapPointRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPoint(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ZoomSnapPointBase
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IZoomSnapPointBaseMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Controls.Primitives.IZoomSnapPointBaseMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ZoomSnapPointBaseRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase(inspectable.ObjRef);
    }
}
#pragma warning restore CA1416


namespace Microsoft.UI.Xaml.Controls.Primitives
{
    using global::Windows.Foundation;

    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Controls.Primitives.GeneratorPosition))]
#if NET
    [global::WinRT.WinRTExposedType(typeof(global::WinRT.StructTypeDetails<GeneratorPosition, GeneratorPosition>))]
#endif
    [StructLayout(LayoutKind.Sequential)]
#if EMBED
    internal
#else
    public
#endif
    struct GeneratorPosition
    {
        private int _index;
        private int _offset;

        public int Index { get { return _index; } set { _index = value; } }
        public int Offset { get { return _offset; } set { _offset = value; } }

        public GeneratorPosition(int index, int offset)
        {
            _index = index;
            _offset = offset;
        }

        public override int GetHashCode()
        {
            return _index.GetHashCode() + _offset.GetHashCode();
        }

        public override string ToString()
        {
            return string.Concat("GeneratorPosition (", _index.ToString(global::System.Globalization.CultureInfo.InvariantCulture), ",", _offset.ToString(global::System.Globalization.CultureInfo.InvariantCulture), ")");
        }

        public override bool Equals(object o)
        {
            if (o is GeneratorPosition)
            {
                GeneratorPosition that = (GeneratorPosition)o;
                return _index == that._index &&
                        _offset == that._offset;
            }
            return false;
        }

        public static bool operator ==(GeneratorPosition gp1, GeneratorPosition gp2)
        {
            return gp1._index == gp2._index &&
                    gp1._offset == gp2._offset;
        }

        public static bool operator !=(GeneratorPosition gp1, GeneratorPosition gp2)
        {
            return !(gp1 == gp2);
        }
    }
}

namespace ABI.Microsoft.UI.Xaml.Controls.Primitives
{
    #if EMBED
        internal
    #else
        public
    #endif
        static class GeneratorPosition
        {
            public static string GetGuidSignature() => $"struct(Microsoft.UI.Xaml.Controls.Primitives.GeneratorPosition;i4;i4)";
        }
}
