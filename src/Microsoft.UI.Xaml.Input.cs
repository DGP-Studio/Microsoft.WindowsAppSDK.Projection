//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.UI.Xaml.Input
{
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IAccessKeyDisplayDismissedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class AccessKeyDisplayDismissedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<AccessKeyDisplayDismissedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IAccessKeyDisplayDismissedEventArgs => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Input_AccessKeyDisplayDismissedEventArgs;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_AccessKeyDisplayDismissedEventArgs
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Input_AccessKeyDisplayDismissedEventArgs;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Input_AccessKeyDisplayDismissedEventArgs = ActivationFactory.Get("Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs");
                }
            }
        }

        public AccessKeyDisplayDismissedEventArgs() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Input_AccessKeyDisplayDismissedEventArgs, global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyDisplayDismissedEventArgsMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static AccessKeyDisplayDismissedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<AccessKeyDisplayDismissedEventArgs>.FromAbi(thisPtr);
        }

        internal AccessKeyDisplayDismissedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyDisplayDismissedEventArgsMethods.IID);

        }


        public static bool operator ==(AccessKeyDisplayDismissedEventArgs x, AccessKeyDisplayDismissedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(AccessKeyDisplayDismissedEventArgs x, AccessKeyDisplayDismissedEventArgs y) => !(x == y);
        public bool Equals(AccessKeyDisplayDismissedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is AccessKeyDisplayDismissedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IAccessKeyDisplayRequestedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class AccessKeyDisplayRequestedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<AccessKeyDisplayRequestedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IAccessKeyDisplayRequestedEventArgs => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Input_AccessKeyDisplayRequestedEventArgs;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_AccessKeyDisplayRequestedEventArgs
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Input_AccessKeyDisplayRequestedEventArgs;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Input_AccessKeyDisplayRequestedEventArgs = ActivationFactory.Get("Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs");
                }
            }
        }

        public AccessKeyDisplayRequestedEventArgs() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Input_AccessKeyDisplayRequestedEventArgs, global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyDisplayRequestedEventArgsMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static AccessKeyDisplayRequestedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<AccessKeyDisplayRequestedEventArgs>.FromAbi(thisPtr);
        }

        internal AccessKeyDisplayRequestedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyDisplayRequestedEventArgsMethods.IID);

        }


        public static bool operator ==(AccessKeyDisplayRequestedEventArgs x, AccessKeyDisplayRequestedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(AccessKeyDisplayRequestedEventArgs x, AccessKeyDisplayRequestedEventArgs y) => !(x == y);
        public bool Equals(AccessKeyDisplayRequestedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is AccessKeyDisplayRequestedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public string PressedKeys => global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyDisplayRequestedEventArgsMethods.get_PressedKeys(_objRef_global__Microsoft_UI_Xaml_Input_IAccessKeyDisplayRequestedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IAccessKeyInvokedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class AccessKeyInvokedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<AccessKeyInvokedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IAccessKeyInvokedEventArgs => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Input_AccessKeyInvokedEventArgs;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_AccessKeyInvokedEventArgs
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Input_AccessKeyInvokedEventArgs;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Input_AccessKeyInvokedEventArgs = ActivationFactory.Get("Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs");
                }
            }
        }

        public AccessKeyInvokedEventArgs() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Input_AccessKeyInvokedEventArgs, global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyInvokedEventArgsMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static AccessKeyInvokedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<AccessKeyInvokedEventArgs>.FromAbi(thisPtr);
        }

        internal AccessKeyInvokedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyInvokedEventArgsMethods.IID);

        }


        public static bool operator ==(AccessKeyInvokedEventArgs x, AccessKeyInvokedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(AccessKeyInvokedEventArgs x, AccessKeyInvokedEventArgs y) => !(x == y);
        public bool Equals(AccessKeyInvokedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is AccessKeyInvokedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyInvokedEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Xaml_Input_IAccessKeyInvokedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyInvokedEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Xaml_Input_IAccessKeyInvokedEventArgs, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.AccessKeyManager))]
    [global::ABI.Microsoft.UI.Xaml.Input.AccessKeyManagerRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IAccessKeyManager))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class AccessKeyManager : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<AccessKeyManager>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IAccessKeyManager => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Input.AccessKeyManager").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Input_IAccessKeyManagerStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IAccessKeyManagerStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Input_IAccessKeyManagerStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Input_IAccessKeyManagerStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Input.AccessKeyManager", global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyManagerStaticsMethods.IID);
                }
            }
        }

        public static void ExitDisplayMode() => global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyManagerStaticsMethods.ExitDisplayMode(_objRef_global__Microsoft_UI_Xaml_Input_IAccessKeyManagerStatics);

        public static event global::Windows.Foundation.TypedEventHandler<object, object> IsDisplayModeEnabledChanged
        {
            add => global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyManagerStaticsMethods.Get_IsDisplayModeEnabledChanged2(_objRef_global__Microsoft_UI_Xaml_Input_IAccessKeyManagerStatics, _objRef_global__Microsoft_UI_Xaml_Input_IAccessKeyManagerStatics).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyManagerStaticsMethods.Get_IsDisplayModeEnabledChanged2(_objRef_global__Microsoft_UI_Xaml_Input_IAccessKeyManagerStatics, _objRef_global__Microsoft_UI_Xaml_Input_IAccessKeyManagerStatics).Unsubscribe(value);
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Input_IAccessKeyManagerStatics2;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IAccessKeyManagerStatics2
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Input_IAccessKeyManagerStatics2;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Input_IAccessKeyManagerStatics2 = ActivationFactory.Get("Microsoft.UI.Xaml.Input.AccessKeyManager", global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyManagerStatics2Methods.IID);
                }
            }
        }

        public static void EnterDisplayMode(global::Microsoft.UI.Xaml.XamlRoot XamlRoot) => global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyManagerStatics2Methods.EnterDisplayMode(_objRef_global__Microsoft_UI_Xaml_Input_IAccessKeyManagerStatics2, XamlRoot);

        public static bool AreKeyTipsEnabled
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyManagerStaticsMethods.get_AreKeyTipsEnabled(_objRef_global__Microsoft_UI_Xaml_Input_IAccessKeyManagerStatics);
            set => global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyManagerStaticsMethods.set_AreKeyTipsEnabled(_objRef_global__Microsoft_UI_Xaml_Input_IAccessKeyManagerStatics, value);
        }

        public static bool IsDisplayModeEnabled => global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyManagerStaticsMethods.get_IsDisplayModeEnabled(_objRef_global__Microsoft_UI_Xaml_Input_IAccessKeyManagerStatics);

        public static AccessKeyManager FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<AccessKeyManager>.FromAbi(thisPtr);
        }

        internal AccessKeyManager(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyManagerMethods.IID);

        }


        public static bool operator ==(AccessKeyManager x, AccessKeyManager y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(AccessKeyManager x, AccessKeyManager y) => !(x == y);
        public bool Equals(AccessKeyManager other) => this == other;
        public override bool Equals(object obj) => obj is AccessKeyManager that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.CanExecuteRequestedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Input.CanExecuteRequestedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICanExecuteRequestedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class CanExecuteRequestedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CanExecuteRequestedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_ICanExecuteRequestedEventArgs => _inner;


        public static CanExecuteRequestedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CanExecuteRequestedEventArgs>.FromAbi(thisPtr);
        }

        internal CanExecuteRequestedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.ICanExecuteRequestedEventArgsMethods.IID);

        }


        public static bool operator ==(CanExecuteRequestedEventArgs x, CanExecuteRequestedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CanExecuteRequestedEventArgs x, CanExecuteRequestedEventArgs y) => !(x == y);
        public bool Equals(CanExecuteRequestedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CanExecuteRequestedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool CanExecute
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.ICanExecuteRequestedEventArgsMethods.get_CanExecute(_objRef_global__Microsoft_UI_Xaml_Input_ICanExecuteRequestedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Input.ICanExecuteRequestedEventArgsMethods.set_CanExecute(_objRef_global__Microsoft_UI_Xaml_Input_ICanExecuteRequestedEventArgs, value);
        }

        public object Parameter => global::ABI.Microsoft.UI.Xaml.Input.ICanExecuteRequestedEventArgsMethods.get_Parameter(_objRef_global__Microsoft_UI_Xaml_Input_ICanExecuteRequestedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICharacterReceivedRoutedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class CharacterReceivedRoutedEventArgs : global::Microsoft.UI.Xaml.RoutedEventArgs, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CharacterReceivedRoutedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_ICharacterReceivedRoutedEventArgs => _inner;


        public static new CharacterReceivedRoutedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CharacterReceivedRoutedEventArgs>.FromAbi(thisPtr);
        }

        internal CharacterReceivedRoutedEventArgs(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.ICharacterReceivedRoutedEventArgsMethods.IID);

        }


        public static bool operator ==(CharacterReceivedRoutedEventArgs x, CharacterReceivedRoutedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CharacterReceivedRoutedEventArgs x, CharacterReceivedRoutedEventArgs y) => !(x == y);
        public bool Equals(CharacterReceivedRoutedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is CharacterReceivedRoutedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public char Character => global::ABI.Microsoft.UI.Xaml.Input.ICharacterReceivedRoutedEventArgsMethods.get_Character(_objRef_global__Microsoft_UI_Xaml_Input_ICharacterReceivedRoutedEventArgs);

        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.ICharacterReceivedRoutedEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Xaml_Input_ICharacterReceivedRoutedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Input.ICharacterReceivedRoutedEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Xaml_Input_ICharacterReceivedRoutedEventArgs, value);
        }

        public global::Windows.UI.Core.CorePhysicalKeyStatus KeyStatus => global::ABI.Microsoft.UI.Xaml.Input.ICharacterReceivedRoutedEventArgsMethods.get_KeyStatus(_objRef_global__Microsoft_UI_Xaml_Input_ICharacterReceivedRoutedEventArgs);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.ContextRequestedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Input.ContextRequestedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IContextRequestedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class ContextRequestedEventArgs : global::Microsoft.UI.Xaml.RoutedEventArgs, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ContextRequestedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IContextRequestedEventArgs => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Input_ContextRequestedEventArgs;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_ContextRequestedEventArgs
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Input_ContextRequestedEventArgs;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Input_ContextRequestedEventArgs = ActivationFactory.Get("Microsoft.UI.Xaml.Input.ContextRequestedEventArgs");
                }
            }
        }

        public ContextRequestedEventArgs() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Input_ContextRequestedEventArgs, global::ABI.Microsoft.UI.Xaml.Input.IContextRequestedEventArgsMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new ContextRequestedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ContextRequestedEventArgs>.FromAbi(thisPtr);
        }

        internal ContextRequestedEventArgs(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IContextRequestedEventArgsMethods.IID);

        }


        public static bool operator ==(ContextRequestedEventArgs x, ContextRequestedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ContextRequestedEventArgs x, ContextRequestedEventArgs y) => !(x == y);
        public bool Equals(ContextRequestedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is ContextRequestedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public bool TryGetPosition(global::Microsoft.UI.Xaml.UIElement relativeTo, out global::Windows.Foundation.Point point) => global::ABI.Microsoft.UI.Xaml.Input.IContextRequestedEventArgsMethods.TryGetPosition(_objRef_global__Microsoft_UI_Xaml_Input_IContextRequestedEventArgs, relativeTo, out point);

        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IContextRequestedEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Xaml_Input_IContextRequestedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Input.IContextRequestedEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Xaml_Input_IContextRequestedEventArgs, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.DoubleTappedEventHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.Input.DoubleTappedEventHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public delegate void DoubleTappedEventHandler(object sender, DoubleTappedRoutedEventArgs e);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDoubleTappedRoutedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class DoubleTappedRoutedEventArgs : global::Microsoft.UI.Xaml.RoutedEventArgs, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DoubleTappedRoutedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IDoubleTappedRoutedEventArgs => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Input_DoubleTappedRoutedEventArgs;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_DoubleTappedRoutedEventArgs
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Input_DoubleTappedRoutedEventArgs;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Input_DoubleTappedRoutedEventArgs = ActivationFactory.Get("Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs");
                }
            }
        }

        public DoubleTappedRoutedEventArgs() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Input_DoubleTappedRoutedEventArgs, global::ABI.Microsoft.UI.Xaml.Input.IDoubleTappedRoutedEventArgsMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new DoubleTappedRoutedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DoubleTappedRoutedEventArgs>.FromAbi(thisPtr);
        }

        internal DoubleTappedRoutedEventArgs(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IDoubleTappedRoutedEventArgsMethods.IID);

        }


        public static bool operator ==(DoubleTappedRoutedEventArgs x, DoubleTappedRoutedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DoubleTappedRoutedEventArgs x, DoubleTappedRoutedEventArgs y) => !(x == y);
        public bool Equals(DoubleTappedRoutedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is DoubleTappedRoutedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.Point GetPosition(global::Microsoft.UI.Xaml.UIElement relativeTo) => global::ABI.Microsoft.UI.Xaml.Input.IDoubleTappedRoutedEventArgsMethods.GetPosition(_objRef_global__Microsoft_UI_Xaml_Input_IDoubleTappedRoutedEventArgs, relativeTo);

        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IDoubleTappedRoutedEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Xaml_Input_IDoubleTappedRoutedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Input.IDoubleTappedRoutedEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Xaml_Input_IDoubleTappedRoutedEventArgs, value);
        }

        public global::Microsoft.UI.Input.PointerDeviceType PointerDeviceType => global::ABI.Microsoft.UI.Xaml.Input.IDoubleTappedRoutedEventArgsMethods.get_PointerDeviceType(_objRef_global__Microsoft_UI_Xaml_Input_IDoubleTappedRoutedEventArgs);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.ExecuteRequestedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Input.ExecuteRequestedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IExecuteRequestedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class ExecuteRequestedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ExecuteRequestedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IExecuteRequestedEventArgs => _inner;


        public static ExecuteRequestedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ExecuteRequestedEventArgs>.FromAbi(thisPtr);
        }

        internal ExecuteRequestedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IExecuteRequestedEventArgsMethods.IID);

        }


        public static bool operator ==(ExecuteRequestedEventArgs x, ExecuteRequestedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ExecuteRequestedEventArgs x, ExecuteRequestedEventArgs y) => !(x == y);
        public bool Equals(ExecuteRequestedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is ExecuteRequestedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public object Parameter => global::ABI.Microsoft.UI.Xaml.Input.IExecuteRequestedEventArgsMethods.get_Parameter(_objRef_global__Microsoft_UI_Xaml_Input_IExecuteRequestedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.FindNextElementOptions))]
    [global::ABI.Microsoft.UI.Xaml.Input.FindNextElementOptionsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IFindNextElementOptions))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class FindNextElementOptions : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<FindNextElementOptions>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IFindNextElementOptions => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Input_FindNextElementOptions;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_FindNextElementOptions
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Input_FindNextElementOptions;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Input_FindNextElementOptions = ActivationFactory.Get("Microsoft.UI.Xaml.Input.FindNextElementOptions");
                }
            }
        }

        public FindNextElementOptions() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Input_FindNextElementOptions, global::ABI.Microsoft.UI.Xaml.Input.IFindNextElementOptionsMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static FindNextElementOptions FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<FindNextElementOptions>.FromAbi(thisPtr);
        }

        internal FindNextElementOptions(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IFindNextElementOptionsMethods.IID);

        }


        public static bool operator ==(FindNextElementOptions x, FindNextElementOptions y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(FindNextElementOptions x, FindNextElementOptions y) => !(x == y);
        public bool Equals(FindNextElementOptions other) => this == other;
        public override bool Equals(object obj) => obj is FindNextElementOptions that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.Rect ExclusionRect
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IFindNextElementOptionsMethods.get_ExclusionRect(_objRef_global__Microsoft_UI_Xaml_Input_IFindNextElementOptions);
            set => global::ABI.Microsoft.UI.Xaml.Input.IFindNextElementOptionsMethods.set_ExclusionRect(_objRef_global__Microsoft_UI_Xaml_Input_IFindNextElementOptions, value);
        }

        public global::Windows.Foundation.Rect HintRect
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IFindNextElementOptionsMethods.get_HintRect(_objRef_global__Microsoft_UI_Xaml_Input_IFindNextElementOptions);
            set => global::ABI.Microsoft.UI.Xaml.Input.IFindNextElementOptionsMethods.set_HintRect(_objRef_global__Microsoft_UI_Xaml_Input_IFindNextElementOptions, value);
        }

        public global::Microsoft.UI.Xaml.DependencyObject SearchRoot
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IFindNextElementOptionsMethods.get_SearchRoot(_objRef_global__Microsoft_UI_Xaml_Input_IFindNextElementOptions);
            set => global::ABI.Microsoft.UI.Xaml.Input.IFindNextElementOptionsMethods.set_SearchRoot(_objRef_global__Microsoft_UI_Xaml_Input_IFindNextElementOptions, value);
        }

        public XYFocusNavigationStrategyOverride XYFocusNavigationStrategyOverride
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IFindNextElementOptionsMethods.get_XYFocusNavigationStrategyOverride(_objRef_global__Microsoft_UI_Xaml_Input_IFindNextElementOptions);
            set => global::ABI.Microsoft.UI.Xaml.Input.IFindNextElementOptionsMethods.set_XYFocusNavigationStrategyOverride(_objRef_global__Microsoft_UI_Xaml_Input_IFindNextElementOptions, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<FocusInputDeviceKind>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum FocusInputDeviceKind : int
    {
        None = unchecked((int)0),
        Mouse = unchecked((int)0x1),
        Touch = unchecked((int)0x2),
        Pen = unchecked((int)0x3),
        Keyboard = unchecked((int)0x4),
        GameController = unchecked((int)0x5),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.FocusManager))]
    [global::ABI.Microsoft.UI.Xaml.Input.FocusManagerRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IFocusManager))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class FocusManager : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<FocusManager>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IFocusManager => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Input.FocusManager").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Input.FocusManager", global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerStaticsMethods.IID);
                }
            }
        }

        public static global::Windows.Foundation.IAsyncOperation<FocusMovementResult> TryFocusAsync(global::Microsoft.UI.Xaml.DependencyObject element, global::Microsoft.UI.Xaml.FocusState value) => global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerStaticsMethods.TryFocusAsync(_objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics, element, value);

        public static global::Windows.Foundation.IAsyncOperation<FocusMovementResult> TryMoveFocusAsync(FocusNavigationDirection focusNavigationDirection) => global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerStaticsMethods.TryMoveFocusAsync(_objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics, focusNavigationDirection);

        public static global::Windows.Foundation.IAsyncOperation<FocusMovementResult> TryMoveFocusAsync(FocusNavigationDirection focusNavigationDirection, FindNextElementOptions focusNavigationOptions) => global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerStaticsMethods.TryMoveFocusAsync(_objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics, focusNavigationDirection, focusNavigationOptions);

        public static bool TryMoveFocus(FocusNavigationDirection focusNavigationDirection, FindNextElementOptions focusNavigationOptions) => global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerStaticsMethods.TryMoveFocus(_objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics, focusNavigationDirection, focusNavigationOptions);

        public static global::Microsoft.UI.Xaml.DependencyObject FindNextElement(FocusNavigationDirection focusNavigationDirection) => global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerStaticsMethods.FindNextElement(_objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics, focusNavigationDirection);

        public static global::Microsoft.UI.Xaml.DependencyObject FindFirstFocusableElement(global::Microsoft.UI.Xaml.DependencyObject searchScope) => global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerStaticsMethods.FindFirstFocusableElement(_objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics, searchScope);

        public static global::Microsoft.UI.Xaml.DependencyObject FindLastFocusableElement(global::Microsoft.UI.Xaml.DependencyObject searchScope) => global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerStaticsMethods.FindLastFocusableElement(_objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics, searchScope);

        public static global::Microsoft.UI.Xaml.DependencyObject FindNextElement(FocusNavigationDirection focusNavigationDirection, FindNextElementOptions focusNavigationOptions) => global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerStaticsMethods.FindNextElement(_objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics, focusNavigationDirection, focusNavigationOptions);

        public static global::Microsoft.UI.Xaml.UIElement FindNextFocusableElement(FocusNavigationDirection focusNavigationDirection) => global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerStaticsMethods.FindNextFocusableElement(_objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics, focusNavigationDirection);

        public static global::Microsoft.UI.Xaml.UIElement FindNextFocusableElement(FocusNavigationDirection focusNavigationDirection, global::Windows.Foundation.Rect hintRect) => global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerStaticsMethods.FindNextFocusableElement(_objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics, focusNavigationDirection, hintRect);

        public static bool TryMoveFocus(FocusNavigationDirection focusNavigationDirection) => global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerStaticsMethods.TryMoveFocus(_objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics, focusNavigationDirection);

        public static object GetFocusedElement() => global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerStaticsMethods.GetFocusedElement(_objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics);

        public static object GetFocusedElement(global::Microsoft.UI.Xaml.XamlRoot xamlRoot) => global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerStaticsMethods.GetFocusedElement(_objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics, xamlRoot);

        public static event global::System.EventHandler<GettingFocusEventArgs> GettingFocus
        {
            add => global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerStaticsMethods.Get_GettingFocus2(_objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics, _objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerStaticsMethods.Get_GettingFocus2(_objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics, _objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics).Unsubscribe(value);
        }

        public static event global::System.EventHandler<FocusManagerGotFocusEventArgs> GotFocus
        {
            add => global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerStaticsMethods.Get_GotFocus2(_objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics, _objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerStaticsMethods.Get_GotFocus2(_objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics, _objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics).Unsubscribe(value);
        }

        public static event global::System.EventHandler<LosingFocusEventArgs> LosingFocus
        {
            add => global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerStaticsMethods.Get_LosingFocus2(_objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics, _objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerStaticsMethods.Get_LosingFocus2(_objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics, _objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics).Unsubscribe(value);
        }

        public static event global::System.EventHandler<FocusManagerLostFocusEventArgs> LostFocus
        {
            add => global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerStaticsMethods.Get_LostFocus2(_objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics, _objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerStaticsMethods.Get_LostFocus2(_objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics, _objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerStatics).Unsubscribe(value);
        }

        public static FocusManager FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<FocusManager>.FromAbi(thisPtr);
        }

        internal FocusManager(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerMethods.IID);

        }


        public static bool operator ==(FocusManager x, FocusManager y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(FocusManager x, FocusManager y) => !(x == y);
        public bool Equals(FocusManager other) => this == other;
        public override bool Equals(object obj) => obj is FocusManager that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.FocusManagerGotFocusEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Input.FocusManagerGotFocusEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IFocusManagerGotFocusEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class FocusManagerGotFocusEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<FocusManagerGotFocusEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerGotFocusEventArgs => _inner;


        public static FocusManagerGotFocusEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<FocusManagerGotFocusEventArgs>.FromAbi(thisPtr);
        }

        internal FocusManagerGotFocusEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerGotFocusEventArgsMethods.IID);

        }


        public static bool operator ==(FocusManagerGotFocusEventArgs x, FocusManagerGotFocusEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(FocusManagerGotFocusEventArgs x, FocusManagerGotFocusEventArgs y) => !(x == y);
        public bool Equals(FocusManagerGotFocusEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is FocusManagerGotFocusEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public Guid CorrelationId => global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerGotFocusEventArgsMethods.get_CorrelationId(_objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerGotFocusEventArgs);

        public global::Microsoft.UI.Xaml.DependencyObject NewFocusedElement => global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerGotFocusEventArgsMethods.get_NewFocusedElement(_objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerGotFocusEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.FocusManagerLostFocusEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Input.FocusManagerLostFocusEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IFocusManagerLostFocusEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class FocusManagerLostFocusEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<FocusManagerLostFocusEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerLostFocusEventArgs => _inner;


        public static FocusManagerLostFocusEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<FocusManagerLostFocusEventArgs>.FromAbi(thisPtr);
        }

        internal FocusManagerLostFocusEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerLostFocusEventArgsMethods.IID);

        }


        public static bool operator ==(FocusManagerLostFocusEventArgs x, FocusManagerLostFocusEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(FocusManagerLostFocusEventArgs x, FocusManagerLostFocusEventArgs y) => !(x == y);
        public bool Equals(FocusManagerLostFocusEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is FocusManagerLostFocusEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public Guid CorrelationId => global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerLostFocusEventArgsMethods.get_CorrelationId(_objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerLostFocusEventArgs);

        public global::Microsoft.UI.Xaml.DependencyObject OldFocusedElement => global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerLostFocusEventArgsMethods.get_OldFocusedElement(_objRef_global__Microsoft_UI_Xaml_Input_IFocusManagerLostFocusEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.FocusMovementResult))]
    [global::ABI.Microsoft.UI.Xaml.Input.FocusMovementResultRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IFocusMovementResult))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class FocusMovementResult : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<FocusMovementResult>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IFocusMovementResult => _inner;


        public static FocusMovementResult FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<FocusMovementResult>.FromAbi(thisPtr);
        }

        internal FocusMovementResult(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IFocusMovementResultMethods.IID);

        }


        public static bool operator ==(FocusMovementResult x, FocusMovementResult y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(FocusMovementResult x, FocusMovementResult y) => !(x == y);
        public bool Equals(FocusMovementResult other) => this == other;
        public override bool Equals(object obj) => obj is FocusMovementResult that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool Succeeded => global::ABI.Microsoft.UI.Xaml.Input.IFocusMovementResultMethods.get_Succeeded(_objRef_global__Microsoft_UI_Xaml_Input_IFocusMovementResult);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<FocusNavigationDirection>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum FocusNavigationDirection : int
    {
        Next = unchecked((int)0),
        Previous = unchecked((int)0x1),
        Up = unchecked((int)0x2),
        Down = unchecked((int)0x3),
        Left = unchecked((int)0x4),
        Right = unchecked((int)0x5),
        None = unchecked((int)0x6),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.GettingFocusEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Input.GettingFocusEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IGettingFocusEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class GettingFocusEventArgs : global::Microsoft.UI.Xaml.RoutedEventArgs, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<GettingFocusEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IGettingFocusEventArgs => _inner;


        public static new GettingFocusEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<GettingFocusEventArgs>.FromAbi(thisPtr);
        }

        internal GettingFocusEventArgs(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IGettingFocusEventArgsMethods.IID);

        }


        public static bool operator ==(GettingFocusEventArgs x, GettingFocusEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(GettingFocusEventArgs x, GettingFocusEventArgs y) => !(x == y);
        public bool Equals(GettingFocusEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is GettingFocusEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public bool TryCancel() => global::ABI.Microsoft.UI.Xaml.Input.IGettingFocusEventArgsMethods.TryCancel(_objRef_global__Microsoft_UI_Xaml_Input_IGettingFocusEventArgs);

        public bool TrySetNewFocusedElement(global::Microsoft.UI.Xaml.DependencyObject element) => global::ABI.Microsoft.UI.Xaml.Input.IGettingFocusEventArgsMethods.TrySetNewFocusedElement(_objRef_global__Microsoft_UI_Xaml_Input_IGettingFocusEventArgs, element);

        public bool Cancel
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IGettingFocusEventArgsMethods.get_Cancel(_objRef_global__Microsoft_UI_Xaml_Input_IGettingFocusEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Input.IGettingFocusEventArgsMethods.set_Cancel(_objRef_global__Microsoft_UI_Xaml_Input_IGettingFocusEventArgs, value);
        }

        public Guid CorrelationId => global::ABI.Microsoft.UI.Xaml.Input.IGettingFocusEventArgsMethods.get_CorrelationId(_objRef_global__Microsoft_UI_Xaml_Input_IGettingFocusEventArgs);

        public FocusNavigationDirection Direction => global::ABI.Microsoft.UI.Xaml.Input.IGettingFocusEventArgsMethods.get_Direction(_objRef_global__Microsoft_UI_Xaml_Input_IGettingFocusEventArgs);

        public global::Microsoft.UI.Xaml.FocusState FocusState => global::ABI.Microsoft.UI.Xaml.Input.IGettingFocusEventArgsMethods.get_FocusState(_objRef_global__Microsoft_UI_Xaml_Input_IGettingFocusEventArgs);

        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IGettingFocusEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Xaml_Input_IGettingFocusEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Input.IGettingFocusEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Xaml_Input_IGettingFocusEventArgs, value);
        }

        public FocusInputDeviceKind InputDevice => global::ABI.Microsoft.UI.Xaml.Input.IGettingFocusEventArgsMethods.get_InputDevice(_objRef_global__Microsoft_UI_Xaml_Input_IGettingFocusEventArgs);

        public global::Microsoft.UI.Xaml.DependencyObject NewFocusedElement
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IGettingFocusEventArgsMethods.get_NewFocusedElement(_objRef_global__Microsoft_UI_Xaml_Input_IGettingFocusEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Input.IGettingFocusEventArgsMethods.set_NewFocusedElement(_objRef_global__Microsoft_UI_Xaml_Input_IGettingFocusEventArgs, value);
        }

        public global::Microsoft.UI.Xaml.DependencyObject OldFocusedElement => global::ABI.Microsoft.UI.Xaml.Input.IGettingFocusEventArgsMethods.get_OldFocusedElement(_objRef_global__Microsoft_UI_Xaml_Input_IGettingFocusEventArgs);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.HoldingEventHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.Input.HoldingEventHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public delegate void HoldingEventHandler(object sender, HoldingRoutedEventArgs e);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Input.HoldingRoutedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IHoldingRoutedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class HoldingRoutedEventArgs : global::Microsoft.UI.Xaml.RoutedEventArgs, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<HoldingRoutedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IHoldingRoutedEventArgs => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Input_HoldingRoutedEventArgs;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_HoldingRoutedEventArgs
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Input_HoldingRoutedEventArgs;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Input_HoldingRoutedEventArgs = ActivationFactory.Get("Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs");
                }
            }
        }

        public HoldingRoutedEventArgs() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Input_HoldingRoutedEventArgs, global::ABI.Microsoft.UI.Xaml.Input.IHoldingRoutedEventArgsMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new HoldingRoutedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<HoldingRoutedEventArgs>.FromAbi(thisPtr);
        }

        internal HoldingRoutedEventArgs(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IHoldingRoutedEventArgsMethods.IID);

        }


        public static bool operator ==(HoldingRoutedEventArgs x, HoldingRoutedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(HoldingRoutedEventArgs x, HoldingRoutedEventArgs y) => !(x == y);
        public bool Equals(HoldingRoutedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is HoldingRoutedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.Point GetPosition(global::Microsoft.UI.Xaml.UIElement relativeTo) => global::ABI.Microsoft.UI.Xaml.Input.IHoldingRoutedEventArgsMethods.GetPosition(_objRef_global__Microsoft_UI_Xaml_Input_IHoldingRoutedEventArgs, relativeTo);

        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IHoldingRoutedEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Xaml_Input_IHoldingRoutedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Input.IHoldingRoutedEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Xaml_Input_IHoldingRoutedEventArgs, value);
        }

        public global::Microsoft.UI.Input.HoldingState HoldingState => global::ABI.Microsoft.UI.Xaml.Input.IHoldingRoutedEventArgsMethods.get_HoldingState(_objRef_global__Microsoft_UI_Xaml_Input_IHoldingRoutedEventArgs);

        public global::Microsoft.UI.Input.PointerDeviceType PointerDeviceType => global::ABI.Microsoft.UI.Xaml.Input.IHoldingRoutedEventArgsMethods.get_PointerDeviceType(_objRef_global__Microsoft_UI_Xaml_Input_IHoldingRoutedEventArgs);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("125A83D8-7F86-5EA9-9063-B9407E644587")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyDisplayDismissedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IAccessKeyDisplayDismissedEventArgs
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("C4ED84D8-2B27-59B1-9CF0-7F9164DE58CB")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyDisplayRequestedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IAccessKeyDisplayRequestedEventArgs
    {
        string PressedKeys { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("D00C11A4-F9FB-5707-9692-98B80BB8546D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyInvokedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IAccessKeyInvokedEventArgs
    {
        bool Handled { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("8F2A4402-A635-53DC-BC17-DA911EABAADE")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyManager))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IAccessKeyManager
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("3375AEF7-742F-5E84-B76F-C187E08253BF")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyManagerStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IAccessKeyManagerStatics
    {
        void ExitDisplayMode();
        bool AreKeyTipsEnabled { get; set; }
        bool IsDisplayModeEnabled { get; }
        event global::Windows.Foundation.TypedEventHandler<object, object> IsDisplayModeEnabledChanged;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("512C9F63-24AD-5DF2-B8ED-472406DB31C0")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyManagerStatics2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 327680u)]
    internal interface IAccessKeyManagerStatics2
    {
        [global::Windows.Foundation.Metadata.Overload(@"EnterDisplayModeForXamlRoot")]
        void EnterDisplayMode(global::Microsoft.UI.Xaml.XamlRoot XamlRoot);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("E4BF6D7D-F6EB-53CA-A2D4-C741EC871E38")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.ICanExecuteRequestedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ICanExecuteRequestedEventArgs
    {
        bool CanExecute { get; set; }
        object Parameter { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("E26CA5BB-34C3-5C1E-9A16-00B80B07A899")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.ICharacterReceivedRoutedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ICharacterReceivedRoutedEventArgs
    {
        char Character { get; }
        bool Handled { get; set; }
        global::Windows.UI.Core.CorePhysicalKeyStatus KeyStatus { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("BCEDCB98-77B5-53C0-802E-FD52F3806E51")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IContextRequestedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IContextRequestedEventArgs
    {
        bool TryGetPosition(global::Microsoft.UI.Xaml.UIElement relativeTo, out global::Windows.Foundation.Point point);
        bool Handled { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("32B9549D-11D8-53A5-A953-02409537A11F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IDoubleTappedRoutedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDoubleTappedRoutedEventArgs
    {
        global::Windows.Foundation.Point GetPosition(global::Microsoft.UI.Xaml.UIElement relativeTo);
        bool Handled { get; set; }
        global::Microsoft.UI.Input.PointerDeviceType PointerDeviceType { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("E1A9FD0C-34D0-5AE2-8F5D-377E7A8A2708")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IExecuteRequestedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IExecuteRequestedEventArgs
    {
        object Parameter { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("7F88E76B-7417-5447-AED4-2FABD291BDC6")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IFindNextElementOptions))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IFindNextElementOptions
    {
        global::Windows.Foundation.Rect ExclusionRect { get; set; }
        global::Windows.Foundation.Rect HintRect { get; set; }
        global::Microsoft.UI.Xaml.DependencyObject SearchRoot { get; set; }
        XYFocusNavigationStrategyOverride XYFocusNavigationStrategyOverride { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("9FD07BC5-D2D4-53FE-A31A-846DE8B7A257")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IFocusManager))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IFocusManager
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("50ACA341-4519-59CF-83B1-C9C45CFDB816")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerGotFocusEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IFocusManagerGotFocusEventArgs
    {
        Guid CorrelationId { get; }
        global::Microsoft.UI.Xaml.DependencyObject NewFocusedElement { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("FDAF2C3F-A22E-5902-ABCE-B60758FBED1E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerLostFocusEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IFocusManagerLostFocusEventArgs
    {
        Guid CorrelationId { get; }
        global::Microsoft.UI.Xaml.DependencyObject OldFocusedElement { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("E73DCE04-E23A-5FB3-96AB-7DF04C51DFF2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IFocusManagerStatics
    {
        global::Windows.Foundation.IAsyncOperation<FocusMovementResult> TryFocusAsync(global::Microsoft.UI.Xaml.DependencyObject element, global::Microsoft.UI.Xaml.FocusState value);
        [global::Windows.Foundation.Metadata.Overload(@"TryMoveFocusAsync")]
        global::Windows.Foundation.IAsyncOperation<FocusMovementResult> TryMoveFocusAsync(FocusNavigationDirection focusNavigationDirection);
        [global::Windows.Foundation.Metadata.Overload(@"TryMoveFocusWithOptionsAsync")]
        global::Windows.Foundation.IAsyncOperation<FocusMovementResult> TryMoveFocusAsync(FocusNavigationDirection focusNavigationDirection, FindNextElementOptions focusNavigationOptions);
        [global::Windows.Foundation.Metadata.Overload(@"TryMoveFocusWithOptions")]
        bool TryMoveFocus(FocusNavigationDirection focusNavigationDirection, FindNextElementOptions focusNavigationOptions);
        [global::Windows.Foundation.Metadata.Overload(@"FindNextElement")]
        global::Microsoft.UI.Xaml.DependencyObject FindNextElement(FocusNavigationDirection focusNavigationDirection);
        global::Microsoft.UI.Xaml.DependencyObject FindFirstFocusableElement(global::Microsoft.UI.Xaml.DependencyObject searchScope);
        global::Microsoft.UI.Xaml.DependencyObject FindLastFocusableElement(global::Microsoft.UI.Xaml.DependencyObject searchScope);
        [global::Windows.Foundation.Metadata.Overload(@"FindNextElementWithOptions")]
        global::Microsoft.UI.Xaml.DependencyObject FindNextElement(FocusNavigationDirection focusNavigationDirection, FindNextElementOptions focusNavigationOptions);
        [global::Windows.Foundation.Metadata.Overload(@"FindNextFocusableElement")]
        global::Microsoft.UI.Xaml.UIElement FindNextFocusableElement(FocusNavigationDirection focusNavigationDirection);
        [global::Windows.Foundation.Metadata.Overload(@"FindNextFocusableElementWithHint")]
        global::Microsoft.UI.Xaml.UIElement FindNextFocusableElement(FocusNavigationDirection focusNavigationDirection, global::Windows.Foundation.Rect hintRect);
        [global::Windows.Foundation.Metadata.Overload(@"TryMoveFocus")]
        bool TryMoveFocus(FocusNavigationDirection focusNavigationDirection);
        [global::Windows.Foundation.Metadata.Overload(@"GetFocusedElement")]
        object GetFocusedElement();
        [global::Windows.Foundation.Metadata.Overload(@"GetFocusedElementWithRoot")]
        object GetFocusedElement(global::Microsoft.UI.Xaml.XamlRoot xamlRoot);
        event global::System.EventHandler<GettingFocusEventArgs> GettingFocus;
        event global::System.EventHandler<FocusManagerGotFocusEventArgs> GotFocus;
        event global::System.EventHandler<LosingFocusEventArgs> LosingFocus;
        event global::System.EventHandler<FocusManagerLostFocusEventArgs> LostFocus;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("A46259FD-3EDD-554B-A188-0A47B71E4E1A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IFocusMovementResult))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IFocusMovementResult
    {
        bool Succeeded { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("37FD3AF0-BD3C-5BF5-A9CD-71A1E87AF950")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IGettingFocusEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IGettingFocusEventArgs
    {
        bool TryCancel();
        bool TrySetNewFocusedElement(global::Microsoft.UI.Xaml.DependencyObject element);
        bool Cancel { get; set; }
        Guid CorrelationId { get; }
        FocusNavigationDirection Direction { get; }
        global::Microsoft.UI.Xaml.FocusState FocusState { get; }
        bool Handled { get; set; }
        FocusInputDeviceKind InputDevice { get; }
        global::Microsoft.UI.Xaml.DependencyObject NewFocusedElement { get; set; }
        global::Microsoft.UI.Xaml.DependencyObject OldFocusedElement { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("8272A4B2-2221-551E-B0BB-16E29138AB20")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IHoldingRoutedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IHoldingRoutedEventArgs
    {
        global::Windows.Foundation.Point GetPosition(global::Microsoft.UI.Xaml.UIElement relativeTo);
        bool Handled { get; set; }
        global::Microsoft.UI.Input.HoldingState HoldingState { get; }
        global::Microsoft.UI.Input.PointerDeviceType PointerDeviceType { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("D60029B7-F0CD-5AEA-ABE5-7410D09118C6")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IInertiaExpansionBehavior))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IInertiaExpansionBehavior
    {
        double DesiredDeceleration { get; set; }
        double DesiredExpansion { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("27B4BD03-9149-5691-BCE5-FA33B32C4A81")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IInertiaRotationBehavior))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IInertiaRotationBehavior
    {
        double DesiredDeceleration { get; set; }
        double DesiredRotation { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("D4F91CF5-3317-5914-B25A-EA6EE55B96D0")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IInertiaTranslationBehavior))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IInertiaTranslationBehavior
    {
        double DesiredDeceleration { get; set; }
        double DesiredDisplacement { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("76EA58B1-E910-5176-9147-695CC95E7DA2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IInputScope))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IInputScope
    {
        global::System.Collections.Generic.IList<InputScopeName> Names { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("EE99A66D-28D0-53CB-82EE-1B6EE58BCC35")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IInputScopeName))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IInputScopeName
    {
        InputScopeNameValue NameValue { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("FEEC2EFD-BC09-5CD6-9B47-6D35D1D87C61")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IInputScopeNameFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IInputScopeNameFactory
    {
        InputScopeName CreateInstance(InputScopeNameValue nameValue);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("EE357007-A2D6-5C75-9431-05FD66EC7915")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IKeyRoutedEventArgs
    {
        string DeviceId { get; }
        bool Handled { get; set; }
        global::Windows.System.VirtualKey Key { get; }
        global::Windows.UI.Core.CorePhysicalKeyStatus KeyStatus { get; }
        global::Windows.System.VirtualKey OriginalKey { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("6F8BF1E2-4E91-5CF9-A6BE-4770CAF3D770")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IKeyboardAccelerator))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IKeyboardAccelerator
    {
        bool IsEnabled { get; set; }
        global::Windows.System.VirtualKey Key { get; set; }
        global::Windows.System.VirtualKeyModifiers Modifiers { get; set; }
        global::Microsoft.UI.Xaml.DependencyObject ScopeOwner { get; set; }
        event global::Windows.Foundation.TypedEventHandler<KeyboardAccelerator, KeyboardAcceleratorInvokedEventArgs> Invoked;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("CA1D410A-AF2A-51B9-A1DE-6C0AF9F3B598")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IKeyboardAcceleratorFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IKeyboardAcceleratorFactory
    {
        KeyboardAccelerator CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("62C9FDB0-B574-527D-97EB-5C7F674441E0")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IKeyboardAcceleratorInvokedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IKeyboardAcceleratorInvokedEventArgs
    {
        global::Microsoft.UI.Xaml.DependencyObject Element { get; }
        bool Handled { get; set; }
        KeyboardAccelerator KeyboardAccelerator { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("73E674CA-73F4-5E77-B8D6-FF7852A63B0B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IKeyboardAcceleratorStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IKeyboardAcceleratorStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty IsEnabledProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty KeyProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ModifiersProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ScopeOwnerProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("FA0E5FFA-2B1B-52F8-BB66-E35F51E73CF3")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.ILosingFocusEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ILosingFocusEventArgs
    {
        bool TryCancel();
        bool TrySetNewFocusedElement(global::Microsoft.UI.Xaml.DependencyObject element);
        bool Cancel { get; set; }
        Guid CorrelationId { get; }
        FocusNavigationDirection Direction { get; }
        global::Microsoft.UI.Xaml.FocusState FocusState { get; }
        bool Handled { get; set; }
        FocusInputDeviceKind InputDevice { get; }
        global::Microsoft.UI.Xaml.DependencyObject NewFocusedElement { get; set; }
        global::Microsoft.UI.Xaml.DependencyObject OldFocusedElement { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("E3BE9E4E-C5FB-5859-A81D-CE12FC3A2F4D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IManipulationCompletedRoutedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IManipulationCompletedRoutedEventArgs
    {
        global::Microsoft.UI.Xaml.UIElement Container { get; }
        global::Microsoft.UI.Input.ManipulationDelta Cumulative { get; }
        bool Handled { get; set; }
        bool IsInertial { get; }
        global::Microsoft.UI.Input.PointerDeviceType PointerDeviceType { get; }
        global::Windows.Foundation.Point Position { get; }
        global::Microsoft.UI.Input.ManipulationVelocities Velocities { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("51369745-960F-54AC-93FA-763D22910DEA")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IManipulationDeltaRoutedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IManipulationDeltaRoutedEventArgs
    {
        void Complete();
        global::Microsoft.UI.Xaml.UIElement Container { get; }
        global::Microsoft.UI.Input.ManipulationDelta Cumulative { get; }
        global::Microsoft.UI.Input.ManipulationDelta Delta { get; }
        bool Handled { get; set; }
        bool IsInertial { get; }
        global::Microsoft.UI.Input.PointerDeviceType PointerDeviceType { get; }
        global::Windows.Foundation.Point Position { get; }
        global::Microsoft.UI.Input.ManipulationVelocities Velocities { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("17D510BE-5514-5952-9AFD-959B60AB9394")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IManipulationInertiaStartingRoutedEventArgs
    {
        global::Microsoft.UI.Xaml.UIElement Container { get; }
        global::Microsoft.UI.Input.ManipulationDelta Cumulative { get; }
        global::Microsoft.UI.Input.ManipulationDelta Delta { get; }
        InertiaExpansionBehavior ExpansionBehavior { get; set; }
        bool Handled { get; set; }
        global::Microsoft.UI.Input.PointerDeviceType PointerDeviceType { get; }
        InertiaRotationBehavior RotationBehavior { get; set; }
        InertiaTranslationBehavior TranslationBehavior { get; set; }
        global::Microsoft.UI.Input.ManipulationVelocities Velocities { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("286BABA4-313D-507C-ADC5-F739732CEA27")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IManipulationPivot))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IManipulationPivot
    {
        global::Windows.Foundation.Point Center { get; set; }
        double Radius { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("67143CCD-EA6C-5FE2-BEF2-ADCBD7AF52FD")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IManipulationPivotFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IManipulationPivotFactory
    {
        ManipulationPivot CreateInstanceWithCenterAndRadius(global::Windows.Foundation.Point center, double radius);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("61857950-5821-5652-9FDF-C6277C5886F5")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IManipulationStartedRoutedEventArgs
    {
        void Complete();
        global::Microsoft.UI.Xaml.UIElement Container { get; }
        global::Microsoft.UI.Input.ManipulationDelta Cumulative { get; }
        bool Handled { get; set; }
        global::Microsoft.UI.Input.PointerDeviceType PointerDeviceType { get; }
        global::Windows.Foundation.Point Position { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("5681B0DE-3FA7-503E-9C46-A80339760292")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgsFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IManipulationStartedRoutedEventArgsFactory
    {
        ManipulationStartedRoutedEventArgs CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("93A99F86-F5A0-5326-91B0-851C897AF79F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IManipulationStartingRoutedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IManipulationStartingRoutedEventArgs
    {
        global::Microsoft.UI.Xaml.UIElement Container { get; set; }
        bool Handled { get; set; }
        ManipulationModes Mode { get; set; }
        ManipulationPivot Pivot { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("A2D7153A-CD2A-59CB-A574-AC82E30B9201")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.INoFocusCandidateFoundEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface INoFocusCandidateFoundEventArgs
    {
        FocusNavigationDirection Direction { get; }
        bool Handled { get; set; }
        FocusInputDeviceKind InputDevice { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("1F9AFBF5-11A3-5E68-AA1B-72FEBFA0AB23")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IPointer))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPointer
    {
        bool IsInContact { get; }
        bool IsInRange { get; }
        global::Microsoft.UI.Input.PointerDeviceType PointerDeviceType { get; }
        uint PointerId { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("66E78A9A-1BEC-5F92-B1A1-EA6334EE511C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPointerRoutedEventArgs
    {
        global::Microsoft.UI.Input.PointerPoint GetCurrentPoint(global::Microsoft.UI.Xaml.UIElement relativeTo);
        global::System.Collections.Generic.IList<global::Microsoft.UI.Input.PointerPoint> GetIntermediatePoints(global::Microsoft.UI.Xaml.UIElement relativeTo);
        bool Handled { get; set; }
        bool IsGenerated { get; }
        global::Windows.System.VirtualKeyModifiers KeyModifiers { get; }
        Pointer Pointer { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("9BE0D058-3D26-5811-B50A-3BB80CA766C9")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IProcessKeyboardAcceleratorEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IProcessKeyboardAcceleratorEventArgs
    {
        bool Handled { get; set; }
        global::Windows.System.VirtualKey Key { get; }
        global::Windows.System.VirtualKeyModifiers Modifiers { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("3972FAFB-2915-5C62-BB6B-54AD84FF400D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IRightTappedRoutedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IRightTappedRoutedEventArgs
    {
        global::Windows.Foundation.Point GetPosition(global::Microsoft.UI.Xaml.UIElement relativeTo);
        bool Handled { get; set; }
        global::Microsoft.UI.Input.PointerDeviceType PointerDeviceType { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("5F395D50-5449-59AB-9CB2-4E3700033F03")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IStandardUICommand))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IStandardUICommand
    {
        StandardUICommandKind Kind { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("5800F099-3746-5BCF-B1CE-AF3D6BF8E83F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IStandardUICommandFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IStandardUICommandFactory
    {
        StandardUICommand CreateInstance(object baseInterface, out object innerInterface);
        StandardUICommand CreateInstanceWithKind(StandardUICommandKind kind, object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("AB80C197-85CC-5D36-81AA-156CD63BE31A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IStandardUICommandStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IStandardUICommandStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty KindProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("73F74B8C-3709-547E-8E0C-51C03C89126A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.ITappedRoutedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ITappedRoutedEventArgs
    {
        global::Windows.Foundation.Point GetPosition(global::Microsoft.UI.Xaml.UIElement relativeTo);
        bool Handled { get; set; }
        global::Microsoft.UI.Input.PointerDeviceType PointerDeviceType { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("A457F2CB-51E0-541C-9C42-DD1DCBDF58FB")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IXamlUICommand))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IXamlUICommand
    {
        void NotifyCanExecuteChanged();
        string AccessKey { get; set; }
        global::System.Windows.Input.ICommand Command { get; set; }
        string Description { get; set; }
        global::Microsoft.UI.Xaml.Controls.IconSource IconSource { get; set; }
        global::System.Collections.Generic.IList<KeyboardAccelerator> KeyboardAccelerators { get; }
        string Label { get; set; }
        event global::Windows.Foundation.TypedEventHandler<XamlUICommand, CanExecuteRequestedEventArgs> CanExecuteRequested;
        event global::Windows.Foundation.TypedEventHandler<XamlUICommand, ExecuteRequestedEventArgs> ExecuteRequested;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("F1F80A20-0E31-5505-8BC3-CDD1F0947F1D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IXamlUICommandFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IXamlUICommandFactory
    {
        XamlUICommand CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("981DBDA6-CDCB-5E35-B24B-C4F60BA148D9")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.IXamlUICommandStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IXamlUICommandStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty AccessKeyProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty CommandProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty DescriptionProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty IconSourceProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty KeyboardAcceleratorsProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty LabelProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.InertiaExpansionBehavior))]
    [global::ABI.Microsoft.UI.Xaml.Input.InertiaExpansionBehaviorRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IInertiaExpansionBehavior))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class InertiaExpansionBehavior : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<InertiaExpansionBehavior>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IInertiaExpansionBehavior => _inner;


        public static InertiaExpansionBehavior FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<InertiaExpansionBehavior>.FromAbi(thisPtr);
        }

        internal InertiaExpansionBehavior(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IInertiaExpansionBehaviorMethods.IID);

        }


        public static bool operator ==(InertiaExpansionBehavior x, InertiaExpansionBehavior y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(InertiaExpansionBehavior x, InertiaExpansionBehavior y) => !(x == y);
        public bool Equals(InertiaExpansionBehavior other) => this == other;
        public override bool Equals(object obj) => obj is InertiaExpansionBehavior that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public double DesiredDeceleration
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IInertiaExpansionBehaviorMethods.get_DesiredDeceleration(_objRef_global__Microsoft_UI_Xaml_Input_IInertiaExpansionBehavior);
            set => global::ABI.Microsoft.UI.Xaml.Input.IInertiaExpansionBehaviorMethods.set_DesiredDeceleration(_objRef_global__Microsoft_UI_Xaml_Input_IInertiaExpansionBehavior, value);
        }

        public double DesiredExpansion
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IInertiaExpansionBehaviorMethods.get_DesiredExpansion(_objRef_global__Microsoft_UI_Xaml_Input_IInertiaExpansionBehavior);
            set => global::ABI.Microsoft.UI.Xaml.Input.IInertiaExpansionBehaviorMethods.set_DesiredExpansion(_objRef_global__Microsoft_UI_Xaml_Input_IInertiaExpansionBehavior, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.InertiaRotationBehavior))]
    [global::ABI.Microsoft.UI.Xaml.Input.InertiaRotationBehaviorRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IInertiaRotationBehavior))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class InertiaRotationBehavior : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<InertiaRotationBehavior>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IInertiaRotationBehavior => _inner;


        public static InertiaRotationBehavior FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<InertiaRotationBehavior>.FromAbi(thisPtr);
        }

        internal InertiaRotationBehavior(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IInertiaRotationBehaviorMethods.IID);

        }


        public static bool operator ==(InertiaRotationBehavior x, InertiaRotationBehavior y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(InertiaRotationBehavior x, InertiaRotationBehavior y) => !(x == y);
        public bool Equals(InertiaRotationBehavior other) => this == other;
        public override bool Equals(object obj) => obj is InertiaRotationBehavior that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public double DesiredDeceleration
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IInertiaRotationBehaviorMethods.get_DesiredDeceleration(_objRef_global__Microsoft_UI_Xaml_Input_IInertiaRotationBehavior);
            set => global::ABI.Microsoft.UI.Xaml.Input.IInertiaRotationBehaviorMethods.set_DesiredDeceleration(_objRef_global__Microsoft_UI_Xaml_Input_IInertiaRotationBehavior, value);
        }

        public double DesiredRotation
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IInertiaRotationBehaviorMethods.get_DesiredRotation(_objRef_global__Microsoft_UI_Xaml_Input_IInertiaRotationBehavior);
            set => global::ABI.Microsoft.UI.Xaml.Input.IInertiaRotationBehaviorMethods.set_DesiredRotation(_objRef_global__Microsoft_UI_Xaml_Input_IInertiaRotationBehavior, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.InertiaTranslationBehavior))]
    [global::ABI.Microsoft.UI.Xaml.Input.InertiaTranslationBehaviorRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IInertiaTranslationBehavior))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class InertiaTranslationBehavior : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<InertiaTranslationBehavior>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IInertiaTranslationBehavior => _inner;


        public static InertiaTranslationBehavior FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<InertiaTranslationBehavior>.FromAbi(thisPtr);
        }

        internal InertiaTranslationBehavior(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IInertiaTranslationBehaviorMethods.IID);

        }


        public static bool operator ==(InertiaTranslationBehavior x, InertiaTranslationBehavior y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(InertiaTranslationBehavior x, InertiaTranslationBehavior y) => !(x == y);
        public bool Equals(InertiaTranslationBehavior other) => this == other;
        public override bool Equals(object obj) => obj is InertiaTranslationBehavior that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public double DesiredDeceleration
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IInertiaTranslationBehaviorMethods.get_DesiredDeceleration(_objRef_global__Microsoft_UI_Xaml_Input_IInertiaTranslationBehavior);
            set => global::ABI.Microsoft.UI.Xaml.Input.IInertiaTranslationBehaviorMethods.set_DesiredDeceleration(_objRef_global__Microsoft_UI_Xaml_Input_IInertiaTranslationBehavior, value);
        }

        public double DesiredDisplacement
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IInertiaTranslationBehaviorMethods.get_DesiredDisplacement(_objRef_global__Microsoft_UI_Xaml_Input_IInertiaTranslationBehavior);
            set => global::ABI.Microsoft.UI.Xaml.Input.IInertiaTranslationBehaviorMethods.set_DesiredDisplacement(_objRef_global__Microsoft_UI_Xaml_Input_IInertiaTranslationBehavior, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.InputScope))]
    [global::ABI.Microsoft.UI.Xaml.Input.InputScopeRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IInputScope))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class InputScope : global::Microsoft.UI.Xaml.DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<InputScope>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IInputScope => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Input_InputScope;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_InputScope
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Input_InputScope;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Input_InputScope = ActivationFactory.Get("Microsoft.UI.Xaml.Input.InputScope");
                }
            }
        }

        public InputScope() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Input_InputScope, global::ABI.Microsoft.UI.Xaml.Input.IInputScopeMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new InputScope FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<InputScope>.FromAbi(thisPtr);
        }

        internal InputScope(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IInputScopeMethods.IID);

        }


        public static bool operator ==(InputScope x, InputScope y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(InputScope x, InputScope y) => !(x == y);
        public bool Equals(InputScope other) => this == other;
        public override bool Equals(object obj) => obj is InputScope that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::System.Collections.Generic.IList<InputScopeName> Names => global::ABI.Microsoft.UI.Xaml.Input.IInputScopeMethods.get_Names(_objRef_global__Microsoft_UI_Xaml_Input_IInputScope);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.InputScopeName))]
    [global::ABI.Microsoft.UI.Xaml.Input.InputScopeNameRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IInputScopeName))]
    [global::Microsoft.UI.Xaml.Markup.ContentProperty(Name = @"NameValue")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class InputScopeName : global::Microsoft.UI.Xaml.DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<InputScopeName>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IInputScopeName => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Input_InputScopeName;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_InputScopeName
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Input_InputScopeName;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Input_InputScopeName = ActivationFactory.Get("Microsoft.UI.Xaml.Input.InputScopeName");
                }
            }
        }

        public InputScopeName() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Input_InputScopeName, global::ABI.Microsoft.UI.Xaml.Input.IInputScopeNameMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        private static class _IInputScopeNameFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, InputScopeNameValue nameValue)
            {
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, InputScopeNameValue, IntPtr*, int>**)ThisPtr)[6](ThisPtr, nameValue, &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Input_IInputScopeNameFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IInputScopeNameFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Input_IInputScopeNameFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Input_IInputScopeNameFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Input.InputScopeName", global::ABI.Microsoft.UI.Xaml.Input.IInputScopeNameFactoryMethods.IID);
                }
            }
        }

        public InputScopeName(InputScopeNameValue nameValue) :base(global::WinRT.DerivedComposed.Instance)
        { 
        IntPtr ptr = (_IInputScopeNameFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Input_IInputScopeNameFactory, nameValue)); 
        try 
        { 
        _inner = ComWrappersSupport.GetObjectReferenceForInterface(ptr, global::ABI.Microsoft.UI.Xaml.Input.IInputScopeNameMethods.IID, false); 

        } 
        finally 
        { 
        MarshalInspectable<object>.DisposeAbi(ptr); 
        }

        ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
        ComWrappersHelper.Init(_inner, false);
        }

        public static new InputScopeName FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<InputScopeName>.FromAbi(thisPtr);
        }

        internal InputScopeName(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IInputScopeNameMethods.IID);

        }


        public static bool operator ==(InputScopeName x, InputScopeName y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(InputScopeName x, InputScopeName y) => !(x == y);
        public bool Equals(InputScopeName other) => this == other;
        public override bool Equals(object obj) => obj is InputScopeName that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public InputScopeNameValue NameValue
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IInputScopeNameMethods.get_NameValue(_objRef_global__Microsoft_UI_Xaml_Input_IInputScopeName);
            set => global::ABI.Microsoft.UI.Xaml.Input.IInputScopeNameMethods.set_NameValue(_objRef_global__Microsoft_UI_Xaml_Input_IInputScopeName, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<InputScopeNameValue>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum InputScopeNameValue : int
    {
        Default = unchecked((int)0),
        Url = unchecked((int)0x1),
        EmailSmtpAddress = unchecked((int)0x5),
        PersonalFullName = unchecked((int)0x7),
        CurrencyAmountAndSymbol = unchecked((int)0x14),
        CurrencyAmount = unchecked((int)0x15),
        DateMonthNumber = unchecked((int)0x17),
        DateDayNumber = unchecked((int)0x18),
        DateYear = unchecked((int)0x19),
        Digits = unchecked((int)0x1c),
        Number = unchecked((int)0x1d),
        Password = unchecked((int)0x1f),
        TelephoneNumber = unchecked((int)0x20),
        TelephoneCountryCode = unchecked((int)0x21),
        TelephoneAreaCode = unchecked((int)0x22),
        TelephoneLocalNumber = unchecked((int)0x23),
        TimeHour = unchecked((int)0x25),
        TimeMinutesOrSeconds = unchecked((int)0x26),
        NumberFullWidth = unchecked((int)0x27),
        AlphanumericHalfWidth = unchecked((int)0x28),
        AlphanumericFullWidth = unchecked((int)0x29),
        Hiragana = unchecked((int)0x2c),
        KatakanaHalfWidth = unchecked((int)0x2d),
        KatakanaFullWidth = unchecked((int)0x2e),
        Hanja = unchecked((int)0x2f),
        HangulHalfWidth = unchecked((int)0x30),
        HangulFullWidth = unchecked((int)0x31),
        Search = unchecked((int)0x32),
        Formula = unchecked((int)0x33),
        SearchIncremental = unchecked((int)0x34),
        ChineseHalfWidth = unchecked((int)0x35),
        ChineseFullWidth = unchecked((int)0x36),
        NativeScript = unchecked((int)0x37),
        Text = unchecked((int)0x39),
        Chat = unchecked((int)0x3a),
        NameOrPhoneNumber = unchecked((int)0x3b),
        EmailNameOrAddress = unchecked((int)0x3c),
        Maps = unchecked((int)0x3e),
        NumericPassword = unchecked((int)0x3f),
        NumericPin = unchecked((int)0x40),
        AlphanumericPin = unchecked((int)0x41),
        FormulaNumber = unchecked((int)0x43),
        ChatWithoutEmoji = unchecked((int)0x44),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.KeyEventHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.Input.KeyEventHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public delegate void KeyEventHandler(object sender, KeyRoutedEventArgs e);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.KeyRoutedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Input.KeyRoutedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IKeyRoutedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class KeyRoutedEventArgs : global::Microsoft.UI.Xaml.RoutedEventArgs, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<KeyRoutedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IKeyRoutedEventArgs => _inner;


        public static new KeyRoutedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<KeyRoutedEventArgs>.FromAbi(thisPtr);
        }

        internal KeyRoutedEventArgs(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IKeyRoutedEventArgsMethods.IID);

        }


        public static bool operator ==(KeyRoutedEventArgs x, KeyRoutedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(KeyRoutedEventArgs x, KeyRoutedEventArgs y) => !(x == y);
        public bool Equals(KeyRoutedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is KeyRoutedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public string DeviceId => global::ABI.Microsoft.UI.Xaml.Input.IKeyRoutedEventArgsMethods.get_DeviceId(_objRef_global__Microsoft_UI_Xaml_Input_IKeyRoutedEventArgs);

        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IKeyRoutedEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Xaml_Input_IKeyRoutedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Input.IKeyRoutedEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Xaml_Input_IKeyRoutedEventArgs, value);
        }

        public global::Windows.System.VirtualKey Key => global::ABI.Microsoft.UI.Xaml.Input.IKeyRoutedEventArgsMethods.get_Key(_objRef_global__Microsoft_UI_Xaml_Input_IKeyRoutedEventArgs);

        public global::Windows.UI.Core.CorePhysicalKeyStatus KeyStatus => global::ABI.Microsoft.UI.Xaml.Input.IKeyRoutedEventArgsMethods.get_KeyStatus(_objRef_global__Microsoft_UI_Xaml_Input_IKeyRoutedEventArgs);

        public global::Windows.System.VirtualKey OriginalKey => global::ABI.Microsoft.UI.Xaml.Input.IKeyRoutedEventArgsMethods.get_OriginalKey(_objRef_global__Microsoft_UI_Xaml_Input_IKeyRoutedEventArgs);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<KeyTipPlacementMode>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum KeyTipPlacementMode : int
    {
        Auto = unchecked((int)0),
        Bottom = unchecked((int)0x1),
        Top = unchecked((int)0x2),
        Left = unchecked((int)0x3),
        Right = unchecked((int)0x4),
        Center = unchecked((int)0x5),
        Hidden = unchecked((int)0x6),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.KeyboardAccelerator))]
    [global::ABI.Microsoft.UI.Xaml.Input.KeyboardAcceleratorRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IKeyboardAccelerator))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class KeyboardAccelerator : global::Microsoft.UI.Xaml.DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<KeyboardAccelerator>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAccelerator;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAccelerator()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAccelerator, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Input.IKeyboardAcceleratorMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAccelerator;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAccelerator => ___objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAccelerator ?? Make___objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAccelerator();



        private static class _IKeyboardAcceleratorFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAcceleratorFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAcceleratorFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAcceleratorFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAcceleratorFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Input.KeyboardAccelerator", global::ABI.Microsoft.UI.Xaml.Input.IKeyboardAcceleratorFactoryMethods.IID);
                }
            }
        }

        public KeyboardAccelerator():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(KeyboardAccelerator);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IKeyboardAcceleratorFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAcceleratorFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Input.IKeyboardAcceleratorMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Input.KeyboardAccelerator").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAcceleratorStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAcceleratorStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAcceleratorStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAcceleratorStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Input.KeyboardAccelerator", global::ABI.Microsoft.UI.Xaml.Input.IKeyboardAcceleratorStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty IsEnabledProperty => global::ABI.Microsoft.UI.Xaml.Input.IKeyboardAcceleratorStaticsMethods.get_IsEnabledProperty(_objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAcceleratorStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty KeyProperty => global::ABI.Microsoft.UI.Xaml.Input.IKeyboardAcceleratorStaticsMethods.get_KeyProperty(_objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAcceleratorStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ModifiersProperty => global::ABI.Microsoft.UI.Xaml.Input.IKeyboardAcceleratorStaticsMethods.get_ModifiersProperty(_objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAcceleratorStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ScopeOwnerProperty => global::ABI.Microsoft.UI.Xaml.Input.IKeyboardAcceleratorStaticsMethods.get_ScopeOwnerProperty(_objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAcceleratorStatics);

        public static new KeyboardAccelerator FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<KeyboardAccelerator>.FromAbi(thisPtr);
        }

        protected internal KeyboardAccelerator(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IKeyboardAcceleratorMethods.IID);

        }


        public static bool operator ==(KeyboardAccelerator x, KeyboardAccelerator y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(KeyboardAccelerator x, KeyboardAccelerator y) => !(x == y);
        public bool Equals(KeyboardAccelerator other) => this == other;
        public override bool Equals(object obj) => obj is KeyboardAccelerator that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected KeyboardAccelerator(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(KeyboardAccelerator);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public event global::Windows.Foundation.TypedEventHandler<KeyboardAccelerator, KeyboardAcceleratorInvokedEventArgs> Invoked
        {
            add => global::ABI.Microsoft.UI.Xaml.Input.IKeyboardAcceleratorMethods.Get_Invoked2(_objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAccelerator, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Input.IKeyboardAcceleratorMethods.Get_Invoked2(_objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAccelerator, (IWinRTObject)this).Unsubscribe(value);
        }

        public bool IsEnabled
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IKeyboardAcceleratorMethods.get_IsEnabled(_objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAccelerator);
            set => global::ABI.Microsoft.UI.Xaml.Input.IKeyboardAcceleratorMethods.set_IsEnabled(_objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAccelerator, value);
        }

        public global::Windows.System.VirtualKey Key
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IKeyboardAcceleratorMethods.get_Key(_objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAccelerator);
            set => global::ABI.Microsoft.UI.Xaml.Input.IKeyboardAcceleratorMethods.set_Key(_objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAccelerator, value);
        }

        public global::Windows.System.VirtualKeyModifiers Modifiers
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IKeyboardAcceleratorMethods.get_Modifiers(_objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAccelerator);
            set => global::ABI.Microsoft.UI.Xaml.Input.IKeyboardAcceleratorMethods.set_Modifiers(_objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAccelerator, value);
        }

        public global::Microsoft.UI.Xaml.DependencyObject ScopeOwner
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IKeyboardAcceleratorMethods.get_ScopeOwner(_objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAccelerator);
            set => global::ABI.Microsoft.UI.Xaml.Input.IKeyboardAcceleratorMethods.set_ScopeOwner(_objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAccelerator, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IKeyboardAcceleratorInvokedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class KeyboardAcceleratorInvokedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<KeyboardAcceleratorInvokedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAcceleratorInvokedEventArgs => _inner;


        public static KeyboardAcceleratorInvokedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<KeyboardAcceleratorInvokedEventArgs>.FromAbi(thisPtr);
        }

        internal KeyboardAcceleratorInvokedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IKeyboardAcceleratorInvokedEventArgsMethods.IID);

        }


        public static bool operator ==(KeyboardAcceleratorInvokedEventArgs x, KeyboardAcceleratorInvokedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(KeyboardAcceleratorInvokedEventArgs x, KeyboardAcceleratorInvokedEventArgs y) => !(x == y);
        public bool Equals(KeyboardAcceleratorInvokedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is KeyboardAcceleratorInvokedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Microsoft.UI.Xaml.DependencyObject Element => global::ABI.Microsoft.UI.Xaml.Input.IKeyboardAcceleratorInvokedEventArgsMethods.get_Element(_objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAcceleratorInvokedEventArgs);

        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IKeyboardAcceleratorInvokedEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAcceleratorInvokedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Input.IKeyboardAcceleratorInvokedEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAcceleratorInvokedEventArgs, value);
        }

        public KeyboardAccelerator KeyboardAccelerator => global::ABI.Microsoft.UI.Xaml.Input.IKeyboardAcceleratorInvokedEventArgsMethods.get_KeyboardAccelerator(_objRef_global__Microsoft_UI_Xaml_Input_IKeyboardAcceleratorInvokedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<KeyboardAcceleratorPlacementMode>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum KeyboardAcceleratorPlacementMode : int
    {
        Auto = unchecked((int)0),
        Hidden = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<KeyboardNavigationMode>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum KeyboardNavigationMode : int
    {
        Local = unchecked((int)0),
        Cycle = unchecked((int)0x1),
        Once = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.LosingFocusEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Input.LosingFocusEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ILosingFocusEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class LosingFocusEventArgs : global::Microsoft.UI.Xaml.RoutedEventArgs, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<LosingFocusEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_ILosingFocusEventArgs => _inner;


        public static new LosingFocusEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<LosingFocusEventArgs>.FromAbi(thisPtr);
        }

        internal LosingFocusEventArgs(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.ILosingFocusEventArgsMethods.IID);

        }


        public static bool operator ==(LosingFocusEventArgs x, LosingFocusEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(LosingFocusEventArgs x, LosingFocusEventArgs y) => !(x == y);
        public bool Equals(LosingFocusEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is LosingFocusEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public bool TryCancel() => global::ABI.Microsoft.UI.Xaml.Input.ILosingFocusEventArgsMethods.TryCancel(_objRef_global__Microsoft_UI_Xaml_Input_ILosingFocusEventArgs);

        public bool TrySetNewFocusedElement(global::Microsoft.UI.Xaml.DependencyObject element) => global::ABI.Microsoft.UI.Xaml.Input.ILosingFocusEventArgsMethods.TrySetNewFocusedElement(_objRef_global__Microsoft_UI_Xaml_Input_ILosingFocusEventArgs, element);

        public bool Cancel
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.ILosingFocusEventArgsMethods.get_Cancel(_objRef_global__Microsoft_UI_Xaml_Input_ILosingFocusEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Input.ILosingFocusEventArgsMethods.set_Cancel(_objRef_global__Microsoft_UI_Xaml_Input_ILosingFocusEventArgs, value);
        }

        public Guid CorrelationId => global::ABI.Microsoft.UI.Xaml.Input.ILosingFocusEventArgsMethods.get_CorrelationId(_objRef_global__Microsoft_UI_Xaml_Input_ILosingFocusEventArgs);

        public FocusNavigationDirection Direction => global::ABI.Microsoft.UI.Xaml.Input.ILosingFocusEventArgsMethods.get_Direction(_objRef_global__Microsoft_UI_Xaml_Input_ILosingFocusEventArgs);

        public global::Microsoft.UI.Xaml.FocusState FocusState => global::ABI.Microsoft.UI.Xaml.Input.ILosingFocusEventArgsMethods.get_FocusState(_objRef_global__Microsoft_UI_Xaml_Input_ILosingFocusEventArgs);

        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.ILosingFocusEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Xaml_Input_ILosingFocusEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Input.ILosingFocusEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Xaml_Input_ILosingFocusEventArgs, value);
        }

        public FocusInputDeviceKind InputDevice => global::ABI.Microsoft.UI.Xaml.Input.ILosingFocusEventArgsMethods.get_InputDevice(_objRef_global__Microsoft_UI_Xaml_Input_ILosingFocusEventArgs);

        public global::Microsoft.UI.Xaml.DependencyObject NewFocusedElement
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.ILosingFocusEventArgsMethods.get_NewFocusedElement(_objRef_global__Microsoft_UI_Xaml_Input_ILosingFocusEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Input.ILosingFocusEventArgsMethods.set_NewFocusedElement(_objRef_global__Microsoft_UI_Xaml_Input_ILosingFocusEventArgs, value);
        }

        public global::Microsoft.UI.Xaml.DependencyObject OldFocusedElement => global::ABI.Microsoft.UI.Xaml.Input.ILosingFocusEventArgsMethods.get_OldFocusedElement(_objRef_global__Microsoft_UI_Xaml_Input_ILosingFocusEventArgs);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public delegate void ManipulationCompletedEventHandler(object sender, ManipulationCompletedRoutedEventArgs e);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IManipulationCompletedRoutedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class ManipulationCompletedRoutedEventArgs : global::Microsoft.UI.Xaml.RoutedEventArgs, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ManipulationCompletedRoutedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IManipulationCompletedRoutedEventArgs => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Input_ManipulationCompletedRoutedEventArgs;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_ManipulationCompletedRoutedEventArgs
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Input_ManipulationCompletedRoutedEventArgs;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Input_ManipulationCompletedRoutedEventArgs = ActivationFactory.Get("Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs");
                }
            }
        }

        public ManipulationCompletedRoutedEventArgs() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Input_ManipulationCompletedRoutedEventArgs, global::ABI.Microsoft.UI.Xaml.Input.IManipulationCompletedRoutedEventArgsMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new ManipulationCompletedRoutedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ManipulationCompletedRoutedEventArgs>.FromAbi(thisPtr);
        }

        internal ManipulationCompletedRoutedEventArgs(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IManipulationCompletedRoutedEventArgsMethods.IID);

        }


        public static bool operator ==(ManipulationCompletedRoutedEventArgs x, ManipulationCompletedRoutedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ManipulationCompletedRoutedEventArgs x, ManipulationCompletedRoutedEventArgs y) => !(x == y);
        public bool Equals(ManipulationCompletedRoutedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is ManipulationCompletedRoutedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::Microsoft.UI.Xaml.UIElement Container => global::ABI.Microsoft.UI.Xaml.Input.IManipulationCompletedRoutedEventArgsMethods.get_Container(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationCompletedRoutedEventArgs);

        public global::Microsoft.UI.Input.ManipulationDelta Cumulative => global::ABI.Microsoft.UI.Xaml.Input.IManipulationCompletedRoutedEventArgsMethods.get_Cumulative(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationCompletedRoutedEventArgs);

        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IManipulationCompletedRoutedEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationCompletedRoutedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Input.IManipulationCompletedRoutedEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationCompletedRoutedEventArgs, value);
        }

        public bool IsInertial => global::ABI.Microsoft.UI.Xaml.Input.IManipulationCompletedRoutedEventArgsMethods.get_IsInertial(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationCompletedRoutedEventArgs);

        public global::Microsoft.UI.Input.PointerDeviceType PointerDeviceType => global::ABI.Microsoft.UI.Xaml.Input.IManipulationCompletedRoutedEventArgsMethods.get_PointerDeviceType(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationCompletedRoutedEventArgs);

        public global::Windows.Foundation.Point Position => global::ABI.Microsoft.UI.Xaml.Input.IManipulationCompletedRoutedEventArgsMethods.get_Position(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationCompletedRoutedEventArgs);

        public global::Microsoft.UI.Input.ManipulationVelocities Velocities => global::ABI.Microsoft.UI.Xaml.Input.IManipulationCompletedRoutedEventArgsMethods.get_Velocities(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationCompletedRoutedEventArgs);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public delegate void ManipulationDeltaEventHandler(object sender, ManipulationDeltaRoutedEventArgs e);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IManipulationDeltaRoutedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class ManipulationDeltaRoutedEventArgs : global::Microsoft.UI.Xaml.RoutedEventArgs, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ManipulationDeltaRoutedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IManipulationDeltaRoutedEventArgs => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Input_ManipulationDeltaRoutedEventArgs;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_ManipulationDeltaRoutedEventArgs
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Input_ManipulationDeltaRoutedEventArgs;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Input_ManipulationDeltaRoutedEventArgs = ActivationFactory.Get("Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs");
                }
            }
        }

        public ManipulationDeltaRoutedEventArgs() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Input_ManipulationDeltaRoutedEventArgs, global::ABI.Microsoft.UI.Xaml.Input.IManipulationDeltaRoutedEventArgsMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new ManipulationDeltaRoutedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ManipulationDeltaRoutedEventArgs>.FromAbi(thisPtr);
        }

        internal ManipulationDeltaRoutedEventArgs(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IManipulationDeltaRoutedEventArgsMethods.IID);

        }


        public static bool operator ==(ManipulationDeltaRoutedEventArgs x, ManipulationDeltaRoutedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ManipulationDeltaRoutedEventArgs x, ManipulationDeltaRoutedEventArgs y) => !(x == y);
        public bool Equals(ManipulationDeltaRoutedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is ManipulationDeltaRoutedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public void Complete() => global::ABI.Microsoft.UI.Xaml.Input.IManipulationDeltaRoutedEventArgsMethods.Complete(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationDeltaRoutedEventArgs);

        public global::Microsoft.UI.Xaml.UIElement Container => global::ABI.Microsoft.UI.Xaml.Input.IManipulationDeltaRoutedEventArgsMethods.get_Container(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationDeltaRoutedEventArgs);

        public global::Microsoft.UI.Input.ManipulationDelta Cumulative => global::ABI.Microsoft.UI.Xaml.Input.IManipulationDeltaRoutedEventArgsMethods.get_Cumulative(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationDeltaRoutedEventArgs);

        public global::Microsoft.UI.Input.ManipulationDelta Delta => global::ABI.Microsoft.UI.Xaml.Input.IManipulationDeltaRoutedEventArgsMethods.get_Delta(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationDeltaRoutedEventArgs);

        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IManipulationDeltaRoutedEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationDeltaRoutedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Input.IManipulationDeltaRoutedEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationDeltaRoutedEventArgs, value);
        }

        public bool IsInertial => global::ABI.Microsoft.UI.Xaml.Input.IManipulationDeltaRoutedEventArgsMethods.get_IsInertial(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationDeltaRoutedEventArgs);

        public global::Microsoft.UI.Input.PointerDeviceType PointerDeviceType => global::ABI.Microsoft.UI.Xaml.Input.IManipulationDeltaRoutedEventArgsMethods.get_PointerDeviceType(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationDeltaRoutedEventArgs);

        public global::Windows.Foundation.Point Position => global::ABI.Microsoft.UI.Xaml.Input.IManipulationDeltaRoutedEventArgsMethods.get_Position(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationDeltaRoutedEventArgs);

        public global::Microsoft.UI.Input.ManipulationVelocities Velocities => global::ABI.Microsoft.UI.Xaml.Input.IManipulationDeltaRoutedEventArgsMethods.get_Velocities(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationDeltaRoutedEventArgs);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public delegate void ManipulationInertiaStartingEventHandler(object sender, ManipulationInertiaStartingRoutedEventArgs e);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IManipulationInertiaStartingRoutedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class ManipulationInertiaStartingRoutedEventArgs : global::Microsoft.UI.Xaml.RoutedEventArgs, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ManipulationInertiaStartingRoutedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IManipulationInertiaStartingRoutedEventArgs => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Input_ManipulationInertiaStartingRoutedEventArgs;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_ManipulationInertiaStartingRoutedEventArgs
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Input_ManipulationInertiaStartingRoutedEventArgs;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Input_ManipulationInertiaStartingRoutedEventArgs = ActivationFactory.Get("Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs");
                }
            }
        }

        public ManipulationInertiaStartingRoutedEventArgs() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Input_ManipulationInertiaStartingRoutedEventArgs, global::ABI.Microsoft.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgsMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new ManipulationInertiaStartingRoutedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ManipulationInertiaStartingRoutedEventArgs>.FromAbi(thisPtr);
        }

        internal ManipulationInertiaStartingRoutedEventArgs(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgsMethods.IID);

        }


        public static bool operator ==(ManipulationInertiaStartingRoutedEventArgs x, ManipulationInertiaStartingRoutedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ManipulationInertiaStartingRoutedEventArgs x, ManipulationInertiaStartingRoutedEventArgs y) => !(x == y);
        public bool Equals(ManipulationInertiaStartingRoutedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is ManipulationInertiaStartingRoutedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::Microsoft.UI.Xaml.UIElement Container => global::ABI.Microsoft.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgsMethods.get_Container(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationInertiaStartingRoutedEventArgs);

        public global::Microsoft.UI.Input.ManipulationDelta Cumulative => global::ABI.Microsoft.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgsMethods.get_Cumulative(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationInertiaStartingRoutedEventArgs);

        public global::Microsoft.UI.Input.ManipulationDelta Delta => global::ABI.Microsoft.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgsMethods.get_Delta(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationInertiaStartingRoutedEventArgs);

        public InertiaExpansionBehavior ExpansionBehavior
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgsMethods.get_ExpansionBehavior(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationInertiaStartingRoutedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgsMethods.set_ExpansionBehavior(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationInertiaStartingRoutedEventArgs, value);
        }

        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationInertiaStartingRoutedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationInertiaStartingRoutedEventArgs, value);
        }

        public global::Microsoft.UI.Input.PointerDeviceType PointerDeviceType => global::ABI.Microsoft.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgsMethods.get_PointerDeviceType(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationInertiaStartingRoutedEventArgs);

        public InertiaRotationBehavior RotationBehavior
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgsMethods.get_RotationBehavior(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationInertiaStartingRoutedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgsMethods.set_RotationBehavior(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationInertiaStartingRoutedEventArgs, value);
        }

        public InertiaTranslationBehavior TranslationBehavior
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgsMethods.get_TranslationBehavior(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationInertiaStartingRoutedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgsMethods.set_TranslationBehavior(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationInertiaStartingRoutedEventArgs, value);
        }

        public global::Microsoft.UI.Input.ManipulationVelocities Velocities => global::ABI.Microsoft.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgsMethods.get_Velocities(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationInertiaStartingRoutedEventArgs);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [FlagsAttribute]
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<ManipulationModes>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum ManipulationModes : uint
    {
        None = unchecked((uint)0),
        TranslateX = unchecked((uint)0x1),
        TranslateY = unchecked((uint)0x2),
        TranslateRailsX = unchecked((uint)0x4),
        TranslateRailsY = unchecked((uint)0x8),
        Rotate = unchecked((uint)0x10),
        Scale = unchecked((uint)0x20),
        TranslateInertia = unchecked((uint)0x40),
        RotateInertia = unchecked((uint)0x80),
        ScaleInertia = unchecked((uint)0x100),
        All = unchecked((uint)0xffff),
        System = unchecked((uint)0x10000),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.ManipulationPivot))]
    [global::ABI.Microsoft.UI.Xaml.Input.ManipulationPivotRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IManipulationPivot))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class ManipulationPivot : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ManipulationPivot>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IManipulationPivot => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Input_ManipulationPivot;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_ManipulationPivot
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Input_ManipulationPivot;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Input_ManipulationPivot = ActivationFactory.Get("Microsoft.UI.Xaml.Input.ManipulationPivot");
                }
            }
        }

        public ManipulationPivot() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Input_ManipulationPivot, global::ABI.Microsoft.UI.Xaml.Input.IManipulationPivotMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        private static class _IManipulationPivotFactoryMethods
        {
            public static unsafe IntPtr CreateInstanceWithCenterAndRadius(IObjectReference _obj, global::Windows.Foundation.Point center, double radius)
            {
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point, double, IntPtr*, int>**)ThisPtr)[6](ThisPtr, center, radius, &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Input_IManipulationPivotFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IManipulationPivotFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Input_IManipulationPivotFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Input_IManipulationPivotFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Input.ManipulationPivot", global::ABI.Microsoft.UI.Xaml.Input.IManipulationPivotFactoryMethods.IID);
                }
            }
        }

        public ManipulationPivot(global::Windows.Foundation.Point center, double radius) 
        { 
        IntPtr ptr = (_IManipulationPivotFactoryMethods.CreateInstanceWithCenterAndRadius(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationPivotFactory, center, radius)); 
        try 
        { 
        _inner = ComWrappersSupport.GetObjectReferenceForInterface(ptr, global::ABI.Microsoft.UI.Xaml.Input.IManipulationPivotMethods.IID, false); 

        } 
        finally 
        { 
        MarshalInspectable<object>.DisposeAbi(ptr); 
        }

        ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
        ComWrappersHelper.Init(_inner, false);
        }

        public static ManipulationPivot FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ManipulationPivot>.FromAbi(thisPtr);
        }

        internal ManipulationPivot(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IManipulationPivotMethods.IID);

        }


        public static bool operator ==(ManipulationPivot x, ManipulationPivot y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ManipulationPivot x, ManipulationPivot y) => !(x == y);
        public bool Equals(ManipulationPivot other) => this == other;
        public override bool Equals(object obj) => obj is ManipulationPivot that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.Point Center
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IManipulationPivotMethods.get_Center(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationPivot);
            set => global::ABI.Microsoft.UI.Xaml.Input.IManipulationPivotMethods.set_Center(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationPivot, value);
        }

        public double Radius
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IManipulationPivotMethods.get_Radius(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationPivot);
            set => global::ABI.Microsoft.UI.Xaml.Input.IManipulationPivotMethods.set_Radius(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationPivot, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.Input.ManipulationStartedEventHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public delegate void ManipulationStartedEventHandler(object sender, ManipulationStartedRoutedEventArgs e);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IManipulationStartedRoutedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class ManipulationStartedRoutedEventArgs : global::Microsoft.UI.Xaml.RoutedEventArgs, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ManipulationStartedRoutedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Input_IManipulationStartedRoutedEventArgs;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Input_IManipulationStartedRoutedEventArgs()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Input_IManipulationStartedRoutedEventArgs, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgsMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Input_IManipulationStartedRoutedEventArgs;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IManipulationStartedRoutedEventArgs => ___objRef_global__Microsoft_UI_Xaml_Input_IManipulationStartedRoutedEventArgs ?? Make___objRef_global__Microsoft_UI_Xaml_Input_IManipulationStartedRoutedEventArgs();



        private static class _IManipulationStartedRoutedEventArgsFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Input_IManipulationStartedRoutedEventArgsFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IManipulationStartedRoutedEventArgsFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Input_IManipulationStartedRoutedEventArgsFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Input_IManipulationStartedRoutedEventArgsFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs", global::ABI.Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgsFactoryMethods.IID);
                }
            }
        }

        public ManipulationStartedRoutedEventArgs():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(ManipulationStartedRoutedEventArgs);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IManipulationStartedRoutedEventArgsFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationStartedRoutedEventArgsFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgsMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new ManipulationStartedRoutedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ManipulationStartedRoutedEventArgs>.FromAbi(thisPtr);
        }

        protected internal ManipulationStartedRoutedEventArgs(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgsMethods.IID);

        }


        public static bool operator ==(ManipulationStartedRoutedEventArgs x, ManipulationStartedRoutedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ManipulationStartedRoutedEventArgs x, ManipulationStartedRoutedEventArgs y) => !(x == y);
        public bool Equals(ManipulationStartedRoutedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is ManipulationStartedRoutedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected ManipulationStartedRoutedEventArgs(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(ManipulationStartedRoutedEventArgs);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public void Complete() => global::ABI.Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgsMethods.Complete(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationStartedRoutedEventArgs);

        public global::Microsoft.UI.Xaml.UIElement Container => global::ABI.Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgsMethods.get_Container(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationStartedRoutedEventArgs);

        public global::Microsoft.UI.Input.ManipulationDelta Cumulative => global::ABI.Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgsMethods.get_Cumulative(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationStartedRoutedEventArgs);

        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationStartedRoutedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationStartedRoutedEventArgs, value);
        }

        public global::Microsoft.UI.Input.PointerDeviceType PointerDeviceType => global::ABI.Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgsMethods.get_PointerDeviceType(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationStartedRoutedEventArgs);

        public global::Windows.Foundation.Point Position => global::ABI.Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgsMethods.get_Position(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationStartedRoutedEventArgs);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.Input.ManipulationStartingEventHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public delegate void ManipulationStartingEventHandler(object sender, ManipulationStartingRoutedEventArgs e);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IManipulationStartingRoutedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class ManipulationStartingRoutedEventArgs : global::Microsoft.UI.Xaml.RoutedEventArgs, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ManipulationStartingRoutedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IManipulationStartingRoutedEventArgs => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Input_ManipulationStartingRoutedEventArgs;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_ManipulationStartingRoutedEventArgs
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Input_ManipulationStartingRoutedEventArgs;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Input_ManipulationStartingRoutedEventArgs = ActivationFactory.Get("Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs");
                }
            }
        }

        public ManipulationStartingRoutedEventArgs() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Input_ManipulationStartingRoutedEventArgs, global::ABI.Microsoft.UI.Xaml.Input.IManipulationStartingRoutedEventArgsMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new ManipulationStartingRoutedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ManipulationStartingRoutedEventArgs>.FromAbi(thisPtr);
        }

        internal ManipulationStartingRoutedEventArgs(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IManipulationStartingRoutedEventArgsMethods.IID);

        }


        public static bool operator ==(ManipulationStartingRoutedEventArgs x, ManipulationStartingRoutedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ManipulationStartingRoutedEventArgs x, ManipulationStartingRoutedEventArgs y) => !(x == y);
        public bool Equals(ManipulationStartingRoutedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is ManipulationStartingRoutedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::Microsoft.UI.Xaml.UIElement Container
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IManipulationStartingRoutedEventArgsMethods.get_Container(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationStartingRoutedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Input.IManipulationStartingRoutedEventArgsMethods.set_Container(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationStartingRoutedEventArgs, value);
        }

        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IManipulationStartingRoutedEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationStartingRoutedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Input.IManipulationStartingRoutedEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationStartingRoutedEventArgs, value);
        }

        public ManipulationModes Mode
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IManipulationStartingRoutedEventArgsMethods.get_Mode(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationStartingRoutedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Input.IManipulationStartingRoutedEventArgsMethods.set_Mode(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationStartingRoutedEventArgs, value);
        }

        public ManipulationPivot Pivot
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IManipulationStartingRoutedEventArgsMethods.get_Pivot(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationStartingRoutedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Input.IManipulationStartingRoutedEventArgsMethods.set_Pivot(_objRef_global__Microsoft_UI_Xaml_Input_IManipulationStartingRoutedEventArgs, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(INoFocusCandidateFoundEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class NoFocusCandidateFoundEventArgs : global::Microsoft.UI.Xaml.RoutedEventArgs, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<NoFocusCandidateFoundEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_INoFocusCandidateFoundEventArgs => _inner;


        public static new NoFocusCandidateFoundEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<NoFocusCandidateFoundEventArgs>.FromAbi(thisPtr);
        }

        internal NoFocusCandidateFoundEventArgs(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.INoFocusCandidateFoundEventArgsMethods.IID);

        }


        public static bool operator ==(NoFocusCandidateFoundEventArgs x, NoFocusCandidateFoundEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(NoFocusCandidateFoundEventArgs x, NoFocusCandidateFoundEventArgs y) => !(x == y);
        public bool Equals(NoFocusCandidateFoundEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is NoFocusCandidateFoundEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public FocusNavigationDirection Direction => global::ABI.Microsoft.UI.Xaml.Input.INoFocusCandidateFoundEventArgsMethods.get_Direction(_objRef_global__Microsoft_UI_Xaml_Input_INoFocusCandidateFoundEventArgs);

        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.INoFocusCandidateFoundEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Xaml_Input_INoFocusCandidateFoundEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Input.INoFocusCandidateFoundEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Xaml_Input_INoFocusCandidateFoundEventArgs, value);
        }

        public FocusInputDeviceKind InputDevice => global::ABI.Microsoft.UI.Xaml.Input.INoFocusCandidateFoundEventArgsMethods.get_InputDevice(_objRef_global__Microsoft_UI_Xaml_Input_INoFocusCandidateFoundEventArgs);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.Pointer))]
    [global::ABI.Microsoft.UI.Xaml.Input.PointerRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPointer))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class Pointer : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<Pointer>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IPointer => _inner;


        public static Pointer FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<Pointer>.FromAbi(thisPtr);
        }

        internal Pointer(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IPointerMethods.IID);

        }


        public static bool operator ==(Pointer x, Pointer y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(Pointer x, Pointer y) => !(x == y);
        public bool Equals(Pointer other) => this == other;
        public override bool Equals(object obj) => obj is Pointer that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool IsInContact => global::ABI.Microsoft.UI.Xaml.Input.IPointerMethods.get_IsInContact(_objRef_global__Microsoft_UI_Xaml_Input_IPointer);

        public bool IsInRange => global::ABI.Microsoft.UI.Xaml.Input.IPointerMethods.get_IsInRange(_objRef_global__Microsoft_UI_Xaml_Input_IPointer);

        public global::Microsoft.UI.Input.PointerDeviceType PointerDeviceType => global::ABI.Microsoft.UI.Xaml.Input.IPointerMethods.get_PointerDeviceType(_objRef_global__Microsoft_UI_Xaml_Input_IPointer);

        public uint PointerId => global::ABI.Microsoft.UI.Xaml.Input.IPointerMethods.get_PointerId(_objRef_global__Microsoft_UI_Xaml_Input_IPointer);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.PointerEventHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.Input.PointerEventHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public delegate void PointerEventHandler(object sender, PointerRoutedEventArgs e);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.PointerRoutedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Input.PointerRoutedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPointerRoutedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class PointerRoutedEventArgs : global::Microsoft.UI.Xaml.RoutedEventArgs, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PointerRoutedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IPointerRoutedEventArgs => _inner;


        public static new PointerRoutedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PointerRoutedEventArgs>.FromAbi(thisPtr);
        }

        internal PointerRoutedEventArgs(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IPointerRoutedEventArgsMethods.IID);

        }


        public static bool operator ==(PointerRoutedEventArgs x, PointerRoutedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PointerRoutedEventArgs x, PointerRoutedEventArgs y) => !(x == y);
        public bool Equals(PointerRoutedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is PointerRoutedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::Microsoft.UI.Input.PointerPoint GetCurrentPoint(global::Microsoft.UI.Xaml.UIElement relativeTo) => global::ABI.Microsoft.UI.Xaml.Input.IPointerRoutedEventArgsMethods.GetCurrentPoint(_objRef_global__Microsoft_UI_Xaml_Input_IPointerRoutedEventArgs, relativeTo);

        public global::System.Collections.Generic.IList<global::Microsoft.UI.Input.PointerPoint> GetIntermediatePoints(global::Microsoft.UI.Xaml.UIElement relativeTo) => global::ABI.Microsoft.UI.Xaml.Input.IPointerRoutedEventArgsMethods.GetIntermediatePoints(_objRef_global__Microsoft_UI_Xaml_Input_IPointerRoutedEventArgs, relativeTo);

        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IPointerRoutedEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Xaml_Input_IPointerRoutedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Input.IPointerRoutedEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Xaml_Input_IPointerRoutedEventArgs, value);
        }

        public bool IsGenerated => global::ABI.Microsoft.UI.Xaml.Input.IPointerRoutedEventArgsMethods.get_IsGenerated(_objRef_global__Microsoft_UI_Xaml_Input_IPointerRoutedEventArgs);

        public global::Windows.System.VirtualKeyModifiers KeyModifiers => global::ABI.Microsoft.UI.Xaml.Input.IPointerRoutedEventArgsMethods.get_KeyModifiers(_objRef_global__Microsoft_UI_Xaml_Input_IPointerRoutedEventArgs);

        public Pointer Pointer => global::ABI.Microsoft.UI.Xaml.Input.IPointerRoutedEventArgsMethods.get_Pointer(_objRef_global__Microsoft_UI_Xaml_Input_IPointerRoutedEventArgs);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IProcessKeyboardAcceleratorEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class ProcessKeyboardAcceleratorEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ProcessKeyboardAcceleratorEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IProcessKeyboardAcceleratorEventArgs => _inner;


        public static ProcessKeyboardAcceleratorEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ProcessKeyboardAcceleratorEventArgs>.FromAbi(thisPtr);
        }

        internal ProcessKeyboardAcceleratorEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IProcessKeyboardAcceleratorEventArgsMethods.IID);

        }


        public static bool operator ==(ProcessKeyboardAcceleratorEventArgs x, ProcessKeyboardAcceleratorEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ProcessKeyboardAcceleratorEventArgs x, ProcessKeyboardAcceleratorEventArgs y) => !(x == y);
        public bool Equals(ProcessKeyboardAcceleratorEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is ProcessKeyboardAcceleratorEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IProcessKeyboardAcceleratorEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Xaml_Input_IProcessKeyboardAcceleratorEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Input.IProcessKeyboardAcceleratorEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Xaml_Input_IProcessKeyboardAcceleratorEventArgs, value);
        }

        public global::Windows.System.VirtualKey Key => global::ABI.Microsoft.UI.Xaml.Input.IProcessKeyboardAcceleratorEventArgsMethods.get_Key(_objRef_global__Microsoft_UI_Xaml_Input_IProcessKeyboardAcceleratorEventArgs);

        public global::Windows.System.VirtualKeyModifiers Modifiers => global::ABI.Microsoft.UI.Xaml.Input.IProcessKeyboardAcceleratorEventArgsMethods.get_Modifiers(_objRef_global__Microsoft_UI_Xaml_Input_IProcessKeyboardAcceleratorEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.RightTappedEventHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.Input.RightTappedEventHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public delegate void RightTappedEventHandler(object sender, RightTappedRoutedEventArgs e);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IRightTappedRoutedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class RightTappedRoutedEventArgs : global::Microsoft.UI.Xaml.RoutedEventArgs, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<RightTappedRoutedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IRightTappedRoutedEventArgs => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Input_RightTappedRoutedEventArgs;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_RightTappedRoutedEventArgs
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Input_RightTappedRoutedEventArgs;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Input_RightTappedRoutedEventArgs = ActivationFactory.Get("Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs");
                }
            }
        }

        public RightTappedRoutedEventArgs() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Input_RightTappedRoutedEventArgs, global::ABI.Microsoft.UI.Xaml.Input.IRightTappedRoutedEventArgsMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new RightTappedRoutedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<RightTappedRoutedEventArgs>.FromAbi(thisPtr);
        }

        internal RightTappedRoutedEventArgs(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IRightTappedRoutedEventArgsMethods.IID);

        }


        public static bool operator ==(RightTappedRoutedEventArgs x, RightTappedRoutedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(RightTappedRoutedEventArgs x, RightTappedRoutedEventArgs y) => !(x == y);
        public bool Equals(RightTappedRoutedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is RightTappedRoutedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.Point GetPosition(global::Microsoft.UI.Xaml.UIElement relativeTo) => global::ABI.Microsoft.UI.Xaml.Input.IRightTappedRoutedEventArgsMethods.GetPosition(_objRef_global__Microsoft_UI_Xaml_Input_IRightTappedRoutedEventArgs, relativeTo);

        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IRightTappedRoutedEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Xaml_Input_IRightTappedRoutedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Input.IRightTappedRoutedEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Xaml_Input_IRightTappedRoutedEventArgs, value);
        }

        public global::Microsoft.UI.Input.PointerDeviceType PointerDeviceType => global::ABI.Microsoft.UI.Xaml.Input.IRightTappedRoutedEventArgsMethods.get_PointerDeviceType(_objRef_global__Microsoft_UI_Xaml_Input_IRightTappedRoutedEventArgs);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.StandardUICommand))]
    [global::ABI.Microsoft.UI.Xaml.Input.StandardUICommandRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IStandardUICommand))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class StandardUICommand : XamlUICommand, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<StandardUICommand>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Input_IStandardUICommand;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Input_IStandardUICommand()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Input_IStandardUICommand, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Input.IStandardUICommandMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Input_IStandardUICommand;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IStandardUICommand => ___objRef_global__Microsoft_UI_Xaml_Input_IStandardUICommand ?? Make___objRef_global__Microsoft_UI_Xaml_Input_IStandardUICommand();



        private static class _IStandardUICommandFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }

            public static unsafe IntPtr CreateInstanceWithKind(IObjectReference _obj, StandardUICommandKind kind, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, StandardUICommandKind, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[7](ThisPtr, kind, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Input_IStandardUICommandFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IStandardUICommandFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Input_IStandardUICommandFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Input_IStandardUICommandFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Input.StandardUICommand", global::ABI.Microsoft.UI.Xaml.Input.IStandardUICommandFactoryMethods.IID);
                }
            }
        }

        public StandardUICommand():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(StandardUICommand);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IStandardUICommandFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Input_IStandardUICommandFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Input.IStandardUICommandMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public StandardUICommand(StandardUICommandKind kind):base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(StandardUICommand);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IStandardUICommandFactoryMethods.CreateInstanceWithKind(_objRef_global__Microsoft_UI_Xaml_Input_IStandardUICommandFactory, kind, baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Input.IStandardUICommandMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Input.StandardUICommand").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Input_IStandardUICommandStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IStandardUICommandStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Input_IStandardUICommandStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Input_IStandardUICommandStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Input.StandardUICommand", global::ABI.Microsoft.UI.Xaml.Input.IStandardUICommandStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty KindProperty => global::ABI.Microsoft.UI.Xaml.Input.IStandardUICommandStaticsMethods.get_KindProperty(_objRef_global__Microsoft_UI_Xaml_Input_IStandardUICommandStatics);

        public static new StandardUICommand FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<StandardUICommand>.FromAbi(thisPtr);
        }

        protected internal StandardUICommand(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IStandardUICommandMethods.IID);

        }


        public static bool operator ==(StandardUICommand x, StandardUICommand y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(StandardUICommand x, StandardUICommand y) => !(x == y);
        public bool Equals(StandardUICommand other) => this == other;
        public override bool Equals(object obj) => obj is StandardUICommand that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected StandardUICommand(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(StandardUICommand);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public StandardUICommandKind Kind
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IStandardUICommandMethods.get_Kind(_objRef_global__Microsoft_UI_Xaml_Input_IStandardUICommand);
            set => global::ABI.Microsoft.UI.Xaml.Input.IStandardUICommandMethods.set_Kind(_objRef_global__Microsoft_UI_Xaml_Input_IStandardUICommand, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<StandardUICommandKind>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum StandardUICommandKind : int
    {
        None = unchecked((int)0),
        Cut = unchecked((int)0x1),
        Copy = unchecked((int)0x2),
        Paste = unchecked((int)0x3),
        SelectAll = unchecked((int)0x4),
        Delete = unchecked((int)0x5),
        Share = unchecked((int)0x6),
        Save = unchecked((int)0x7),
        Open = unchecked((int)0x8),
        Close = unchecked((int)0x9),
        Pause = unchecked((int)0xa),
        Play = unchecked((int)0xb),
        Stop = unchecked((int)0xc),
        Forward = unchecked((int)0xd),
        Backward = unchecked((int)0xe),
        Undo = unchecked((int)0xf),
        Redo = unchecked((int)0x10),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.TappedEventHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.Input.TappedEventHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public delegate void TappedEventHandler(object sender, TappedRoutedEventArgs e);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.TappedRoutedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Input.TappedRoutedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ITappedRoutedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class TappedRoutedEventArgs : global::Microsoft.UI.Xaml.RoutedEventArgs, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<TappedRoutedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_ITappedRoutedEventArgs => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Input_TappedRoutedEventArgs;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_TappedRoutedEventArgs
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Input_TappedRoutedEventArgs;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Input_TappedRoutedEventArgs = ActivationFactory.Get("Microsoft.UI.Xaml.Input.TappedRoutedEventArgs");
                }
            }
        }

        public TappedRoutedEventArgs() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Input_TappedRoutedEventArgs, global::ABI.Microsoft.UI.Xaml.Input.ITappedRoutedEventArgsMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new TappedRoutedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<TappedRoutedEventArgs>.FromAbi(thisPtr);
        }

        internal TappedRoutedEventArgs(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.ITappedRoutedEventArgsMethods.IID);

        }


        public static bool operator ==(TappedRoutedEventArgs x, TappedRoutedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(TappedRoutedEventArgs x, TappedRoutedEventArgs y) => !(x == y);
        public bool Equals(TappedRoutedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is TappedRoutedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.Point GetPosition(global::Microsoft.UI.Xaml.UIElement relativeTo) => global::ABI.Microsoft.UI.Xaml.Input.ITappedRoutedEventArgsMethods.GetPosition(_objRef_global__Microsoft_UI_Xaml_Input_ITappedRoutedEventArgs, relativeTo);

        public bool Handled
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.ITappedRoutedEventArgsMethods.get_Handled(_objRef_global__Microsoft_UI_Xaml_Input_ITappedRoutedEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Input.ITappedRoutedEventArgsMethods.set_Handled(_objRef_global__Microsoft_UI_Xaml_Input_ITappedRoutedEventArgs, value);
        }

        public global::Microsoft.UI.Input.PointerDeviceType PointerDeviceType => global::ABI.Microsoft.UI.Xaml.Input.ITappedRoutedEventArgsMethods.get_PointerDeviceType(_objRef_global__Microsoft_UI_Xaml_Input_ITappedRoutedEventArgs);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<XYFocusKeyboardNavigationMode>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum XYFocusKeyboardNavigationMode : int
    {
        Auto = unchecked((int)0),
        Enabled = unchecked((int)0x1),
        Disabled = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<XYFocusNavigationStrategy>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum XYFocusNavigationStrategy : int
    {
        Auto = unchecked((int)0),
        Projection = unchecked((int)0x1),
        NavigationDirectionDistance = unchecked((int)0x2),
        RectilinearDistance = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<XYFocusNavigationStrategyOverride>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum XYFocusNavigationStrategyOverride : int
    {
        None = unchecked((int)0),
        Auto = unchecked((int)0x1),
        Projection = unchecked((int)0x2),
        NavigationDirectionDistance = unchecked((int)0x3),
        RectilinearDistance = unchecked((int)0x4),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Input.XamlUICommand))]
    [global::ABI.Microsoft.UI.Xaml.Input.XamlUICommandRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IXamlUICommand))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class XamlUICommand : global::Microsoft.UI.Xaml.DependencyObject, global::System.Windows.Input.ICommand, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<XamlUICommand>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommand;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommand()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommand, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Input.IXamlUICommandMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommand;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommand => ___objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommand ?? Make___objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommand();

        private volatile IObjectReference ___objRef_global__System_Windows_Input_ICommand;
        private IObjectReference Make___objRef_global__System_Windows_Input_ICommand()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Windows_Input_ICommand, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Windows.Input.ICommandMethods.IID), null);
            return ___objRef_global__System_Windows_Input_ICommand;
        }
        private IObjectReference _objRef_global__System_Windows_Input_ICommand => ___objRef_global__System_Windows_Input_ICommand ?? Make___objRef_global__System_Windows_Input_ICommand();



        private static class _IXamlUICommandFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommandFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommandFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommandFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommandFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Input.XamlUICommand", global::ABI.Microsoft.UI.Xaml.Input.IXamlUICommandFactoryMethods.IID);
                }
            }
        }

        public XamlUICommand():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(XamlUICommand);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IXamlUICommandFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommandFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Input.IXamlUICommandMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Input.XamlUICommand").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommandStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommandStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommandStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommandStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Input.XamlUICommand", global::ABI.Microsoft.UI.Xaml.Input.IXamlUICommandStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty AccessKeyProperty => global::ABI.Microsoft.UI.Xaml.Input.IXamlUICommandStaticsMethods.get_AccessKeyProperty(_objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommandStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty CommandProperty => global::ABI.Microsoft.UI.Xaml.Input.IXamlUICommandStaticsMethods.get_CommandProperty(_objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommandStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty DescriptionProperty => global::ABI.Microsoft.UI.Xaml.Input.IXamlUICommandStaticsMethods.get_DescriptionProperty(_objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommandStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty IconSourceProperty => global::ABI.Microsoft.UI.Xaml.Input.IXamlUICommandStaticsMethods.get_IconSourceProperty(_objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommandStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty KeyboardAcceleratorsProperty => global::ABI.Microsoft.UI.Xaml.Input.IXamlUICommandStaticsMethods.get_KeyboardAcceleratorsProperty(_objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommandStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty LabelProperty => global::ABI.Microsoft.UI.Xaml.Input.IXamlUICommandStaticsMethods.get_LabelProperty(_objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommandStatics);

        public static new XamlUICommand FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<XamlUICommand>.FromAbi(thisPtr);
        }

        protected internal XamlUICommand(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Input.IXamlUICommandMethods.IID);

        }


        public static bool operator ==(XamlUICommand x, XamlUICommand y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(XamlUICommand x, XamlUICommand y) => !(x == y);
        public bool Equals(XamlUICommand other) => this == other;
        public override bool Equals(object obj) => obj is XamlUICommand that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected XamlUICommand(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(XamlUICommand);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public void NotifyCanExecuteChanged() => global::ABI.Microsoft.UI.Xaml.Input.IXamlUICommandMethods.NotifyCanExecuteChanged(_objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommand);

        public event global::Windows.Foundation.TypedEventHandler<XamlUICommand, CanExecuteRequestedEventArgs> CanExecuteRequested
        {
            add => global::ABI.Microsoft.UI.Xaml.Input.IXamlUICommandMethods.Get_CanExecuteRequested2(_objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommand, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Input.IXamlUICommandMethods.Get_CanExecuteRequested2(_objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommand, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<XamlUICommand, ExecuteRequestedEventArgs> ExecuteRequested
        {
            add => global::ABI.Microsoft.UI.Xaml.Input.IXamlUICommandMethods.Get_ExecuteRequested2(_objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommand, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Input.IXamlUICommandMethods.Get_ExecuteRequested2(_objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommand, (IWinRTObject)this).Unsubscribe(value);
        }

        public bool CanExecute(object parameter) => global::ABI.System.Windows.Input.ICommandMethods.CanExecute(_objRef_global__System_Windows_Input_ICommand, parameter);

        public void Execute(object parameter) => global::ABI.System.Windows.Input.ICommandMethods.Execute(_objRef_global__System_Windows_Input_ICommand, parameter);

        public event global::System.EventHandler CanExecuteChanged
        {
            add => global::ABI.System.Windows.Input.ICommandMethods.Get_CanExecuteChanged2(_objRef_global__System_Windows_Input_ICommand, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.System.Windows.Input.ICommandMethods.Get_CanExecuteChanged2(_objRef_global__System_Windows_Input_ICommand, (IWinRTObject)this).Unsubscribe(value);
        }

        public string AccessKey
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IXamlUICommandMethods.get_AccessKey(_objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommand);
            set => global::ABI.Microsoft.UI.Xaml.Input.IXamlUICommandMethods.set_AccessKey(_objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommand, value);
        }

        public global::System.Windows.Input.ICommand Command
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IXamlUICommandMethods.get_Command(_objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommand);
            set => global::ABI.Microsoft.UI.Xaml.Input.IXamlUICommandMethods.set_Command(_objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommand, value);
        }

        public string Description
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IXamlUICommandMethods.get_Description(_objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommand);
            set => global::ABI.Microsoft.UI.Xaml.Input.IXamlUICommandMethods.set_Description(_objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommand, value);
        }

        public global::Microsoft.UI.Xaml.Controls.IconSource IconSource
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IXamlUICommandMethods.get_IconSource(_objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommand);
            set => global::ABI.Microsoft.UI.Xaml.Input.IXamlUICommandMethods.set_IconSource(_objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommand, value);
        }

        public global::System.Collections.Generic.IList<KeyboardAccelerator> KeyboardAccelerators => global::ABI.Microsoft.UI.Xaml.Input.IXamlUICommandMethods.get_KeyboardAccelerators(_objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommand);

        public string Label
        {
            get => global::ABI.Microsoft.UI.Xaml.Input.IXamlUICommandMethods.get_Label(_objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommand);
            set => global::ABI.Microsoft.UI.Xaml.Input.IXamlUICommandMethods.set_Label(_objRef_global__Microsoft_UI_Xaml_Input_IXamlUICommand, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.UI.Xaml.Input
{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct AccessKeyDisplayDismissedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyDisplayDismissedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyDisplayDismissedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class AccessKeyDisplayDismissedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct AccessKeyDisplayRequestedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyDisplayRequestedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyDisplayRequestedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class AccessKeyDisplayRequestedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct AccessKeyInvokedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyInvokedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyInvokedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class AccessKeyInvokedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct AccessKeyManager
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.AccessKeyManager obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.AccessKeyManager>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyManagerMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.AccessKeyManager obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IAccessKeyManagerMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.AccessKeyManager FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.AccessKeyManager.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.AccessKeyManager obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.AccessKeyManager>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.AccessKeyManager[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.AccessKeyManager>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.AccessKeyManager>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.AccessKeyManager[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.AccessKeyManager>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.AccessKeyManager[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.AccessKeyManager>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.AccessKeyManager[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.AccessKeyManager>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.AccessKeyManager>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.AccessKeyManager>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class AccessKeyManagerRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.AccessKeyManager(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CanExecuteRequestedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.CanExecuteRequestedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.CanExecuteRequestedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.ICanExecuteRequestedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.CanExecuteRequestedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.ICanExecuteRequestedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.CanExecuteRequestedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.CanExecuteRequestedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.CanExecuteRequestedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.CanExecuteRequestedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.CanExecuteRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.CanExecuteRequestedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.CanExecuteRequestedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.CanExecuteRequestedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.CanExecuteRequestedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.CanExecuteRequestedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.CanExecuteRequestedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.CanExecuteRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.CanExecuteRequestedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.CanExecuteRequestedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.CanExecuteRequestedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CanExecuteRequestedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.CanExecuteRequestedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CharacterReceivedRoutedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.ICharacterReceivedRoutedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.ICharacterReceivedRoutedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CharacterReceivedRoutedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ContextRequestedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.ContextRequestedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.ContextRequestedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IContextRequestedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.ContextRequestedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IContextRequestedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.ContextRequestedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.ContextRequestedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.ContextRequestedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ContextRequestedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.ContextRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ContextRequestedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ContextRequestedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.ContextRequestedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ContextRequestedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.ContextRequestedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ContextRequestedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.ContextRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ContextRequestedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ContextRequestedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ContextRequestedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ContextRequestedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.ContextRequestedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("F7A501B9-E277-5611-87B0-0E0607622183")]
    public static class DoubleTappedEventHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB9, 0x1, 0xA5, 0xF7, 0x77, 0xE2, 0x11, 0x56, 0x87, 0xB0, 0xE, 0x6, 0x7, 0x62, 0x21, 0x83 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe DoubleTappedEventHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(DoubleTappedEventHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.Input.DoubleTappedEventHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.DoubleTappedEventHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.DoubleTappedEventHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.DoubleTappedEventHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.Input.DoubleTappedEventHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.Input.DoubleTappedEventHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.Input.DoubleTappedEventHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.Input.DoubleTappedEventHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(object sender, global::Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs e)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __sender = default;
                ObjectReferenceValue __e = default;
                try
                {
                    __sender = MarshalInspectable<object>.CreateMarshaler2(sender);
                    __e = global::ABI.Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs.CreateMarshaler2(e);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__sender), MarshalInspectable<object>.GetAbi(__e)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__sender);
                    MarshalInspectable<object>.DisposeMarshaler(__e);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.DoubleTappedEventHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.DoubleTappedEventHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.DoubleTappedEventHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.DoubleTappedEventHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.DoubleTappedEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.DoubleTappedEventHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.DoubleTappedEventHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.DoubleTappedEventHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.DoubleTappedEventHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.DoubleTappedEventHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.DoubleTappedEventHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.DoubleTappedEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.DoubleTappedEventHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.DoubleTappedEventHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.DoubleTappedEventHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr e)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Input.DoubleTappedEventHandler>(thisPtr).Invoke(MarshalInspectable<object>.FromAbi(sender), global::ABI.Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs.FromAbi(e))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class DoubleTappedEventHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.Input.DoubleTappedEventHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = DoubleTappedEventHandler.IID,
                Vtable = DoubleTappedEventHandler.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DoubleTappedRoutedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IDoubleTappedRoutedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IDoubleTappedRoutedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DoubleTappedRoutedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ExecuteRequestedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.ExecuteRequestedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.ExecuteRequestedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IExecuteRequestedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.ExecuteRequestedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IExecuteRequestedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.ExecuteRequestedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.ExecuteRequestedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.ExecuteRequestedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ExecuteRequestedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.ExecuteRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ExecuteRequestedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ExecuteRequestedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.ExecuteRequestedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ExecuteRequestedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.ExecuteRequestedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ExecuteRequestedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.ExecuteRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ExecuteRequestedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ExecuteRequestedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ExecuteRequestedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ExecuteRequestedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.ExecuteRequestedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct FindNextElementOptions
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.FindNextElementOptions obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.FindNextElementOptions>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IFindNextElementOptionsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.FindNextElementOptions obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IFindNextElementOptionsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.FindNextElementOptions FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.FindNextElementOptions.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.FindNextElementOptions obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FindNextElementOptions>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.FindNextElementOptions[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FindNextElementOptions>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FindNextElementOptions>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.FindNextElementOptions[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FindNextElementOptions>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.FindNextElementOptions[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FindNextElementOptions>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.FindNextElementOptions[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FindNextElementOptions>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FindNextElementOptions>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FindNextElementOptions>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class FindNextElementOptionsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.FindNextElementOptions(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct FocusManager
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.FocusManager obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.FocusManager>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.FocusManager obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.FocusManager FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.FocusManager.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.FocusManager obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FocusManager>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.FocusManager[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FocusManager>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FocusManager>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.FocusManager[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FocusManager>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.FocusManager[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FocusManager>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.FocusManager[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FocusManager>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FocusManager>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FocusManager>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class FocusManagerRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.FocusManager(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct FocusManagerGotFocusEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.FocusManagerGotFocusEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.FocusManagerGotFocusEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerGotFocusEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.FocusManagerGotFocusEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerGotFocusEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.FocusManagerGotFocusEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.FocusManagerGotFocusEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.FocusManagerGotFocusEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FocusManagerGotFocusEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.FocusManagerGotFocusEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FocusManagerGotFocusEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FocusManagerGotFocusEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.FocusManagerGotFocusEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FocusManagerGotFocusEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.FocusManagerGotFocusEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FocusManagerGotFocusEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.FocusManagerGotFocusEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FocusManagerGotFocusEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FocusManagerGotFocusEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FocusManagerGotFocusEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class FocusManagerGotFocusEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.FocusManagerGotFocusEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct FocusManagerLostFocusEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.FocusManagerLostFocusEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.FocusManagerLostFocusEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerLostFocusEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.FocusManagerLostFocusEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IFocusManagerLostFocusEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.FocusManagerLostFocusEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.FocusManagerLostFocusEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.FocusManagerLostFocusEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FocusManagerLostFocusEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.FocusManagerLostFocusEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FocusManagerLostFocusEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FocusManagerLostFocusEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.FocusManagerLostFocusEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FocusManagerLostFocusEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.FocusManagerLostFocusEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FocusManagerLostFocusEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.FocusManagerLostFocusEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FocusManagerLostFocusEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FocusManagerLostFocusEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FocusManagerLostFocusEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class FocusManagerLostFocusEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.FocusManagerLostFocusEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct FocusMovementResult
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.FocusMovementResult obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.FocusMovementResult>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IFocusMovementResultMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.FocusMovementResult obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IFocusMovementResultMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.FocusMovementResult FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.FocusMovementResult.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.FocusMovementResult obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FocusMovementResult>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.FocusMovementResult[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FocusMovementResult>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FocusMovementResult>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.FocusMovementResult[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FocusMovementResult>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.FocusMovementResult[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FocusMovementResult>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.FocusMovementResult[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FocusMovementResult>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FocusMovementResult>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.FocusMovementResult>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class FocusMovementResultRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.FocusMovementResult(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct GettingFocusEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.GettingFocusEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.GettingFocusEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IGettingFocusEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.GettingFocusEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IGettingFocusEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.GettingFocusEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.GettingFocusEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.GettingFocusEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.GettingFocusEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.GettingFocusEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.GettingFocusEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.GettingFocusEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.GettingFocusEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.GettingFocusEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.GettingFocusEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.GettingFocusEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.GettingFocusEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.GettingFocusEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.GettingFocusEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.GettingFocusEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class GettingFocusEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.GettingFocusEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("FE23C5BD-4984-56B6-B92B-FC9D1216B24E")]
    public static class HoldingEventHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xBD, 0xC5, 0x23, 0xFE, 0x84, 0x49, 0xB6, 0x56, 0xB9, 0x2B, 0xFC, 0x9D, 0x12, 0x16, 0xB2, 0x4E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe HoldingEventHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(HoldingEventHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.Input.HoldingEventHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.HoldingEventHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.HoldingEventHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.HoldingEventHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.Input.HoldingEventHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.Input.HoldingEventHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.Input.HoldingEventHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.Input.HoldingEventHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(object sender, global::Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs e)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __sender = default;
                ObjectReferenceValue __e = default;
                try
                {
                    __sender = MarshalInspectable<object>.CreateMarshaler2(sender);
                    __e = global::ABI.Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs.CreateMarshaler2(e);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__sender), MarshalInspectable<object>.GetAbi(__e)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__sender);
                    MarshalInspectable<object>.DisposeMarshaler(__e);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.HoldingEventHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.HoldingEventHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.HoldingEventHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.HoldingEventHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.HoldingEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.HoldingEventHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.HoldingEventHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.HoldingEventHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.HoldingEventHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.HoldingEventHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.HoldingEventHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.HoldingEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.HoldingEventHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.HoldingEventHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.HoldingEventHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr e)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Input.HoldingEventHandler>(thisPtr).Invoke(MarshalInspectable<object>.FromAbi(sender), global::ABI.Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs.FromAbi(e))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class HoldingEventHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.Input.HoldingEventHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = HoldingEventHandler.IID,
                Vtable = HoldingEventHandler.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct HoldingRoutedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IHoldingRoutedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IHoldingRoutedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class HoldingRoutedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs(inspectable.ObjRef);
    }
    internal static class IAccessKeyDisplayDismissedEventArgsMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD8, 0x83, 0x5A, 0x12, 0x86, 0x7F, 0xA9, 0x5E, 0x90, 0x63, 0xB9, 0x40, 0x7E, 0x64, 0x45, 0x87 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("125A83D8-7F86-5EA9-9063-B9407E644587")]
    internal interface IAccessKeyDisplayDismissedEventArgs : global::Microsoft.UI.Xaml.Input.IAccessKeyDisplayDismissedEventArgs
    {
    }
    internal static class IAccessKeyDisplayRequestedEventArgsMethods
    {

        internal static unsafe string get_PressedKeys(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD8, 0x84, 0xED, 0xC4, 0x27, 0x2B, 0xB1, 0x59, 0x9C, 0xF0, 0x7F, 0x91, 0x64, 0xDE, 0x58, 0xCB };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C4ED84D8-2B27-59B1-9CF0-7F9164DE58CB")]
    internal interface IAccessKeyDisplayRequestedEventArgs : global::Microsoft.UI.Xaml.Input.IAccessKeyDisplayRequestedEventArgs
    {
    }
    internal static class IAccessKeyInvokedEventArgsMethods
    {

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA4, 0x11, 0xC, 0xD0, 0xFB, 0xF9, 0x7, 0x57, 0x96, 0x92, 0x98, 0xB8, 0xB, 0xB8, 0x54, 0x6D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D00C11A4-F9FB-5707-9692-98B80BB8546D")]
    internal interface IAccessKeyInvokedEventArgs : global::Microsoft.UI.Xaml.Input.IAccessKeyInvokedEventArgs
    {
    }
    internal static class IAccessKeyManagerMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x2, 0x44, 0x2A, 0x8F, 0x35, 0xA6, 0xDC, 0x53, 0xBC, 0x17, 0xDA, 0x91, 0x1E, 0xAB, 0xAA, 0xDE };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8F2A4402-A635-53DC-BC17-DA911EABAADE")]
    internal interface IAccessKeyManager : global::Microsoft.UI.Xaml.Input.IAccessKeyManager
    {
    }
    internal static class IAccessKeyManagerStaticsMethods
    {


        internal static unsafe void ExitDisplayMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[11](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }
        internal static unsafe bool get_AreKeyTipsEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_AreKeyTipsEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[8](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsDisplayModeEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<object, object>>> _IsDisplayModeEnabledChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<object, object>>> MakeIsDisplayModeEnabledChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _IsDisplayModeEnabledChanged_, new(), null);
            return _IsDisplayModeEnabledChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<object, object>>> _IsDisplayModeEnabledChanged => _IsDisplayModeEnabledChanged_ ?? MakeIsDisplayModeEnabledChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<object, object>> Get_IsDisplayModeEnabledChanged2(IObjectReference _obj, object _thisObj)
        {
            return _IsDisplayModeEnabledChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_object__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[9],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[10],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF7, 0xAE, 0x75, 0x33, 0x2F, 0x74, 0x84, 0x5E, 0xB7, 0x6F, 0xC1, 0x87, 0xE0, 0x82, 0x53, 0xBF };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("3375AEF7-742F-5E84-B76F-C187E08253BF")]
    internal interface IAccessKeyManagerStatics : global::Microsoft.UI.Xaml.Input.IAccessKeyManagerStatics
    {
    }
    internal static class IAccessKeyManagerStatics2Methods
    {


        internal static unsafe void EnterDisplayMode(IObjectReference _obj, global::Microsoft.UI.Xaml.XamlRoot XamlRoot)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __XamlRoot = default;
            try
            {
                __XamlRoot = global::ABI.Microsoft.UI.Xaml.XamlRoot.CreateMarshaler2(XamlRoot);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__XamlRoot)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__XamlRoot);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x63, 0x9F, 0x2C, 0x51, 0xAD, 0x24, 0xF2, 0x5D, 0xB8, 0xED, 0x47, 0x24, 0x6, 0xDB, 0x31, 0xC0 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("512C9F63-24AD-5DF2-B8ED-472406DB31C0")]
    internal interface IAccessKeyManagerStatics2 : global::Microsoft.UI.Xaml.Input.IAccessKeyManagerStatics2
    {
    }
    internal static class ICanExecuteRequestedEventArgsMethods
    {

        internal static unsafe bool get_CanExecute(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_CanExecute(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[8](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe object get_Parameter(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7D, 0x6D, 0xBF, 0xE4, 0xEB, 0xF6, 0xCA, 0x53, 0xA2, 0xD4, 0xC7, 0x41, 0xEC, 0x87, 0x1E, 0x38 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E4BF6D7D-F6EB-53CA-A2D4-C741EC871E38")]
    internal interface ICanExecuteRequestedEventArgs : global::Microsoft.UI.Xaml.Input.ICanExecuteRequestedEventArgs
    {
    }
    internal static class ICharacterReceivedRoutedEventArgsMethods
    {

        internal static unsafe char get_Character(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            ushort __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, ushort*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return (char)__retval;
        }

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[9](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.UI.Core.CorePhysicalKeyStatus get_KeyStatus(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.Windows.UI.Core.CorePhysicalKeyStatus __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.Windows.UI.Core.CorePhysicalKeyStatus*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.UI.Core.CorePhysicalKeyStatus.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.UI.Core.CorePhysicalKeyStatus.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xBB, 0xA5, 0x6C, 0xE2, 0xC3, 0x34, 0x1E, 0x5C, 0x9A, 0x16, 0x0, 0xB8, 0xB, 0x7, 0xA8, 0x99 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E26CA5BB-34C3-5C1E-9A16-00B80B07A899")]
    internal interface ICharacterReceivedRoutedEventArgs : global::Microsoft.UI.Xaml.Input.ICharacterReceivedRoutedEventArgs
    {
    }
    internal static class IContextRequestedEventArgsMethods
    {


        internal static unsafe bool TryGetPosition(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement relativeTo, out global::Windows.Foundation.Point point)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __relativeTo = default;
            global::Windows.Foundation.Point __point = default;
            byte __retval = default;
            try
            {
                __relativeTo = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(relativeTo);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Windows.Foundation.Point*, byte*, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__relativeTo), &__point, &__retval));
                global::System.GC.KeepAlive(_obj);
                point = __point;
                return __retval != 0;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__relativeTo);
            }
        }
        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x98, 0xCB, 0xED, 0xBC, 0xB5, 0x77, 0xC0, 0x53, 0x80, 0x2E, 0xFD, 0x52, 0xF3, 0x80, 0x6E, 0x51 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("BCEDCB98-77B5-53C0-802E-FD52F3806E51")]
    internal interface IContextRequestedEventArgs : global::Microsoft.UI.Xaml.Input.IContextRequestedEventArgs
    {
    }
    internal static class IDoubleTappedRoutedEventArgsMethods
    {


        internal static unsafe global::Windows.Foundation.Point GetPosition(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement relativeTo)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __relativeTo = default;
            global::Windows.Foundation.Point __retval = default;
            try
            {
                __relativeTo = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(relativeTo);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__relativeTo), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__relativeTo);
            }
        }
        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[8](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Input.PointerDeviceType get_PointerDeviceType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.PointerDeviceType __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.PointerDeviceType*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x9D, 0x54, 0xB9, 0x32, 0xD8, 0x11, 0xA5, 0x53, 0xA9, 0x53, 0x2, 0x40, 0x95, 0x37, 0xA1, 0x1F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("32B9549D-11D8-53A5-A953-02409537A11F")]
    internal interface IDoubleTappedRoutedEventArgs : global::Microsoft.UI.Xaml.Input.IDoubleTappedRoutedEventArgs
    {
    }
    internal static class IExecuteRequestedEventArgsMethods
    {

        internal static unsafe object get_Parameter(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC, 0xFD, 0xA9, 0xE1, 0xD0, 0x34, 0xE2, 0x5A, 0x8F, 0x5D, 0x37, 0x7E, 0x7A, 0x8A, 0x27, 0x8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E1A9FD0C-34D0-5AE2-8F5D-377E7A8A2708")]
    internal interface IExecuteRequestedEventArgs : global::Microsoft.UI.Xaml.Input.IExecuteRequestedEventArgs
    {
    }
    internal static class IFindNextElementOptionsMethods
    {

        internal static unsafe global::Windows.Foundation.Rect get_ExclusionRect(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Rect __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ExclusionRect(IObjectReference _obj, global::Windows.Foundation.Rect value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.Foundation.Rect get_HintRect(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Rect __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_HintRect(IObjectReference _obj, global::Windows.Foundation.Rect value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject get_SearchRoot(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SearchRoot(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategyOverride get_XYFocusNavigationStrategyOverride(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategyOverride __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategyOverride*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_XYFocusNavigationStrategyOverride(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategyOverride value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.XYFocusNavigationStrategyOverride, int>**)ThisPtr)[13](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x6B, 0xE7, 0x88, 0x7F, 0x17, 0x74, 0x47, 0x54, 0xAE, 0xD4, 0x2F, 0xAB, 0xD2, 0x91, 0xBD, 0xC6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("7F88E76B-7417-5447-AED4-2FABD291BDC6")]
    internal interface IFindNextElementOptions : global::Microsoft.UI.Xaml.Input.IFindNextElementOptions
    {
    }
    internal static class IFocusManagerMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC5, 0x7B, 0xD0, 0x9F, 0xD4, 0xD2, 0xFE, 0x53, 0xA3, 0x1A, 0x84, 0x6D, 0xE8, 0xB7, 0xA2, 0x57 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("9FD07BC5-D2D4-53FE-A31A-846DE8B7A257")]
    internal interface IFocusManager : global::Microsoft.UI.Xaml.Input.IFocusManager
    {
    }
    internal static class IFocusManagerGotFocusEventArgsMethods
    {

        internal static unsafe Guid get_CorrelationId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            Guid __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, Guid*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject get_NewFocusedElement(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x41, 0xA3, 0xAC, 0x50, 0x19, 0x45, 0xCF, 0x59, 0x83, 0xB1, 0xC9, 0xC4, 0x5C, 0xFD, 0xB8, 0x16 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("50ACA341-4519-59CF-83B1-C9C45CFDB816")]
    internal interface IFocusManagerGotFocusEventArgs : global::Microsoft.UI.Xaml.Input.IFocusManagerGotFocusEventArgs
    {
    }
    internal static class IFocusManagerLostFocusEventArgsMethods
    {

        internal static unsafe Guid get_CorrelationId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            Guid __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, Guid*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject get_OldFocusedElement(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3F, 0x2C, 0xAF, 0xFD, 0x2E, 0xA2, 0x2, 0x59, 0xAB, 0xCE, 0xB6, 0x7, 0x58, 0xFB, 0xED, 0x1E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("FDAF2C3F-A22E-5902-ABCE-B60758FBED1E")]
    internal interface IFocusManagerLostFocusEventArgs : global::Microsoft.UI.Xaml.Input.IFocusManagerLostFocusEventArgs
    {
    }
    internal static class IFocusManagerStaticsMethods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.UI.Xaml.Input.FocusMovementResult> TryFocusAsync(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject element, global::Microsoft.UI.Xaml.FocusState value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            IntPtr __retval = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(element);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Microsoft.UI.Xaml.FocusState, IntPtr*, int>**)ThisPtr)[14](ThisPtr, MarshalInspectable<object>.GetAbi(__element), value, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_UI_Xaml_Input_FocusMovementResult.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.UI.Xaml.Input.FocusMovementResult>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.UI.Xaml.Input.FocusMovementResult>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.UI.Xaml.Input.FocusMovementResult> TryMoveFocusAsync(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.FocusNavigationDirection, IntPtr*, int>**)ThisPtr)[15](ThisPtr, focusNavigationDirection, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_UI_Xaml_Input_FocusMovementResult.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.UI.Xaml.Input.FocusMovementResult>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.UI.Xaml.Input.FocusMovementResult>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.UI.Xaml.Input.FocusMovementResult> TryMoveFocusAsync(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, global::Microsoft.UI.Xaml.Input.FindNextElementOptions focusNavigationOptions)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __focusNavigationOptions = default;
            IntPtr __retval = default;
            try
            {
                __focusNavigationOptions = global::ABI.Microsoft.UI.Xaml.Input.FindNextElementOptions.CreateMarshaler2(focusNavigationOptions);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.FocusNavigationDirection, IntPtr, IntPtr*, int>**)ThisPtr)[16](ThisPtr, focusNavigationDirection, MarshalInspectable<object>.GetAbi(__focusNavigationOptions), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_UI_Xaml_Input_FocusMovementResult.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.UI.Xaml.Input.FocusMovementResult>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__focusNavigationOptions);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.UI.Xaml.Input.FocusMovementResult>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool TryMoveFocus(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, global::Microsoft.UI.Xaml.Input.FindNextElementOptions focusNavigationOptions)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __focusNavigationOptions = default;
            byte __retval = default;
            try
            {
                __focusNavigationOptions = global::ABI.Microsoft.UI.Xaml.Input.FindNextElementOptions.CreateMarshaler2(focusNavigationOptions);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.FocusNavigationDirection, IntPtr, byte*, int>**)ThisPtr)[17](ThisPtr, focusNavigationDirection, MarshalInspectable<object>.GetAbi(__focusNavigationOptions), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__focusNavigationOptions);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject FindNextElement(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.FocusNavigationDirection, IntPtr*, int>**)ThisPtr)[18](ThisPtr, focusNavigationDirection, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject FindFirstFocusableElement(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject searchScope)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __searchScope = default;
            IntPtr __retval = default;
            try
            {
                __searchScope = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(searchScope);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[19](ThisPtr, MarshalInspectable<object>.GetAbi(__searchScope), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__searchScope);
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject FindLastFocusableElement(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject searchScope)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __searchScope = default;
            IntPtr __retval = default;
            try
            {
                __searchScope = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(searchScope);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[20](ThisPtr, MarshalInspectable<object>.GetAbi(__searchScope), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__searchScope);
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject FindNextElement(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, global::Microsoft.UI.Xaml.Input.FindNextElementOptions focusNavigationOptions)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __focusNavigationOptions = default;
            IntPtr __retval = default;
            try
            {
                __focusNavigationOptions = global::ABI.Microsoft.UI.Xaml.Input.FindNextElementOptions.CreateMarshaler2(focusNavigationOptions);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.FocusNavigationDirection, IntPtr, IntPtr*, int>**)ThisPtr)[21](ThisPtr, focusNavigationDirection, MarshalInspectable<object>.GetAbi(__focusNavigationOptions), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__focusNavigationOptions);
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.UIElement FindNextFocusableElement(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.FocusNavigationDirection, IntPtr*, int>**)ThisPtr)[22](ThisPtr, focusNavigationDirection, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.UIElement.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.UIElement.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.UIElement FindNextFocusableElement(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, global::Windows.Foundation.Rect hintRect)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.FocusNavigationDirection, global::Windows.Foundation.Rect, IntPtr*, int>**)ThisPtr)[23](ThisPtr, focusNavigationDirection, hintRect, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.UIElement.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.UIElement.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool TryMoveFocus(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.FocusNavigationDirection, byte*, int>**)ThisPtr)[24](ThisPtr, focusNavigationDirection, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe object GetFocusedElement(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[25](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }

        internal static unsafe object GetFocusedElement(IObjectReference _obj, global::Microsoft.UI.Xaml.XamlRoot xamlRoot)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __xamlRoot = default;
            IntPtr __retval = default;
            try
            {
                __xamlRoot = global::ABI.Microsoft.UI.Xaml.XamlRoot.CreateMarshaler2(xamlRoot);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[26](ThisPtr, MarshalInspectable<object>.GetAbi(__xamlRoot), &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__xamlRoot);
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<global::Microsoft.UI.Xaml.Input.GettingFocusEventArgs>>> _GettingFocus_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<global::Microsoft.UI.Xaml.Input.GettingFocusEventArgs>>> MakeGettingFocusTable()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_EventHandler_1_Microsoft_UI_Xaml_Input_GettingFocusEventArgs.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref _GettingFocus_, new(), null);
            return _GettingFocus_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<global::Microsoft.UI.Xaml.Input.GettingFocusEventArgs>>> _GettingFocus => _GettingFocus_ ?? MakeGettingFocusTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<global::Microsoft.UI.Xaml.Input.GettingFocusEventArgs>> Get_GettingFocus2(IObjectReference _obj, object _thisObj)
        {
            return _GettingFocus.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return  new global::ABI.WinRT.Interop.EventHandlerEventSource<global::Microsoft.UI.Xaml.Input.GettingFocusEventArgs>(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[10],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[11],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<global::Microsoft.UI.Xaml.Input.FocusManagerGotFocusEventArgs>>> _GotFocus_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<global::Microsoft.UI.Xaml.Input.FocusManagerGotFocusEventArgs>>> MakeGotFocusTable()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_EventHandler_1_Microsoft_UI_Xaml_Input_FocusManagerGotFocusEventArgs.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref _GotFocus_, new(), null);
            return _GotFocus_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<global::Microsoft.UI.Xaml.Input.FocusManagerGotFocusEventArgs>>> _GotFocus => _GotFocus_ ?? MakeGotFocusTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<global::Microsoft.UI.Xaml.Input.FocusManagerGotFocusEventArgs>> Get_GotFocus2(IObjectReference _obj, object _thisObj)
        {
            return _GotFocus.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return  new global::ABI.WinRT.Interop.EventHandlerEventSource<global::Microsoft.UI.Xaml.Input.FocusManagerGotFocusEventArgs>(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[6],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[7],
                1);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<global::Microsoft.UI.Xaml.Input.LosingFocusEventArgs>>> _LosingFocus_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<global::Microsoft.UI.Xaml.Input.LosingFocusEventArgs>>> MakeLosingFocusTable()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_EventHandler_1_Microsoft_UI_Xaml_Input_LosingFocusEventArgs.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref _LosingFocus_, new(), null);
            return _LosingFocus_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<global::Microsoft.UI.Xaml.Input.LosingFocusEventArgs>>> _LosingFocus => _LosingFocus_ ?? MakeLosingFocusTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<global::Microsoft.UI.Xaml.Input.LosingFocusEventArgs>> Get_LosingFocus2(IObjectReference _obj, object _thisObj)
        {
            return _LosingFocus.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return  new global::ABI.WinRT.Interop.EventHandlerEventSource<global::Microsoft.UI.Xaml.Input.LosingFocusEventArgs>(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[12],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[13],
                2);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<global::Microsoft.UI.Xaml.Input.FocusManagerLostFocusEventArgs>>> _LostFocus_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<global::Microsoft.UI.Xaml.Input.FocusManagerLostFocusEventArgs>>> MakeLostFocusTable()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_EventHandler_1_Microsoft_UI_Xaml_Input_FocusManagerLostFocusEventArgs.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref _LostFocus_, new(), null);
            return _LostFocus_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<global::Microsoft.UI.Xaml.Input.FocusManagerLostFocusEventArgs>>> _LostFocus => _LostFocus_ ?? MakeLostFocusTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<global::Microsoft.UI.Xaml.Input.FocusManagerLostFocusEventArgs>> Get_LostFocus2(IObjectReference _obj, object _thisObj)
        {
            return _LostFocus.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return  new global::ABI.WinRT.Interop.EventHandlerEventSource<global::Microsoft.UI.Xaml.Input.FocusManagerLostFocusEventArgs>(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[8],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[9],
                3);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x4, 0xCE, 0x3D, 0xE7, 0x3A, 0xE2, 0xB3, 0x5F, 0x96, 0xAB, 0x7D, 0xF0, 0x4C, 0x51, 0xDF, 0xF2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E73DCE04-E23A-5FB3-96AB-7DF04C51DFF2")]
    internal interface IFocusManagerStatics : global::Microsoft.UI.Xaml.Input.IFocusManagerStatics
    {
    }
    internal static class IFocusMovementResultMethods
    {

        internal static unsafe bool get_Succeeded(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFD, 0x59, 0x62, 0xA4, 0xDD, 0x3E, 0x4B, 0x55, 0xA1, 0x88, 0xA, 0x47, 0xB7, 0x1E, 0x4E, 0x1A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A46259FD-3EDD-554B-A188-0A47B71E4E1A")]
    internal interface IFocusMovementResult : global::Microsoft.UI.Xaml.Input.IFocusMovementResult
    {
    }
    internal static class IGettingFocusEventArgsMethods
    {


        internal static unsafe bool TryCancel(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[17](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool TrySetNewFocusedElement(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject element)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            byte __retval = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(element);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte*, int>**)ThisPtr)[18](ThisPtr, MarshalInspectable<object>.GetAbi(__element), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
            }
        }
        internal static unsafe bool get_Cancel(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Cancel(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[15](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe Guid get_CorrelationId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            Guid __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, Guid*, int>**)ThisPtr)[16](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.Input.FocusNavigationDirection get_Direction(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Input.FocusNavigationDirection __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.FocusNavigationDirection*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.FocusState get_FocusState(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.FocusState __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.FocusState*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[12](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Input.FocusInputDeviceKind get_InputDevice(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Input.FocusInputDeviceKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.FocusInputDeviceKind*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject get_NewFocusedElement(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_NewFocusedElement(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject get_OldFocusedElement(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF0, 0x3A, 0xFD, 0x37, 0x3C, 0xBD, 0xF5, 0x5B, 0xA9, 0xCD, 0x71, 0xA1, 0xE8, 0x7A, 0xF9, 0x50 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("37FD3AF0-BD3C-5BF5-A9CD-71A1E87AF950")]
    internal interface IGettingFocusEventArgs : global::Microsoft.UI.Xaml.Input.IGettingFocusEventArgs
    {
    }
    internal static class IHoldingRoutedEventArgsMethods
    {


        internal static unsafe global::Windows.Foundation.Point GetPosition(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement relativeTo)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __relativeTo = default;
            global::Windows.Foundation.Point __retval = default;
            try
            {
                __relativeTo = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(relativeTo);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[10](ThisPtr, MarshalInspectable<object>.GetAbi(__relativeTo), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__relativeTo);
            }
        }
        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[9](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Input.HoldingState get_HoldingState(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.HoldingState __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.HoldingState*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Input.PointerDeviceType get_PointerDeviceType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.PointerDeviceType __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.PointerDeviceType*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB2, 0xA4, 0x72, 0x82, 0x21, 0x22, 0x1E, 0x55, 0xB0, 0xBB, 0x16, 0xE2, 0x91, 0x38, 0xAB, 0x20 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8272A4B2-2221-551E-B0BB-16E29138AB20")]
    internal interface IHoldingRoutedEventArgs : global::Microsoft.UI.Xaml.Input.IHoldingRoutedEventArgs
    {
    }
    internal static class IInertiaExpansionBehaviorMethods
    {

        internal static unsafe double get_DesiredDeceleration(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_DesiredDeceleration(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_DesiredExpansion(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_DesiredExpansion(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB7, 0x29, 0x0, 0xD6, 0xCD, 0xF0, 0xEA, 0x5A, 0xAB, 0xE5, 0x74, 0x10, 0xD0, 0x91, 0x18, 0xC6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D60029B7-F0CD-5AEA-ABE5-7410D09118C6")]
    internal interface IInertiaExpansionBehavior : global::Microsoft.UI.Xaml.Input.IInertiaExpansionBehavior
    {
    }
    internal static class IInertiaRotationBehaviorMethods
    {

        internal static unsafe double get_DesiredDeceleration(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_DesiredDeceleration(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_DesiredRotation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_DesiredRotation(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3, 0xBD, 0xB4, 0x27, 0x49, 0x91, 0x91, 0x56, 0xBC, 0xE5, 0xFA, 0x33, 0xB3, 0x2C, 0x4A, 0x81 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("27B4BD03-9149-5691-BCE5-FA33B32C4A81")]
    internal interface IInertiaRotationBehavior : global::Microsoft.UI.Xaml.Input.IInertiaRotationBehavior
    {
    }
    internal static class IInertiaTranslationBehaviorMethods
    {

        internal static unsafe double get_DesiredDeceleration(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_DesiredDeceleration(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_DesiredDisplacement(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_DesiredDisplacement(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF5, 0x1C, 0xF9, 0xD4, 0x17, 0x33, 0x14, 0x59, 0xB2, 0x5A, 0xEA, 0x6E, 0xE5, 0x5B, 0x96, 0xD0 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D4F91CF5-3317-5914-B25A-EA6EE55B96D0")]
    internal interface IInertiaTranslationBehavior : global::Microsoft.UI.Xaml.Input.IInertiaTranslationBehavior
    {
    }
    internal static class IInputScopeMethods
    {

        internal static unsafe global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Input.InputScopeName> get_Names(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Xaml_Input_InputScopeName.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Input.InputScopeName>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Input.InputScopeName>>.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB1, 0x58, 0xEA, 0x76, 0x10, 0xE9, 0x76, 0x51, 0x91, 0x47, 0x69, 0x5C, 0xC9, 0x5E, 0x7D, 0xA2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("76EA58B1-E910-5176-9147-695CC95E7DA2")]
    internal interface IInputScope : global::Microsoft.UI.Xaml.Input.IInputScope
    {
    }
    internal static class IInputScopeNameMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Input.InputScopeNameValue get_NameValue(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Input.InputScopeNameValue __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.InputScopeNameValue*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_NameValue(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.InputScopeNameValue value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.InputScopeNameValue, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x6D, 0xA6, 0x99, 0xEE, 0xD0, 0x28, 0xCB, 0x53, 0x82, 0xEE, 0x1B, 0x6E, 0xE5, 0x8B, 0xCC, 0x35 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("EE99A66D-28D0-53CB-82EE-1B6EE58BCC35")]
    internal interface IInputScopeName : global::Microsoft.UI.Xaml.Input.IInputScopeName
    {
    }
    internal static class IInputScopeNameFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Input.InputScopeName CreateInstance(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.InputScopeNameValue nameValue)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.InputScopeNameValue, IntPtr*, int>**)ThisPtr)[6](ThisPtr, nameValue, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Input.InputScopeName.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Input.InputScopeName.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFD, 0x2E, 0xEC, 0xFE, 0x9, 0xBC, 0xD6, 0x5C, 0x9B, 0x47, 0x6D, 0x35, 0xD1, 0xD8, 0x7C, 0x61 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("FEEC2EFD-BC09-5CD6-9B47-6D35D1D87C61")]
    internal interface IInputScopeNameFactory : global::Microsoft.UI.Xaml.Input.IInputScopeNameFactory
    {
    }
    internal static class IKeyRoutedEventArgsMethods
    {

        internal static unsafe string get_DeviceId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[9](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.System.VirtualKey get_Key(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.System.VirtualKey __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.System.VirtualKey*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.UI.Core.CorePhysicalKeyStatus get_KeyStatus(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.Windows.UI.Core.CorePhysicalKeyStatus __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.Windows.UI.Core.CorePhysicalKeyStatus*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.UI.Core.CorePhysicalKeyStatus.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.UI.Core.CorePhysicalKeyStatus.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.System.VirtualKey get_OriginalKey(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.System.VirtualKey __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.System.VirtualKey*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7, 0x70, 0x35, 0xEE, 0xD6, 0xA2, 0x75, 0x5C, 0x94, 0x31, 0x5, 0xFD, 0x66, 0xEC, 0x79, 0x15 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("EE357007-A2D6-5C75-9431-05FD66EC7915")]
    internal interface IKeyRoutedEventArgs : global::Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs
    {
    }
    internal static class IKeyboardAcceleratorMethods
    {

        internal static unsafe bool get_IsEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[11](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.System.VirtualKey get_Key(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.System.VirtualKey __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.System.VirtualKey*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Key(IObjectReference _obj, global::Windows.System.VirtualKey value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.System.VirtualKey, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.System.VirtualKeyModifiers get_Modifiers(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.System.VirtualKeyModifiers __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.System.VirtualKeyModifiers*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Modifiers(IObjectReference _obj, global::Windows.System.VirtualKeyModifiers value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.System.VirtualKeyModifiers, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject get_ScopeOwner(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ScopeOwner(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[13](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Input.KeyboardAccelerator, global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs>>> _Invoked_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Input.KeyboardAccelerator, global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs>>> MakeInvokedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Invoked_, new(), null);
            return _Invoked_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Input.KeyboardAccelerator, global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs>>> _Invoked => _Invoked_ ?? MakeInvokedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Input.KeyboardAccelerator, global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs>> Get_Invoked2(IObjectReference _obj, object _thisObj)
        {
            return _Invoked.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_Input_KeyboardAccelerator__global__Microsoft_UI_Xaml_Input_KeyboardAcceleratorInvokedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[14],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[15],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE2, 0xF1, 0x8B, 0x6F, 0x91, 0x4E, 0xF9, 0x5C, 0xA6, 0xBE, 0x47, 0x70, 0xCA, 0xF3, 0xD7, 0x70 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("6F8BF1E2-4E91-5CF9-A6BE-4770CAF3D770")]
    internal interface IKeyboardAccelerator : global::Microsoft.UI.Xaml.Input.IKeyboardAccelerator
    {
    }
    internal static class IKeyboardAcceleratorFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Input.KeyboardAccelerator CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Input.KeyboardAccelerator.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Input.KeyboardAccelerator.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA, 0x41, 0x1D, 0xCA, 0x2A, 0xAF, 0xB9, 0x51, 0xA1, 0xDE, 0x6C, 0xA, 0xF9, 0xF3, 0xB5, 0x98 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("CA1D410A-AF2A-51B9-A1DE-6C0AF9F3B598")]
    internal interface IKeyboardAcceleratorFactory : global::Microsoft.UI.Xaml.Input.IKeyboardAcceleratorFactory
    {
    }
    internal static class IKeyboardAcceleratorInvokedEventArgsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject get_Element(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Input.KeyboardAccelerator get_KeyboardAccelerator(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Input.KeyboardAccelerator.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Input.KeyboardAccelerator.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB0, 0xFD, 0xC9, 0x62, 0x74, 0xB5, 0x7D, 0x52, 0x97, 0xEB, 0x5C, 0x7F, 0x67, 0x44, 0x41, 0xE0 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("62C9FDB0-B574-527D-97EB-5C7F674441E0")]
    internal interface IKeyboardAcceleratorInvokedEventArgs : global::Microsoft.UI.Xaml.Input.IKeyboardAcceleratorInvokedEventArgs
    {
    }
    internal static class IKeyboardAcceleratorStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IsEnabledProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_KeyProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ModifiersProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ScopeOwnerProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xCA, 0x74, 0xE6, 0x73, 0xF4, 0x73, 0x77, 0x5E, 0xB8, 0xD6, 0xFF, 0x78, 0x52, 0xA6, 0x3B, 0xB };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("73E674CA-73F4-5E77-B8D6-FF7852A63B0B")]
    internal interface IKeyboardAcceleratorStatics : global::Microsoft.UI.Xaml.Input.IKeyboardAcceleratorStatics
    {
    }
    internal static class ILosingFocusEventArgsMethods
    {


        internal static unsafe bool TryCancel(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[17](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool TrySetNewFocusedElement(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject element)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            byte __retval = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(element);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte*, int>**)ThisPtr)[18](ThisPtr, MarshalInspectable<object>.GetAbi(__element), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
            }
        }
        internal static unsafe bool get_Cancel(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Cancel(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[15](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe Guid get_CorrelationId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            Guid __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, Guid*, int>**)ThisPtr)[16](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.Input.FocusNavigationDirection get_Direction(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Input.FocusNavigationDirection __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.FocusNavigationDirection*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.FocusState get_FocusState(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.FocusState __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.FocusState*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[12](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Input.FocusInputDeviceKind get_InputDevice(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Input.FocusInputDeviceKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.FocusInputDeviceKind*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject get_NewFocusedElement(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_NewFocusedElement(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject get_OldFocusedElement(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFA, 0x5F, 0xE, 0xFA, 0x1B, 0x2B, 0xF8, 0x52, 0xBB, 0x66, 0xE3, 0x5F, 0x51, 0xE7, 0x3C, 0xF3 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("FA0E5FFA-2B1B-52F8-BB66-E35F51E73CF3")]
    internal interface ILosingFocusEventArgs : global::Microsoft.UI.Xaml.Input.ILosingFocusEventArgs
    {
    }
    internal static class IManipulationCompletedRoutedEventArgsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.UIElement get_Container(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.UIElement.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.UIElement.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Input.ManipulationDelta get_Cumulative(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.ManipulationDelta __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.ManipulationDelta*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[12](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsInertial(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe global::Microsoft.UI.Input.PointerDeviceType get_PointerDeviceType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.PointerDeviceType __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.PointerDeviceType*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.Point get_Position(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Input.ManipulationVelocities get_Velocities(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.ManipulationVelocities __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.ManipulationVelocities*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x4E, 0x9E, 0xBE, 0xE3, 0xFB, 0xC5, 0x59, 0x58, 0xA8, 0x1D, 0xCE, 0x12, 0xFC, 0x3A, 0x2F, 0x4D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E3BE9E4E-C5FB-5859-A81D-CE12FC3A2F4D")]
    internal interface IManipulationCompletedRoutedEventArgs : global::Microsoft.UI.Xaml.Input.IManipulationCompletedRoutedEventArgs
    {
    }
    internal static class IManipulationDeltaRoutedEventArgsMethods
    {


        internal static unsafe void Complete(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[15](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }
        internal static unsafe global::Microsoft.UI.Xaml.UIElement get_Container(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.UIElement.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.UIElement.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Input.ManipulationDelta get_Cumulative(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.ManipulationDelta __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.ManipulationDelta*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Input.ManipulationDelta get_Delta(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.ManipulationDelta __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.ManipulationDelta*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[13](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsInertial(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe global::Microsoft.UI.Input.PointerDeviceType get_PointerDeviceType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.PointerDeviceType __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.PointerDeviceType*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.Point get_Position(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Input.ManipulationVelocities get_Velocities(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.ManipulationVelocities __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.ManipulationVelocities*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x45, 0x97, 0x36, 0x51, 0xF, 0x96, 0xAC, 0x54, 0x93, 0xFA, 0x76, 0x3D, 0x22, 0x91, 0xD, 0xEA };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("51369745-960F-54AC-93FA-763D22910DEA")]
    internal interface IManipulationDeltaRoutedEventArgs : global::Microsoft.UI.Xaml.Input.IManipulationDeltaRoutedEventArgs
    {
    }
    internal static class IManipulationInertiaStartingRoutedEventArgsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.UIElement get_Container(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.UIElement.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.UIElement.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Input.ManipulationDelta get_Cumulative(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.ManipulationDelta __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.ManipulationDelta*, int>**)ThisPtr)[17](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Input.ManipulationDelta get_Delta(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.ManipulationDelta __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.ManipulationDelta*, int>**)ThisPtr)[16](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.Input.InertiaExpansionBehavior get_ExpansionBehavior(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Input.InertiaExpansionBehavior.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Input.InertiaExpansionBehavior.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ExpansionBehavior(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.InertiaExpansionBehavior value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Input.InertiaExpansionBehavior.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[14](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Input.PointerDeviceType get_PointerDeviceType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.PointerDeviceType __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.PointerDeviceType*, int>**)ThisPtr)[15](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.Input.InertiaRotationBehavior get_RotationBehavior(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Input.InertiaRotationBehavior.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Input.InertiaRotationBehavior.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_RotationBehavior(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.InertiaRotationBehavior value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Input.InertiaRotationBehavior.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[10](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Input.InertiaTranslationBehavior get_TranslationBehavior(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Input.InertiaTranslationBehavior.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Input.InertiaTranslationBehavior.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_TranslationBehavior(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.InertiaTranslationBehavior value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Input.InertiaTranslationBehavior.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[12](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Input.ManipulationVelocities get_Velocities(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.ManipulationVelocities __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.ManipulationVelocities*, int>**)ThisPtr)[18](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xBE, 0x10, 0xD5, 0x17, 0x14, 0x55, 0x52, 0x59, 0x9A, 0xFD, 0x95, 0x9B, 0x60, 0xAB, 0x93, 0x94 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("17D510BE-5514-5952-9AFD-959B60AB9394")]
    internal interface IManipulationInertiaStartingRoutedEventArgs : global::Microsoft.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgs
    {
    }
    internal static class IManipulationPivotMethods
    {

        internal static unsafe global::Windows.Foundation.Point get_Center(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Center(IObjectReference _obj, global::Windows.Foundation.Point value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_Radius(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Radius(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA4, 0xAB, 0x6B, 0x28, 0x3D, 0x31, 0x7C, 0x50, 0xAD, 0xC5, 0xF7, 0x39, 0x73, 0x2C, 0xEA, 0x27 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("286BABA4-313D-507C-ADC5-F739732CEA27")]
    internal interface IManipulationPivot : global::Microsoft.UI.Xaml.Input.IManipulationPivot
    {
    }
    internal static class IManipulationPivotFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Input.ManipulationPivot CreateInstanceWithCenterAndRadius(IObjectReference _obj, global::Windows.Foundation.Point center, double radius)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point, double, IntPtr*, int>**)ThisPtr)[6](ThisPtr, center, radius, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Input.ManipulationPivot.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Input.ManipulationPivot.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xCD, 0x3C, 0x14, 0x67, 0x6C, 0xEA, 0xE2, 0x5F, 0xBE, 0xF2, 0xAD, 0xCB, 0xD7, 0xAF, 0x52, 0xFD };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("67143CCD-EA6C-5FE2-BEF2-ADCBD7AF52FD")]
    internal interface IManipulationPivotFactory : global::Microsoft.UI.Xaml.Input.IManipulationPivotFactory
    {
    }
    internal static class IManipulationStartedRoutedEventArgsMethods
    {


        internal static unsafe void Complete(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[12](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }
        internal static unsafe global::Microsoft.UI.Xaml.UIElement get_Container(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.UIElement.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.UIElement.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Input.ManipulationDelta get_Cumulative(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.ManipulationDelta __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.ManipulationDelta*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[9](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Input.PointerDeviceType get_PointerDeviceType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.PointerDeviceType __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.PointerDeviceType*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.Point get_Position(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x50, 0x79, 0x85, 0x61, 0x21, 0x58, 0x52, 0x56, 0x9F, 0xDF, 0xC6, 0x27, 0x7C, 0x58, 0x86, 0xF5 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("61857950-5821-5652-9FDF-C6277C5886F5")]
    internal interface IManipulationStartedRoutedEventArgs : global::Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgs
    {
    }
    internal static class IManipulationStartedRoutedEventArgsFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xDE, 0xB0, 0x81, 0x56, 0xA7, 0x3F, 0x3E, 0x50, 0x9C, 0x46, 0xA8, 0x3, 0x39, 0x76, 0x2, 0x92 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("5681B0DE-3FA7-503E-9C46-A80339760292")]
    internal interface IManipulationStartedRoutedEventArgsFactory : global::Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgsFactory
    {
    }
    internal static class IManipulationStartingRoutedEventArgsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.UIElement get_Container(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.UIElement.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.UIElement.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Container(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[13](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Input.ManipulationModes get_Mode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Input.ManipulationModes __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.ManipulationModes*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Mode(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.ManipulationModes value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.ManipulationModes, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Input.ManipulationPivot get_Pivot(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Input.ManipulationPivot.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Input.ManipulationPivot.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Pivot(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.ManipulationPivot value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Input.ManipulationPivot.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x86, 0x9F, 0xA9, 0x93, 0xA0, 0xF5, 0x26, 0x53, 0x91, 0xB0, 0x85, 0x1C, 0x89, 0x7A, 0xF7, 0x9F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("93A99F86-F5A0-5326-91B0-851C897AF79F")]
    internal interface IManipulationStartingRoutedEventArgs : global::Microsoft.UI.Xaml.Input.IManipulationStartingRoutedEventArgs
    {
    }
    internal static class INoFocusCandidateFoundEventArgsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Input.FocusNavigationDirection get_Direction(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Input.FocusNavigationDirection __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.FocusNavigationDirection*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[8](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Input.FocusInputDeviceKind get_InputDevice(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Input.FocusInputDeviceKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.FocusInputDeviceKind*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3A, 0x15, 0xD7, 0xA2, 0x2A, 0xCD, 0xCB, 0x59, 0xA5, 0x74, 0xAC, 0x82, 0xE3, 0xB, 0x92, 0x1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A2D7153A-CD2A-59CB-A574-AC82E30B9201")]
    internal interface INoFocusCandidateFoundEventArgs : global::Microsoft.UI.Xaml.Input.INoFocusCandidateFoundEventArgs
    {
    }
    internal static class IPointerMethods
    {

        internal static unsafe bool get_IsInContact(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_IsInRange(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe global::Microsoft.UI.Input.PointerDeviceType get_PointerDeviceType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.PointerDeviceType __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.PointerDeviceType*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe uint get_PointerId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF5, 0xFB, 0x9A, 0x1F, 0xA3, 0x11, 0x68, 0x5E, 0xAA, 0x1B, 0x72, 0xFE, 0xBF, 0xA0, 0xAB, 0x23 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("1F9AFBF5-11A3-5E68-AA1B-72FEBFA0AB23")]
    internal interface IPointer : global::Microsoft.UI.Xaml.Input.IPointer
    {
    }
    internal static class IPointerRoutedEventArgsMethods
    {


        internal static unsafe global::Microsoft.UI.Input.PointerPoint GetCurrentPoint(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement relativeTo)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __relativeTo = default;
            IntPtr __retval = default;
            try
            {
                __relativeTo = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(relativeTo);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, MarshalInspectable<object>.GetAbi(__relativeTo), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.PointerPoint.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__relativeTo);
                global::ABI.Microsoft.UI.Input.PointerPoint.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Collections.Generic.IList<global::Microsoft.UI.Input.PointerPoint> GetIntermediatePoints(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement relativeTo)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __relativeTo = default;
            IntPtr __retval = default;
            try
            {
                __relativeTo = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(relativeTo);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, MarshalInspectable<object>.GetAbi(__relativeTo), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Input_PointerPoint.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Input.PointerPoint>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__relativeTo);
                MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Input.PointerPoint>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[9](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsGenerated(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe global::Windows.System.VirtualKeyModifiers get_KeyModifiers(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.System.VirtualKeyModifiers __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.System.VirtualKeyModifiers*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.Input.Pointer get_Pointer(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Input.Pointer.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Input.Pointer.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x9A, 0x8A, 0xE7, 0x66, 0xEC, 0x1B, 0x92, 0x5F, 0xB1, 0xA1, 0xEA, 0x63, 0x34, 0xEE, 0x51, 0x1C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("66E78A9A-1BEC-5F92-B1A1-EA6334EE511C")]
    internal interface IPointerRoutedEventArgs : global::Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs
    {
    }
    internal static class IProcessKeyboardAcceleratorEventArgsMethods
    {

        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[9](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.System.VirtualKey get_Key(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.System.VirtualKey __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.System.VirtualKey*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.System.VirtualKeyModifiers get_Modifiers(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.System.VirtualKeyModifiers __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.System.VirtualKeyModifiers*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x58, 0xD0, 0xE0, 0x9B, 0x26, 0x3D, 0x11, 0x58, 0xB5, 0xA, 0x3B, 0xB8, 0xC, 0xA7, 0x66, 0xC9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("9BE0D058-3D26-5811-B50A-3BB80CA766C9")]
    internal interface IProcessKeyboardAcceleratorEventArgs : global::Microsoft.UI.Xaml.Input.IProcessKeyboardAcceleratorEventArgs
    {
    }
    internal static class IRightTappedRoutedEventArgsMethods
    {


        internal static unsafe global::Windows.Foundation.Point GetPosition(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement relativeTo)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __relativeTo = default;
            global::Windows.Foundation.Point __retval = default;
            try
            {
                __relativeTo = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(relativeTo);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__relativeTo), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__relativeTo);
            }
        }
        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[8](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Input.PointerDeviceType get_PointerDeviceType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.PointerDeviceType __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.PointerDeviceType*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFB, 0xFA, 0x72, 0x39, 0x15, 0x29, 0x62, 0x5C, 0xBB, 0x6B, 0x54, 0xAD, 0x84, 0xFF, 0x40, 0xD };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("3972FAFB-2915-5C62-BB6B-54AD84FF400D")]
    internal interface IRightTappedRoutedEventArgs : global::Microsoft.UI.Xaml.Input.IRightTappedRoutedEventArgs
    {
    }
    internal static class IStandardUICommandMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Input.StandardUICommandKind get_Kind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Input.StandardUICommandKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.StandardUICommandKind*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Kind(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.StandardUICommandKind value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.StandardUICommandKind, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x50, 0x5D, 0x39, 0x5F, 0x49, 0x54, 0xAB, 0x59, 0x9C, 0xB2, 0x4E, 0x37, 0x0, 0x3, 0x3F, 0x3 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("5F395D50-5449-59AB-9CB2-4E3700033F03")]
    internal interface IStandardUICommand : global::Microsoft.UI.Xaml.Input.IStandardUICommand
    {
    }
    internal static class IStandardUICommandFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Input.StandardUICommand CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Input.StandardUICommand.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Input.StandardUICommand.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Input.StandardUICommand CreateInstanceWithKind(IObjectReference _obj, global::Microsoft.UI.Xaml.Input.StandardUICommandKind kind, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Input.StandardUICommandKind, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[7](ThisPtr, kind, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Input.StandardUICommand.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Input.StandardUICommand.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x99, 0xF0, 0x0, 0x58, 0x46, 0x37, 0xCF, 0x5B, 0xB1, 0xCE, 0xAF, 0x3D, 0x6B, 0xF8, 0xE8, 0x3F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("5800F099-3746-5BCF-B1CE-AF3D6BF8E83F")]
    internal interface IStandardUICommandFactory : global::Microsoft.UI.Xaml.Input.IStandardUICommandFactory
    {
    }
    internal static class IStandardUICommandStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_KindProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x97, 0xC1, 0x80, 0xAB, 0xCC, 0x85, 0x36, 0x5D, 0x81, 0xAA, 0x15, 0x6C, 0xD6, 0x3B, 0xE3, 0x1A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("AB80C197-85CC-5D36-81AA-156CD63BE31A")]
    internal interface IStandardUICommandStatics : global::Microsoft.UI.Xaml.Input.IStandardUICommandStatics
    {
    }
    internal static class ITappedRoutedEventArgsMethods
    {


        internal static unsafe global::Windows.Foundation.Point GetPosition(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement relativeTo)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __relativeTo = default;
            global::Windows.Foundation.Point __retval = default;
            try
            {
                __relativeTo = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(relativeTo);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__relativeTo), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__relativeTo);
            }
        }
        internal static unsafe bool get_Handled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_Handled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[8](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Input.PointerDeviceType get_PointerDeviceType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.PointerDeviceType __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.PointerDeviceType*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x8C, 0x4B, 0xF7, 0x73, 0x9, 0x37, 0x7E, 0x54, 0x8E, 0xC, 0x51, 0xC0, 0x3C, 0x89, 0x12, 0x6A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("73F74B8C-3709-547E-8E0C-51C03C89126A")]
    internal interface ITappedRoutedEventArgs : global::Microsoft.UI.Xaml.Input.ITappedRoutedEventArgs
    {
    }
    internal static class IXamlUICommandMethods
    {


        internal static unsafe void NotifyCanExecuteChanged(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[21](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }
        internal static unsafe string get_AccessKey(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_AccessKey(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[12](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::System.Windows.Input.ICommand get_Command(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[15](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Windows.Input.ICommand>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Windows.Input.ICommand>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Command(IObjectReference _obj, global::System.Windows.Input.ICommand value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Windows.Input.ICommand>.CreateMarshaler2(value, global::ABI.System.Windows.Input.ICommandMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[16](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe string get_Description(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Description(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[14](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.IconSource get_IconSource(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Controls.IconSource.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Controls.IconSource.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_IconSource(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.IconSource value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Controls.IconSource.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Input.KeyboardAccelerator> get_KeyboardAccelerators(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Xaml_Input_KeyboardAccelerator.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Input.KeyboardAccelerator>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Input.KeyboardAccelerator>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_Label(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Label(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Input.XamlUICommand, global::Microsoft.UI.Xaml.Input.CanExecuteRequestedEventArgs>>> _CanExecuteRequested_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Input.XamlUICommand, global::Microsoft.UI.Xaml.Input.CanExecuteRequestedEventArgs>>> MakeCanExecuteRequestedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _CanExecuteRequested_, new(), null);
            return _CanExecuteRequested_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Input.XamlUICommand, global::Microsoft.UI.Xaml.Input.CanExecuteRequestedEventArgs>>> _CanExecuteRequested => _CanExecuteRequested_ ?? MakeCanExecuteRequestedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Input.XamlUICommand, global::Microsoft.UI.Xaml.Input.CanExecuteRequestedEventArgs>> Get_CanExecuteRequested2(IObjectReference _obj, object _thisObj)
        {
            return _CanExecuteRequested.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_Input_XamlUICommand__global__Microsoft_UI_Xaml_Input_CanExecuteRequestedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[19],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[20],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Input.XamlUICommand, global::Microsoft.UI.Xaml.Input.ExecuteRequestedEventArgs>>> _ExecuteRequested_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Input.XamlUICommand, global::Microsoft.UI.Xaml.Input.ExecuteRequestedEventArgs>>> MakeExecuteRequestedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ExecuteRequested_, new(), null);
            return _ExecuteRequested_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Input.XamlUICommand, global::Microsoft.UI.Xaml.Input.ExecuteRequestedEventArgs>>> _ExecuteRequested => _ExecuteRequested_ ?? MakeExecuteRequestedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Input.XamlUICommand, global::Microsoft.UI.Xaml.Input.ExecuteRequestedEventArgs>> Get_ExecuteRequested2(IObjectReference _obj, object _thisObj)
        {
            return _ExecuteRequested.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_Input_XamlUICommand__global__Microsoft_UI_Xaml_Input_ExecuteRequestedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[17],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[18],
                1);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xCB, 0xF2, 0x57, 0xA4, 0xE0, 0x51, 0x1C, 0x54, 0x9C, 0x42, 0xDD, 0x1D, 0xCB, 0xDF, 0x58, 0xFB };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A457F2CB-51E0-541C-9C42-DD1DCBDF58FB")]
    internal interface IXamlUICommand : global::Microsoft.UI.Xaml.Input.IXamlUICommand
    {
    }
    internal static class IXamlUICommandFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Input.XamlUICommand CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Input.XamlUICommand.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Input.XamlUICommand.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x20, 0xA, 0xF8, 0xF1, 0x31, 0xE, 0x5, 0x55, 0x8B, 0xC3, 0xCD, 0xD1, 0xF0, 0x94, 0x7F, 0x1D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F1F80A20-0E31-5505-8BC3-CDD1F0947F1D")]
    internal interface IXamlUICommandFactory : global::Microsoft.UI.Xaml.Input.IXamlUICommandFactory
    {
    }
    internal static class IXamlUICommandStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_AccessKeyProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CommandProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_DescriptionProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IconSourceProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_KeyboardAcceleratorsProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_LabelProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA6, 0xBD, 0x1D, 0x98, 0xCB, 0xCD, 0x35, 0x5E, 0xB2, 0x4B, 0xC4, 0xF6, 0xB, 0xA1, 0x48, 0xD9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("981DBDA6-CDCB-5E35-B24B-C4F60BA148D9")]
    internal interface IXamlUICommandStatics : global::Microsoft.UI.Xaml.Input.IXamlUICommandStatics
    {
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct InertiaExpansionBehavior
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.InertiaExpansionBehavior obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.InertiaExpansionBehavior>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IInertiaExpansionBehaviorMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.InertiaExpansionBehavior obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IInertiaExpansionBehaviorMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.InertiaExpansionBehavior FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.InertiaExpansionBehavior.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.InertiaExpansionBehavior obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InertiaExpansionBehavior>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.InertiaExpansionBehavior[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InertiaExpansionBehavior>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InertiaExpansionBehavior>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.InertiaExpansionBehavior[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InertiaExpansionBehavior>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.InertiaExpansionBehavior[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InertiaExpansionBehavior>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.InertiaExpansionBehavior[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InertiaExpansionBehavior>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InertiaExpansionBehavior>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InertiaExpansionBehavior>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class InertiaExpansionBehaviorRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.InertiaExpansionBehavior(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct InertiaRotationBehavior
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.InertiaRotationBehavior obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.InertiaRotationBehavior>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IInertiaRotationBehaviorMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.InertiaRotationBehavior obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IInertiaRotationBehaviorMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.InertiaRotationBehavior FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.InertiaRotationBehavior.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.InertiaRotationBehavior obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InertiaRotationBehavior>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.InertiaRotationBehavior[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InertiaRotationBehavior>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InertiaRotationBehavior>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.InertiaRotationBehavior[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InertiaRotationBehavior>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.InertiaRotationBehavior[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InertiaRotationBehavior>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.InertiaRotationBehavior[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InertiaRotationBehavior>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InertiaRotationBehavior>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InertiaRotationBehavior>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class InertiaRotationBehaviorRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.InertiaRotationBehavior(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct InertiaTranslationBehavior
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.InertiaTranslationBehavior obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.InertiaTranslationBehavior>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IInertiaTranslationBehaviorMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.InertiaTranslationBehavior obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IInertiaTranslationBehaviorMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.InertiaTranslationBehavior FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.InertiaTranslationBehavior.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.InertiaTranslationBehavior obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InertiaTranslationBehavior>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.InertiaTranslationBehavior[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InertiaTranslationBehavior>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InertiaTranslationBehavior>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.InertiaTranslationBehavior[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InertiaTranslationBehavior>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.InertiaTranslationBehavior[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InertiaTranslationBehavior>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.InertiaTranslationBehavior[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InertiaTranslationBehavior>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InertiaTranslationBehavior>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InertiaTranslationBehavior>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class InertiaTranslationBehaviorRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.InertiaTranslationBehavior(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct InputScope
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.InputScope obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.InputScope>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IInputScopeMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.InputScope obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IInputScopeMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.InputScope FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.InputScope.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.InputScope obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InputScope>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.InputScope[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InputScope>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InputScope>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.InputScope[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InputScope>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.InputScope[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InputScope>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.InputScope[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InputScope>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InputScope>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InputScope>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class InputScopeRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.InputScope(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct InputScopeName
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.InputScopeName obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.InputScopeName>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IInputScopeNameMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.InputScopeName obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IInputScopeNameMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.InputScopeName FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.InputScopeName.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.InputScopeName obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InputScopeName>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.InputScopeName[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InputScopeName>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InputScopeName>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.InputScopeName[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InputScopeName>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.InputScopeName[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InputScopeName>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.InputScopeName[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InputScopeName>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InputScopeName>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.InputScopeName>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class InputScopeNameRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.InputScopeName(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("DB68E7CC-9A2B-527D-9989-25284DACCC03")]
    public static class KeyEventHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xCC, 0xE7, 0x68, 0xDB, 0x2B, 0x9A, 0x7D, 0x52, 0x99, 0x89, 0x25, 0x28, 0x4D, 0xAC, 0xCC, 0x3 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe KeyEventHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(KeyEventHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.Input.KeyEventHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.KeyEventHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.KeyEventHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyEventHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.Input.KeyEventHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.Input.KeyEventHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.Input.KeyEventHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.Input.KeyEventHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(object sender, global::Microsoft.UI.Xaml.Input.KeyRoutedEventArgs e)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __sender = default;
                ObjectReferenceValue __e = default;
                try
                {
                    __sender = MarshalInspectable<object>.CreateMarshaler2(sender);
                    __e = global::ABI.Microsoft.UI.Xaml.Input.KeyRoutedEventArgs.CreateMarshaler2(e);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__sender), MarshalInspectable<object>.GetAbi(__e)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__sender);
                    MarshalInspectable<object>.DisposeMarshaler(__e);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.KeyEventHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyEventHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyEventHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyEventHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.KeyEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyEventHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyEventHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.KeyEventHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyEventHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.KeyEventHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyEventHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.KeyEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyEventHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyEventHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyEventHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr e)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Input.KeyEventHandler>(thisPtr).Invoke(MarshalInspectable<object>.FromAbi(sender), global::ABI.Microsoft.UI.Xaml.Input.KeyRoutedEventArgs.FromAbi(e))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class KeyEventHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.Input.KeyEventHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = KeyEventHandler.IID,
                Vtable = KeyEventHandler.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct KeyRoutedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.KeyRoutedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.KeyRoutedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IKeyRoutedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.KeyRoutedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IKeyRoutedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.KeyRoutedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.KeyRoutedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.KeyRoutedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyRoutedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.KeyRoutedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyRoutedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyRoutedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.KeyRoutedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyRoutedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.KeyRoutedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyRoutedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.KeyRoutedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyRoutedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyRoutedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyRoutedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class KeyRoutedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.KeyRoutedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct KeyboardAccelerator
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.KeyboardAccelerator obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.KeyboardAccelerator>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IKeyboardAcceleratorMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.KeyboardAccelerator obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IKeyboardAcceleratorMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.KeyboardAccelerator FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.KeyboardAccelerator.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.KeyboardAccelerator obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyboardAccelerator>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.KeyboardAccelerator[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyboardAccelerator>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyboardAccelerator>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.KeyboardAccelerator[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyboardAccelerator>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.KeyboardAccelerator[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyboardAccelerator>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.KeyboardAccelerator[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyboardAccelerator>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyboardAccelerator>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyboardAccelerator>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class KeyboardAcceleratorRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.KeyboardAccelerator(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct KeyboardAcceleratorInvokedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IKeyboardAcceleratorInvokedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IKeyboardAcceleratorInvokedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class KeyboardAcceleratorInvokedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct LosingFocusEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.LosingFocusEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.LosingFocusEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.ILosingFocusEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.LosingFocusEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.ILosingFocusEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.LosingFocusEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.LosingFocusEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.LosingFocusEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.LosingFocusEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.LosingFocusEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.LosingFocusEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.LosingFocusEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.LosingFocusEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.LosingFocusEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.LosingFocusEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.LosingFocusEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.LosingFocusEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.LosingFocusEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.LosingFocusEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.LosingFocusEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class LosingFocusEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.LosingFocusEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("D51DF8DB-71CD-5BFD-8426-767218EE55EC")]
    public static class ManipulationCompletedEventHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xDB, 0xF8, 0x1D, 0xD5, 0xCD, 0x71, 0xFD, 0x5B, 0x84, 0x26, 0x76, 0x72, 0x18, 0xEE, 0x55, 0xEC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe ManipulationCompletedEventHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(ManipulationCompletedEventHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(object sender, global::Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs e)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __sender = default;
                ObjectReferenceValue __e = default;
                try
                {
                    __sender = MarshalInspectable<object>.CreateMarshaler2(sender);
                    __e = global::ABI.Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs.CreateMarshaler2(e);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__sender), MarshalInspectable<object>.GetAbi(__e)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__sender);
                    MarshalInspectable<object>.DisposeMarshaler(__e);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr e)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler>(thisPtr).Invoke(MarshalInspectable<object>.FromAbi(sender), global::ABI.Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs.FromAbi(e))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class ManipulationCompletedEventHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = ManipulationCompletedEventHandler.IID,
                Vtable = ManipulationCompletedEventHandler.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ManipulationCompletedRoutedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IManipulationCompletedRoutedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IManipulationCompletedRoutedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ManipulationCompletedRoutedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("83F2D4CE-105F-5392-A38A-B7467B7C2EA5")]
    public static class ManipulationDeltaEventHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xCE, 0xD4, 0xF2, 0x83, 0x5F, 0x10, 0x92, 0x53, 0xA3, 0x8A, 0xB7, 0x46, 0x7B, 0x7C, 0x2E, 0xA5 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe ManipulationDeltaEventHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(ManipulationDeltaEventHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(object sender, global::Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs e)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __sender = default;
                ObjectReferenceValue __e = default;
                try
                {
                    __sender = MarshalInspectable<object>.CreateMarshaler2(sender);
                    __e = global::ABI.Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs.CreateMarshaler2(e);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__sender), MarshalInspectable<object>.GetAbi(__e)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__sender);
                    MarshalInspectable<object>.DisposeMarshaler(__e);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr e)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler>(thisPtr).Invoke(MarshalInspectable<object>.FromAbi(sender), global::ABI.Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs.FromAbi(e))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class ManipulationDeltaEventHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = ManipulationDeltaEventHandler.IID,
                Vtable = ManipulationDeltaEventHandler.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ManipulationDeltaRoutedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IManipulationDeltaRoutedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IManipulationDeltaRoutedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ManipulationDeltaRoutedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("5DE296BD-6F1C-5F60-9180-10705282576C")]
    public static class ManipulationInertiaStartingEventHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xBD, 0x96, 0xE2, 0x5D, 0x1C, 0x6F, 0x60, 0x5F, 0x91, 0x80, 0x10, 0x70, 0x52, 0x82, 0x57, 0x6C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe ManipulationInertiaStartingEventHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(ManipulationInertiaStartingEventHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(object sender, global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs e)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __sender = default;
                ObjectReferenceValue __e = default;
                try
                {
                    __sender = MarshalInspectable<object>.CreateMarshaler2(sender);
                    __e = global::ABI.Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs.CreateMarshaler2(e);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__sender), MarshalInspectable<object>.GetAbi(__e)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__sender);
                    MarshalInspectable<object>.DisposeMarshaler(__e);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr e)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler>(thisPtr).Invoke(MarshalInspectable<object>.FromAbi(sender), global::ABI.Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs.FromAbi(e))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class ManipulationInertiaStartingEventHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = ManipulationInertiaStartingEventHandler.IID,
                Vtable = ManipulationInertiaStartingEventHandler.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ManipulationInertiaStartingRoutedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ManipulationInertiaStartingRoutedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ManipulationPivot
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.ManipulationPivot obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.ManipulationPivot>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IManipulationPivotMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.ManipulationPivot obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IManipulationPivotMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.ManipulationPivot FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.ManipulationPivot.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.ManipulationPivot obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationPivot>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.ManipulationPivot[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationPivot>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationPivot>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.ManipulationPivot[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationPivot>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.ManipulationPivot[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationPivot>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.ManipulationPivot[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationPivot>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationPivot>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationPivot>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ManipulationPivotRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.ManipulationPivot(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("41060669-304C-53AC-9D43-BC311235AAE4")]
    public static class ManipulationStartedEventHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x69, 0x6, 0x6, 0x41, 0x4C, 0x30, 0xAC, 0x53, 0x9D, 0x43, 0xBC, 0x31, 0x12, 0x35, 0xAA, 0xE4 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe ManipulationStartedEventHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(ManipulationStartedEventHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(object sender, global::Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs e)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __sender = default;
                ObjectReferenceValue __e = default;
                try
                {
                    __sender = MarshalInspectable<object>.CreateMarshaler2(sender);
                    __e = global::ABI.Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs.CreateMarshaler2(e);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__sender), MarshalInspectable<object>.GetAbi(__e)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__sender);
                    MarshalInspectable<object>.DisposeMarshaler(__e);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr e)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler>(thisPtr).Invoke(MarshalInspectable<object>.FromAbi(sender), global::ABI.Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs.FromAbi(e))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class ManipulationStartedEventHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = ManipulationStartedEventHandler.IID,
                Vtable = ManipulationStartedEventHandler.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ManipulationStartedRoutedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ManipulationStartedRoutedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("44F528F1-F0E4-505C-A0BB-0C4839B29DF5")]
    public static class ManipulationStartingEventHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF1, 0x28, 0xF5, 0x44, 0xE4, 0xF0, 0x5C, 0x50, 0xA0, 0xBB, 0xC, 0x48, 0x39, 0xB2, 0x9D, 0xF5 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe ManipulationStartingEventHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(ManipulationStartingEventHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(object sender, global::Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs e)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __sender = default;
                ObjectReferenceValue __e = default;
                try
                {
                    __sender = MarshalInspectable<object>.CreateMarshaler2(sender);
                    __e = global::ABI.Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs.CreateMarshaler2(e);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__sender), MarshalInspectable<object>.GetAbi(__e)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__sender);
                    MarshalInspectable<object>.DisposeMarshaler(__e);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr e)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler>(thisPtr).Invoke(MarshalInspectable<object>.FromAbi(sender), global::ABI.Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs.FromAbi(e))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class ManipulationStartingEventHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = ManipulationStartingEventHandler.IID,
                Vtable = ManipulationStartingEventHandler.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ManipulationStartingRoutedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IManipulationStartingRoutedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IManipulationStartingRoutedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ManipulationStartingRoutedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct NoFocusCandidateFoundEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.INoFocusCandidateFoundEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.INoFocusCandidateFoundEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class NoFocusCandidateFoundEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct Pointer
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.Pointer obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.Pointer>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IPointerMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.Pointer obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IPointerMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.Pointer FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.Pointer.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.Pointer obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.Pointer>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.Pointer[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.Pointer>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.Pointer>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.Pointer[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.Pointer>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.Pointer[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.Pointer>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.Pointer[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.Pointer>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.Pointer>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.Pointer>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PointerRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.Pointer(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("A48A71E1-8BB4-5597-9E31-903A3F6A04FB")]
    public static class PointerEventHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE1, 0x71, 0x8A, 0xA4, 0xB4, 0x8B, 0x97, 0x55, 0x9E, 0x31, 0x90, 0x3A, 0x3F, 0x6A, 0x4, 0xFB };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe PointerEventHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(PointerEventHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.Input.PointerEventHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.PointerEventHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.PointerEventHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.PointerEventHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.Input.PointerEventHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.Input.PointerEventHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.Input.PointerEventHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.Input.PointerEventHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(object sender, global::Microsoft.UI.Xaml.Input.PointerRoutedEventArgs e)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __sender = default;
                ObjectReferenceValue __e = default;
                try
                {
                    __sender = MarshalInspectable<object>.CreateMarshaler2(sender);
                    __e = global::ABI.Microsoft.UI.Xaml.Input.PointerRoutedEventArgs.CreateMarshaler2(e);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__sender), MarshalInspectable<object>.GetAbi(__e)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__sender);
                    MarshalInspectable<object>.DisposeMarshaler(__e);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.PointerEventHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.PointerEventHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.PointerEventHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.PointerEventHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.PointerEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.PointerEventHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.PointerEventHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.PointerEventHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.PointerEventHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.PointerEventHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.PointerEventHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.PointerEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.PointerEventHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.PointerEventHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.PointerEventHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr e)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Input.PointerEventHandler>(thisPtr).Invoke(MarshalInspectable<object>.FromAbi(sender), global::ABI.Microsoft.UI.Xaml.Input.PointerRoutedEventArgs.FromAbi(e))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class PointerEventHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.Input.PointerEventHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = PointerEventHandler.IID,
                Vtable = PointerEventHandler.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PointerRoutedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.PointerRoutedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.PointerRoutedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IPointerRoutedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.PointerRoutedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IPointerRoutedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.PointerRoutedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.PointerRoutedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.PointerRoutedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.PointerRoutedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.PointerRoutedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.PointerRoutedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.PointerRoutedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.PointerRoutedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.PointerRoutedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.PointerRoutedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.PointerRoutedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.PointerRoutedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.PointerRoutedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.PointerRoutedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.PointerRoutedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PointerRoutedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.PointerRoutedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ProcessKeyboardAcceleratorEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IProcessKeyboardAcceleratorEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IProcessKeyboardAcceleratorEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ProcessKeyboardAcceleratorEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("5070E32F-3DC7-56CF-8FDD-DE1B40D0B472")]
    public static class RightTappedEventHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x2F, 0xE3, 0x70, 0x50, 0xC7, 0x3D, 0xCF, 0x56, 0x8F, 0xDD, 0xDE, 0x1B, 0x40, 0xD0, 0xB4, 0x72 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe RightTappedEventHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(RightTappedEventHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.Input.RightTappedEventHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.RightTappedEventHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.RightTappedEventHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.RightTappedEventHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.Input.RightTappedEventHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.Input.RightTappedEventHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.Input.RightTappedEventHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.Input.RightTappedEventHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(object sender, global::Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs e)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __sender = default;
                ObjectReferenceValue __e = default;
                try
                {
                    __sender = MarshalInspectable<object>.CreateMarshaler2(sender);
                    __e = global::ABI.Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs.CreateMarshaler2(e);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__sender), MarshalInspectable<object>.GetAbi(__e)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__sender);
                    MarshalInspectable<object>.DisposeMarshaler(__e);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.RightTappedEventHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.RightTappedEventHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.RightTappedEventHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.RightTappedEventHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.RightTappedEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.RightTappedEventHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.RightTappedEventHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.RightTappedEventHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.RightTappedEventHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.RightTappedEventHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.RightTappedEventHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.RightTappedEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.RightTappedEventHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.RightTappedEventHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.RightTappedEventHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr e)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Input.RightTappedEventHandler>(thisPtr).Invoke(MarshalInspectable<object>.FromAbi(sender), global::ABI.Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs.FromAbi(e))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class RightTappedEventHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.Input.RightTappedEventHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = RightTappedEventHandler.IID,
                Vtable = RightTappedEventHandler.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct RightTappedRoutedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IRightTappedRoutedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IRightTappedRoutedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class RightTappedRoutedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct StandardUICommand
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.StandardUICommand obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.StandardUICommand>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IStandardUICommandMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.StandardUICommand obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IStandardUICommandMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.StandardUICommand FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.StandardUICommand.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.StandardUICommand obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.StandardUICommand>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.StandardUICommand[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.StandardUICommand>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.StandardUICommand>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.StandardUICommand[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.StandardUICommand>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.StandardUICommand[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.StandardUICommand>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.StandardUICommand[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.StandardUICommand>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.StandardUICommand>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.StandardUICommand>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class StandardUICommandRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.StandardUICommand(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("B60074F3-125B-534E-8F9C-9769BD3F0F64")]
    public static class TappedEventHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF3, 0x74, 0x0, 0xB6, 0x5B, 0x12, 0x4E, 0x53, 0x8F, 0x9C, 0x97, 0x69, 0xBD, 0x3F, 0xF, 0x64 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe TappedEventHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(TappedEventHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.Input.TappedEventHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.TappedEventHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.TappedEventHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.TappedEventHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.Input.TappedEventHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.Input.TappedEventHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.Input.TappedEventHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.Input.TappedEventHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(object sender, global::Microsoft.UI.Xaml.Input.TappedRoutedEventArgs e)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __sender = default;
                ObjectReferenceValue __e = default;
                try
                {
                    __sender = MarshalInspectable<object>.CreateMarshaler2(sender);
                    __e = global::ABI.Microsoft.UI.Xaml.Input.TappedRoutedEventArgs.CreateMarshaler2(e);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__sender), MarshalInspectable<object>.GetAbi(__e)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__sender);
                    MarshalInspectable<object>.DisposeMarshaler(__e);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.TappedEventHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.TappedEventHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.TappedEventHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.TappedEventHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.TappedEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.TappedEventHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.TappedEventHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.TappedEventHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.TappedEventHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.TappedEventHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.TappedEventHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.TappedEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.TappedEventHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.TappedEventHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.TappedEventHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr e)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Input.TappedEventHandler>(thisPtr).Invoke(MarshalInspectable<object>.FromAbi(sender), global::ABI.Microsoft.UI.Xaml.Input.TappedRoutedEventArgs.FromAbi(e))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class TappedEventHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.Input.TappedEventHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = TappedEventHandler.IID,
                Vtable = TappedEventHandler.AbiToProjectionVftablePtr
            };
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct TappedRoutedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.TappedRoutedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.TappedRoutedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.ITappedRoutedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.TappedRoutedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.ITappedRoutedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.TappedRoutedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.TappedRoutedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.TappedRoutedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.TappedRoutedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.TappedRoutedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.TappedRoutedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.TappedRoutedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.TappedRoutedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.TappedRoutedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.TappedRoutedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.TappedRoutedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.TappedRoutedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.TappedRoutedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.TappedRoutedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.TappedRoutedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class TappedRoutedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.TappedRoutedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct XamlUICommand
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Input.XamlUICommand obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Input.XamlUICommand>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Input.IXamlUICommandMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Input.XamlUICommand obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Input.IXamlUICommandMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Input.XamlUICommand FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Input.XamlUICommand.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Input.XamlUICommand obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.XamlUICommand>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Input.XamlUICommand[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.XamlUICommand>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.XamlUICommand>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Input.XamlUICommand[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.XamlUICommand>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Input.XamlUICommand[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.XamlUICommand>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Input.XamlUICommand[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.XamlUICommand>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.XamlUICommand>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Input.XamlUICommand>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class XamlUICommandRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Input.XamlUICommand(inspectable.ObjRef);
    }
}
#pragma warning restore CA1416
